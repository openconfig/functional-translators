/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/orem/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - arista/aristainterface/yang/openconfig/restriction.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigLacp_Lacp_Interfaces_Interface_Config represents the /openconfig-lacp/lacp/interfaces/interface/config YANG schema element.
type OpenconfigLacp_Lacp_Interfaces_Interface_Config struct {
	Fallback    *bool   `path:"fallback" module:"openconfig-lacp"`
	Name        *string `path:"name" module:"openconfig-lacp"`
	SystemIdMac *string `path:"system-id-mac" module:"openconfig-lacp"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces_Interface_Config.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces_Interface_Members represents the /openconfig-lacp/lacp/interfaces/interface/members YANG schema element.
type OpenconfigLacp_Lacp_Interfaces_Interface_Members struct {
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces_Interface_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_Members) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Members) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces_Interface_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Members) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces_Interface_Members.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_Members) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces_Interface_State represents the /openconfig-lacp/lacp/interfaces/interface/state YANG schema element.
type OpenconfigLacp_Lacp_Interfaces_Interface_State struct {
	Fallback    *bool   `path:"fallback" module:"openconfig-lacp"`
	SystemIdMac *string `path:"system-id-mac" module:"openconfig-lacp"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces_Interface_State.
func (*OpenconfigLacp_Lacp_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_State represents the /openconfig-lacp/lacp/state YANG schema element.
type OpenconfigLacp_Lacp_State struct {
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_State.
func (*OpenconfigLacp_Lacp_State) ΛBelongingModule() string {
	return "openconfig-lacp"
}
