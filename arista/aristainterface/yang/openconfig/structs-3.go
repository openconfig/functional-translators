/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/orem/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - arista/aristainterface/yang/openconfig/restriction.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigLacp_Lacp represents the /openconfig-lacp/lacp YANG schema element.
type OpenconfigLacp_Lacp struct {
	Config     *OpenconfigLacp_Lacp_Config     `path:"config" module:"openconfig-lacp"`
	Interfaces *OpenconfigLacp_Lacp_Interfaces `path:"interfaces" module:"openconfig-lacp"`
	State      *OpenconfigLacp_Lacp_State      `path:"state" module:"openconfig-lacp"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp.
func (*OpenconfigLacp_Lacp) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Config represents the /openconfig-lacp/lacp/config YANG schema element.
type OpenconfigLacp_Lacp_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Config.
func (*OpenconfigLacp_Lacp_Config) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces represents the /openconfig-lacp/lacp/interfaces YANG schema element.
type OpenconfigLacp_Lacp_Interfaces struct {
	Interface map[string]*OpenconfigLacp_Lacp_Interfaces_Interface `path:"interface" module:"openconfig-lacp"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigLacp_Lacp_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLacp_Lacp_Interfaces) NewInterface(Name string) (*OpenconfigLacp_Lacp_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLacp_Lacp_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigLacp_Lacp_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces.
func (*OpenconfigLacp_Lacp_Interfaces) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces_Interface represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type OpenconfigLacp_Lacp_Interfaces_Interface struct {
	Config  *OpenconfigLacp_Lacp_Interfaces_Interface_Config  `path:"config" module:"openconfig-lacp"`
	Members *OpenconfigLacp_Lacp_Interfaces_Interface_Members `path:"members" module:"openconfig-lacp"`
	Name    *string                                           `path:"name" module:"openconfig-lacp"`
	State   *OpenconfigLacp_Lacp_Interfaces_Interface_State   `path:"state" module:"openconfig-lacp"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigLacp_Lacp_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces_Interface.
func (*OpenconfigLacp_Lacp_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-lacp"
}
