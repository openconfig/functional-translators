/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State `path:"state" module:"openconfig-platform-integrated-circuit"`
	ΛState    []ygot.Annotation                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvailablePct              *uint16           `path:"available-pct" module:"openconfig-platform-integrated-circuit"`
	ΛAvailablePct             []ygot.Annotation `path:"@available-pct" ygotAnnotation:"true"`
	ConsumedCapacity          *uint64           `path:"consumed-capacity" module:"openconfig-platform-integrated-circuit"`
	ΛConsumedCapacity         []ygot.Annotation `path:"@consumed-capacity" ygotAnnotation:"true"`
	Total                     *uint64           `path:"total" module:"openconfig-platform-integrated-circuit"`
	ΛTotal                    []ygot.Annotation `path:"@total" ygotAnnotation:"true"`
	TotalOperationalCapacity  *uint64           `path:"total-operational-capacity" module:"openconfig-platform-integrated-circuit"`
	ΛTotalOperationalCapacity []ygot.Annotation `path:"@total-operational-capacity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Config.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State `path:"state" module:"openconfig-platform-integrated-circuit"`
	ΛState    []ygot.Annotation                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State represents the /openconfig-platform/components/component/integrated-circuit/memory/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State struct {
	ΛMetadata                []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CorrectedParityErrors    *uint64           `path:"corrected-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛCorrectedParityErrors   []ygot.Annotation `path:"@corrected-parity-errors" ygotAnnotation:"true"`
	TotalParityErrors        *uint64           `path:"total-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛTotalParityErrors       []ygot.Annotation `path:"@total-parity-errors" ygotAnnotation:"true"`
	UncorrectedParityErrors  *uint64           `path:"uncorrected-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛUncorrectedParityErrors []ygot.Annotation `path:"@uncorrected-parity-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization struct {
	ΛMetadata  []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Resources  *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources `path:"resources" module:"openconfig-platform"`
	ΛResources []ygot.Annotation                                                                `path:"@resources" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) IsYANGGoStruct() {}

// GetOrCreateResources retrieves the value of the Resources field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) GetOrCreateResources() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources {
	if t.Resources != nil {
		return t.Resources
	}
	t.Resources = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources{}
	return t.Resources
}

// GetResources returns the value of the Resources struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization. If the receiver or the field Resources is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) GetResources() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources {
	if t != nil && t.Resources != nil {
		return t.Resources
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Resource  map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource `path:"resource" module:"openconfig-platform"`
	ΛResource []ygot.Annotation                                                                                    `path:"@resource" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) IsYANGGoStruct() {
}

// NewResource creates a new entry in the Resource list of the
// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) NewResource(Name string) (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetOrCreateResourceMap() map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetOrCreateResource(Name string) *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetResource(Name string) *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct to the
// list Resource of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) AppendResource(v *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct {
	ΛMetadata []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                                                `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                                          `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                                                `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config struct {
	ΛMetadata                []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name                     *string           `path:"name" module:"openconfig-platform"`
	ΛName                    []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	UsedThresholdUpper       *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper      []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear  *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"committed" module:"openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"free" module:"openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"high-watermark" module:"openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"last-high-watermark" module:"openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"max-limit" module:"openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"name" module:"openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"used" module:"openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"used-threshold-upper-exceeded" module:"openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	ΛMetadata []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Port_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Port_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Port_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateState() *OpenconfigPlatform_Components_Component_Port_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Port_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetState() *OpenconfigPlatform_Components_Component_Port_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port.
func (*OpenconfigPlatform_Components_Component_Port) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port_Config.
func (*OpenconfigPlatform_Components_Component_Port_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port_State.
func (*OpenconfigPlatform_Components_Component_Port_State) ΛBelongingModule() string {
	return "openconfig-platform"
}
