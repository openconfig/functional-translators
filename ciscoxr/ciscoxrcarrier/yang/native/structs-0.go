/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &CiscoDevice{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// CiscoDevice represents the /CiscoDevice YANG schema element.
type CiscoDevice struct {
	InfraStatistics *Cisco_IOS_XRInfraStatsdOper_InfraStatistics `path:"infra-statistics" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that CiscoDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*CiscoDevice) IsYANGGoStruct() {}

// GetOrCreateInfraStatistics retrieves the value of the InfraStatistics field
// or returns the existing field if it already exists.
func (t *CiscoDevice) GetOrCreateInfraStatistics() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics {
	if t.InfraStatistics != nil {
		return t.InfraStatistics
	}
	t.InfraStatistics = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics{}
	return t.InfraStatistics
}

// GetInfraStatistics returns the value of the InfraStatistics struct pointer
// from CiscoDevice. If the receiver or the field InfraStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *CiscoDevice) GetInfraStatistics() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics {
	if t != nil && t.InfraStatistics != nil {
		return t.InfraStatistics
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["CiscoDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *CiscoDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of CiscoDevice.
func (*CiscoDevice) ΛBelongingModule() string {
	return ""
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics struct {
	CounterRates *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates `path:"counter-rates" module:"Cisco-IOS-XR-infra-statsd-oper"`
	Interfaces   *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces   `path:"interfaces" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics) IsYANGGoStruct() {}

// GetOrCreateCounterRates retrieves the value of the CounterRates field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) GetOrCreateCounterRates() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates {
	if t.CounterRates != nil {
		return t.CounterRates
	}
	t.CounterRates = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates{}
	return t.CounterRates
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) GetOrCreateInterfaces() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces{}
	return t.Interfaces
}

// GetCounterRates returns the value of the CounterRates struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics. If the receiver or the field CounterRates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) GetCounterRates() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates {
	if t != nil && t.CounterRates != nil {
		return t.CounterRates
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) GetInterfaces() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/counter-rates YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates struct {
	InterfaceRates *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates `path:"interface-rates" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) IsYANGGoStruct() {}

// GetOrCreateInterfaceRates retrieves the value of the InterfaceRates field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) GetOrCreateInterfaceRates() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates {
	if t.InterfaceRates != nil {
		return t.InterfaceRates
	}
	t.InterfaceRates = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates{}
	return t.InterfaceRates
}

// GetInterfaceRates returns the value of the InterfaceRates struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates. If the receiver or the field InterfaceRates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) GetInterfaceRates() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates {
	if t != nil && t.InterfaceRates != nil {
		return t.InterfaceRates
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/counter-rates/interface-rates YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates struct {
	InterfaceRate map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate `path:"interface-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) IsYANGGoStruct() {}

// NewInterfaceRate creates a new entry in the InterfaceRate list of the
// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) NewInterfaceRate(InterfaceName string) (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceRate == nil {
		t.InterfaceRate = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfaceRate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfaceRate", key)
	}

	t.InterfaceRate[key] = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate{
		InterfaceName: &InterfaceName,
	}

	return t.InterfaceRate[key], nil
}

// RenameInterfaceRate renames an entry in the list InterfaceRate within
// the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) RenameInterfaceRate(oldK, newK string) error {
	if _, ok := t.InterfaceRate[newK]; ok {
		return fmt.Errorf("key %v already exists in InterfaceRate", newK)
	}

	e, ok := t.InterfaceRate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterfaceRate", oldK)
	}
	e.InterfaceName = &newK

	t.InterfaceRate[newK] = e
	delete(t.InterfaceRate, oldK)
	return nil
}

// GetOrCreateInterfaceRateMap returns the list (map) from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) GetOrCreateInterfaceRateMap() map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate {
	if t.InterfaceRate == nil {
		t.InterfaceRate = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate)
	}
	return t.InterfaceRate
}

// GetOrCreateInterfaceRate retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) GetOrCreateInterfaceRate(InterfaceName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate {

	key := InterfaceName

	if v, ok := t.InterfaceRate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterfaceRate(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterfaceRate got unexpected error: %v", err))
	}
	return v
}

// GetInterfaceRate retrieves the value with the specified key from
// the InterfaceRate map field of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) GetInterfaceRate(InterfaceName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.InterfaceRate[key]; ok {
		return lm
	}
	return nil
}

// AppendInterfaceRate appends the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate struct to the
// list InterfaceRate of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates. If the key value(s) specified in
// the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) AppendInterfaceRate(v *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceRate == nil {
		t.InterfaceRate = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate)
	}

	if _, ok := t.InterfaceRate[key]; ok {
		return fmt.Errorf("duplicate key for list InterfaceRate %v", key)
	}

	t.InterfaceRate[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}
