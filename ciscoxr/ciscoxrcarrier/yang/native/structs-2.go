/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces/interface/generic-counters YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters struct {
	Applique                       *uint32 `path:"applique" module:"Cisco-IOS-XR-infra-statsd-oper"`
	AvailabilityFlag               *uint32 `path:"availability-flag" module:"Cisco-IOS-XR-infra-statsd-oper"`
	BroadcastPacketsReceived       *uint64 `path:"broadcast-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	BroadcastPacketsSent           *uint64 `path:"broadcast-packets-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	BytesReceived                  *uint64 `path:"bytes-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	BytesSent                      *uint64 `path:"bytes-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	CarrierTransitions             *uint32 `path:"carrier-transitions" module:"Cisco-IOS-XR-infra-statsd-oper"`
	CrcErrors                      *uint32 `path:"crc-errors" module:"Cisco-IOS-XR-infra-statsd-oper"`
	FramingErrorsReceived          *uint32 `path:"framing-errors-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	GiantPacketsReceived           *uint32 `path:"giant-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	HardwareTimestamp              *uint64 `path:"hardware-timestamp" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputAborts                    *uint32 `path:"input-aborts" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputDrops                     *uint32 `path:"input-drops" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputErrors                    *uint32 `path:"input-errors" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputIgnoredPackets            *uint32 `path:"input-ignored-packets" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputOverruns                  *uint32 `path:"input-overruns" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputQueueDrops                *uint32 `path:"input-queue-drops" module:"Cisco-IOS-XR-infra-statsd-oper"`
	LastDataTime                   *uint64 `path:"last-data-time" module:"Cisco-IOS-XR-infra-statsd-oper"`
	LastDiscontinuityTime          *uint32 `path:"last-discontinuity-time" module:"Cisco-IOS-XR-infra-statsd-oper"`
	MulticastPacketsReceived       *uint64 `path:"multicast-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	MulticastPacketsSent           *uint64 `path:"multicast-packets-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputBufferFailures           *uint32 `path:"output-buffer-failures" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputBuffersSwappedOut        *uint32 `path:"output-buffers-swapped-out" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputDrops                    *uint32 `path:"output-drops" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputErrors                   *uint32 `path:"output-errors" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputQueueDrops               *uint32 `path:"output-queue-drops" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputUnderruns                *uint32 `path:"output-underruns" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PacketsReceived                *uint64 `path:"packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PacketsSent                    *uint64 `path:"packets-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	ParityPacketsReceived          *uint32 `path:"parity-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	Resets                         *uint32 `path:"resets" module:"Cisco-IOS-XR-infra-statsd-oper"`
	RuntPacketsReceived            *uint32 `path:"runt-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	SecondsSinceLastClearCounters  *uint32 `path:"seconds-since-last-clear-counters" module:"Cisco-IOS-XR-infra-statsd-oper"`
	SecondsSincePacketReceived     *uint32 `path:"seconds-since-packet-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	SecondsSincePacketSent         *uint32 `path:"seconds-since-packet-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	ThrottledPacketsReceived       *uint32 `path:"throttled-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	UnknownProtocolPacketsReceived *uint32 `path:"unknown-protocol-packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces/interface/protocols YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols struct {
	Protocol map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol `path:"protocol" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) IsYANGGoStruct() {}

// NewProtocol creates a new entry in the Protocol list of the
// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) NewProtocol(ProtocolName string) (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol{
		ProtocolName: &ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) RenameProtocol(oldK, newK string) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = &newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocolMap returns the list (map) from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) GetOrCreateProtocolMap() map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol {
	if t.Protocol == nil {
		t.Protocol = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol)
	}
	return t.Protocol
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) GetOrCreateProtocol(ProtocolName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) GetProtocol(ProtocolName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// AppendProtocol appends the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol struct to the
// list Protocol of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols. If the key value(s) specified in
// the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) AppendProtocol(v *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) error {
	if v.ProtocolName == nil {
		return fmt.Errorf("invalid nil key received for ProtocolName")
	}

	key := *v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces/interface/protocols/protocol YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol struct {
	BytesReceived     *uint64 `path:"bytes-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	BytesSent         *uint64 `path:"bytes-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	HardwareTimestamp *uint64 `path:"hardware-timestamp" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputDataRate     *uint64 `path:"input-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputPacketRate   *uint64 `path:"input-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	LastDataTime      *uint64 `path:"last-data-time" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputDataRate    *uint64 `path:"output-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputPacketRate  *uint64 `path:"output-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PacketsReceived   *uint64 `path:"packets-received" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PacketsSent       *uint64 `path:"packets-sent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	Protocol          *uint32 `path:"protocol" module:"Cisco-IOS-XR-infra-statsd-oper"`
	ProtocolName      *string `path:"protocol-name" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol struct, which is a YANG list entry.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProtocolName == nil {
		return nil, fmt.Errorf("nil value for key ProtocolName")
	}

	return map[string]interface{}{
		"protocol-name": *t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols_Protocol) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}
