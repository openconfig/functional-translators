/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-infra-statsd-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/counter-rates/interface-rates/interface-rate YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate struct {
	BandwidthKbps          *uint64 `path:"bandwidth-kbps" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputBandwidthPercent  *uint8  `path:"input-bandwidth-percent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputDatarateKbps      *uint64 `path:"input-datarate-kbps" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputPacketratepps     *uint64 `path:"input-packetratepps" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InterfaceName          *string `path:"interface-name" module:"Cisco-IOS-XR-infra-statsd-oper"`
	LastUpdateTime         *uint64 `path:"last-update-time" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputBandwidthPercent *uint8  `path:"output-bandwidth-percent" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputDatarateKbps     *uint64 `path:"output-datarate-kbps" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputPacketratepps    *uint64 `path:"output-packetratepps" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OverheadBytes          *uint64 `path:"overhead-bytes" module:"Cisco-IOS-XR-infra-statsd-oper"`
	TimeIntervalMs         *uint64 `path:"time-interval-ms" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate struct, which is a YANG list entry.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_CounterRates_InterfaceRates_InterfaceRate) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces struct {
	Interface map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface `path:"interface" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) NewInterface(InterfaceName string) (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) GetOrCreateInterfaceMap() map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) GetOrCreateInterface(InterfaceName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) GetInterface(InterfaceName string) *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface struct to the
// list Interface of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces. If the key value(s) specified in
// the supplied Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) AppendInterface(v *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces/interface YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface struct {
	DataRate        *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate        `path:"data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	GenericCounters *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters `path:"generic-counters" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InterfaceName   *string                                                                           `path:"interface-name" module:"Cisco-IOS-XR-infra-statsd-oper"`
	Protocols       *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols       `path:"protocols" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateDataRate retrieves the value of the DataRate field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetOrCreateDataRate() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate {
	if t.DataRate != nil {
		return t.DataRate
	}
	t.DataRate = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate{}
	return t.DataRate
}

// GetOrCreateGenericCounters retrieves the value of the GenericCounters field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetOrCreateGenericCounters() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters {
	if t.GenericCounters != nil {
		return t.GenericCounters
	}
	t.GenericCounters = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters{}
	return t.GenericCounters
}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetOrCreateProtocols() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols{}
	return t.Protocols
}

// GetDataRate returns the value of the DataRate struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface. If the receiver or the field DataRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetDataRate() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate {
	if t != nil && t.DataRate != nil {
		return t.DataRate
	}
	return nil
}

// GetGenericCounters returns the value of the GenericCounters struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface. If the receiver or the field GenericCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetGenericCounters() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_GenericCounters {
	if t != nil && t.GenericCounters != nil {
		return t.GenericCounters
	}
	return nil
}

// GetProtocols returns the value of the Protocols struct pointer
// from Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) GetProtocols() *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface struct, which is a YANG list entry.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}

// Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate represents the /Cisco-IOS-XR-infra-statsd-oper/infra-statistics/interfaces/interface/data-rate YANG schema element.
type Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate struct {
	Bandwidth            *uint64 `path:"bandwidth" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputDataRate        *uint64 `path:"input-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputLoad            *uint8  `path:"input-load" module:"Cisco-IOS-XR-infra-statsd-oper"`
	InputPacketRate      *uint64 `path:"input-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	LoadInterval         *uint32 `path:"load-interval" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputDataRate       *uint64 `path:"output-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputLoad           *uint8  `path:"output-load" module:"Cisco-IOS-XR-infra-statsd-oper"`
	OutputPacketRate     *uint64 `path:"output-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PeakInputDataRate    *uint64 `path:"peak-input-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PeakInputPacketRate  *uint64 `path:"peak-input-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PeakOutputDataRate   *uint64 `path:"peak-output-data-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	PeakOutputPacketRate *uint64 `path:"peak-output-packet-rate" module:"Cisco-IOS-XR-infra-statsd-oper"`
	Reliability          *uint8  `path:"reliability" module:"Cisco-IOS-XR-infra-statsd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate.
func (*Cisco_IOS_XRInfraStatsdOper_InfraStatistics_Interfaces_Interface_DataRate) ΛBelongingModule() string {
	return "Cisco-IOS-XR-infra-statsd-oper"
}
