/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-types.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/system/openconfig-alarm-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata   []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Components  *OpenconfigPlatform_Components   `path:"components" module:"openconfig-platform"`
	ΛComponents []ygot.Annotation                `path:"@components" ygotAnnotation:"true"`
	Interfaces  *OpenconfigInterfaces_Interfaces `path:"interfaces" module:"openconfig-interfaces"`
	ΛInterfaces []ygot.Annotation                `path:"@interfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateComponents retrieves the value of the Components field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateComponents() *OpenconfigPlatform_Components {
	if t.Components != nil {
		return t.Components
	}
	t.Components = &OpenconfigPlatform_Components{}
	return t.Components
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateInterfaces() *OpenconfigInterfaces_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigInterfaces_Interfaces{}
	return t.Interfaces
}

// GetComponents returns the value of the Components struct pointer
// from Device. If the receiver or the field Components is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetComponents() *OpenconfigPlatform_Components {
	if t != nil && t.Components != nil {
		return t.Components
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from Device. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetInterfaces() *OpenconfigInterfaces_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// OpenconfigInterfaces_Interfaces represents the /openconfig-interfaces/interfaces YANG schema element.
type OpenconfigInterfaces_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigInterfaces_Interfaces_Interface `path:"interface" module:"openconfig-interfaces"`
	ΛInterface []ygot.Annotation                                     `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces) NewInterface(Name string) (*OpenconfigInterfaces_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigInterfaces_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigInterfaces_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigInterfaces_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigInterfaces_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces) GetOrCreateInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigInterfaces_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces) GetInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigInterfaces_Interfaces) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigInterfaces_Interfaces_Interface struct to the
// list Interface of OpenconfigInterfaces_Interfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces) AppendInterface(v *OpenconfigInterfaces_Interfaces_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces.
func (*OpenconfigInterfaces_Interfaces) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface struct {
	ΛMetadata         []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigInterfaces_Interfaces_Interface_Config           `path:"config" module:"openconfig-interfaces"`
	ΛConfig           []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	Ethernet          *OpenconfigInterfaces_Interfaces_Interface_Ethernet         `path:"ethernet" module:"openconfig-if-ethernet"`
	ΛEthernet         []ygot.Annotation                                           `path:"@ethernet" ygotAnnotation:"true"`
	HoldTime          *OpenconfigInterfaces_Interfaces_Interface_HoldTime         `path:"hold-time" module:"openconfig-interfaces"`
	ΛHoldTime         []ygot.Annotation                                           `path:"@hold-time" ygotAnnotation:"true"`
	Name              *string                                                     `path:"name" module:"openconfig-interfaces"`
	ΛName             []ygot.Annotation                                           `path:"@name" ygotAnnotation:"true"`
	PenaltyBasedAied  *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied `path:"penalty-based-aied" module:"openconfig-interfaces"`
	ΛPenaltyBasedAied []ygot.Annotation                                           `path:"@penalty-based-aied" ygotAnnotation:"true"`
	State             *OpenconfigInterfaces_Interfaces_Interface_State            `path:"state" module:"openconfig-interfaces"`
	ΛState            []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
	Subinterfaces     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces    `path:"subinterfaces" module:"openconfig-interfaces"`
	ΛSubinterfaces    []ygot.Annotation                                           `path:"@subinterfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &OpenconfigInterfaces_Interfaces_Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &OpenconfigInterfaces_Interfaces_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreatePenaltyBasedAied retrieves the value of the PenaltyBasedAied field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreatePenaltyBasedAied() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied {
	if t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	t.PenaltyBasedAied = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied{}
	return t.PenaltyBasedAied
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_State{}
	return t.State
}

// GetOrCreateSubinterfaces retrieves the value of the Subinterfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	t.Subinterfaces = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces{}
	return t.Subinterfaces
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetPenaltyBasedAied returns the value of the PenaltyBasedAied struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field PenaltyBasedAied is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetPenaltyBasedAied() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied {
	if t != nil && t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSubinterfaces returns the value of the Subinterfaces struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Subinterfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t != nil && t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface.
func (*OpenconfigInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Config represents the /openconfig-interfaces/interfaces/interface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Config struct {
	ΛMetadata     []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Description   *string                                     `path:"description" module:"openconfig-interfaces"`
	ΛDescription  []ygot.Annotation                           `path:"@description" ygotAnnotation:"true"`
	Enabled       *bool                                       `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled      []ygot.Annotation                           `path:"@enabled" ygotAnnotation:"true"`
	LoopbackMode  E_OpenconfigTransportTypes_LoopbackModeType `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode []ygot.Annotation                           `path:"@loopback-mode" ygotAnnotation:"true"`
	Mtu           *uint16                                     `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu          []ygot.Annotation                           `path:"@mtu" ygotAnnotation:"true"`
	Name          *string                                     `path:"name" module:"openconfig-interfaces"`
	ΛName         []ygot.Annotation                           `path:"@name" ygotAnnotation:"true"`
	Type          E_IETFInterfaces_InterfaceType              `path:"type" module:"openconfig-interfaces"`
	ΛType         []ygot.Annotation                           `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config `path:"config" module:"openconfig-if-ethernet"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State  `path:"state" module:"openconfig-if-ethernet"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config represents the /openconfig-interfaces/interfaces/interface/ethernet/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config struct {
	ΛMetadata               []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AutoNegotiate           *bool                                                                  `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate          []ygot.Annotation                                                      `path:"@auto-negotiate" ygotAnnotation:"true"`
	DuplexMode              E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode             []ygot.Annotation                                                      `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl       *bool                                                                  `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl      []ygot.Annotation                                                      `path:"@enable-flow-control" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigIfEthernet_INTERFACE_FEC                                   `path:"fec-mode" module:"openconfig-if-ethernet"`
	ΛFecMode                []ygot.Annotation                                                      `path:"@fec-mode" ygotAnnotation:"true"`
	MacAddress              *string                                                                `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress             []ygot.Annotation                                                      `path:"@mac-address" ygotAnnotation:"true"`
	PortSpeed               E_OpenconfigIfEthernet_ETHERNET_SPEED                                  `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed              []ygot.Annotation                                                      `path:"@port-speed" ygotAnnotation:"true"`
	StandaloneLinkTraining  *bool                                                                  `path:"standalone-link-training" module:"openconfig-if-ethernet"`
	ΛStandaloneLinkTraining []ygot.Annotation                                                      `path:"@standalone-link-training" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State represents the /openconfig-interfaces/interfaces/interface/ethernet/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State struct {
	ΛMetadata               []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AutoNegotiate           *bool                                                                           `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate          []ygot.Annotation                                                               `path:"@auto-negotiate" ygotAnnotation:"true"`
	Counters                *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters              `path:"counters" module:"openconfig-if-ethernet"`
	ΛCounters               []ygot.Annotation                                                               `path:"@counters" ygotAnnotation:"true"`
	DuplexMode              E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode          `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode             []ygot.Annotation                                                               `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl       *bool                                                                           `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl      []ygot.Annotation                                                               `path:"@enable-flow-control" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigIfEthernet_INTERFACE_FEC                                            `path:"fec-mode" module:"openconfig-if-ethernet"`
	ΛFecMode                []ygot.Annotation                                                               `path:"@fec-mode" ygotAnnotation:"true"`
	HwMacAddress            *string                                                                         `path:"hw-mac-address" module:"openconfig-if-ethernet"`
	ΛHwMacAddress           []ygot.Annotation                                                               `path:"@hw-mac-address" ygotAnnotation:"true"`
	MacAddress              *string                                                                         `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress             []ygot.Annotation                                                               `path:"@mac-address" ygotAnnotation:"true"`
	NegotiatedDuplexMode    E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode `path:"negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	ΛNegotiatedDuplexMode   []ygot.Annotation                                                               `path:"@negotiated-duplex-mode" ygotAnnotation:"true"`
	NegotiatedPortSpeed     E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"negotiated-port-speed" module:"openconfig-if-ethernet"`
	ΛNegotiatedPortSpeed    []ygot.Annotation                                                               `path:"@negotiated-port-speed" ygotAnnotation:"true"`
	PortSpeed               E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed              []ygot.Annotation                                                               `path:"@port-speed" ygotAnnotation:"true"`
	StandaloneLinkTraining  *bool                                                                           `path:"standalone-link-training" module:"openconfig-if-ethernet"`
	ΛStandaloneLinkTraining []ygot.Annotation                                                               `path:"@standalone-link-training" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	In_8021QFrames       *uint64           `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	ΛIn_8021QFrames      []ygot.Annotation `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors        *uint64           `path:"in-block-errors" module:"openconfig-if-ethernet"`
	ΛInBlockErrors       []ygot.Annotation `path:"@in-block-errors" ygotAnnotation:"true"`
	InCarrierErrors      *uint64           `path:"in-carrier-errors" module:"openconfig-if-ethernet"`
	ΛInCarrierErrors     []ygot.Annotation `path:"@in-carrier-errors" ygotAnnotation:"true"`
	InCrcErrors          *uint64           `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	ΛInCrcErrors         []ygot.Annotation `path:"@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames     *uint64           `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	ΛInFragmentFrames    []ygot.Annotation `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InInterruptedTx      *uint64           `path:"in-interrupted-tx" module:"openconfig-if-ethernet"`
	ΛInInterruptedTx     []ygot.Annotation `path:"@in-interrupted-tx" ygotAnnotation:"true"`
	InJabberFrames       *uint64           `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	ΛInJabberFrames      []ygot.Annotation `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InLateCollision      *uint64           `path:"in-late-collision" module:"openconfig-if-ethernet"`
	ΛInLateCollision     []ygot.Annotation `path:"@in-late-collision" ygotAnnotation:"true"`
	InMacControlFrames   *uint64           `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛInMacControlFrames  []ygot.Annotation `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacErrorsRx        *uint64           `path:"in-mac-errors-rx" module:"openconfig-if-ethernet"`
	ΛInMacErrorsRx       []ygot.Annotation `path:"@in-mac-errors-rx" ygotAnnotation:"true"`
	InMacPauseFrames     *uint64           `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛInMacPauseFrames    []ygot.Annotation `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InMaxsizeExceeded    *uint64           `path:"in-maxsize-exceeded" module:"openconfig-if-ethernet"`
	ΛInMaxsizeExceeded   []ygot.Annotation `path:"@in-maxsize-exceeded" ygotAnnotation:"true"`
	InOversizeFrames     *uint64           `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	ΛInOversizeFrames    []ygot.Annotation `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InSingleCollision    *uint64           `path:"in-single-collision" module:"openconfig-if-ethernet"`
	ΛInSingleCollision   []ygot.Annotation `path:"@in-single-collision" ygotAnnotation:"true"`
	InSymbolError        *uint64           `path:"in-symbol-error" module:"openconfig-if-ethernet"`
	ΛInSymbolError       []ygot.Annotation `path:"@in-symbol-error" ygotAnnotation:"true"`
	InUndersizeFrames    *uint64           `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	ΛInUndersizeFrames   []ygot.Annotation `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames      *uint64           `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	ΛOut_8021QFrames     []ygot.Annotation `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutMacControlFrames  *uint64           `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛOutMacControlFrames []ygot.Annotation `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacErrorsTx       *uint64           `path:"out-mac-errors-tx" module:"openconfig-if-ethernet"`
	ΛOutMacErrorsTx      []ygot.Annotation `path:"@out-mac-errors-tx" ygotAnnotation:"true"`
	OutMacPauseFrames    *uint64           `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛOutMacPauseFrames   []ygot.Annotation `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config represents the /openconfig-interfaces/interfaces/interface/hold-time/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_State represents the /openconfig-interfaces/interfaces/interface/hold-time/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime_State.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetState() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DecayHalfLife      *uint32           `path:"decay-half-life" module:"openconfig-interfaces"`
	ΛDecayHalfLife     []ygot.Annotation `path:"@decay-half-life" ygotAnnotation:"true"`
	FlapPenalty        *uint32           `path:"flap-penalty" module:"openconfig-interfaces"`
	ΛFlapPenalty       []ygot.Annotation `path:"@flap-penalty" ygotAnnotation:"true"`
	MaxSuppressTime    *uint32           `path:"max-suppress-time" module:"openconfig-interfaces"`
	ΛMaxSuppressTime   []ygot.Annotation `path:"@max-suppress-time" ygotAnnotation:"true"`
	ReuseThreshold     *uint32           `path:"reuse-threshold" module:"openconfig-interfaces"`
	ΛReuseThreshold    []ygot.Annotation `path:"@reuse-threshold" ygotAnnotation:"true"`
	SuppressThreshold  *uint32           `path:"suppress-threshold" module:"openconfig-interfaces"`
	ΛSuppressThreshold []ygot.Annotation `path:"@suppress-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DecayHalfLife      *uint32           `path:"decay-half-life" module:"openconfig-interfaces"`
	ΛDecayHalfLife     []ygot.Annotation `path:"@decay-half-life" ygotAnnotation:"true"`
	FlapPenalty        *uint32           `path:"flap-penalty" module:"openconfig-interfaces"`
	ΛFlapPenalty       []ygot.Annotation `path:"@flap-penalty" ygotAnnotation:"true"`
	MaxSuppressTime    *uint32           `path:"max-suppress-time" module:"openconfig-interfaces"`
	ΛMaxSuppressTime   []ygot.Annotation `path:"@max-suppress-time" ygotAnnotation:"true"`
	ReuseThreshold     *uint32           `path:"reuse-threshold" module:"openconfig-interfaces"`
	ΛReuseThreshold    []ygot.Annotation `path:"@reuse-threshold" ygotAnnotation:"true"`
	SuppressThreshold  *uint32           `path:"suppress-threshold" module:"openconfig-interfaces"`
	ΛSuppressThreshold []ygot.Annotation `path:"@suppress-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_State represents the /openconfig-interfaces/interfaces/interface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State struct {
	ΛMetadata        []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	AdminStatus      E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus     []ygot.Annotation                                             `path:"@admin-status" ygotAnnotation:"true"`
	Counters         *OpenconfigInterfaces_Interfaces_Interface_State_Counters     `path:"counters" module:"openconfig-interfaces"`
	ΛCounters        []ygot.Annotation                                             `path:"@counters" ygotAnnotation:"true"`
	Cpu              *bool                                                         `path:"cpu" module:"openconfig-interfaces"`
	ΛCpu             []ygot.Annotation                                             `path:"@cpu" ygotAnnotation:"true"`
	Description      *string                                                       `path:"description" module:"openconfig-interfaces"`
	ΛDescription     []ygot.Annotation                                             `path:"@description" ygotAnnotation:"true"`
	Enabled          *bool                                                         `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled         []ygot.Annotation                                             `path:"@enabled" ygotAnnotation:"true"`
	HardwarePort     *string                                                       `path:"hardware-port" module:"openconfig-platform-port"`
	ΛHardwarePort    []ygot.Annotation                                             `path:"@hardware-port" ygotAnnotation:"true"`
	Ifindex          *uint32                                                       `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex         []ygot.Annotation                                             `path:"@ifindex" ygotAnnotation:"true"`
	LastChange       *uint64                                                       `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange      []ygot.Annotation                                             `path:"@last-change" ygotAnnotation:"true"`
	Logical          *bool                                                         `path:"logical" module:"openconfig-interfaces"`
	ΛLogical         []ygot.Annotation                                             `path:"@logical" ygotAnnotation:"true"`
	LoopbackMode     E_OpenconfigTransportTypes_LoopbackModeType                   `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode    []ygot.Annotation                                             `path:"@loopback-mode" ygotAnnotation:"true"`
	Management       *bool                                                         `path:"management" module:"openconfig-interfaces"`
	ΛManagement      []ygot.Annotation                                             `path:"@management" ygotAnnotation:"true"`
	Mtu              *uint16                                                       `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu             []ygot.Annotation                                             `path:"@mtu" ygotAnnotation:"true"`
	Name             *string                                                       `path:"name" module:"openconfig-interfaces"`
	ΛName            []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	OperStatus       E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus  `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus      []ygot.Annotation                                             `path:"@oper-status" ygotAnnotation:"true"`
	PhysicalChannel  []uint16                                                      `path:"physical-channel" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannel []ygot.Annotation                                             `path:"@physical-channel" ygotAnnotation:"true"`
	Transceiver      *string                                                       `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver     []ygot.Annotation                                             `path:"@transceiver" ygotAnnotation:"true"`
	Type             E_IETFInterfaces_InterfaceType                                `path:"type" module:"openconfig-interfaces"`
	ΛType            []ygot.Annotation                                             `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_State.
func (*OpenconfigInterfaces_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_State_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State_Counters struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions    *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions   []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts       *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts      []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards            *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards           []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors              *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors             []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors           *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors          []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts       *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts      []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets              *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets             []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts                *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts               []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts         *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts        []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos       *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos      []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	InterfaceTransitions  *uint64           `path:"interface-transitions" module:"openconfig-interfaces"`
	ΛInterfaceTransitions []ygot.Annotation `path:"@interface-transitions" ygotAnnotation:"true"`
	LastClear             *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear            []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	LinkTransitions       *uint64           `path:"link-transitions" module:"openconfig-interfaces"`
	ΛLinkTransitions      []ygot.Annotation `path:"@link-transitions" ygotAnnotation:"true"`
	OutBroadcastPkts      *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts     []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards           *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards          []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors             *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors            []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts      *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts     []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets             *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets            []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts               *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts              []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts        *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts       []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
	Resets                *uint64           `path:"resets" module:"openconfig-interfaces"`
	ΛResets               []ygot.Annotation `path:"@resets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces represents the /openconfig-interfaces/interfaces/interface/subinterfaces YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct {
	ΛMetadata     []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Subinterface  map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface `path:"subinterface" module:"openconfig-interfaces"`
	ΛSubinterface []ygot.Annotation                                                                `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) NewSubinterface(Index uint32) (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterfaceMap returns the list (map) from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetOrCreateSubinterfaceMap() map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}
	return t.Subinterface
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetOrCreateSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct to the
// list Subinterface of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) AppendSubinterface(v *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct {
	ΛMetadata []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                                            `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                      `path:"index" module:"openconfig-interfaces"`
	ΛIndex    []ygot.Annotation                                                            `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool             `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Index        *uint32           `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	ΛMetadata    []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	AdminStatus  E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus                        `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus []ygot.Annotation                                                                    `path:"@admin-status" ygotAnnotation:"true"`
	Counters     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters `path:"counters" module:"openconfig-interfaces"`
	ΛCounters    []ygot.Annotation                                                                    `path:"@counters" ygotAnnotation:"true"`
	Cpu          *bool                                                                                `path:"cpu" module:"openconfig-interfaces"`
	ΛCpu         []ygot.Annotation                                                                    `path:"@cpu" ygotAnnotation:"true"`
	Description  *string                                                                              `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation                                                                    `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool                                                                                `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation                                                                    `path:"@enabled" ygotAnnotation:"true"`
	Ifindex      *uint32                                                                              `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex     []ygot.Annotation                                                                    `path:"@ifindex" ygotAnnotation:"true"`
	Index        *uint32                                                                              `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation                                                                    `path:"@index" ygotAnnotation:"true"`
	LastChange   *uint64                                                                              `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange  []ygot.Annotation                                                                    `path:"@last-change" ygotAnnotation:"true"`
	Logical      *bool                                                                                `path:"logical" module:"openconfig-interfaces"`
	ΛLogical     []ygot.Annotation                                                                    `path:"@logical" ygotAnnotation:"true"`
	Management   *bool                                                                                `path:"management" module:"openconfig-interfaces"`
	ΛManagement  []ygot.Annotation                                                                    `path:"@management" ygotAnnotation:"true"`
	Name         *string                                                                              `path:"name" module:"openconfig-interfaces"`
	ΛName        []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
	OperStatus   E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus                         `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus  []ygot.Annotation                                                                    `path:"@oper-status" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Component  map[string]*OpenconfigPlatform_Components_Component `path:"component" module:"openconfig-platform"`
	ΛComponent []ygot.Annotation                                   `path:"@component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the OpenconfigPlatform_Components struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponentMap returns the list (map) from OpenconfigPlatform_Components.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components) GetOrCreateComponentMap() map[string]*OpenconfigPlatform_Components_Component {
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}
	return t.Component
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components) GetOrCreateComponent(Name string) *OpenconfigPlatform_Components_Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of OpenconfigPlatform_Components. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components) GetComponent(Name string) *OpenconfigPlatform_Components_Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components) DeleteComponent(Name string) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied OpenconfigPlatform_Components_Component struct to the
// list Component of OpenconfigPlatform_Components. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components) AppendComponent(v *OpenconfigPlatform_Components_Component) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components.
func (*OpenconfigPlatform_Components) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Backplane          *OpenconfigPlatform_Components_Component_Backplane         `path:"backplane" module:"openconfig-platform"`
	ΛBackplane         []ygot.Annotation                                          `path:"@backplane" ygotAnnotation:"true"`
	Chassis            *OpenconfigPlatform_Components_Component_Chassis           `path:"chassis" module:"openconfig-platform"`
	ΛChassis           []ygot.Annotation                                          `path:"@chassis" ygotAnnotation:"true"`
	Config             *OpenconfigPlatform_Components_Component_Config            `path:"config" module:"openconfig-platform"`
	ΛConfig            []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	ControllerCard     *OpenconfigPlatform_Components_Component_ControllerCard    `path:"controller-card" module:"openconfig-platform"`
	ΛControllerCard    []ygot.Annotation                                          `path:"@controller-card" ygotAnnotation:"true"`
	Cpu                *OpenconfigPlatform_Components_Component_Cpu               `path:"cpu" module:"openconfig-platform"`
	ΛCpu               []ygot.Annotation                                          `path:"@cpu" ygotAnnotation:"true"`
	Fabric             *OpenconfigPlatform_Components_Component_Fabric            `path:"fabric" module:"openconfig-platform"`
	ΛFabric            []ygot.Annotation                                          `path:"@fabric" ygotAnnotation:"true"`
	Fan                *OpenconfigPlatform_Components_Component_Fan               `path:"fan" module:"openconfig-platform"`
	ΛFan               []ygot.Annotation                                          `path:"@fan" ygotAnnotation:"true"`
	IntegratedCircuit  *OpenconfigPlatform_Components_Component_IntegratedCircuit `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit []ygot.Annotation                                          `path:"@integrated-circuit" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	Port               *OpenconfigPlatform_Components_Component_Port              `path:"port" module:"openconfig-platform"`
	ΛPort              []ygot.Annotation                                          `path:"@port" ygotAnnotation:"true"`
	PowerSupply        *OpenconfigPlatform_Components_Component_PowerSupply       `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply       []ygot.Annotation                                          `path:"@power-supply" ygotAnnotation:"true"`
	Properties         *OpenconfigPlatform_Components_Component_Properties        `path:"properties" module:"openconfig-platform"`
	ΛProperties        []ygot.Annotation                                          `path:"@properties" ygotAnnotation:"true"`
	SoftwareModule     *OpenconfigPlatform_Components_Component_SoftwareModule    `path:"software-module" module:"openconfig-platform"`
	ΛSoftwareModule    []ygot.Annotation                                          `path:"@software-module" ygotAnnotation:"true"`
	State              *OpenconfigPlatform_Components_Component_State             `path:"state" module:"openconfig-platform"`
	ΛState             []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
	Storage            *OpenconfigPlatform_Components_Component_Storage           `path:"storage" module:"openconfig-platform"`
	ΛStorage           []ygot.Annotation                                          `path:"@storage" ygotAnnotation:"true"`
	Subcomponents      *OpenconfigPlatform_Components_Component_Subcomponents     `path:"subcomponents" module:"openconfig-platform"`
	ΛSubcomponents     []ygot.Annotation                                          `path:"@subcomponents" ygotAnnotation:"true"`
	Transceiver        *OpenconfigPlatform_Components_Component_Transceiver       `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver       []ygot.Annotation                                          `path:"@transceiver" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &OpenconfigPlatform_Components_Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &OpenconfigPlatform_Components_Component_Chassis{}
	return t.Chassis
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Config{}
	return t.Config
}

// GetOrCreateControllerCard retrieves the value of the ControllerCard field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateControllerCard() *OpenconfigPlatform_Components_Component_ControllerCard {
	if t.ControllerCard != nil {
		return t.ControllerCard
	}
	t.ControllerCard = &OpenconfigPlatform_Components_Component_ControllerCard{}
	return t.ControllerCard
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &OpenconfigPlatform_Components_Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &OpenconfigPlatform_Components_Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFan() *OpenconfigPlatform_Components_Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &OpenconfigPlatform_Components_Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &OpenconfigPlatform_Components_Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePort() *OpenconfigPlatform_Components_Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &OpenconfigPlatform_Components_Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &OpenconfigPlatform_Components_Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateProperties retrieves the value of the Properties field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t.Properties != nil {
		return t.Properties
	}
	t.Properties = &OpenconfigPlatform_Components_Component_Properties{}
	return t.Properties
}

// GetOrCreateSoftwareModule retrieves the value of the SoftwareModule field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSoftwareModule() *OpenconfigPlatform_Components_Component_SoftwareModule {
	if t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	t.SoftwareModule = &OpenconfigPlatform_Components_Component_SoftwareModule{}
	return t.SoftwareModule
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateState() *OpenconfigPlatform_Components_Component_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_State{}
	return t.State
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &OpenconfigPlatform_Components_Component_Storage{}
	return t.Storage
}

// GetOrCreateSubcomponents retrieves the value of the Subcomponents field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t.Subcomponents != nil {
		return t.Subcomponents
	}
	t.Subcomponents = &OpenconfigPlatform_Components_Component_Subcomponents{}
	return t.Subcomponents
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateTransceiver() *OpenconfigPlatform_Components_Component_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &OpenconfigPlatform_Components_Component_Transceiver{}
	return t.Transceiver
}

// GetBackplane returns the value of the Backplane struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetConfig() *OpenconfigPlatform_Components_Component_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetControllerCard returns the value of the ControllerCard struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field ControllerCard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetControllerCard() *OpenconfigPlatform_Components_Component_ControllerCard {
	if t != nil && t.ControllerCard != nil {
		return t.ControllerCard
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFan() *OpenconfigPlatform_Components_Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPort() *OpenconfigPlatform_Components_Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetProperties returns the value of the Properties struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Properties is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t != nil && t.Properties != nil {
		return t.Properties
	}
	return nil
}

// GetSoftwareModule returns the value of the SoftwareModule struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field SoftwareModule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSoftwareModule() *OpenconfigPlatform_Components_Component_SoftwareModule {
	if t != nil && t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetState() *OpenconfigPlatform_Components_Component_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetSubcomponents returns the value of the Subcomponents struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Subcomponents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t != nil && t.Subcomponents != nil {
		return t.Subcomponents
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetTransceiver() *OpenconfigPlatform_Components_Component_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component.
func (*OpenconfigPlatform_Components_Component) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Backplane_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Backplane_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Backplane_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Backplane_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Backplane.
func (*OpenconfigPlatform_Components_Component_Backplane) ΛBelongingModule() string {
	return "openconfig-platform"
}
