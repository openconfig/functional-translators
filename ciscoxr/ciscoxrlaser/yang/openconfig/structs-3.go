/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-types.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/system/openconfig-alarm-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                        `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                              `path:"@name" ygotAnnotation:"true"`
	Value     OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue    []ygot.Annotation                                                              `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties_Property_Config.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	ΛMetadata     []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                                                                         `path:"configurable" module:"openconfig-platform"`
	ΛConfigurable []ygot.Annotation                                                             `path:"@configurable" ygotAnnotation:"true"`
	Name          *string                                                                       `path:"name" module:"openconfig-platform"`
	ΛName         []ygot.Annotation                                                             `path:"@name" ygotAnnotation:"true"`
	Value         OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue        []ygot.Annotation                                                             `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties_Property_State.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule represents the /openconfig-platform/components/component/software-module YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_SoftwareModule_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_SoftwareModule_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_SoftwareModule_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_SoftwareModule_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetOrCreateState() *OpenconfigPlatform_Components_Component_SoftwareModule_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_SoftwareModule_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_SoftwareModule. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetConfig() *OpenconfigPlatform_Components_Component_SoftwareModule_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_SoftwareModule. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetState() *OpenconfigPlatform_Components_Component_SoftwareModule_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule.
func (*OpenconfigPlatform_Components_Component_SoftwareModule) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule_Config represents the /openconfig-platform/components/component/software-module/config YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule_Config.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule_State represents the /openconfig-platform/components/component/software-module/state YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule_State.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	ΛMetadata             []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	AllocatedPower        *uint32                                                             `path:"allocated-power" module:"openconfig-platform"`
	ΛAllocatedPower       []ygot.Annotation                                                   `path:"@allocated-power" ygotAnnotation:"true"`
	BaseMacAddress        *string                                                             `path:"base-mac-address" module:"openconfig-platform"`
	ΛBaseMacAddress       []ygot.Annotation                                                   `path:"@base-mac-address" ygotAnnotation:"true"`
	BootTime              *uint64                                                             `path:"boot-time" module:"openconfig-platform"`
	ΛBootTime             []ygot.Annotation                                                   `path:"@boot-time" ygotAnnotation:"true"`
	CleiCode              *string                                                             `path:"clei-code" module:"openconfig-platform"`
	ΛCleiCode             []ygot.Annotation                                                   `path:"@clei-code" ygotAnnotation:"true"`
	Description           *string                                                             `path:"description" module:"openconfig-platform"`
	ΛDescription          []ygot.Annotation                                                   `path:"@description" ygotAnnotation:"true"`
	Empty                 *bool                                                               `path:"empty" module:"openconfig-platform"`
	ΛEmpty                []ygot.Annotation                                                   `path:"@empty" ygotAnnotation:"true"`
	FirmwareVersion       *string                                                             `path:"firmware-version" module:"openconfig-platform"`
	ΛFirmwareVersion      []ygot.Annotation                                                   `path:"@firmware-version" ygotAnnotation:"true"`
	HardwareVersion       *string                                                             `path:"hardware-version" module:"openconfig-platform"`
	ΛHardwareVersion      []ygot.Annotation                                                   `path:"@hardware-version" ygotAnnotation:"true"`
	Id                    *string                                                             `path:"id" module:"openconfig-platform"`
	ΛId                   []ygot.Annotation                                                   `path:"@id" ygotAnnotation:"true"`
	InstallComponent      *string                                                             `path:"install-component" module:"openconfig-platform"`
	ΛInstallComponent     []ygot.Annotation                                                   `path:"@install-component" ygotAnnotation:"true"`
	InstallPosition       *string                                                             `path:"install-position" module:"openconfig-platform"`
	ΛInstallPosition      []ygot.Annotation                                                   `path:"@install-position" ygotAnnotation:"true"`
	LastPoweroffReason    *OpenconfigPlatform_Components_Component_State_LastPoweroffReason   `path:"last-poweroff-reason" module:"openconfig-platform"`
	ΛLastPoweroffReason   []ygot.Annotation                                                   `path:"@last-poweroff-reason" ygotAnnotation:"true"`
	LastPoweroffTime      *uint64                                                             `path:"last-poweroff-time" module:"openconfig-platform"`
	ΛLastPoweroffTime     []ygot.Annotation                                                   `path:"@last-poweroff-time" ygotAnnotation:"true"`
	LastRebootReason      E_OpenconfigPlatformTypes_COMPONENT_REBOOT_REASON                   `path:"last-reboot-reason" module:"openconfig-platform"`
	ΛLastRebootReason     []ygot.Annotation                                                   `path:"@last-reboot-reason" ygotAnnotation:"true"`
	LastRebootTime        *uint64                                                             `path:"last-reboot-time" module:"openconfig-platform"`
	ΛLastRebootTime       []ygot.Annotation                                                   `path:"@last-reboot-time" ygotAnnotation:"true"`
	LastSwitchoverReason  *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason `path:"last-switchover-reason" module:"openconfig-platform"`
	ΛLastSwitchoverReason []ygot.Annotation                                                   `path:"@last-switchover-reason" ygotAnnotation:"true"`
	LastSwitchoverTime    *uint64                                                             `path:"last-switchover-time" module:"openconfig-platform"`
	ΛLastSwitchoverTime   []ygot.Annotation                                                   `path:"@last-switchover-time" ygotAnnotation:"true"`
	Location              *string                                                             `path:"location" module:"openconfig-platform"`
	ΛLocation             []ygot.Annotation                                                   `path:"@location" ygotAnnotation:"true"`
	Memory                *OpenconfigPlatform_Components_Component_State_Memory               `path:"memory" module:"openconfig-platform"`
	ΛMemory               []ygot.Annotation                                                   `path:"@memory" ygotAnnotation:"true"`
	MfgDate               *string                                                             `path:"mfg-date" module:"openconfig-platform"`
	ΛMfgDate              []ygot.Annotation                                                   `path:"@mfg-date" ygotAnnotation:"true"`
	MfgName               *string                                                             `path:"mfg-name" module:"openconfig-platform"`
	ΛMfgName              []ygot.Annotation                                                   `path:"@mfg-name" ygotAnnotation:"true"`
	ModelName             *string                                                             `path:"model-name" module:"openconfig-platform"`
	ΛModelName            []ygot.Annotation                                                   `path:"@model-name" ygotAnnotation:"true"`
	Name                  *string                                                             `path:"name" module:"openconfig-platform"`
	ΛName                 []ygot.Annotation                                                   `path:"@name" ygotAnnotation:"true"`
	OperStatus            E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS                     `path:"oper-status" module:"openconfig-platform"`
	ΛOperStatus           []ygot.Annotation                                                   `path:"@oper-status" ygotAnnotation:"true"`
	Parent                *string                                                             `path:"parent" module:"openconfig-platform"`
	ΛParent               []ygot.Annotation                                                   `path:"@parent" ygotAnnotation:"true"`
	PartNo                *string                                                             `path:"part-no" module:"openconfig-platform"`
	ΛPartNo               []ygot.Annotation                                                   `path:"@part-no" ygotAnnotation:"true"`
	Pcie                  *OpenconfigPlatform_Components_Component_State_Pcie                 `path:"pcie" module:"openconfig-platform"`
	ΛPcie                 []ygot.Annotation                                                   `path:"@pcie" ygotAnnotation:"true"`
	RedundantRole         E_OpenconfigPlatformTypes_ComponentRedundantRole                    `path:"redundant-role" module:"openconfig-platform"`
	ΛRedundantRole        []ygot.Annotation                                                   `path:"@redundant-role" ygotAnnotation:"true"`
	Removable             *bool                                                               `path:"removable" module:"openconfig-platform"`
	ΛRemovable            []ygot.Annotation                                                   `path:"@removable" ygotAnnotation:"true"`
	SerialNo              *string                                                             `path:"serial-no" module:"openconfig-platform"`
	ΛSerialNo             []ygot.Annotation                                                   `path:"@serial-no" ygotAnnotation:"true"`
	SoftwareVersion       *string                                                             `path:"software-version" module:"openconfig-platform"`
	ΛSoftwareVersion      []ygot.Annotation                                                   `path:"@software-version" ygotAnnotation:"true"`
	SwitchoverReady       *bool                                                               `path:"switchover-ready" module:"openconfig-platform"`
	ΛSwitchoverReady      []ygot.Annotation                                                   `path:"@switchover-ready" ygotAnnotation:"true"`
	Temperature           *OpenconfigPlatform_Components_Component_State_Temperature          `path:"temperature" module:"openconfig-platform"`
	ΛTemperature          []ygot.Annotation                                                   `path:"@temperature" ygotAnnotation:"true"`
	Type                  OpenconfigPlatform_Components_Component_State_Type_Union            `path:"type" module:"openconfig-platform"`
	ΛType                 []ygot.Annotation                                                   `path:"@type" ygotAnnotation:"true"`
	UsedPower             *uint32                                                             `path:"used-power" module:"openconfig-platform"`
	ΛUsedPower            []ygot.Annotation                                                   `path:"@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// GetOrCreateLastPoweroffReason retrieves the value of the LastPoweroffReason field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateLastPoweroffReason() *OpenconfigPlatform_Components_Component_State_LastPoweroffReason {
	if t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	t.LastPoweroffReason = &OpenconfigPlatform_Components_Component_State_LastPoweroffReason{}
	return t.LastPoweroffReason
}

// GetOrCreateLastSwitchoverReason retrieves the value of the LastSwitchoverReason field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateLastSwitchoverReason() *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason {
	if t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	t.LastSwitchoverReason = &OpenconfigPlatform_Components_Component_State_LastSwitchoverReason{}
	return t.LastSwitchoverReason
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigPlatform_Components_Component_State_Memory{}
	return t.Memory
}

// GetOrCreatePcie retrieves the value of the Pcie field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreatePcie() *OpenconfigPlatform_Components_Component_State_Pcie {
	if t.Pcie != nil {
		return t.Pcie
	}
	t.Pcie = &OpenconfigPlatform_Components_Component_State_Pcie{}
	return t.Pcie
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &OpenconfigPlatform_Components_Component_State_Temperature{}
	return t.Temperature
}

// GetLastPoweroffReason returns the value of the LastPoweroffReason struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field LastPoweroffReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetLastPoweroffReason() *OpenconfigPlatform_Components_Component_State_LastPoweroffReason {
	if t != nil && t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	return nil
}

// GetLastSwitchoverReason returns the value of the LastSwitchoverReason struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field LastSwitchoverReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetLastSwitchoverReason() *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason {
	if t != nil && t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPcie returns the value of the Pcie struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Pcie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetPcie() *OpenconfigPlatform_Components_Component_State_Pcie {
	if t != nil && t.Pcie != nil {
		return t.Pcie
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State.
func (*OpenconfigPlatform_Components_Component_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_LastPoweroffReason represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type OpenconfigPlatform_Components_Component_State_LastPoweroffReason struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Details   *string                                                      `path:"details" module:"openconfig-platform"`
	ΛDetails  []ygot.Annotation                                            `path:"@details" ygotAnnotation:"true"`
	Trigger   E_OpenconfigPlatformTypes_ComponentLastPoweroffReasonTrigger `path:"trigger" module:"openconfig-platform"`
	ΛTrigger  []ygot.Annotation                                            `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_LastPoweroffReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_LastPoweroffReason) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_LastPoweroffReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_LastPoweroffReason.
func (*OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_LastSwitchoverReason represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type OpenconfigPlatform_Components_Component_State_LastSwitchoverReason struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Details   *string                                                                 `path:"details" module:"openconfig-platform"`
	ΛDetails  []ygot.Annotation                                                       `path:"@details" ygotAnnotation:"true"`
	Trigger   E_OpenconfigPlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger `path:"trigger" module:"openconfig-platform"`
	ΛTrigger  []ygot.Annotation                                                       `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_LastSwitchoverReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_LastSwitchoverReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_LastSwitchoverReason.
func (*OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Memory.
func (*OpenconfigPlatform_Components_Component_State_Memory) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie struct {
	ΛMetadata          []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	CorrectableErrors  *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors `path:"correctable-errors" module:"openconfig-platform"`
	ΛCorrectableErrors []ygot.Annotation                                                     `path:"@correctable-errors" ygotAnnotation:"true"`
	FatalErrors        *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors       `path:"fatal-errors" module:"openconfig-platform"`
	ΛFatalErrors       []ygot.Annotation                                                     `path:"@fatal-errors" ygotAnnotation:"true"`
	NonFatalErrors     *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors    `path:"non-fatal-errors" module:"openconfig-platform"`
	ΛNonFatalErrors    []ygot.Annotation                                                     `path:"@non-fatal-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie) IsYANGGoStruct() {}

// GetOrCreateCorrectableErrors retrieves the value of the CorrectableErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateCorrectableErrors() *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors {
	if t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	t.CorrectableErrors = &OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors{}
	return t.CorrectableErrors
}

// GetOrCreateFatalErrors retrieves the value of the FatalErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors {
	if t.FatalErrors != nil {
		return t.FatalErrors
	}
	t.FatalErrors = &OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors{}
	return t.FatalErrors
}

// GetOrCreateNonFatalErrors retrieves the value of the NonFatalErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateNonFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors {
	if t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	t.NonFatalErrors = &OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors{}
	return t.NonFatalErrors
}

// GetCorrectableErrors returns the value of the CorrectableErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field CorrectableErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetCorrectableErrors() *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors {
	if t != nil && t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	return nil
}

// GetFatalErrors returns the value of the FatalErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field FatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors {
	if t != nil && t.FatalErrors != nil {
		return t.FatalErrors
	}
	return nil
}

// GetNonFatalErrors returns the value of the NonFatalErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field NonFatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetNonFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors {
	if t != nil && t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie.
func (*OpenconfigPlatform_Components_Component_State_Pcie) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdvisoryNonFatalErrors  *uint64           `path:"advisory-non-fatal-errors" module:"openconfig-platform"`
	ΛAdvisoryNonFatalErrors []ygot.Annotation `path:"@advisory-non-fatal-errors" ygotAnnotation:"true"`
	BadDllpErrors           *uint64           `path:"bad-dllp-errors" module:"openconfig-platform"`
	ΛBadDllpErrors          []ygot.Annotation `path:"@bad-dllp-errors" ygotAnnotation:"true"`
	BadTlpErrors            *uint64           `path:"bad-tlp-errors" module:"openconfig-platform"`
	ΛBadTlpErrors           []ygot.Annotation `path:"@bad-tlp-errors" ygotAnnotation:"true"`
	HdrLogOverflowErrors    *uint64           `path:"hdr-log-overflow-errors" module:"openconfig-platform"`
	ΛHdrLogOverflowErrors   []ygot.Annotation `path:"@hdr-log-overflow-errors" ygotAnnotation:"true"`
	InternalErrors          *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors         []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	ReceiverErrors          *uint64           `path:"receiver-errors" module:"openconfig-platform"`
	ΛReceiverErrors         []ygot.Annotation `path:"@receiver-errors" ygotAnnotation:"true"`
	RelayRolloverErrors     *uint64           `path:"relay-rollover-errors" module:"openconfig-platform"`
	ΛRelayRolloverErrors    []ygot.Annotation `path:"@relay-rollover-errors" ygotAnnotation:"true"`
	ReplayTimeoutErrors     *uint64           `path:"replay-timeout-errors" module:"openconfig-platform"`
	ΛReplayTimeoutErrors    []ygot.Annotation `path:"@replay-timeout-errors" ygotAnnotation:"true"`
	TotalErrors             *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors            []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	ΛMetadata       []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                                `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                                `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                                         `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                                `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                                         `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                                `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                          `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                                `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                                         `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                                `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                          `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                                `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                                         `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                                `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                          `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                                `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Temperature.
func (*OpenconfigPlatform_Components_Component_State_Temperature) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Storage_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Storage_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Storage_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Storage_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage.
func (*OpenconfigPlatform_Components_Component_Storage) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage_Config.
func (*OpenconfigPlatform_Components_Component_Storage_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage_State.
func (*OpenconfigPlatform_Components_Component_Storage_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	ΛMetadata     []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Subcomponent  map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent `path:"subcomponent" module:"openconfig-platform"`
	ΛSubcomponent []ygot.Annotation                                                              `path:"@subcomponent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the OpenconfigPlatform_Components_Component_Subcomponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponentMap returns the list (map) from OpenconfigPlatform_Components_Component_Subcomponents.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponentMap() map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}
	return t.Subcomponent
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of OpenconfigPlatform_Components_Component_Subcomponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubcomponent deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) DeleteSubcomponent(Name string) {
	key := Name

	delete(t.Subcomponent, key)
}

// AppendSubcomponent appends the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct to the
// list Subcomponent of OpenconfigPlatform_Components_Component_Subcomponents. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) AppendSubcomponent(v *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents.
func (*OpenconfigPlatform_Components_Component_Subcomponents) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                    `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigPlatform_Components_Component_Transceiver_Config           `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig           []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	HostLanes         *OpenconfigPlatform_Components_Component_Transceiver_HostLanes        `path:"host-lanes" module:"openconfig-platform-transceiver"`
	ΛHostLanes        []ygot.Annotation                                                     `path:"@host-lanes" ygotAnnotation:"true"`
	PhysicalChannels  *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels `path:"physical-channels" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannels []ygot.Annotation                                                     `path:"@physical-channels" ygotAnnotation:"true"`
	State             *OpenconfigPlatform_Components_Component_Transceiver_State            `path:"state" module:"openconfig-platform-transceiver"`
	ΛState            []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
	Thresholds        *OpenconfigPlatform_Components_Component_Transceiver_Thresholds       `path:"thresholds" module:"openconfig-platform-transceiver"`
	ΛThresholds       []ygot.Annotation                                                     `path:"@thresholds" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_Config{}
	return t.Config
}

// GetOrCreateHostLanes retrieves the value of the HostLanes field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateHostLanes() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes {
	if t.HostLanes != nil {
		return t.HostLanes
	}
	t.HostLanes = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes{}
	return t.HostLanes
}

// GetOrCreatePhysicalChannels retrieves the value of the PhysicalChannels field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreatePhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	t.PhysicalChannels = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels{}
	return t.PhysicalChannels
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_State{}
	return t.State
}

// GetOrCreateThresholds retrieves the value of the Thresholds field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateThresholds() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds {
	if t.Thresholds != nil {
		return t.Thresholds
	}
	t.Thresholds = &OpenconfigPlatform_Components_Component_Transceiver_Thresholds{}
	return t.Thresholds
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHostLanes returns the value of the HostLanes struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field HostLanes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetHostLanes() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes {
	if t != nil && t.HostLanes != nil {
		return t.HostLanes
	}
	return nil
}

// GetPhysicalChannels returns the value of the PhysicalChannels struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field PhysicalChannels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetPhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t != nil && t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetThresholds returns the value of the Thresholds struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field Thresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetThresholds() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds {
	if t != nil && t.Thresholds != nil {
		return t.Thresholds
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver.
func (*OpenconfigPlatform_Components_Component_Transceiver) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_Config represents the /openconfig-platform/components/component/transceiver/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Config struct {
	ΛMetadata             []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Enabled               *bool                                                         `path:"enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled              []ygot.Annotation                                             `path:"@enabled" ygotAnnotation:"true"`
	EthernetPmdPreconf    E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                  `path:"ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf   []ygot.Annotation                                             `path:"@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FecMode               E_OpenconfigPlatformTypes_FEC_MODE_TYPE                       `path:"fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode              []ygot.Annotation                                             `path:"@fec-mode" ygotAnnotation:"true"`
	FormFactorPreconf     E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE       `path:"form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf    []ygot.Annotation                                             `path:"@form-factor-preconf" ygotAnnotation:"true"`
	ModuleFunctionalType  E_OpenconfigTransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE `path:"module-functional-type" module:"openconfig-platform-transceiver"`
	ΛModuleFunctionalType []ygot.Annotation                                             `path:"@module-functional-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_Config.
func (*OpenconfigPlatform_Components_Component_Transceiver_Config) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_HostLanes represents the /openconfig-platform/components/component/transceiver/host-lanes YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct {
	ΛMetadata []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Lane      map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane `path:"lane" module:"openconfig-platform-transceiver"`
	ΛLane     []ygot.Annotation                                                             `path:"@lane" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_HostLanes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes) IsYANGGoStruct() {}

// NewLane creates a new entry in the Lane list of the
// OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) NewLane(LaneNumber uint8) (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}

	key := LaneNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lane[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lane", key)
	}

	t.Lane[key] = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane{
		LaneNumber: &LaneNumber,
	}

	return t.Lane[key], nil
}

// RenameLane renames an entry in the list Lane within
// the OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) RenameLane(oldK, newK uint8) error {
	if _, ok := t.Lane[newK]; ok {
		return fmt.Errorf("key %v already exists in Lane", newK)
	}

	e, ok := t.Lane[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lane", oldK)
	}
	e.LaneNumber = &newK

	t.Lane[newK] = e
	delete(t.Lane, oldK)
	return nil
}

// GetOrCreateLaneMap returns the list (map) from OpenconfigPlatform_Components_Component_Transceiver_HostLanes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetOrCreateLaneMap() map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}
	return t.Lane
}

// GetOrCreateLane retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetOrCreateLane(LaneNumber uint8) *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {

	key := LaneNumber

	if v, ok := t.Lane[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLane(LaneNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLane got unexpected error: %v", err))
	}
	return v
}

// GetLane retrieves the value with the specified key from
// the Lane map field of OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetLane(LaneNumber uint8) *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {

	if t == nil {
		return nil
	}

	key := LaneNumber

	if lm, ok := t.Lane[key]; ok {
		return lm
	}
	return nil
}

// DeleteLane deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) DeleteLane(LaneNumber uint8) {
	key := LaneNumber

	delete(t.Lane, key)
}

// AppendLane appends the supplied OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane struct to the
// list Lane of OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) AppendLane(v *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) error {
	if v.LaneNumber == nil {
		return fmt.Errorf("invalid nil key received for LaneNumber")
	}

	key := *v.LaneNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}

	if _, ok := t.Lane[key]; ok {
		return fmt.Errorf("duplicate key for list Lane %v", key)
	}

	t.Lane[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_HostLanes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_HostLanes.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}
