/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub2.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-uncorrected-ber-min YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-uncorrected-ber-prior-acc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-isi1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-isi2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-laser-freq1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-laser-freq2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-pam1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-pam2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-snr YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-snr1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-tec1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/lo-tec2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ingress-channel-slice-attenuation YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ingress-channel-slice-attenuation-configured YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ingress-channel-slice-attenuation-configured/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count struct {
	IngressChannelSlice            *uint32 `path:"ingress-channel-slice" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressChannelSliceAttenuation *string `path:"ingress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ingress-channel-slice-attenuation/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count struct {
	IngressChannelSlice            *uint32 `path:"ingress-channel-slice" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressChannelSliceAttenuation *string `path:"ingress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData struct {
	DacRate                   *string                                                                                               `path:"dac-rate" module:"Cisco-IOS-XR-controller-optics-oper"`
	Description               *string                                                                                               `path:"description" module:"Cisco-IOS-XR-controller-optics-oper"`
	FrequencyOffset           *int32                                                                                                `path:"frequency-offset" module:"Cisco-IOS-XR-controller-optics-oper"`
	Frequency100Mhz           *uint32                                                                                               `path:"frequency100mhz" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneAlarmInfo             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo `path:"lane-alarm-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneIndex                 *uint32                                                                                               `path:"lane-index" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserAge                  *uint32                                                                                               `path:"laser-age" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserBiasCurrentMilliAmps *uint32                                                                                               `path:"laser-bias-current-milli-amps" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserBiasCurrentPercent   *uint32                                                                                               `path:"laser-bias-current-percent" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserTemperature          *int32                                                                                                `path:"laser-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	OutputFrequency           *int32                                                                                                `path:"output-frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceivePower              *int32                                                                                                `path:"receive-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceivePowermW            *int32                                                                                                `path:"receive-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceiveSignalPower        *int32                                                                                                `path:"receive-signal-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitPower             *int32                                                                                                `path:"transmit-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitPowermW           *int32                                                                                                `path:"transmit-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitSignalPower       *int32                                                                                                `path:"transmit-signal-power" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) IsYANGGoStruct() {
}

// GetOrCreateLaneAlarmInfo retrieves the value of the LaneAlarmInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) GetOrCreateLaneAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo {
	if t.LaneAlarmInfo != nil {
		return t.LaneAlarmInfo
	}
	t.LaneAlarmInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo{}
	return t.LaneAlarmInfo
}

// GetLaneAlarmInfo returns the value of the LaneAlarmInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData. If the receiver or the field LaneAlarmInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) GetLaneAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo {
	if t != nil && t.LaneAlarmInfo != nil {
		return t.LaneAlarmInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo struct {
	HighLbc     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc     `path:"high-lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRxPower *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower `path:"high-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTxPower *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower `path:"high-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRxPower  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower  `path:"low-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTxPower  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower  `path:"low-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) IsYANGGoStruct() {
}

// GetOrCreateHighLbc retrieves the value of the HighLbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetOrCreateHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc {
	if t.HighLbc != nil {
		return t.HighLbc
	}
	t.HighLbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc{}
	return t.HighLbc
}

// GetOrCreateHighRxPower retrieves the value of the HighRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetOrCreateHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower {
	if t.HighRxPower != nil {
		return t.HighRxPower
	}
	t.HighRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower{}
	return t.HighRxPower
}

// GetOrCreateHighTxPower retrieves the value of the HighTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetOrCreateHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower {
	if t.HighTxPower != nil {
		return t.HighTxPower
	}
	t.HighTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower{}
	return t.HighTxPower
}

// GetOrCreateLowRxPower retrieves the value of the LowRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetOrCreateLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower {
	if t.LowRxPower != nil {
		return t.LowRxPower
	}
	t.LowRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower{}
	return t.LowRxPower
}

// GetOrCreateLowTxPower retrieves the value of the LowTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetOrCreateLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower {
	if t.LowTxPower != nil {
		return t.LowTxPower
	}
	t.LowTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower{}
	return t.LowTxPower
}

// GetHighLbc returns the value of the HighLbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo. If the receiver or the field HighLbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc {
	if t != nil && t.HighLbc != nil {
		return t.HighLbc
	}
	return nil
}

// GetHighRxPower returns the value of the HighRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo. If the receiver or the field HighRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower {
	if t != nil && t.HighRxPower != nil {
		return t.HighRxPower
	}
	return nil
}

// GetHighTxPower returns the value of the HighTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo. If the receiver or the field HighTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower {
	if t != nil && t.HighTxPower != nil {
		return t.HighTxPower
	}
	return nil
}

// GetLowRxPower returns the value of the LowRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo. If the receiver or the field LowRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower {
	if t != nil && t.LowRxPower != nil {
		return t.LowRxPower
	}
	return nil
}

// GetLowTxPower returns the value of the LowTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo. If the receiver or the field LowTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) GetLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower {
	if t != nil && t.LowTxPower != nil {
		return t.LowTxPower
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info/high-lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighLbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info/high-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info/high-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_HighTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info/low-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/lane-data/lane-alarm-info/low-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData_LaneAlarmInfo_LowTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/network-srlg-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo struct {
	NetworkSrlgArray []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray `path:"network-srlg-array" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/network-srlg-info/network-srlg-array YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray struct {
	NetworkSrlg []uint32 `path:"network-srlg" module:"Cisco-IOS-XR-controller-optics-oper"`
	SetNumber   *uint32  `path:"set-number" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo struct {
	AmpGainDegHigh        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh        `path:"amp-gain-deg-high" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpGainDegLow         *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow         `path:"amp-gain-deg-low" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpGainDegHigh  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh  `path:"egress-amp-gain-deg-high" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpGainDegLow   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow   `path:"egress-amp-gain-deg-low" module:"Cisco-IOS-XR-controller-optics-oper"`
	Hidgd                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd                 `path:"hidgd" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighLbc               *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc               `path:"high-lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRxPower           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower           `path:"high-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx0Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power          `path:"high-rx0-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx1Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power          `path:"high-rx1-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx2Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power          `path:"high-rx2-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx3Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power          `path:"high-rx3-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx4Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power          `path:"high-rx4-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx5Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power          `path:"high-rx5-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx6Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power          `path:"high-rx6-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx7Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power          `path:"high-rx7-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRx8Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power          `path:"high-rx8-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTemperature       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature       `path:"high-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTxPower           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower           `path:"high-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx0Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power          `path:"high-tx0-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx0Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc            `path:"high-tx0lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx1Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power          `path:"high-tx1-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx1Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc            `path:"high-tx1lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx2Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power          `path:"high-tx2-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx2Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc            `path:"high-tx2lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx3Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power          `path:"high-tx3-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx3Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc            `path:"high-tx3lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx4Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power          `path:"high-tx4-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx4Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc            `path:"high-tx4lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx5Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power          `path:"high-tx5-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx5Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc            `path:"high-tx5lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx6Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power          `path:"high-tx6-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx6Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc            `path:"high-tx6lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx7Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power          `path:"high-tx7-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx7Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc            `path:"high-tx7lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx8Power          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power          `path:"high-tx8-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTx8Lbc            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc            `path:"high-tx8lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighVoltage           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage           `path:"high-voltage" module:"Cisco-IOS-XR-controller-optics-oper"`
	ImpRemoval            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval            `path:"imp-removal" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpGainDegHigh *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh `path:"ingress-amp-gain-deg-high" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpGainDegLow  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow  `path:"ingress-amp-gain-deg-low" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRxPower            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower            `path:"low-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx0Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power           `path:"low-rx0-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx1Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power           `path:"low-rx1-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx2Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power           `path:"low-rx2-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx3Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power           `path:"low-rx3-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx4Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power           `path:"low-rx4-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx5Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power           `path:"low-rx5-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx6Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power           `path:"low-rx6-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx7Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power           `path:"low-rx7-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRx8Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power           `path:"low-rx8-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTemperature        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature        `path:"low-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTxPower            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower            `path:"low-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx0Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power           `path:"low-tx0-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx0Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc             `path:"low-tx0lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx1Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power           `path:"low-tx1-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx1Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc             `path:"low-tx1lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx2Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power           `path:"low-tx2-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx2Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc             `path:"low-tx2lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx3Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power           `path:"low-tx3-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx3Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc             `path:"low-tx3lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx4Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power           `path:"low-tx4-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx4Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc             `path:"low-tx4lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx5Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power           `path:"low-tx5-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx5Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc             `path:"low-tx5lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx6Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power           `path:"low-tx6-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx6Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc             `path:"low-tx6lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx7Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power           `path:"low-tx7-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx7Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc             `path:"low-tx7lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx8Power           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power           `path:"low-tx8-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTx8Lbc             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc             `path:"low-tx8lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowVoltage            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage            `path:"low-voltage" module:"Cisco-IOS-XR-controller-optics-oper"`
	Mea                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea                   `path:"mea" module:"Cisco-IOS-XR-controller-optics-oper"`
	Oorcd                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd                 `path:"oorcd" module:"Cisco-IOS-XR-controller-optics-oper"`
	Osnr                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr                  `path:"osnr" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLoc                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc                 `path:"rx-loc" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLol                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol                 `path:"rx-lol" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLos                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos                 `path:"rx-los" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxFault               *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault               `path:"tx-fault" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLol                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol                 `path:"tx-lol" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLos                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos                 `path:"tx-los" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxpwrMismatch         *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch         `path:"txpwr-mismatch" module:"Cisco-IOS-XR-controller-optics-oper"`
	Wvlool                *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool                `path:"wvlool" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) IsYANGGoStruct() {
}

// GetOrCreateAmpGainDegHigh retrieves the value of the AmpGainDegHigh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh {
	if t.AmpGainDegHigh != nil {
		return t.AmpGainDegHigh
	}
	t.AmpGainDegHigh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh{}
	return t.AmpGainDegHigh
}

// GetOrCreateAmpGainDegLow retrieves the value of the AmpGainDegLow field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow {
	if t.AmpGainDegLow != nil {
		return t.AmpGainDegLow
	}
	t.AmpGainDegLow = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow{}
	return t.AmpGainDegLow
}

// GetOrCreateEgressAmpGainDegHigh retrieves the value of the EgressAmpGainDegHigh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateEgressAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh {
	if t.EgressAmpGainDegHigh != nil {
		return t.EgressAmpGainDegHigh
	}
	t.EgressAmpGainDegHigh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh{}
	return t.EgressAmpGainDegHigh
}

// GetOrCreateEgressAmpGainDegLow retrieves the value of the EgressAmpGainDegLow field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateEgressAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow {
	if t.EgressAmpGainDegLow != nil {
		return t.EgressAmpGainDegLow
	}
	t.EgressAmpGainDegLow = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow{}
	return t.EgressAmpGainDegLow
}

// GetOrCreateHidgd retrieves the value of the Hidgd field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHidgd() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd {
	if t.Hidgd != nil {
		return t.Hidgd
	}
	t.Hidgd = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd{}
	return t.Hidgd
}

// GetOrCreateHighLbc retrieves the value of the HighLbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc {
	if t.HighLbc != nil {
		return t.HighLbc
	}
	t.HighLbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc{}
	return t.HighLbc
}

// GetOrCreateHighRxPower retrieves the value of the HighRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower {
	if t.HighRxPower != nil {
		return t.HighRxPower
	}
	t.HighRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower{}
	return t.HighRxPower
}

// GetOrCreateHighRx0Power retrieves the value of the HighRx0Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power {
	if t.HighRx0Power != nil {
		return t.HighRx0Power
	}
	t.HighRx0Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power{}
	return t.HighRx0Power
}

// GetOrCreateHighRx1Power retrieves the value of the HighRx1Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power {
	if t.HighRx1Power != nil {
		return t.HighRx1Power
	}
	t.HighRx1Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power{}
	return t.HighRx1Power
}

// GetOrCreateHighRx2Power retrieves the value of the HighRx2Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power {
	if t.HighRx2Power != nil {
		return t.HighRx2Power
	}
	t.HighRx2Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power{}
	return t.HighRx2Power
}

// GetOrCreateHighRx3Power retrieves the value of the HighRx3Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power {
	if t.HighRx3Power != nil {
		return t.HighRx3Power
	}
	t.HighRx3Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power{}
	return t.HighRx3Power
}

// GetOrCreateHighRx4Power retrieves the value of the HighRx4Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power {
	if t.HighRx4Power != nil {
		return t.HighRx4Power
	}
	t.HighRx4Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power{}
	return t.HighRx4Power
}

// GetOrCreateHighRx5Power retrieves the value of the HighRx5Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power {
	if t.HighRx5Power != nil {
		return t.HighRx5Power
	}
	t.HighRx5Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power{}
	return t.HighRx5Power
}

// GetOrCreateHighRx6Power retrieves the value of the HighRx6Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power {
	if t.HighRx6Power != nil {
		return t.HighRx6Power
	}
	t.HighRx6Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power{}
	return t.HighRx6Power
}

// GetOrCreateHighRx7Power retrieves the value of the HighRx7Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power {
	if t.HighRx7Power != nil {
		return t.HighRx7Power
	}
	t.HighRx7Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power{}
	return t.HighRx7Power
}

// GetOrCreateHighRx8Power retrieves the value of the HighRx8Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighRx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power {
	if t.HighRx8Power != nil {
		return t.HighRx8Power
	}
	t.HighRx8Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power{}
	return t.HighRx8Power
}

// GetOrCreateHighTemperature retrieves the value of the HighTemperature field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature {
	if t.HighTemperature != nil {
		return t.HighTemperature
	}
	t.HighTemperature = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature{}
	return t.HighTemperature
}

// GetOrCreateHighTxPower retrieves the value of the HighTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower {
	if t.HighTxPower != nil {
		return t.HighTxPower
	}
	t.HighTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower{}
	return t.HighTxPower
}

// GetOrCreateHighTx0Power retrieves the value of the HighTx0Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power {
	if t.HighTx0Power != nil {
		return t.HighTx0Power
	}
	t.HighTx0Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power{}
	return t.HighTx0Power
}

// GetOrCreateHighTx0Lbc retrieves the value of the HighTx0Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx0Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc {
	if t.HighTx0Lbc != nil {
		return t.HighTx0Lbc
	}
	t.HighTx0Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc{}
	return t.HighTx0Lbc
}

// GetOrCreateHighTx1Power retrieves the value of the HighTx1Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power {
	if t.HighTx1Power != nil {
		return t.HighTx1Power
	}
	t.HighTx1Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power{}
	return t.HighTx1Power
}

// GetOrCreateHighTx1Lbc retrieves the value of the HighTx1Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx1Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc {
	if t.HighTx1Lbc != nil {
		return t.HighTx1Lbc
	}
	t.HighTx1Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc{}
	return t.HighTx1Lbc
}

// GetOrCreateHighTx2Power retrieves the value of the HighTx2Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power {
	if t.HighTx2Power != nil {
		return t.HighTx2Power
	}
	t.HighTx2Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power{}
	return t.HighTx2Power
}

// GetOrCreateHighTx2Lbc retrieves the value of the HighTx2Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx2Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc {
	if t.HighTx2Lbc != nil {
		return t.HighTx2Lbc
	}
	t.HighTx2Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc{}
	return t.HighTx2Lbc
}

// GetOrCreateHighTx3Power retrieves the value of the HighTx3Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power {
	if t.HighTx3Power != nil {
		return t.HighTx3Power
	}
	t.HighTx3Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power{}
	return t.HighTx3Power
}

// GetOrCreateHighTx3Lbc retrieves the value of the HighTx3Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx3Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc {
	if t.HighTx3Lbc != nil {
		return t.HighTx3Lbc
	}
	t.HighTx3Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc{}
	return t.HighTx3Lbc
}

// GetOrCreateHighTx4Power retrieves the value of the HighTx4Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power {
	if t.HighTx4Power != nil {
		return t.HighTx4Power
	}
	t.HighTx4Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power{}
	return t.HighTx4Power
}

// GetOrCreateHighTx4Lbc retrieves the value of the HighTx4Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx4Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc {
	if t.HighTx4Lbc != nil {
		return t.HighTx4Lbc
	}
	t.HighTx4Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc{}
	return t.HighTx4Lbc
}

// GetOrCreateHighTx5Power retrieves the value of the HighTx5Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power {
	if t.HighTx5Power != nil {
		return t.HighTx5Power
	}
	t.HighTx5Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power{}
	return t.HighTx5Power
}

// GetOrCreateHighTx5Lbc retrieves the value of the HighTx5Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx5Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc {
	if t.HighTx5Lbc != nil {
		return t.HighTx5Lbc
	}
	t.HighTx5Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc{}
	return t.HighTx5Lbc
}

// GetOrCreateHighTx6Power retrieves the value of the HighTx6Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power {
	if t.HighTx6Power != nil {
		return t.HighTx6Power
	}
	t.HighTx6Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power{}
	return t.HighTx6Power
}

// GetOrCreateHighTx6Lbc retrieves the value of the HighTx6Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx6Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc {
	if t.HighTx6Lbc != nil {
		return t.HighTx6Lbc
	}
	t.HighTx6Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc{}
	return t.HighTx6Lbc
}

// GetOrCreateHighTx7Power retrieves the value of the HighTx7Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power {
	if t.HighTx7Power != nil {
		return t.HighTx7Power
	}
	t.HighTx7Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power{}
	return t.HighTx7Power
}

// GetOrCreateHighTx7Lbc retrieves the value of the HighTx7Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx7Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc {
	if t.HighTx7Lbc != nil {
		return t.HighTx7Lbc
	}
	t.HighTx7Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc{}
	return t.HighTx7Lbc
}

// GetOrCreateHighTx8Power retrieves the value of the HighTx8Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power {
	if t.HighTx8Power != nil {
		return t.HighTx8Power
	}
	t.HighTx8Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power{}
	return t.HighTx8Power
}

// GetOrCreateHighTx8Lbc retrieves the value of the HighTx8Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighTx8Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc {
	if t.HighTx8Lbc != nil {
		return t.HighTx8Lbc
	}
	t.HighTx8Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc{}
	return t.HighTx8Lbc
}

// GetOrCreateHighVoltage retrieves the value of the HighVoltage field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateHighVoltage() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage {
	if t.HighVoltage != nil {
		return t.HighVoltage
	}
	t.HighVoltage = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage{}
	return t.HighVoltage
}

// GetOrCreateImpRemoval retrieves the value of the ImpRemoval field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateImpRemoval() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval {
	if t.ImpRemoval != nil {
		return t.ImpRemoval
	}
	t.ImpRemoval = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval{}
	return t.ImpRemoval
}

// GetOrCreateIngressAmpGainDegHigh retrieves the value of the IngressAmpGainDegHigh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateIngressAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh {
	if t.IngressAmpGainDegHigh != nil {
		return t.IngressAmpGainDegHigh
	}
	t.IngressAmpGainDegHigh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh{}
	return t.IngressAmpGainDegHigh
}

// GetOrCreateIngressAmpGainDegLow retrieves the value of the IngressAmpGainDegLow field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateIngressAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow {
	if t.IngressAmpGainDegLow != nil {
		return t.IngressAmpGainDegLow
	}
	t.IngressAmpGainDegLow = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow{}
	return t.IngressAmpGainDegLow
}

// GetOrCreateLowRxPower retrieves the value of the LowRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower {
	if t.LowRxPower != nil {
		return t.LowRxPower
	}
	t.LowRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower{}
	return t.LowRxPower
}

// GetOrCreateLowRx0Power retrieves the value of the LowRx0Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power {
	if t.LowRx0Power != nil {
		return t.LowRx0Power
	}
	t.LowRx0Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power{}
	return t.LowRx0Power
}

// GetOrCreateLowRx1Power retrieves the value of the LowRx1Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power {
	if t.LowRx1Power != nil {
		return t.LowRx1Power
	}
	t.LowRx1Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power{}
	return t.LowRx1Power
}

// GetOrCreateLowRx2Power retrieves the value of the LowRx2Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power {
	if t.LowRx2Power != nil {
		return t.LowRx2Power
	}
	t.LowRx2Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power{}
	return t.LowRx2Power
}

// GetOrCreateLowRx3Power retrieves the value of the LowRx3Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power {
	if t.LowRx3Power != nil {
		return t.LowRx3Power
	}
	t.LowRx3Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power{}
	return t.LowRx3Power
}

// GetOrCreateLowRx4Power retrieves the value of the LowRx4Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power {
	if t.LowRx4Power != nil {
		return t.LowRx4Power
	}
	t.LowRx4Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power{}
	return t.LowRx4Power
}

// GetOrCreateLowRx5Power retrieves the value of the LowRx5Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power {
	if t.LowRx5Power != nil {
		return t.LowRx5Power
	}
	t.LowRx5Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power{}
	return t.LowRx5Power
}

// GetOrCreateLowRx6Power retrieves the value of the LowRx6Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power {
	if t.LowRx6Power != nil {
		return t.LowRx6Power
	}
	t.LowRx6Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power{}
	return t.LowRx6Power
}

// GetOrCreateLowRx7Power retrieves the value of the LowRx7Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power {
	if t.LowRx7Power != nil {
		return t.LowRx7Power
	}
	t.LowRx7Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power{}
	return t.LowRx7Power
}

// GetOrCreateLowRx8Power retrieves the value of the LowRx8Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowRx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power {
	if t.LowRx8Power != nil {
		return t.LowRx8Power
	}
	t.LowRx8Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power{}
	return t.LowRx8Power
}

// GetOrCreateLowTemperature retrieves the value of the LowTemperature field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature {
	if t.LowTemperature != nil {
		return t.LowTemperature
	}
	t.LowTemperature = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature{}
	return t.LowTemperature
}

// GetOrCreateLowTxPower retrieves the value of the LowTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower {
	if t.LowTxPower != nil {
		return t.LowTxPower
	}
	t.LowTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower{}
	return t.LowTxPower
}

// GetOrCreateLowTx0Power retrieves the value of the LowTx0Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power {
	if t.LowTx0Power != nil {
		return t.LowTx0Power
	}
	t.LowTx0Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power{}
	return t.LowTx0Power
}

// GetOrCreateLowTx0Lbc retrieves the value of the LowTx0Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx0Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc {
	if t.LowTx0Lbc != nil {
		return t.LowTx0Lbc
	}
	t.LowTx0Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc{}
	return t.LowTx0Lbc
}

// GetOrCreateLowTx1Power retrieves the value of the LowTx1Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power {
	if t.LowTx1Power != nil {
		return t.LowTx1Power
	}
	t.LowTx1Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power{}
	return t.LowTx1Power
}

// GetOrCreateLowTx1Lbc retrieves the value of the LowTx1Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx1Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc {
	if t.LowTx1Lbc != nil {
		return t.LowTx1Lbc
	}
	t.LowTx1Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc{}
	return t.LowTx1Lbc
}

// GetOrCreateLowTx2Power retrieves the value of the LowTx2Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power {
	if t.LowTx2Power != nil {
		return t.LowTx2Power
	}
	t.LowTx2Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power{}
	return t.LowTx2Power
}

// GetOrCreateLowTx2Lbc retrieves the value of the LowTx2Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx2Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc {
	if t.LowTx2Lbc != nil {
		return t.LowTx2Lbc
	}
	t.LowTx2Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc{}
	return t.LowTx2Lbc
}

// GetOrCreateLowTx3Power retrieves the value of the LowTx3Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power {
	if t.LowTx3Power != nil {
		return t.LowTx3Power
	}
	t.LowTx3Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power{}
	return t.LowTx3Power
}

// GetOrCreateLowTx3Lbc retrieves the value of the LowTx3Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx3Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc {
	if t.LowTx3Lbc != nil {
		return t.LowTx3Lbc
	}
	t.LowTx3Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc{}
	return t.LowTx3Lbc
}

// GetOrCreateLowTx4Power retrieves the value of the LowTx4Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power {
	if t.LowTx4Power != nil {
		return t.LowTx4Power
	}
	t.LowTx4Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power{}
	return t.LowTx4Power
}

// GetOrCreateLowTx4Lbc retrieves the value of the LowTx4Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx4Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc {
	if t.LowTx4Lbc != nil {
		return t.LowTx4Lbc
	}
	t.LowTx4Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc{}
	return t.LowTx4Lbc
}

// GetOrCreateLowTx5Power retrieves the value of the LowTx5Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power {
	if t.LowTx5Power != nil {
		return t.LowTx5Power
	}
	t.LowTx5Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power{}
	return t.LowTx5Power
}

// GetOrCreateLowTx5Lbc retrieves the value of the LowTx5Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx5Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc {
	if t.LowTx5Lbc != nil {
		return t.LowTx5Lbc
	}
	t.LowTx5Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc{}
	return t.LowTx5Lbc
}

// GetOrCreateLowTx6Power retrieves the value of the LowTx6Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power {
	if t.LowTx6Power != nil {
		return t.LowTx6Power
	}
	t.LowTx6Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power{}
	return t.LowTx6Power
}

// GetOrCreateLowTx6Lbc retrieves the value of the LowTx6Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx6Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc {
	if t.LowTx6Lbc != nil {
		return t.LowTx6Lbc
	}
	t.LowTx6Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc{}
	return t.LowTx6Lbc
}

// GetOrCreateLowTx7Power retrieves the value of the LowTx7Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power {
	if t.LowTx7Power != nil {
		return t.LowTx7Power
	}
	t.LowTx7Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power{}
	return t.LowTx7Power
}

// GetOrCreateLowTx7Lbc retrieves the value of the LowTx7Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx7Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc {
	if t.LowTx7Lbc != nil {
		return t.LowTx7Lbc
	}
	t.LowTx7Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc{}
	return t.LowTx7Lbc
}

// GetOrCreateLowTx8Power retrieves the value of the LowTx8Power field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power {
	if t.LowTx8Power != nil {
		return t.LowTx8Power
	}
	t.LowTx8Power = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power{}
	return t.LowTx8Power
}

// GetOrCreateLowTx8Lbc retrieves the value of the LowTx8Lbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowTx8Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc {
	if t.LowTx8Lbc != nil {
		return t.LowTx8Lbc
	}
	t.LowTx8Lbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc{}
	return t.LowTx8Lbc
}

// GetOrCreateLowVoltage retrieves the value of the LowVoltage field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateLowVoltage() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage {
	if t.LowVoltage != nil {
		return t.LowVoltage
	}
	t.LowVoltage = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage{}
	return t.LowVoltage
}

// GetOrCreateMea retrieves the value of the Mea field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateMea() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea {
	if t.Mea != nil {
		return t.Mea
	}
	t.Mea = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea{}
	return t.Mea
}

// GetOrCreateOorcd retrieves the value of the Oorcd field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateOorcd() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd {
	if t.Oorcd != nil {
		return t.Oorcd
	}
	t.Oorcd = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd{}
	return t.Oorcd
}

// GetOrCreateOsnr retrieves the value of the Osnr field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateOsnr() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr {
	if t.Osnr != nil {
		return t.Osnr
	}
	t.Osnr = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr{}
	return t.Osnr
}

// GetOrCreateRxLoc retrieves the value of the RxLoc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateRxLoc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc {
	if t.RxLoc != nil {
		return t.RxLoc
	}
	t.RxLoc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc{}
	return t.RxLoc
}

// GetOrCreateRxLol retrieves the value of the RxLol field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateRxLol() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol {
	if t.RxLol != nil {
		return t.RxLol
	}
	t.RxLol = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol{}
	return t.RxLol
}

// GetOrCreateRxLos retrieves the value of the RxLos field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateRxLos() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos {
	if t.RxLos != nil {
		return t.RxLos
	}
	t.RxLos = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos{}
	return t.RxLos
}

// GetOrCreateTxFault retrieves the value of the TxFault field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateTxFault() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault {
	if t.TxFault != nil {
		return t.TxFault
	}
	t.TxFault = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault{}
	return t.TxFault
}

// GetOrCreateTxLol retrieves the value of the TxLol field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateTxLol() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol {
	if t.TxLol != nil {
		return t.TxLol
	}
	t.TxLol = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol{}
	return t.TxLol
}

// GetOrCreateTxLos retrieves the value of the TxLos field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateTxLos() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos {
	if t.TxLos != nil {
		return t.TxLos
	}
	t.TxLos = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos{}
	return t.TxLos
}

// GetOrCreateTxpwrMismatch retrieves the value of the TxpwrMismatch field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateTxpwrMismatch() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch {
	if t.TxpwrMismatch != nil {
		return t.TxpwrMismatch
	}
	t.TxpwrMismatch = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch{}
	return t.TxpwrMismatch
}

// GetOrCreateWvlool retrieves the value of the Wvlool field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOrCreateWvlool() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool {
	if t.Wvlool != nil {
		return t.Wvlool
	}
	t.Wvlool = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool{}
	return t.Wvlool
}

// GetAmpGainDegHigh returns the value of the AmpGainDegHigh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field AmpGainDegHigh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh {
	if t != nil && t.AmpGainDegHigh != nil {
		return t.AmpGainDegHigh
	}
	return nil
}

// GetAmpGainDegLow returns the value of the AmpGainDegLow struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field AmpGainDegLow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow {
	if t != nil && t.AmpGainDegLow != nil {
		return t.AmpGainDegLow
	}
	return nil
}

// GetEgressAmpGainDegHigh returns the value of the EgressAmpGainDegHigh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field EgressAmpGainDegHigh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetEgressAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh {
	if t != nil && t.EgressAmpGainDegHigh != nil {
		return t.EgressAmpGainDegHigh
	}
	return nil
}

// GetEgressAmpGainDegLow returns the value of the EgressAmpGainDegLow struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field EgressAmpGainDegLow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetEgressAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow {
	if t != nil && t.EgressAmpGainDegLow != nil {
		return t.EgressAmpGainDegLow
	}
	return nil
}

// GetHidgd returns the value of the Hidgd struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field Hidgd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHidgd() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd {
	if t != nil && t.Hidgd != nil {
		return t.Hidgd
	}
	return nil
}

// GetHighLbc returns the value of the HighLbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighLbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc {
	if t != nil && t.HighLbc != nil {
		return t.HighLbc
	}
	return nil
}

// GetHighRxPower returns the value of the HighRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower {
	if t != nil && t.HighRxPower != nil {
		return t.HighRxPower
	}
	return nil
}

// GetHighRx0Power returns the value of the HighRx0Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx0Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power {
	if t != nil && t.HighRx0Power != nil {
		return t.HighRx0Power
	}
	return nil
}

// GetHighRx1Power returns the value of the HighRx1Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx1Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power {
	if t != nil && t.HighRx1Power != nil {
		return t.HighRx1Power
	}
	return nil
}

// GetHighRx2Power returns the value of the HighRx2Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx2Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power {
	if t != nil && t.HighRx2Power != nil {
		return t.HighRx2Power
	}
	return nil
}

// GetHighRx3Power returns the value of the HighRx3Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx3Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power {
	if t != nil && t.HighRx3Power != nil {
		return t.HighRx3Power
	}
	return nil
}

// GetHighRx4Power returns the value of the HighRx4Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx4Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power {
	if t != nil && t.HighRx4Power != nil {
		return t.HighRx4Power
	}
	return nil
}

// GetHighRx5Power returns the value of the HighRx5Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx5Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power {
	if t != nil && t.HighRx5Power != nil {
		return t.HighRx5Power
	}
	return nil
}

// GetHighRx6Power returns the value of the HighRx6Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx6Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power {
	if t != nil && t.HighRx6Power != nil {
		return t.HighRx6Power
	}
	return nil
}

// GetHighRx7Power returns the value of the HighRx7Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx7Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power {
	if t != nil && t.HighRx7Power != nil {
		return t.HighRx7Power
	}
	return nil
}

// GetHighRx8Power returns the value of the HighRx8Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighRx8Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighRx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power {
	if t != nil && t.HighRx8Power != nil {
		return t.HighRx8Power
	}
	return nil
}

// GetHighTemperature returns the value of the HighTemperature struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature {
	if t != nil && t.HighTemperature != nil {
		return t.HighTemperature
	}
	return nil
}

// GetHighTxPower returns the value of the HighTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower {
	if t != nil && t.HighTxPower != nil {
		return t.HighTxPower
	}
	return nil
}

// GetHighTx0Power returns the value of the HighTx0Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx0Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power {
	if t != nil && t.HighTx0Power != nil {
		return t.HighTx0Power
	}
	return nil
}

// GetHighTx0Lbc returns the value of the HighTx0Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx0Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx0Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc {
	if t != nil && t.HighTx0Lbc != nil {
		return t.HighTx0Lbc
	}
	return nil
}

// GetHighTx1Power returns the value of the HighTx1Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx1Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power {
	if t != nil && t.HighTx1Power != nil {
		return t.HighTx1Power
	}
	return nil
}

// GetHighTx1Lbc returns the value of the HighTx1Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx1Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx1Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc {
	if t != nil && t.HighTx1Lbc != nil {
		return t.HighTx1Lbc
	}
	return nil
}

// GetHighTx2Power returns the value of the HighTx2Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx2Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power {
	if t != nil && t.HighTx2Power != nil {
		return t.HighTx2Power
	}
	return nil
}

// GetHighTx2Lbc returns the value of the HighTx2Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx2Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx2Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc {
	if t != nil && t.HighTx2Lbc != nil {
		return t.HighTx2Lbc
	}
	return nil
}

// GetHighTx3Power returns the value of the HighTx3Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx3Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power {
	if t != nil && t.HighTx3Power != nil {
		return t.HighTx3Power
	}
	return nil
}

// GetHighTx3Lbc returns the value of the HighTx3Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx3Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx3Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc {
	if t != nil && t.HighTx3Lbc != nil {
		return t.HighTx3Lbc
	}
	return nil
}

// GetHighTx4Power returns the value of the HighTx4Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx4Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power {
	if t != nil && t.HighTx4Power != nil {
		return t.HighTx4Power
	}
	return nil
}

// GetHighTx4Lbc returns the value of the HighTx4Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx4Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx4Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc {
	if t != nil && t.HighTx4Lbc != nil {
		return t.HighTx4Lbc
	}
	return nil
}

// GetHighTx5Power returns the value of the HighTx5Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx5Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power {
	if t != nil && t.HighTx5Power != nil {
		return t.HighTx5Power
	}
	return nil
}

// GetHighTx5Lbc returns the value of the HighTx5Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx5Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx5Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc {
	if t != nil && t.HighTx5Lbc != nil {
		return t.HighTx5Lbc
	}
	return nil
}

// GetHighTx6Power returns the value of the HighTx6Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx6Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power {
	if t != nil && t.HighTx6Power != nil {
		return t.HighTx6Power
	}
	return nil
}

// GetHighTx6Lbc returns the value of the HighTx6Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx6Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx6Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc {
	if t != nil && t.HighTx6Lbc != nil {
		return t.HighTx6Lbc
	}
	return nil
}

// GetHighTx7Power returns the value of the HighTx7Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx7Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power {
	if t != nil && t.HighTx7Power != nil {
		return t.HighTx7Power
	}
	return nil
}

// GetHighTx7Lbc returns the value of the HighTx7Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx7Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx7Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc {
	if t != nil && t.HighTx7Lbc != nil {
		return t.HighTx7Lbc
	}
	return nil
}

// GetHighTx8Power returns the value of the HighTx8Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx8Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power {
	if t != nil && t.HighTx8Power != nil {
		return t.HighTx8Power
	}
	return nil
}

// GetHighTx8Lbc returns the value of the HighTx8Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighTx8Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighTx8Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc {
	if t != nil && t.HighTx8Lbc != nil {
		return t.HighTx8Lbc
	}
	return nil
}

// GetHighVoltage returns the value of the HighVoltage struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field HighVoltage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetHighVoltage() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage {
	if t != nil && t.HighVoltage != nil {
		return t.HighVoltage
	}
	return nil
}

// GetImpRemoval returns the value of the ImpRemoval struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field ImpRemoval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetImpRemoval() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval {
	if t != nil && t.ImpRemoval != nil {
		return t.ImpRemoval
	}
	return nil
}

// GetIngressAmpGainDegHigh returns the value of the IngressAmpGainDegHigh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field IngressAmpGainDegHigh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetIngressAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh {
	if t != nil && t.IngressAmpGainDegHigh != nil {
		return t.IngressAmpGainDegHigh
	}
	return nil
}

// GetIngressAmpGainDegLow returns the value of the IngressAmpGainDegLow struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field IngressAmpGainDegLow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetIngressAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow {
	if t != nil && t.IngressAmpGainDegLow != nil {
		return t.IngressAmpGainDegLow
	}
	return nil
}

// GetLowRxPower returns the value of the LowRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower {
	if t != nil && t.LowRxPower != nil {
		return t.LowRxPower
	}
	return nil
}

// GetLowRx0Power returns the value of the LowRx0Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx0Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power {
	if t != nil && t.LowRx0Power != nil {
		return t.LowRx0Power
	}
	return nil
}

// GetLowRx1Power returns the value of the LowRx1Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx1Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power {
	if t != nil && t.LowRx1Power != nil {
		return t.LowRx1Power
	}
	return nil
}

// GetLowRx2Power returns the value of the LowRx2Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx2Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power {
	if t != nil && t.LowRx2Power != nil {
		return t.LowRx2Power
	}
	return nil
}

// GetLowRx3Power returns the value of the LowRx3Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx3Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power {
	if t != nil && t.LowRx3Power != nil {
		return t.LowRx3Power
	}
	return nil
}

// GetLowRx4Power returns the value of the LowRx4Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx4Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power {
	if t != nil && t.LowRx4Power != nil {
		return t.LowRx4Power
	}
	return nil
}

// GetLowRx5Power returns the value of the LowRx5Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx5Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power {
	if t != nil && t.LowRx5Power != nil {
		return t.LowRx5Power
	}
	return nil
}

// GetLowRx6Power returns the value of the LowRx6Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx6Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power {
	if t != nil && t.LowRx6Power != nil {
		return t.LowRx6Power
	}
	return nil
}

// GetLowRx7Power returns the value of the LowRx7Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx7Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power {
	if t != nil && t.LowRx7Power != nil {
		return t.LowRx7Power
	}
	return nil
}

// GetLowRx8Power returns the value of the LowRx8Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowRx8Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowRx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power {
	if t != nil && t.LowRx8Power != nil {
		return t.LowRx8Power
	}
	return nil
}

// GetLowTemperature returns the value of the LowTemperature struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature {
	if t != nil && t.LowTemperature != nil {
		return t.LowTemperature
	}
	return nil
}

// GetLowTxPower returns the value of the LowTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower {
	if t != nil && t.LowTxPower != nil {
		return t.LowTxPower
	}
	return nil
}

// GetLowTx0Power returns the value of the LowTx0Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx0Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx0Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power {
	if t != nil && t.LowTx0Power != nil {
		return t.LowTx0Power
	}
	return nil
}

// GetLowTx0Lbc returns the value of the LowTx0Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx0Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx0Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc {
	if t != nil && t.LowTx0Lbc != nil {
		return t.LowTx0Lbc
	}
	return nil
}

// GetLowTx1Power returns the value of the LowTx1Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx1Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx1Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power {
	if t != nil && t.LowTx1Power != nil {
		return t.LowTx1Power
	}
	return nil
}

// GetLowTx1Lbc returns the value of the LowTx1Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx1Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx1Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc {
	if t != nil && t.LowTx1Lbc != nil {
		return t.LowTx1Lbc
	}
	return nil
}

// GetLowTx2Power returns the value of the LowTx2Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx2Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx2Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power {
	if t != nil && t.LowTx2Power != nil {
		return t.LowTx2Power
	}
	return nil
}

// GetLowTx2Lbc returns the value of the LowTx2Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx2Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx2Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc {
	if t != nil && t.LowTx2Lbc != nil {
		return t.LowTx2Lbc
	}
	return nil
}

// GetLowTx3Power returns the value of the LowTx3Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx3Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx3Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power {
	if t != nil && t.LowTx3Power != nil {
		return t.LowTx3Power
	}
	return nil
}

// GetLowTx3Lbc returns the value of the LowTx3Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx3Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx3Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc {
	if t != nil && t.LowTx3Lbc != nil {
		return t.LowTx3Lbc
	}
	return nil
}

// GetLowTx4Power returns the value of the LowTx4Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx4Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx4Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power {
	if t != nil && t.LowTx4Power != nil {
		return t.LowTx4Power
	}
	return nil
}

// GetLowTx4Lbc returns the value of the LowTx4Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx4Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx4Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc {
	if t != nil && t.LowTx4Lbc != nil {
		return t.LowTx4Lbc
	}
	return nil
}

// GetLowTx5Power returns the value of the LowTx5Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx5Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx5Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power {
	if t != nil && t.LowTx5Power != nil {
		return t.LowTx5Power
	}
	return nil
}

// GetLowTx5Lbc returns the value of the LowTx5Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx5Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx5Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc {
	if t != nil && t.LowTx5Lbc != nil {
		return t.LowTx5Lbc
	}
	return nil
}

// GetLowTx6Power returns the value of the LowTx6Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx6Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx6Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power {
	if t != nil && t.LowTx6Power != nil {
		return t.LowTx6Power
	}
	return nil
}

// GetLowTx6Lbc returns the value of the LowTx6Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx6Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx6Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc {
	if t != nil && t.LowTx6Lbc != nil {
		return t.LowTx6Lbc
	}
	return nil
}

// GetLowTx7Power returns the value of the LowTx7Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx7Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx7Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power {
	if t != nil && t.LowTx7Power != nil {
		return t.LowTx7Power
	}
	return nil
}

// GetLowTx7Lbc returns the value of the LowTx7Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx7Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx7Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc {
	if t != nil && t.LowTx7Lbc != nil {
		return t.LowTx7Lbc
	}
	return nil
}

// GetLowTx8Power returns the value of the LowTx8Power struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx8Power is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx8Power() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power {
	if t != nil && t.LowTx8Power != nil {
		return t.LowTx8Power
	}
	return nil
}

// GetLowTx8Lbc returns the value of the LowTx8Lbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowTx8Lbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowTx8Lbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc {
	if t != nil && t.LowTx8Lbc != nil {
		return t.LowTx8Lbc
	}
	return nil
}

// GetLowVoltage returns the value of the LowVoltage struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field LowVoltage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetLowVoltage() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage {
	if t != nil && t.LowVoltage != nil {
		return t.LowVoltage
	}
	return nil
}

// GetMea returns the value of the Mea struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field Mea is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetMea() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea {
	if t != nil && t.Mea != nil {
		return t.Mea
	}
	return nil
}

// GetOorcd returns the value of the Oorcd struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field Oorcd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOorcd() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd {
	if t != nil && t.Oorcd != nil {
		return t.Oorcd
	}
	return nil
}

// GetOsnr returns the value of the Osnr struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field Osnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetOsnr() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr {
	if t != nil && t.Osnr != nil {
		return t.Osnr
	}
	return nil
}

// GetRxLoc returns the value of the RxLoc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field RxLoc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetRxLoc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc {
	if t != nil && t.RxLoc != nil {
		return t.RxLoc
	}
	return nil
}

// GetRxLol returns the value of the RxLol struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field RxLol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetRxLol() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol {
	if t != nil && t.RxLol != nil {
		return t.RxLol
	}
	return nil
}

// GetRxLos returns the value of the RxLos struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field RxLos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetRxLos() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos {
	if t != nil && t.RxLos != nil {
		return t.RxLos
	}
	return nil
}

// GetTxFault returns the value of the TxFault struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field TxFault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetTxFault() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault {
	if t != nil && t.TxFault != nil {
		return t.TxFault
	}
	return nil
}

// GetTxLol returns the value of the TxLol struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field TxLol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetTxLol() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol {
	if t != nil && t.TxLol != nil {
		return t.TxLol
	}
	return nil
}

// GetTxLos returns the value of the TxLos struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field TxLos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetTxLos() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos {
	if t != nil && t.TxLos != nil {
		return t.TxLos
	}
	return nil
}

// GetTxpwrMismatch returns the value of the TxpwrMismatch struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field TxpwrMismatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetTxpwrMismatch() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch {
	if t != nil && t.TxpwrMismatch != nil {
		return t.TxpwrMismatch
	}
	return nil
}

// GetWvlool returns the value of the Wvlool struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo. If the receiver or the field Wvlool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) GetWvlool() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool {
	if t != nil && t.Wvlool != nil {
		return t.Wvlool
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/amp-gain-deg-high YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegHigh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/amp-gain-deg-low YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_AmpGainDegLow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/egress-amp-gain-deg-high YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegHigh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/egress-amp-gain-deg-low YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_EgressAmpGainDegLow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/hidgd YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Hidgd) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighLbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx0-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx0Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx1-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx1Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx2-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx2Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx3-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx3Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx4-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx4Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx5-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx5Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx6-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx6Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx7-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx7Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx8-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRx8Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-temperature YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTemperature) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx0lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx0-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx0Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx1lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx1-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx1Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx2lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx2-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx2Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx3lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx3-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx3Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx4lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx4-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx4Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx5lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx5-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx5Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx6lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx6-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx6Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx7lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx7-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx7Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx8lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx8-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTx8Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/high-voltage YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_HighVoltage) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/imp-removal YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_ImpRemoval) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/ingress-amp-gain-deg-high YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegHigh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/ingress-amp-gain-deg-low YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_IngressAmpGainDegLow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx0-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx0Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx1-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx1Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx2-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx2Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx3-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx3Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx4-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx4Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx5-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx5Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}
