/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub2.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx6-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx6Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx7-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx7Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx8-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRx8Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-temperature YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTemperature) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx0lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx0-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx0Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx1lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx1-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx1Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx2lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx2-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx2Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx3lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx3-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx3Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx4lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx4-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx4Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx5lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx5-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx5Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx6lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx6-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx6Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx7lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx7-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx7Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx8lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Lbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx8-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTx8Power) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/low-voltage YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_LowVoltage) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/mea YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Mea) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/oorcd YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Oorcd) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/osnr YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Osnr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/rx-loc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLoc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/rx-lol YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLol) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/rx-los YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_RxLos) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/tx-fault YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxFault) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/tx-lol YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLol) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/tx-los YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxLos) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/txpwr-mismatch YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_TxpwrMismatch) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/optics-alarm-info/wvlool YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo_Wvlool) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo struct {
	AmpGainDegHigh              *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh              `path:"amp-gain-deg-high" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpGainDegLow               *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow               `path:"amp-gain-deg-low" module:"Cisco-IOS-XR-controller-optics-oper"`
	AutoAmpliCtrlConfigMismatch *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch `path:"auto-ampli-ctrl-config-mismatch" module:"Cisco-IOS-XR-controller-optics-oper"`
	AutoAmpliCtrlDisabled       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled       `path:"auto-ampli-ctrl-disabled" module:"Cisco-IOS-XR-controller-optics-oper"`
	AutoAmpliCtrlRunning        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning        `path:"auto-ampli-ctrl-running" module:"Cisco-IOS-XR-controller-optics-oper"`
	AutoLaserShut               *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut               `path:"auto-laser-shut" module:"Cisco-IOS-XR-controller-optics-oper"`
	AutoPowerRed                *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed                `path:"auto-power-red" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRxPower                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower                  `path:"low-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTxPower                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower                  `path:"low-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLoc                       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc                       `path:"rx-loc" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLosP                      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP                      `path:"rx-los-p" module:"Cisco-IOS-XR-controller-optics-oper"`
	SwitchToProtect             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect             `path:"switch-to-protect" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) IsYANGGoStruct() {
}

// GetOrCreateAmpGainDegHigh retrieves the value of the AmpGainDegHigh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh {
	if t.AmpGainDegHigh != nil {
		return t.AmpGainDegHigh
	}
	t.AmpGainDegHigh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh{}
	return t.AmpGainDegHigh
}

// GetOrCreateAmpGainDegLow retrieves the value of the AmpGainDegLow field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow {
	if t.AmpGainDegLow != nil {
		return t.AmpGainDegLow
	}
	t.AmpGainDegLow = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow{}
	return t.AmpGainDegLow
}

// GetOrCreateAutoAmpliCtrlConfigMismatch retrieves the value of the AutoAmpliCtrlConfigMismatch field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAutoAmpliCtrlConfigMismatch() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch {
	if t.AutoAmpliCtrlConfigMismatch != nil {
		return t.AutoAmpliCtrlConfigMismatch
	}
	t.AutoAmpliCtrlConfigMismatch = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch{}
	return t.AutoAmpliCtrlConfigMismatch
}

// GetOrCreateAutoAmpliCtrlDisabled retrieves the value of the AutoAmpliCtrlDisabled field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAutoAmpliCtrlDisabled() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled {
	if t.AutoAmpliCtrlDisabled != nil {
		return t.AutoAmpliCtrlDisabled
	}
	t.AutoAmpliCtrlDisabled = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled{}
	return t.AutoAmpliCtrlDisabled
}

// GetOrCreateAutoAmpliCtrlRunning retrieves the value of the AutoAmpliCtrlRunning field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAutoAmpliCtrlRunning() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning {
	if t.AutoAmpliCtrlRunning != nil {
		return t.AutoAmpliCtrlRunning
	}
	t.AutoAmpliCtrlRunning = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning{}
	return t.AutoAmpliCtrlRunning
}

// GetOrCreateAutoLaserShut retrieves the value of the AutoLaserShut field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAutoLaserShut() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut {
	if t.AutoLaserShut != nil {
		return t.AutoLaserShut
	}
	t.AutoLaserShut = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut{}
	return t.AutoLaserShut
}

// GetOrCreateAutoPowerRed retrieves the value of the AutoPowerRed field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateAutoPowerRed() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed {
	if t.AutoPowerRed != nil {
		return t.AutoPowerRed
	}
	t.AutoPowerRed = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed{}
	return t.AutoPowerRed
}

// GetOrCreateLowRxPower retrieves the value of the LowRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower {
	if t.LowRxPower != nil {
		return t.LowRxPower
	}
	t.LowRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower{}
	return t.LowRxPower
}

// GetOrCreateLowTxPower retrieves the value of the LowTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower {
	if t.LowTxPower != nil {
		return t.LowTxPower
	}
	t.LowTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower{}
	return t.LowTxPower
}

// GetOrCreateRxLoc retrieves the value of the RxLoc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateRxLoc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc {
	if t.RxLoc != nil {
		return t.RxLoc
	}
	t.RxLoc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc{}
	return t.RxLoc
}

// GetOrCreateRxLosP retrieves the value of the RxLosP field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateRxLosP() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP {
	if t.RxLosP != nil {
		return t.RxLosP
	}
	t.RxLosP = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP{}
	return t.RxLosP
}

// GetOrCreateSwitchToProtect retrieves the value of the SwitchToProtect field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetOrCreateSwitchToProtect() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect {
	if t.SwitchToProtect != nil {
		return t.SwitchToProtect
	}
	t.SwitchToProtect = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect{}
	return t.SwitchToProtect
}

// GetAmpGainDegHigh returns the value of the AmpGainDegHigh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AmpGainDegHigh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAmpGainDegHigh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh {
	if t != nil && t.AmpGainDegHigh != nil {
		return t.AmpGainDegHigh
	}
	return nil
}

// GetAmpGainDegLow returns the value of the AmpGainDegLow struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AmpGainDegLow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAmpGainDegLow() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow {
	if t != nil && t.AmpGainDegLow != nil {
		return t.AmpGainDegLow
	}
	return nil
}

// GetAutoAmpliCtrlConfigMismatch returns the value of the AutoAmpliCtrlConfigMismatch struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AutoAmpliCtrlConfigMismatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAutoAmpliCtrlConfigMismatch() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch {
	if t != nil && t.AutoAmpliCtrlConfigMismatch != nil {
		return t.AutoAmpliCtrlConfigMismatch
	}
	return nil
}

// GetAutoAmpliCtrlDisabled returns the value of the AutoAmpliCtrlDisabled struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AutoAmpliCtrlDisabled is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAutoAmpliCtrlDisabled() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled {
	if t != nil && t.AutoAmpliCtrlDisabled != nil {
		return t.AutoAmpliCtrlDisabled
	}
	return nil
}

// GetAutoAmpliCtrlRunning returns the value of the AutoAmpliCtrlRunning struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AutoAmpliCtrlRunning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAutoAmpliCtrlRunning() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning {
	if t != nil && t.AutoAmpliCtrlRunning != nil {
		return t.AutoAmpliCtrlRunning
	}
	return nil
}

// GetAutoLaserShut returns the value of the AutoLaserShut struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AutoLaserShut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAutoLaserShut() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut {
	if t != nil && t.AutoLaserShut != nil {
		return t.AutoLaserShut
	}
	return nil
}

// GetAutoPowerRed returns the value of the AutoPowerRed struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field AutoPowerRed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetAutoPowerRed() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed {
	if t != nil && t.AutoPowerRed != nil {
		return t.AutoPowerRed
	}
	return nil
}

// GetLowRxPower returns the value of the LowRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field LowRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower {
	if t != nil && t.LowRxPower != nil {
		return t.LowRxPower
	}
	return nil
}

// GetLowTxPower returns the value of the LowTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field LowTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower {
	if t != nil && t.LowTxPower != nil {
		return t.LowTxPower
	}
	return nil
}

// GetRxLoc returns the value of the RxLoc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field RxLoc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetRxLoc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc {
	if t != nil && t.RxLoc != nil {
		return t.RxLoc
	}
	return nil
}

// GetRxLosP returns the value of the RxLosP struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field RxLosP is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetRxLosP() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP {
	if t != nil && t.RxLosP != nil {
		return t.RxLosP
	}
	return nil
}

// GetSwitchToProtect returns the value of the SwitchToProtect struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo. If the receiver or the field SwitchToProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) GetSwitchToProtect() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect {
	if t != nil && t.SwitchToProtect != nil {
		return t.SwitchToProtect
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/amp-gain-deg-high YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegHigh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/amp-gain-deg-low YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AmpGainDegLow) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/auto-ampli-ctrl-config-mismatch YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlConfigMismatch) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/auto-ampli-ctrl-disabled YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlDisabled) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/auto-ampli-ctrl-running YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoAmpliCtrlRunning) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/auto-laser-shut YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoLaserShut) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/auto-power-red YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_AutoPowerRed) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/low-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/low-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_LowTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/rx-loc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLoc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/rx-los-p YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_RxLosP) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ots-alarm-info/switch-to-protect YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo_SwitchToProtect) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/raman-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/raman-tx-power-config YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/raman-tx-power-config/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count struct {
	RamanTxPowerInstance *uint32 `path:"raman-tx-power-instance" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxPowerValue    *string `path:"raman-tx-power-value" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxWavelength    *string `path:"raman-tx-wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/raman-tx-power/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count struct {
	RamanTxPowerInstance *uint32 `path:"raman-tx-power-instance" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxPowerValue    *string `path:"raman-tx-power-value" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxWavelength    *string `path:"raman-tx-wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/receive-n-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/receive-n-power/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count struct {
	Instance *uint32 `path:"instance" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value    *string `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/submarine-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo struct {
	CprExtWinMode       *uint32                                                                                                          `path:"cpr-ext-win-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	CprWinMode          *uint32                                                                                                          `path:"cpr-win-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	CrossPolGainMode    *uint32                                                                                                          `path:"cross-pol-gain-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	CrossPolWeightMode  *uint32                                                                                                          `path:"cross-pol-weight-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	EnhColorlessMode    *uint32                                                                                                          `path:"enh-colorless-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	EnhsopToleranceMode *uint32                                                                                                          `path:"enhsop-tolerance-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	FilterRollOffFactor *string                                                                                                          `path:"filter-roll-off-factor" module:"Cisco-IOS-XR-controller-optics-oper"`
	NleqCompensation    *uint32                                                                                                          `path:"nleq-compensation" module:"Cisco-IOS-XR-controller-optics-oper"`
	PropSubmarineParams *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams `path:"prop-submarine-params" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxVoaFixedRatio     *string                                                                                                          `path:"rx-voa-fixed-ratio" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxVoaGainOffset     *string                                                                                                          `path:"rx-voa-gain-offset" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxVoaTargetPower    *string                                                                                                          `path:"rx-voa-target-power" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) IsYANGGoStruct() {
}

// GetOrCreatePropSubmarineParams retrieves the value of the PropSubmarineParams field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) GetOrCreatePropSubmarineParams() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams {
	if t.PropSubmarineParams != nil {
		return t.PropSubmarineParams
	}
	t.PropSubmarineParams = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams{}
	return t.PropSubmarineParams
}

// GetPropSubmarineParams returns the value of the PropSubmarineParams struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo. If the receiver or the field PropSubmarineParams is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) GetPropSubmarineParams() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams {
	if t != nil && t.PropSubmarineParams != nil {
		return t.PropSubmarineParams
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/submarine-info/prop-submarine-params YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/submarine-info/prop-submarine-params/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count struct {
	Type  *uint32 `path:"type" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value *uint32 `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo_PropSubmarineParams_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/transceiver-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo struct {
	AdapterVendorInfo       *string                                                 `path:"adapter-vendor-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	ConnectorType           E_Cisco_IOS_XRControllerOpticsOper_FiberConnector       `path:"connector-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	Date                    *string                                                 `path:"date" module:"Cisco-IOS-XR-controller-optics-oper"`
	EthernetComplianceCode  E_Cisco_IOS_XRControllerOpticsOper_EthernetPmd          `path:"ethernet-compliance-code" module:"Cisco-IOS-XR-controller-optics-oper"`
	FirmwareActiveVersion   *string                                                 `path:"firmware-active-version" module:"Cisco-IOS-XR-controller-optics-oper"`
	FirmwareInactiveVersion *string                                                 `path:"firmware-inactive-version" module:"Cisco-IOS-XR-controller-optics-oper"`
	FirmwareVersion         *string                                                 `path:"firmware-version" module:"Cisco-IOS-XR-controller-optics-oper"`
	InternalTemperature     *int32                                                  `path:"internal-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsPid               *string                                                 `path:"optics-pid" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsSerialNo          *string                                                 `path:"optics-serial-no" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsType              *string                                                 `path:"optics-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsVendorPart        *string                                                 `path:"optics-vendor-part" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsVendorRev         *string                                                 `path:"optics-vendor-rev" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsVid               *string                                                 `path:"optics-vid" module:"Cisco-IOS-XR-controller-optics-oper"`
	OtnApplicationCode      E_Cisco_IOS_XRControllerOpticsOper_OtnApplicationCode   `path:"otn-application-code" module:"Cisco-IOS-XR-controller-optics-oper"`
	OuiNo                   *string                                                 `path:"oui-no" module:"Cisco-IOS-XR-controller-optics-oper"`
	SonetApplicationCode    E_Cisco_IOS_XRControllerOpticsOper_SonetApplicationCode `path:"sonet-application-code" module:"Cisco-IOS-XR-controller-optics-oper"`
	VendorInfo              *string                                                 `path:"vendor-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	VendorName              *string                                                 `path:"vendor-name" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/transmit-n-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/transmit-n-power/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count struct {
	Instance *uint32 `path:"instance" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value    *string `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes struct {
	OpticsLane map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane `path:"optics-lane" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) IsYANGGoStruct() {
}

// NewOpticsLane creates a new entry in the OpticsLane list of the
// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) NewOpticsLane(Number uint32) (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsLane == nil {
		t.OpticsLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OpticsLane[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OpticsLane", key)
	}

	t.OpticsLane[key] = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane{
		Number: &Number,
	}

	return t.OpticsLane[key], nil
}

// RenameOpticsLane renames an entry in the list OpticsLane within
// the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) RenameOpticsLane(oldK, newK uint32) error {
	if _, ok := t.OpticsLane[newK]; ok {
		return fmt.Errorf("key %v already exists in OpticsLane", newK)
	}

	e, ok := t.OpticsLane[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OpticsLane", oldK)
	}
	e.Number = &newK

	t.OpticsLane[newK] = e
	delete(t.OpticsLane, oldK)
	return nil
}

// GetOrCreateOpticsLaneMap returns the list (map) from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) GetOrCreateOpticsLaneMap() map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane {
	if t.OpticsLane == nil {
		t.OpticsLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane)
	}
	return t.OpticsLane
}

// GetOrCreateOpticsLane retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) GetOrCreateOpticsLane(Number uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane {

	key := Number

	if v, ok := t.OpticsLane[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpticsLane(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpticsLane got unexpected error: %v", err))
	}
	return v
}

// GetOpticsLane retrieves the value with the specified key from
// the OpticsLane map field of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) GetOpticsLane(Number uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.OpticsLane[key]; ok {
		return lm
	}
	return nil
}

// AppendOpticsLane appends the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane struct to the
// list OpticsLane of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes. If the key value(s) specified in
// the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) AppendOpticsLane(v *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) error {
	if v.Number == nil {
		return fmt.Errorf("invalid nil key received for Number")
	}

	key := *v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsLane == nil {
		t.OpticsLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane)
	}

	if _, ok := t.OpticsLane[key]; ok {
		return fmt.Errorf("duplicate key for list OpticsLane %v", key)
	}

	t.OpticsLane[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane struct {
	DacRate                   *string                                                                                                  `path:"dac-rate" module:"Cisco-IOS-XR-controller-optics-oper"`
	Description               *string                                                                                                  `path:"description" module:"Cisco-IOS-XR-controller-optics-oper"`
	FrequencyOffset           *int32                                                                                                   `path:"frequency-offset" module:"Cisco-IOS-XR-controller-optics-oper"`
	Frequency100Mhz           *uint32                                                                                                  `path:"frequency100mhz" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneAlarmInfo             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo `path:"lane-alarm-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneIndex                 *uint32                                                                                                  `path:"lane-index" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserAge                  *uint32                                                                                                  `path:"laser-age" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserBiasCurrentMilliAmps *uint32                                                                                                  `path:"laser-bias-current-milli-amps" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserBiasCurrentPercent   *uint32                                                                                                  `path:"laser-bias-current-percent" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserTemperature          *int32                                                                                                   `path:"laser-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	Number                    *uint32                                                                                                  `path:"number" module:"Cisco-IOS-XR-controller-optics-oper"`
	OutputFrequency           *int32                                                                                                   `path:"output-frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceivePower              *int32                                                                                                   `path:"receive-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceivePowermW            *int32                                                                                                   `path:"receive-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceiveSignalPower        *int32                                                                                                   `path:"receive-signal-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitPower             *int32                                                                                                   `path:"transmit-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitPowermW           *int32                                                                                                   `path:"transmit-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitSignalPower       *int32                                                                                                   `path:"transmit-signal-power" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) IsYANGGoStruct() {
}

// GetOrCreateLaneAlarmInfo retrieves the value of the LaneAlarmInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) GetOrCreateLaneAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo {
	if t.LaneAlarmInfo != nil {
		return t.LaneAlarmInfo
	}
	t.LaneAlarmInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo{}
	return t.LaneAlarmInfo
}

// GetLaneAlarmInfo returns the value of the LaneAlarmInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane. If the receiver or the field LaneAlarmInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) GetLaneAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo {
	if t != nil && t.LaneAlarmInfo != nil {
		return t.LaneAlarmInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane struct, which is a YANG list entry.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Number == nil {
		return nil, fmt.Errorf("nil value for key Number")
	}

	return map[string]interface{}{
		"number": *t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo struct {
	HighLbc     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc     `path:"high-lbc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighRxPower *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower `path:"high-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighTxPower *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower `path:"high-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowRxPower  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower  `path:"low-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowTxPower  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower  `path:"low-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) IsYANGGoStruct() {
}

// GetOrCreateHighLbc retrieves the value of the HighLbc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetOrCreateHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc {
	if t.HighLbc != nil {
		return t.HighLbc
	}
	t.HighLbc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc{}
	return t.HighLbc
}

// GetOrCreateHighRxPower retrieves the value of the HighRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetOrCreateHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower {
	if t.HighRxPower != nil {
		return t.HighRxPower
	}
	t.HighRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower{}
	return t.HighRxPower
}

// GetOrCreateHighTxPower retrieves the value of the HighTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetOrCreateHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower {
	if t.HighTxPower != nil {
		return t.HighTxPower
	}
	t.HighTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower{}
	return t.HighTxPower
}

// GetOrCreateLowRxPower retrieves the value of the LowRxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetOrCreateLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower {
	if t.LowRxPower != nil {
		return t.LowRxPower
	}
	t.LowRxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower{}
	return t.LowRxPower
}

// GetOrCreateLowTxPower retrieves the value of the LowTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetOrCreateLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower {
	if t.LowTxPower != nil {
		return t.LowTxPower
	}
	t.LowTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower{}
	return t.LowTxPower
}

// GetHighLbc returns the value of the HighLbc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo. If the receiver or the field HighLbc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetHighLbc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc {
	if t != nil && t.HighLbc != nil {
		return t.HighLbc
	}
	return nil
}

// GetHighRxPower returns the value of the HighRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo. If the receiver or the field HighRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetHighRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower {
	if t != nil && t.HighRxPower != nil {
		return t.HighRxPower
	}
	return nil
}

// GetHighTxPower returns the value of the HighTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo. If the receiver or the field HighTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetHighTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower {
	if t != nil && t.HighTxPower != nil {
		return t.HighTxPower
	}
	return nil
}

// GetLowRxPower returns the value of the LowRxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo. If the receiver or the field LowRxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetLowRxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower {
	if t != nil && t.LowRxPower != nil {
		return t.LowRxPower
	}
	return nil
}

// GetLowTxPower returns the value of the LowTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo. If the receiver or the field LowTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) GetLowTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower {
	if t != nil && t.LowTxPower != nil {
		return t.LowTxPower
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info/high-lbc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighLbc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info/high-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info/high-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_HighTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info/low-rx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowRxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-lanes/optics-lane/lane-alarm-info/low-tx-power YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes_OpticsLane_LaneAlarmInfo_LowTxPower) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/ots-spectrum-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo struct {
	SpectrumInfo *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo `path:"spectrum-info" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) IsYANGGoStruct() {
}

// GetOrCreateSpectrumInfo retrieves the value of the SpectrumInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) GetOrCreateSpectrumInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo {
	if t.SpectrumInfo != nil {
		return t.SpectrumInfo
	}
	t.SpectrumInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo{}
	return t.SpectrumInfo
}

// GetSpectrumInfo returns the value of the SpectrumInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo. If the receiver or the field SpectrumInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) GetSpectrumInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo {
	if t != nil && t.SpectrumInfo != nil {
		return t.SpectrumInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/ots-spectrum-info/spectrum-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo struct {
	FirstSliceWavelength    *string                                                                                                                   `path:"first-slice-wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
	SpectrumSlicePowerInfo  []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo `path:"spectrum-slice-power-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	SpectrumSliceSpacing    *uint32                                                                                                                   `path:"spectrum-slice-spacing" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalSpectrumSliceCount *uint32                                                                                                                   `path:"total-spectrum-slice-count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/ots-spectrum-info/spectrum-info/spectrum-slice-power-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo struct {
	LowerFrequency *uint64 `path:"lower-frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxPower        *int32  `path:"rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxPsd          *string `path:"rx-psd" module:"Cisco-IOS-XR-controller-optics-oper"`
	SliceNum       *uint32 `path:"slice-num" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxPower        *int32  `path:"tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxPsd          *string `path:"tx-psd" module:"Cisco-IOS-XR-controller-optics-oper"`
	UpperFrequency *uint64 `path:"upper-frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo_SpectrumInfo_SpectrumSlicePowerInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}
