/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-controller-optics-oper-sub2.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &CiscoDevice{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// CiscoDevice represents the /CiscoDevice YANG schema element.
type CiscoDevice struct {
	OpticsOper *Cisco_IOS_XRControllerOpticsOper_OpticsOper `path:"optics-oper" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that CiscoDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*CiscoDevice) IsYANGGoStruct() {}

// GetOrCreateOpticsOper retrieves the value of the OpticsOper field
// or returns the existing field if it already exists.
func (t *CiscoDevice) GetOrCreateOpticsOper() *Cisco_IOS_XRControllerOpticsOper_OpticsOper {
	if t.OpticsOper != nil {
		return t.OpticsOper
	}
	t.OpticsOper = &Cisco_IOS_XRControllerOpticsOper_OpticsOper{}
	return t.OpticsOper
}

// GetOpticsOper returns the value of the OpticsOper struct pointer
// from CiscoDevice. If the receiver or the field OpticsOper is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *CiscoDevice) GetOpticsOper() *Cisco_IOS_XRControllerOpticsOper_OpticsOper {
	if t != nil && t.OpticsOper != nil {
		return t.OpticsOper
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["CiscoDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *CiscoDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of CiscoDevice.
func (*CiscoDevice) ΛBelongingModule() string {
	return ""
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper struct {
	OpticsPorts *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts `path:"optics-ports" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper) IsYANGGoStruct() {}

// GetOrCreateOpticsPorts retrieves the value of the OpticsPorts field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper) GetOrCreateOpticsPorts() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts {
	if t.OpticsPorts != nil {
		return t.OpticsPorts
	}
	t.OpticsPorts = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts{}
	return t.OpticsPorts
}

// GetOpticsPorts returns the value of the OpticsPorts struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper. If the receiver or the field OpticsPorts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper) GetOpticsPorts() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts {
	if t != nil && t.OpticsPorts != nil {
		return t.OpticsPorts
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts struct {
	OpticsPort map[string]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort `path:"optics-port" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) IsYANGGoStruct() {}

// NewOpticsPort creates a new entry in the OpticsPort list of the
// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) NewOpticsPort(Name string) (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsPort == nil {
		t.OpticsPort = make(map[string]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OpticsPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OpticsPort", key)
	}

	t.OpticsPort[key] = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort{
		Name: &Name,
	}

	return t.OpticsPort[key], nil
}

// RenameOpticsPort renames an entry in the list OpticsPort within
// the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) RenameOpticsPort(oldK, newK string) error {
	if _, ok := t.OpticsPort[newK]; ok {
		return fmt.Errorf("key %v already exists in OpticsPort", newK)
	}

	e, ok := t.OpticsPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OpticsPort", oldK)
	}
	e.Name = &newK

	t.OpticsPort[newK] = e
	delete(t.OpticsPort, oldK)
	return nil
}

// GetOrCreateOpticsPortMap returns the list (map) from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) GetOrCreateOpticsPortMap() map[string]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort {
	if t.OpticsPort == nil {
		t.OpticsPort = make(map[string]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort)
	}
	return t.OpticsPort
}

// GetOrCreateOpticsPort retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) GetOrCreateOpticsPort(Name string) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort {

	key := Name

	if v, ok := t.OpticsPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpticsPort(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpticsPort got unexpected error: %v", err))
	}
	return v
}

// GetOpticsPort retrieves the value with the specified key from
// the OpticsPort map field of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) GetOpticsPort(Name string) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OpticsPort[key]; ok {
		return lm
	}
	return nil
}

// AppendOpticsPort appends the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort struct to the
// list OpticsPort of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts. If the key value(s) specified in
// the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) AppendOpticsPort(v *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsPort == nil {
		t.OpticsPort = make(map[string]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort)
	}

	if _, ok := t.OpticsPort[key]; ok {
		return fmt.Errorf("duplicate key for list OpticsPort %v", key)
	}

	t.OpticsPort[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort struct {
	FecThreshold                     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold                     `path:"fec-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	Name                             *string                                                                                              `path:"name" module:"Cisco-IOS-XR-controller-optics-oper"`
	ObservableLanes                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes                  `path:"observable-lanes" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsDbInfo                     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo                     `path:"optics-db-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsDwdmCarrierChannelMap      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap      `path:"optics-dwdm-carrier-channel-map" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsDwdmCarrierChannelMapFlexi *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi `path:"optics-dwdm-carrier-channel-map-flexi" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsFastpolls                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls                  `path:"optics-fastpolls" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsInfo                       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo                       `path:"optics-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsLanes                      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes                      `path:"optics-lanes" module:"Cisco-IOS-XR-controller-optics-oper"`
	OtsSpectrumInfo                  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo                  `path:"ots-spectrum-info" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) IsYANGGoStruct() {}

// GetOrCreateFecThreshold retrieves the value of the FecThreshold field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateFecThreshold() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold {
	if t.FecThreshold != nil {
		return t.FecThreshold
	}
	t.FecThreshold = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold{}
	return t.FecThreshold
}

// GetOrCreateObservableLanes retrieves the value of the ObservableLanes field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateObservableLanes() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes {
	if t.ObservableLanes != nil {
		return t.ObservableLanes
	}
	t.ObservableLanes = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes{}
	return t.ObservableLanes
}

// GetOrCreateOpticsDbInfo retrieves the value of the OpticsDbInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsDbInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo {
	if t.OpticsDbInfo != nil {
		return t.OpticsDbInfo
	}
	t.OpticsDbInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo{}
	return t.OpticsDbInfo
}

// GetOrCreateOpticsDwdmCarrierChannelMap retrieves the value of the OpticsDwdmCarrierChannelMap field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsDwdmCarrierChannelMap() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap {
	if t.OpticsDwdmCarrierChannelMap != nil {
		return t.OpticsDwdmCarrierChannelMap
	}
	t.OpticsDwdmCarrierChannelMap = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap{}
	return t.OpticsDwdmCarrierChannelMap
}

// GetOrCreateOpticsDwdmCarrierChannelMapFlexi retrieves the value of the OpticsDwdmCarrierChannelMapFlexi field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsDwdmCarrierChannelMapFlexi() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi {
	if t.OpticsDwdmCarrierChannelMapFlexi != nil {
		return t.OpticsDwdmCarrierChannelMapFlexi
	}
	t.OpticsDwdmCarrierChannelMapFlexi = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi{}
	return t.OpticsDwdmCarrierChannelMapFlexi
}

// GetOrCreateOpticsFastpolls retrieves the value of the OpticsFastpolls field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsFastpolls() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls {
	if t.OpticsFastpolls != nil {
		return t.OpticsFastpolls
	}
	t.OpticsFastpolls = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls{}
	return t.OpticsFastpolls
}

// GetOrCreateOpticsInfo retrieves the value of the OpticsInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo {
	if t.OpticsInfo != nil {
		return t.OpticsInfo
	}
	t.OpticsInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo{}
	return t.OpticsInfo
}

// GetOrCreateOpticsLanes retrieves the value of the OpticsLanes field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOpticsLanes() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes {
	if t.OpticsLanes != nil {
		return t.OpticsLanes
	}
	t.OpticsLanes = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes{}
	return t.OpticsLanes
}

// GetOrCreateOtsSpectrumInfo retrieves the value of the OtsSpectrumInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOrCreateOtsSpectrumInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo {
	if t.OtsSpectrumInfo != nil {
		return t.OtsSpectrumInfo
	}
	t.OtsSpectrumInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo{}
	return t.OtsSpectrumInfo
}

// GetFecThreshold returns the value of the FecThreshold struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field FecThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetFecThreshold() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold {
	if t != nil && t.FecThreshold != nil {
		return t.FecThreshold
	}
	return nil
}

// GetObservableLanes returns the value of the ObservableLanes struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field ObservableLanes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetObservableLanes() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes {
	if t != nil && t.ObservableLanes != nil {
		return t.ObservableLanes
	}
	return nil
}

// GetOpticsDbInfo returns the value of the OpticsDbInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsDbInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsDbInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo {
	if t != nil && t.OpticsDbInfo != nil {
		return t.OpticsDbInfo
	}
	return nil
}

// GetOpticsDwdmCarrierChannelMap returns the value of the OpticsDwdmCarrierChannelMap struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsDwdmCarrierChannelMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsDwdmCarrierChannelMap() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap {
	if t != nil && t.OpticsDwdmCarrierChannelMap != nil {
		return t.OpticsDwdmCarrierChannelMap
	}
	return nil
}

// GetOpticsDwdmCarrierChannelMapFlexi returns the value of the OpticsDwdmCarrierChannelMapFlexi struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsDwdmCarrierChannelMapFlexi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsDwdmCarrierChannelMapFlexi() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi {
	if t != nil && t.OpticsDwdmCarrierChannelMapFlexi != nil {
		return t.OpticsDwdmCarrierChannelMapFlexi
	}
	return nil
}

// GetOpticsFastpolls returns the value of the OpticsFastpolls struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsFastpolls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsFastpolls() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls {
	if t != nil && t.OpticsFastpolls != nil {
		return t.OpticsFastpolls
	}
	return nil
}

// GetOpticsInfo returns the value of the OpticsInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo {
	if t != nil && t.OpticsInfo != nil {
		return t.OpticsInfo
	}
	return nil
}

// GetOpticsLanes returns the value of the OpticsLanes struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OpticsLanes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOpticsLanes() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsLanes {
	if t != nil && t.OpticsLanes != nil {
		return t.OpticsLanes
	}
	return nil
}

// GetOtsSpectrumInfo returns the value of the OtsSpectrumInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort. If the receiver or the field OtsSpectrumInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) GetOtsSpectrumInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OtsSpectrumInfo {
	if t != nil && t.OtsSpectrumInfo != nil {
		return t.OtsSpectrumInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort struct, which is a YANG list entry.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/fec-threshold YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold struct {
	HostFddThresh  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh  `path:"host-fdd-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	HostFedThresh  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh  `path:"host-fed-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	MediaFddThresh *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh `path:"media-fdd-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	MediaFedThresh *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh `path:"media-fed-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) IsYANGGoStruct() {
}

// GetOrCreateHostFddThresh retrieves the value of the HostFddThresh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetOrCreateHostFddThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh {
	if t.HostFddThresh != nil {
		return t.HostFddThresh
	}
	t.HostFddThresh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh{}
	return t.HostFddThresh
}

// GetOrCreateHostFedThresh retrieves the value of the HostFedThresh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetOrCreateHostFedThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh {
	if t.HostFedThresh != nil {
		return t.HostFedThresh
	}
	t.HostFedThresh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh{}
	return t.HostFedThresh
}

// GetOrCreateMediaFddThresh retrieves the value of the MediaFddThresh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetOrCreateMediaFddThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh {
	if t.MediaFddThresh != nil {
		return t.MediaFddThresh
	}
	t.MediaFddThresh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh{}
	return t.MediaFddThresh
}

// GetOrCreateMediaFedThresh retrieves the value of the MediaFedThresh field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetOrCreateMediaFedThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh {
	if t.MediaFedThresh != nil {
		return t.MediaFedThresh
	}
	t.MediaFedThresh = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh{}
	return t.MediaFedThresh
}

// GetHostFddThresh returns the value of the HostFddThresh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold. If the receiver or the field HostFddThresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetHostFddThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh {
	if t != nil && t.HostFddThresh != nil {
		return t.HostFddThresh
	}
	return nil
}

// GetHostFedThresh returns the value of the HostFedThresh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold. If the receiver or the field HostFedThresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetHostFedThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh {
	if t != nil && t.HostFedThresh != nil {
		return t.HostFedThresh
	}
	return nil
}

// GetMediaFddThresh returns the value of the MediaFddThresh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold. If the receiver or the field MediaFddThresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetMediaFddThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh {
	if t != nil && t.MediaFddThresh != nil {
		return t.MediaFddThresh
	}
	return nil
}

// GetMediaFedThresh returns the value of the MediaFedThresh struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold. If the receiver or the field MediaFedThresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) GetMediaFedThresh() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh {
	if t != nil && t.MediaFedThresh != nil {
		return t.MediaFedThresh
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/fec-threshold/host-fdd-thresh YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh struct {
	ClearThresh *uint64 `path:"clear-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	RaiseThresh *uint64 `path:"raise-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFddThresh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/fec-threshold/host-fed-thresh YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh struct {
	ClearThresh *uint64 `path:"clear-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	RaiseThresh *uint64 `path:"raise-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_HostFedThresh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/fec-threshold/media-fdd-thresh YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh struct {
	ClearThresh *uint64 `path:"clear-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	RaiseThresh *uint64 `path:"raise-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFddThresh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/fec-threshold/media-fed-thresh YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh struct {
	ClearThresh *uint64 `path:"clear-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
	RaiseThresh *uint64 `path:"raise-thresh" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_FecThreshold_MediaFedThresh) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes struct {
	ObservableLane map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane `path:"observable-lane" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) IsYANGGoStruct() {
}

// NewObservableLane creates a new entry in the ObservableLane list of the
// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) NewObservableLane(LaneId uint32) (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ObservableLane == nil {
		t.ObservableLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane)
	}

	key := LaneId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ObservableLane[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ObservableLane", key)
	}

	t.ObservableLane[key] = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane{
		LaneId: &LaneId,
	}

	return t.ObservableLane[key], nil
}

// RenameObservableLane renames an entry in the list ObservableLane within
// the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) RenameObservableLane(oldK, newK uint32) error {
	if _, ok := t.ObservableLane[newK]; ok {
		return fmt.Errorf("key %v already exists in ObservableLane", newK)
	}

	e, ok := t.ObservableLane[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ObservableLane", oldK)
	}
	e.LaneId = &newK

	t.ObservableLane[newK] = e
	delete(t.ObservableLane, oldK)
	return nil
}

// GetOrCreateObservableLaneMap returns the list (map) from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) GetOrCreateObservableLaneMap() map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane {
	if t.ObservableLane == nil {
		t.ObservableLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane)
	}
	return t.ObservableLane
}

// GetOrCreateObservableLane retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) GetOrCreateObservableLane(LaneId uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane {

	key := LaneId

	if v, ok := t.ObservableLane[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewObservableLane(LaneId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateObservableLane got unexpected error: %v", err))
	}
	return v
}

// GetObservableLane retrieves the value with the specified key from
// the ObservableLane map field of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) GetObservableLane(LaneId uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane {

	if t == nil {
		return nil
	}

	key := LaneId

	if lm, ok := t.ObservableLane[key]; ok {
		return lm
	}
	return nil
}

// AppendObservableLane appends the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane struct to the
// list ObservableLane of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes. If the key value(s) specified in
// the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) AppendObservableLane(v *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) error {
	if v.LaneId == nil {
		return fmt.Errorf("invalid nil key received for LaneId")
	}

	key := *v.LaneId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ObservableLane == nil {
		t.ObservableLane = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane)
	}

	if _, ok := t.ObservableLane[key]; ok {
		return fmt.Errorf("duplicate key for list ObservableLane %v", key)
	}

	t.ObservableLane[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane struct {
	EsnrHostInput           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput           `path:"esnr-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	EsnrMediaInput          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput          `path:"esnr-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercAvgHostInput        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput        `path:"ferc-avg-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercAvgMediaInput       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput       `path:"ferc-avg-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercCurrHostInput       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput       `path:"ferc-curr-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercCurrMediaInput      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput      `path:"ferc-curr-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercMaxHostInput        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput        `path:"ferc-max-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercMaxMediaInput       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput       `path:"ferc-max-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercMinHostInput        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput        `path:"ferc-min-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	FercMinMediaInput       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput       `path:"ferc-min-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId                  *uint32                                                                                                                    `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserAge                *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge                `path:"laser-age" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserFrequencyError     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError     `path:"laser-frequency-error" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserTemperature        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature        `path:"laser-temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	Pam4LvlTransHostInput   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput   `path:"pam4-lvl-trans-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	Pam4LvlTransMediaInput  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput  `path:"pam4-lvl-trans-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAvgHostInput   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput   `path:"pre-fec-ber-avg-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAvgMediaInput  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput  `path:"pre-fec-ber-avg-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerCurrHostInput  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput  `path:"pre-fec-ber-curr-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerCurrMediaInput *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput `path:"pre-fec-ber-curr-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerMaxHostInput   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput   `path:"pre-fec-ber-max-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerMaxMediaInput  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput  `path:"pre-fec-ber-max-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerMinHostInput   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput   `path:"pre-fec-ber-min-host-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerMinMediaInput  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput  `path:"pre-fec-ber-min-media-input" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrent              *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent              `path:"tec-current" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) IsYANGGoStruct() {
}

// GetOrCreateEsnrHostInput retrieves the value of the EsnrHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateEsnrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput {
	if t.EsnrHostInput != nil {
		return t.EsnrHostInput
	}
	t.EsnrHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput{}
	return t.EsnrHostInput
}

// GetOrCreateEsnrMediaInput retrieves the value of the EsnrMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateEsnrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput {
	if t.EsnrMediaInput != nil {
		return t.EsnrMediaInput
	}
	t.EsnrMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput{}
	return t.EsnrMediaInput
}

// GetOrCreateFercAvgHostInput retrieves the value of the FercAvgHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercAvgHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput {
	if t.FercAvgHostInput != nil {
		return t.FercAvgHostInput
	}
	t.FercAvgHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput{}
	return t.FercAvgHostInput
}

// GetOrCreateFercAvgMediaInput retrieves the value of the FercAvgMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercAvgMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput {
	if t.FercAvgMediaInput != nil {
		return t.FercAvgMediaInput
	}
	t.FercAvgMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput{}
	return t.FercAvgMediaInput
}

// GetOrCreateFercCurrHostInput retrieves the value of the FercCurrHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercCurrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput {
	if t.FercCurrHostInput != nil {
		return t.FercCurrHostInput
	}
	t.FercCurrHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput{}
	return t.FercCurrHostInput
}

// GetOrCreateFercCurrMediaInput retrieves the value of the FercCurrMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercCurrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput {
	if t.FercCurrMediaInput != nil {
		return t.FercCurrMediaInput
	}
	t.FercCurrMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput{}
	return t.FercCurrMediaInput
}

// GetOrCreateFercMaxHostInput retrieves the value of the FercMaxHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercMaxHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput {
	if t.FercMaxHostInput != nil {
		return t.FercMaxHostInput
	}
	t.FercMaxHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput{}
	return t.FercMaxHostInput
}

// GetOrCreateFercMaxMediaInput retrieves the value of the FercMaxMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercMaxMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput {
	if t.FercMaxMediaInput != nil {
		return t.FercMaxMediaInput
	}
	t.FercMaxMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput{}
	return t.FercMaxMediaInput
}

// GetOrCreateFercMinHostInput retrieves the value of the FercMinHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercMinHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput {
	if t.FercMinHostInput != nil {
		return t.FercMinHostInput
	}
	t.FercMinHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput{}
	return t.FercMinHostInput
}

// GetOrCreateFercMinMediaInput retrieves the value of the FercMinMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateFercMinMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput {
	if t.FercMinMediaInput != nil {
		return t.FercMinMediaInput
	}
	t.FercMinMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput{}
	return t.FercMinMediaInput
}

// GetOrCreateLaserAge retrieves the value of the LaserAge field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateLaserAge() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge {
	if t.LaserAge != nil {
		return t.LaserAge
	}
	t.LaserAge = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge{}
	return t.LaserAge
}

// GetOrCreateLaserFrequencyError retrieves the value of the LaserFrequencyError field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateLaserFrequencyError() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError {
	if t.LaserFrequencyError != nil {
		return t.LaserFrequencyError
	}
	t.LaserFrequencyError = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError{}
	return t.LaserFrequencyError
}

// GetOrCreateLaserTemperature retrieves the value of the LaserTemperature field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateLaserTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature {
	if t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	t.LaserTemperature = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature{}
	return t.LaserTemperature
}

// GetOrCreatePam4LvlTransHostInput retrieves the value of the Pam4LvlTransHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePam4LvlTransHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput {
	if t.Pam4LvlTransHostInput != nil {
		return t.Pam4LvlTransHostInput
	}
	t.Pam4LvlTransHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput{}
	return t.Pam4LvlTransHostInput
}

// GetOrCreatePam4LvlTransMediaInput retrieves the value of the Pam4LvlTransMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePam4LvlTransMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput {
	if t.Pam4LvlTransMediaInput != nil {
		return t.Pam4LvlTransMediaInput
	}
	t.Pam4LvlTransMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput{}
	return t.Pam4LvlTransMediaInput
}

// GetOrCreatePreFecBerAvgHostInput retrieves the value of the PreFecBerAvgHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerAvgHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput {
	if t.PreFecBerAvgHostInput != nil {
		return t.PreFecBerAvgHostInput
	}
	t.PreFecBerAvgHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput{}
	return t.PreFecBerAvgHostInput
}

// GetOrCreatePreFecBerAvgMediaInput retrieves the value of the PreFecBerAvgMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerAvgMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput {
	if t.PreFecBerAvgMediaInput != nil {
		return t.PreFecBerAvgMediaInput
	}
	t.PreFecBerAvgMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput{}
	return t.PreFecBerAvgMediaInput
}

// GetOrCreatePreFecBerCurrHostInput retrieves the value of the PreFecBerCurrHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerCurrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput {
	if t.PreFecBerCurrHostInput != nil {
		return t.PreFecBerCurrHostInput
	}
	t.PreFecBerCurrHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput{}
	return t.PreFecBerCurrHostInput
}

// GetOrCreatePreFecBerCurrMediaInput retrieves the value of the PreFecBerCurrMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerCurrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput {
	if t.PreFecBerCurrMediaInput != nil {
		return t.PreFecBerCurrMediaInput
	}
	t.PreFecBerCurrMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput{}
	return t.PreFecBerCurrMediaInput
}

// GetOrCreatePreFecBerMaxHostInput retrieves the value of the PreFecBerMaxHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerMaxHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput {
	if t.PreFecBerMaxHostInput != nil {
		return t.PreFecBerMaxHostInput
	}
	t.PreFecBerMaxHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput{}
	return t.PreFecBerMaxHostInput
}

// GetOrCreatePreFecBerMaxMediaInput retrieves the value of the PreFecBerMaxMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerMaxMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput {
	if t.PreFecBerMaxMediaInput != nil {
		return t.PreFecBerMaxMediaInput
	}
	t.PreFecBerMaxMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput{}
	return t.PreFecBerMaxMediaInput
}

// GetOrCreatePreFecBerMinHostInput retrieves the value of the PreFecBerMinHostInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerMinHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput {
	if t.PreFecBerMinHostInput != nil {
		return t.PreFecBerMinHostInput
	}
	t.PreFecBerMinHostInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput{}
	return t.PreFecBerMinHostInput
}

// GetOrCreatePreFecBerMinMediaInput retrieves the value of the PreFecBerMinMediaInput field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreatePreFecBerMinMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput {
	if t.PreFecBerMinMediaInput != nil {
		return t.PreFecBerMinMediaInput
	}
	t.PreFecBerMinMediaInput = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput{}
	return t.PreFecBerMinMediaInput
}

// GetOrCreateTecCurrent retrieves the value of the TecCurrent field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetOrCreateTecCurrent() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent {
	if t.TecCurrent != nil {
		return t.TecCurrent
	}
	t.TecCurrent = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent{}
	return t.TecCurrent
}

// GetEsnrHostInput returns the value of the EsnrHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field EsnrHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetEsnrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput {
	if t != nil && t.EsnrHostInput != nil {
		return t.EsnrHostInput
	}
	return nil
}

// GetEsnrMediaInput returns the value of the EsnrMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field EsnrMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetEsnrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput {
	if t != nil && t.EsnrMediaInput != nil {
		return t.EsnrMediaInput
	}
	return nil
}

// GetFercAvgHostInput returns the value of the FercAvgHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercAvgHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercAvgHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput {
	if t != nil && t.FercAvgHostInput != nil {
		return t.FercAvgHostInput
	}
	return nil
}

// GetFercAvgMediaInput returns the value of the FercAvgMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercAvgMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercAvgMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput {
	if t != nil && t.FercAvgMediaInput != nil {
		return t.FercAvgMediaInput
	}
	return nil
}

// GetFercCurrHostInput returns the value of the FercCurrHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercCurrHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercCurrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput {
	if t != nil && t.FercCurrHostInput != nil {
		return t.FercCurrHostInput
	}
	return nil
}

// GetFercCurrMediaInput returns the value of the FercCurrMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercCurrMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercCurrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput {
	if t != nil && t.FercCurrMediaInput != nil {
		return t.FercCurrMediaInput
	}
	return nil
}

// GetFercMaxHostInput returns the value of the FercMaxHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercMaxHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercMaxHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput {
	if t != nil && t.FercMaxHostInput != nil {
		return t.FercMaxHostInput
	}
	return nil
}

// GetFercMaxMediaInput returns the value of the FercMaxMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercMaxMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercMaxMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput {
	if t != nil && t.FercMaxMediaInput != nil {
		return t.FercMaxMediaInput
	}
	return nil
}

// GetFercMinHostInput returns the value of the FercMinHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercMinHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercMinHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput {
	if t != nil && t.FercMinHostInput != nil {
		return t.FercMinHostInput
	}
	return nil
}

// GetFercMinMediaInput returns the value of the FercMinMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field FercMinMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetFercMinMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput {
	if t != nil && t.FercMinMediaInput != nil {
		return t.FercMinMediaInput
	}
	return nil
}

// GetLaserAge returns the value of the LaserAge struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field LaserAge is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetLaserAge() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge {
	if t != nil && t.LaserAge != nil {
		return t.LaserAge
	}
	return nil
}

// GetLaserFrequencyError returns the value of the LaserFrequencyError struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field LaserFrequencyError is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetLaserFrequencyError() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError {
	if t != nil && t.LaserFrequencyError != nil {
		return t.LaserFrequencyError
	}
	return nil
}

// GetLaserTemperature returns the value of the LaserTemperature struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field LaserTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetLaserTemperature() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature {
	if t != nil && t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	return nil
}

// GetPam4LvlTransHostInput returns the value of the Pam4LvlTransHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field Pam4LvlTransHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPam4LvlTransHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput {
	if t != nil && t.Pam4LvlTransHostInput != nil {
		return t.Pam4LvlTransHostInput
	}
	return nil
}

// GetPam4LvlTransMediaInput returns the value of the Pam4LvlTransMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field Pam4LvlTransMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPam4LvlTransMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput {
	if t != nil && t.Pam4LvlTransMediaInput != nil {
		return t.Pam4LvlTransMediaInput
	}
	return nil
}

// GetPreFecBerAvgHostInput returns the value of the PreFecBerAvgHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerAvgHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerAvgHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput {
	if t != nil && t.PreFecBerAvgHostInput != nil {
		return t.PreFecBerAvgHostInput
	}
	return nil
}

// GetPreFecBerAvgMediaInput returns the value of the PreFecBerAvgMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerAvgMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerAvgMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput {
	if t != nil && t.PreFecBerAvgMediaInput != nil {
		return t.PreFecBerAvgMediaInput
	}
	return nil
}

// GetPreFecBerCurrHostInput returns the value of the PreFecBerCurrHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerCurrHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerCurrHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput {
	if t != nil && t.PreFecBerCurrHostInput != nil {
		return t.PreFecBerCurrHostInput
	}
	return nil
}

// GetPreFecBerCurrMediaInput returns the value of the PreFecBerCurrMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerCurrMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerCurrMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput {
	if t != nil && t.PreFecBerCurrMediaInput != nil {
		return t.PreFecBerCurrMediaInput
	}
	return nil
}

// GetPreFecBerMaxHostInput returns the value of the PreFecBerMaxHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerMaxHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerMaxHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput {
	if t != nil && t.PreFecBerMaxHostInput != nil {
		return t.PreFecBerMaxHostInput
	}
	return nil
}

// GetPreFecBerMaxMediaInput returns the value of the PreFecBerMaxMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerMaxMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerMaxMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput {
	if t != nil && t.PreFecBerMaxMediaInput != nil {
		return t.PreFecBerMaxMediaInput
	}
	return nil
}

// GetPreFecBerMinHostInput returns the value of the PreFecBerMinHostInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerMinHostInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerMinHostInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput {
	if t != nil && t.PreFecBerMinHostInput != nil {
		return t.PreFecBerMinHostInput
	}
	return nil
}

// GetPreFecBerMinMediaInput returns the value of the PreFecBerMinMediaInput struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field PreFecBerMinMediaInput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetPreFecBerMinMediaInput() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput {
	if t != nil && t.PreFecBerMinMediaInput != nil {
		return t.PreFecBerMinMediaInput
	}
	return nil
}

// GetTecCurrent returns the value of the TecCurrent struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane. If the receiver or the field TecCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) GetTecCurrent() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent {
	if t != nil && t.TecCurrent != nil {
		return t.TecCurrent
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane struct, which is a YANG list entry.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LaneId == nil {
		return nil, fmt.Errorf("nil value for key LaneId")
	}

	return map[string]interface{}{
		"lane-id": *t.LaneId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/esnr-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint16                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint16                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint16                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint16                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint16                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/esnr-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint16                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint16                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint16                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint16                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint16                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_EsnrMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-avg-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-avg-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercAvgMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-curr-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-curr-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercCurrMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-max-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-max-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMaxMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-min-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/ferc-min-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_FercMinMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/laser-age YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint16                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint16                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint16                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint16                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint16                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserAge) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/laser-frequency-error YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *int16                                              `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *int16                                              `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *int16                                              `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *int16                                              `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *int16                                              `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserFrequencyError) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/laser-temperature YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *int16                                              `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *int16                                              `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *int16                                              `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *int16                                              `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *int16                                              `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_LaserTemperature) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pam4-lvl-trans-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint16                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint16                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint16                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint16                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint16                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pam4-lvl-trans-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint16                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint16                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint16                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint16                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint16                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_Pam4LvlTransMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-avg-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-avg-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerAvgMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-curr-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-curr-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerCurrMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-max-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-max-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMaxMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-min-host-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinHostInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/pre-fec-ber-min-media-input YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *uint64                                             `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *uint64                                             `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *uint64                                             `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *uint64                                             `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *uint64                                             `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_PreFecBerMinMediaInput) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/observable-lanes/observable-lane/tec-current YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent struct {
	HighAlarm      *bool                                               `path:"high-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighAlarmVal   *int16                                              `path:"high-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarning    *bool                                               `path:"high-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	HighWarningVal *int16                                              `path:"high-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneId         E_Cisco_IOS_XRControllerOpticsOper_ObservableLaneId `path:"lane-id" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarm       *bool                                               `path:"low-alarm" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowAlarmVal    *int16                                              `path:"low-alarm-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarning     *bool                                               `path:"low-warning" module:"Cisco-IOS-XR-controller-optics-oper"`
	LowWarningVal  *int16                                              `path:"low-warning-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	Value          *int16                                              `path:"value" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_ObservableLanes_ObservableLane_TecCurrent) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-db-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo struct {
	ControllerState     E_Cisco_IOS_XRControllerOpticsOper_OpticsControllerState                                         `path:"controller-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	NetworkSrlgInfo     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo `path:"network-srlg-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransportAdminState E_Cisco_IOS_XRControllerOpticsOper_OpticsTas                                                     `path:"transport-admin-state" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) IsYANGGoStruct() {
}

// GetOrCreateNetworkSrlgInfo retrieves the value of the NetworkSrlgInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) GetOrCreateNetworkSrlgInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo {
	if t.NetworkSrlgInfo != nil {
		return t.NetworkSrlgInfo
	}
	t.NetworkSrlgInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo{}
	return t.NetworkSrlgInfo
}

// GetNetworkSrlgInfo returns the value of the NetworkSrlgInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo. If the receiver or the field NetworkSrlgInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) GetNetworkSrlgInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo {
	if t != nil && t.NetworkSrlgInfo != nil {
		return t.NetworkSrlgInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-db-info/network-srlg-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo struct {
	NetworkSrlgArray []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray `path:"network-srlg-array" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-db-info/network-srlg-info/network-srlg-array YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray struct {
	NetworkSrlg []uint32 `path:"network-srlg" module:"Cisco-IOS-XR-controller-optics-oper"`
	SetNumber   *uint32  `path:"set-number" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDbInfo_NetworkSrlgInfo_NetworkSrlgArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-dwdm-carrier-channel-map YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap struct {
	DwdmCarrierBand    E_Cisco_IOS_XRControllerOpticsOper_OpticsWaveBand                                                                    `path:"dwdm-carrier-band" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMapInfo []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo `path:"dwdm-carrier-map-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMax     *uint32                                                                                                              `path:"dwdm-carrier-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMin     *uint32                                                                                                              `path:"dwdm-carrier-min" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-dwdm-carrier-channel-map-flexi YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi struct {
	DwdmCarrierBand    E_Cisco_IOS_XRControllerOpticsOper_OpticsWaveBand                                                                         `path:"dwdm-carrier-band" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMapInfo []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo `path:"dwdm-carrier-map-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMax     *uint32                                                                                                                   `path:"dwdm-carrier-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierMin     *uint32                                                                                                                   `path:"dwdm-carrier-min" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-dwdm-carrier-channel-map-flexi/dwdm-carrier-map-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo struct {
	ChanIndex   *uint32 `path:"chan-index" module:"Cisco-IOS-XR-controller-optics-oper"`
	Frequency   *string `path:"frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	G694ChanNum *int32  `path:"g694-chan-num" module:"Cisco-IOS-XR-controller-optics-oper"`
	ItuChanNum  *uint32 `path:"itu-chan-num" module:"Cisco-IOS-XR-controller-optics-oper"`
	Wavelength  *string `path:"wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMapFlexi_DwdmCarrierMapInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-dwdm-carrier-channel-map/dwdm-carrier-map-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo struct {
	ChanIndex   *uint32 `path:"chan-index" module:"Cisco-IOS-XR-controller-optics-oper"`
	Frequency   *string `path:"frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	G694ChanNum *int32  `path:"g694-chan-num" module:"Cisco-IOS-XR-controller-optics-oper"`
	ItuChanNum  *uint32 `path:"itu-chan-num" module:"Cisco-IOS-XR-controller-optics-oper"`
	Wavelength  *string `path:"wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsDwdmCarrierChannelMap_DwdmCarrierMapInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-fastpolls YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls struct {
	OpticsFastpoll map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll `path:"optics-fastpoll" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) IsYANGGoStruct() {
}

// NewOpticsFastpoll creates a new entry in the OpticsFastpoll list of the
// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) NewOpticsFastpoll(UniqueId uint32) (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsFastpoll == nil {
		t.OpticsFastpoll = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll)
	}

	key := UniqueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OpticsFastpoll[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OpticsFastpoll", key)
	}

	t.OpticsFastpoll[key] = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll{
		UniqueId: &UniqueId,
	}

	return t.OpticsFastpoll[key], nil
}

// RenameOpticsFastpoll renames an entry in the list OpticsFastpoll within
// the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) RenameOpticsFastpoll(oldK, newK uint32) error {
	if _, ok := t.OpticsFastpoll[newK]; ok {
		return fmt.Errorf("key %v already exists in OpticsFastpoll", newK)
	}

	e, ok := t.OpticsFastpoll[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OpticsFastpoll", oldK)
	}
	e.UniqueId = &newK

	t.OpticsFastpoll[newK] = e
	delete(t.OpticsFastpoll, oldK)
	return nil
}

// GetOrCreateOpticsFastpollMap returns the list (map) from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) GetOrCreateOpticsFastpollMap() map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll {
	if t.OpticsFastpoll == nil {
		t.OpticsFastpoll = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll)
	}
	return t.OpticsFastpoll
}

// GetOrCreateOpticsFastpoll retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) GetOrCreateOpticsFastpoll(UniqueId uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll {

	key := UniqueId

	if v, ok := t.OpticsFastpoll[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpticsFastpoll(UniqueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpticsFastpoll got unexpected error: %v", err))
	}
	return v
}

// GetOpticsFastpoll retrieves the value with the specified key from
// the OpticsFastpoll map field of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) GetOpticsFastpoll(UniqueId uint32) *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll {

	if t == nil {
		return nil
	}

	key := UniqueId

	if lm, ok := t.OpticsFastpoll[key]; ok {
		return lm
	}
	return nil
}

// AppendOpticsFastpoll appends the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll struct to the
// list OpticsFastpoll of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls. If the key value(s) specified in
// the supplied Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) AppendOpticsFastpoll(v *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) error {
	if v.UniqueId == nil {
		return fmt.Errorf("invalid nil key received for UniqueId")
	}

	key := *v.UniqueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OpticsFastpoll == nil {
		t.OpticsFastpoll = make(map[uint32]*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll)
	}

	if _, ok := t.OpticsFastpoll[key]; ok {
		return fmt.Errorf("duplicate key for list OpticsFastpoll %v", key)
	}

	t.OpticsFastpoll[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-fastpolls/optics-fastpoll YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll struct {
	FastpollData *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData `path:"fastpoll-data" module:"Cisco-IOS-XR-controller-optics-oper"`
	UniqueId     *uint32                                                                                                         `path:"unique-id" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) IsYANGGoStruct() {
}

// GetOrCreateFastpollData retrieves the value of the FastpollData field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) GetOrCreateFastpollData() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData {
	if t.FastpollData != nil {
		return t.FastpollData
	}
	t.FastpollData = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData{}
	return t.FastpollData
}

// GetFastpollData returns the value of the FastpollData struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll. If the receiver or the field FastpollData is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) GetFastpollData() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData {
	if t != nil && t.FastpollData != nil {
		return t.FastpollData
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll struct, which is a YANG list entry.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UniqueId == nil {
		return nil, fmt.Errorf("nil value for key UniqueId")
	}

	return map[string]interface{}{
		"unique-id": *t.UniqueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-fastpolls/optics-fastpoll/fastpoll-data YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData struct {
	Index     *uint32 `path:"index" module:"Cisco-IOS-XR-controller-optics-oper"`
	Interval  *uint32 `path:"interval" module:"Cisco-IOS-XR-controller-optics-oper"`
	Sop1      *string `path:"sop1" module:"Cisco-IOS-XR-controller-optics-oper"`
	Sop2      *string `path:"sop2" module:"Cisco-IOS-XR-controller-optics-oper"`
	Sop3      *string `path:"sop3" module:"Cisco-IOS-XR-controller-optics-oper"`
	Timestamp *uint64 `path:"timestamp" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsFastpolls_OpticsFastpoll_FastpollData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo struct {
	AddDropChannel                           *string                                                                                                                 `path:"add-drop-channel" module:"Cisco-IOS-XR-controller-optics-oper"`
	AinsInfo                                 *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo                                 `path:"ains-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	AlarmDetected                            *bool                                                                                                                   `path:"alarm-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliChannelPowerConfigVal               *int32                                                                                                                  `path:"ampli-channel-power-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliChannelPsdConfigVal                 *int32                                                                                                                  `path:"ampli-channel-psd-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliControlModeConfigVal                E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierControlMode                                                           `path:"ampli-control-mode-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGain                                *int32                                                                                                                  `path:"ampli-gain" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGainConfigVal                       *int32                                                                                                                  `path:"ampli-gain-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGainRange                           E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"ampli-gain-range" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGainRangeConfigVal                  E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"ampli-gain-range-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGainThrDegHighConfigVal             *int32                                                                                                                  `path:"ampli-gain-thr-deg-high-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliGainThrDegLowConfigVal              *int32                                                                                                                  `path:"ampli-gain-thr-deg-low-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliTilt                                *int32                                                                                                                  `path:"ampli-tilt" module:"Cisco-IOS-XR-controller-optics-oper"`
	AmpliTiltConfigVal                       *int32                                                                                                                  `path:"ampli-tilt-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	BackReflection                           *int32                                                                                                                  `path:"back-reflection" module:"Cisco-IOS-XR-controller-optics-oper"`
	BaudRate                                 *string                                                                                                                 `path:"baud-rate" module:"Cisco-IOS-XR-controller-optics-oper"`
	BitsPerSymbol                            *string                                                                                                                 `path:"bits-per-symbol" module:"Cisco-IOS-XR-controller-optics-oper"`
	Cd                                       *int32                                                                                                                  `path:"cd" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdConfigurable                           *bool                                                                                                                   `path:"cd-configurable" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdDisplay                                *bool                                                                                                                   `path:"cd-display" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdHighThreshold                          *int32                                                                                                                  `path:"cd-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdLowThreshold                           *int32                                                                                                                  `path:"cd-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdMax                                    *int32                                                                                                                  `path:"cd-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	CdMin                                    *int32                                                                                                                  `path:"cd-min" module:"Cisco-IOS-XR-controller-optics-oper"`
	CentralFrequncy                          *string                                                                                                                 `path:"central-frequncy" module:"Cisco-IOS-XR-controller-optics-oper"`
	CfgTxPower                               *int32                                                                                                                  `path:"cfg-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	CfgTxPowerConfigurable                   *bool                                                                                                                   `path:"cfg-tx-power-configurable" module:"Cisco-IOS-XR-controller-optics-oper"`
	CfgTxPowerDisplay                        *bool                                                                                                                   `path:"cfg-tx-power-display" module:"Cisco-IOS-XR-controller-optics-oper"`
	CfgTxPowermW                             *int32                                                                                                                  `path:"cfg-tx-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	ChannelAttenuation                       *int32                                                                                                                  `path:"channel-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
	ChannelAttenuationConfigured             *int32                                                                                                                  `path:"channel-attenuation-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	ChannelCentralFreq                       *uint64                                                                                                                 `path:"channel-central-freq" module:"Cisco-IOS-XR-controller-optics-oper"`
	ChannelPowerMaxDeltaConfigVal            *int32                                                                                                                  `path:"channel-power-max-delta-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	ChannelWidth                             *uint32                                                                                                                 `path:"channel-width" module:"Cisco-IOS-XR-controller-optics-oper"`
	CompositeRamanPower                      *string                                                                                                                 `path:"composite-raman-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	ControllerState                          E_Cisco_IOS_XRControllerOpticsOper_OpticsControllerState                                                                `path:"controller-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	DacRateConfigured                        E_Cisco_IOS_XRControllerOpticsOper_OpticsDacRate                                                                        `path:"dac-rate-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	DacRateType                              E_Cisco_IOS_XRControllerOpticsOper_OpticsDacRate                                                                        `path:"dac-rate-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	DerivedOpticsType                        *string                                                                                                                 `path:"derived-optics-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	Description                              *string                                                                                                                 `path:"description" module:"Cisco-IOS-XR-controller-optics-oper"`
	DgdHighThreshold                         *string                                                                                                                 `path:"dgd-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	DifferentialGroupDelay                   *string                                                                                                                 `path:"differential-group-delay" module:"Cisco-IOS-XR-controller-optics-oper"`
	DisplayVoltTemp                          *bool                                                                                                                   `path:"display-volt-temp" module:"Cisco-IOS-XR-controller-optics-oper"`
	DomDataReady                             E_Cisco_IOS_XRControllerOpticsOper_OpticsDomDataStatus                                                                  `path:"dom-data-ready" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierBand                          E_Cisco_IOS_XRControllerOpticsOper_OpticsWaveBand                                                                       `path:"dwdm-carrier-band" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierChannel                       *string                                                                                                                 `path:"dwdm-carrier-channel" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierFrequency                     *string                                                                                                                 `path:"dwdm-carrier-frequency" module:"Cisco-IOS-XR-controller-optics-oper"`
	DwdmCarrierWavelength                    *string                                                                                                                 `path:"dwdm-carrier-wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliBr                            E_Cisco_IOS_XRControllerOpticsOper_OtsBackReflectionState                                                               `path:"egress-ampli-br" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliBrConfigured                  E_Cisco_IOS_XRControllerOpticsOper_OtsBackReflectionState                                                               `path:"egress-ampli-br-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliForceApr                      *bool                                                                                                                   `path:"egress-ampli-force-apr" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliForceAprConfigured            *bool                                                                                                                   `path:"egress-ampli-force-apr-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGain                          *string                                                                                                                 `path:"egress-ampli-gain" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGainConfig                    *string                                                                                                                 `path:"egress-ampli-gain-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGainRange                     E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"egress-ampli-gain-range" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGainRangeConfigVal            E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"egress-ampli-gain-range-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGainThrDegHighConfig          *string                                                                                                                 `path:"egress-ampli-gain-thr-deg-high-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliGainThrDegLowConfig           *string                                                                                                                 `path:"egress-ampli-gain-thr-deg-low-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliOsri                          *bool                                                                                                                   `path:"egress-ampli-osri" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliOsriConfigured                *bool                                                                                                                   `path:"egress-ampli-osri-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliSafetyControlMode             E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"egress-ampli-safety-control-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliSafetyControlModeConfigured   E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"egress-ampli-safety-control-mode-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliTilt                          *string                                                                                                                 `path:"egress-ampli-tilt" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressAmpliTiltConfig                    *string                                                                                                                 `path:"egress-ampli-tilt-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressBrHighThreshold                    *int32                                                                                                                  `path:"egress-br-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressChannelSliceAttenuation            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation            `path:"egress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressChannelSliceAttenuationConfigured  *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured  `path:"egress-channel-slice-attenuation-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	ExtParamThresholdVal                     *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal                     `path:"ext-param-threshold-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	ExtParamVal                              *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal                              `path:"ext-param-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	ExtendedAlarmAlarmInfo                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo                   `path:"extended-alarm-alarm-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	FormFactor                               E_Cisco_IOS_XRControllerOpticsOper_OpticsFormFactor                                                                     `path:"form-factor" module:"Cisco-IOS-XR-controller-optics-oper"`
	GreyWavelength                           *uint32                                                                                                                 `path:"grey-wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
	HostSquelch                              *bool                                                                                                                   `path:"host-squelch" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliForceApr                     *bool                                                                                                                   `path:"ingress-ampli-force-apr" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliForceAprConfigured           *bool                                                                                                                   `path:"ingress-ampli-force-apr-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliGain                         *string                                                                                                                 `path:"ingress-ampli-gain" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliGainConfig                   *string                                                                                                                 `path:"ingress-ampli-gain-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliGainRange                    E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"ingress-ampli-gain-range" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliGainRangeConfigVal           E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierGainRange                                                             `path:"ingress-ampli-gain-range-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliOsri                         *bool                                                                                                                   `path:"ingress-ampli-osri" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliOsriConfigured               *bool                                                                                                                   `path:"ingress-ampli-osri-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliSafetyControlMode            E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"ingress-ampli-safety-control-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliSafetyControlModeConfigured  E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"ingress-ampli-safety-control-mode-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliThrDegHighConfig             *string                                                                                                                 `path:"ingress-ampli-thr-deg-high-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliThrDegLowConfig              *string                                                                                                                 `path:"ingress-ampli-thr-deg-low-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliTilt                         *string                                                                                                                 `path:"ingress-ampli-tilt" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressAmpliTiltConfig                   *string                                                                                                                 `path:"ingress-ampli-tilt-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressChannelSliceAttenuation           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation           `path:"ingress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
	IngressChannelSliceAttenuationConfigured *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured `path:"ingress-channel-slice-attenuation-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsBoConfigured                           *bool                                                                                                                   `path:"is-bo-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsExtParamValid                          *bool                                                                                                                   `path:"is-ext-param-valid" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsOpticsTypeStringValid                  *bool                                                                                                                   `path:"is-optics-type-string-valid" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneData                                 []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_LaneData                               `path:"lane-data" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaneDisplayIndex0                        *bool                                                                                                                   `path:"lane-display-index0" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserState                               E_Cisco_IOS_XRControllerOpticsOper_OpticsLaserState                                                                     `path:"laser-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	LbcHighThreshold                         *int32                                                                                                                  `path:"lbc-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LbcThHighDefault                         *int32                                                                                                                  `path:"lbc-th-high-default" module:"Cisco-IOS-XR-controller-optics-oper"`
	LbcThHighWarningDefault                  *int32                                                                                                                  `path:"lbc-th-high-warning-default" module:"Cisco-IOS-XR-controller-optics-oper"`
	LbcThLowDefault                          *int32                                                                                                                  `path:"lbc-th-low-default" module:"Cisco-IOS-XR-controller-optics-oper"`
	LbcThLowWarningDefault                   *int32                                                                                                                  `path:"lbc-th-low-warning-default" module:"Cisco-IOS-XR-controller-optics-oper"`
	LedState                                 E_Cisco_IOS_XRControllerOpticsOper_OpticsLedState                                                                       `path:"led-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	LineChannel                              *string                                                                                                                 `path:"line-channel" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoopbackHost                             E_Cisco_IOS_XRControllerOpticsOper_OpticsLoopbackTypes                                                                  `path:"loopback-host" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoopbackMedia                            E_Cisco_IOS_XRControllerOpticsOper_OpticsLoopbackTypes                                                                  `path:"loopback-media" module:"Cisco-IOS-XR-controller-optics-oper"`
	MediaLinkdownPrefecDegrade               *bool                                                                                                                   `path:"media-linkdown-prefec-degrade" module:"Cisco-IOS-XR-controller-optics-oper"`
	MediaSquelch                             *bool                                                                                                                   `path:"media-squelch" module:"Cisco-IOS-XR-controller-optics-oper"`
	ModulationType                           E_Cisco_IOS_XRControllerOpticsOper_OpticsModulation                                                                     `path:"modulation-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	NetworkSrlgInfo                          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo                          `path:"network-srlg-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticalSignalToNoiseRatio                *string                                                                                                                 `path:"optical-signal-to-noise-ratio" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsAlarmInfo                          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo                          `path:"optics-alarm-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsFec                                E_Cisco_IOS_XRControllerOpticsOper_OpticsFec                                                                            `path:"optics-fec" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsModule                             *string                                                                                                                 `path:"optics-module" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsPresent                            *bool                                                                                                                   `path:"optics-present" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsType                               E_Cisco_IOS_XRControllerOpticsOper_Optics                                                                               `path:"optics-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	OpticsTypeStr                            *string                                                                                                                 `path:"optics-type-str" module:"Cisco-IOS-XR-controller-optics-oper"`
	OsnrLowThreshold                         *string                                                                                                                 `path:"osnr-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	Osri                                     *bool                                                                                                                   `path:"osri" module:"Cisco-IOS-XR-controller-optics-oper"`
	OsriConfigVal                            *bool                                                                                                                   `path:"osri-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	OtsAlarmInfo                             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo                             `path:"ots-alarm-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	PhaseNoise                               *string                                                                                                                 `path:"phase-noise" module:"Cisco-IOS-XR-controller-optics-oper"`
	PhyType                                  E_Cisco_IOS_XRControllerOpticsOper_OpticsPhy                                                                            `path:"phy-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	PmEnable                                 *uint32                                                                                                                 `path:"pm-enable" module:"Cisco-IOS-XR-controller-optics-oper"`
	PolarizationChangeRate                   *string                                                                                                                 `path:"polarization-change-rate" module:"Cisco-IOS-XR-controller-optics-oper"`
	PolarizationDependentLoss                *string                                                                                                                 `path:"polarization-dependent-loss" module:"Cisco-IOS-XR-controller-optics-oper"`
	PolarizationModeDispersion               *string                                                                                                                 `path:"polarization-mode-dispersion" module:"Cisco-IOS-XR-controller-optics-oper"`
	PortStatus                               E_Cisco_IOS_XRControllerOpticsOper_OpticsPortStatus                                                                     `path:"port-status" module:"Cisco-IOS-XR-controller-optics-oper"`
	PortType                                 E_Cisco_IOS_XRControllerOpticsOper_OpticsPort                                                                           `path:"port-type" module:"Cisco-IOS-XR-controller-optics-oper"`
	PowerMode                                E_Cisco_IOS_XRControllerOpticsOper_OpticsPowerMode                                                                      `path:"power-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanBr                                  E_Cisco_IOS_XRControllerOpticsOper_OtsBackReflectionState                                                               `path:"raman-br" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanBrConfigured                        E_Cisco_IOS_XRControllerOpticsOper_OtsBackReflectionState                                                               `path:"raman-br-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanBrHighThreshold                     *int32                                                                                                                  `path:"raman-br-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanForceApr                            *bool                                                                                                                   `path:"raman-force-apr" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanForceAprConfigured                  *bool                                                                                                                   `path:"raman-force-apr-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanOsri                                *bool                                                                                                                   `path:"raman-osri" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanOsriConfigured                      *bool                                                                                                                   `path:"raman-osri-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanSafetyControlMode                   E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"raman-safety-control-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanSafetyControlModeConfigured         E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"raman-safety-control-mode-configured" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxPower                             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower                             `path:"raman-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	RamanTxPowerConfig                       *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig                       `path:"raman-tx-power-config" module:"Cisco-IOS-XR-controller-optics-oper"`
	ReceiveNPower                            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower                            `path:"receive-n-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxConfigVal                              *bool                                                                                                                   `path:"rx-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxEnable                                 *bool                                                                                                                   `path:"rx-enable" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxHighThreshold                          *int32                                                                                                                  `path:"rx-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxHighThresholdmW                        *int32                                                                                                                  `path:"rx-high-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxHighWarningThreshold                   *int32                                                                                                                  `path:"rx-high-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxHighWarningThresholdmW                 *int32                                                                                                                  `path:"rx-high-warning-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowThPsdConfigVal                      *int32                                                                                                                  `path:"rx-low-th-psd-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowThreshold                           *int32                                                                                                                  `path:"rx-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowThresholdCurrent                    *int32                                                                                                                  `path:"rx-low-threshold-current" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowThresholdDelta                      *int32                                                                                                                  `path:"rx-low-threshold-delta" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowThresholdmW                         *int32                                                                                                                  `path:"rx-low-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowWarningThreshold                    *int32                                                                                                                  `path:"rx-low-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxLowWarningThresholdmW                  *int32                                                                                                                  `path:"rx-low-warning-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxPowerThConfigurable                    *bool                                                                                                                   `path:"rx-power-th-configurable" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxPsd                                    *string                                                                                                                 `path:"rx-psd" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxSpanLoss                               *int32                                                                                                                  `path:"rx-span-loss" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxThrFailLowDeltaVal                     *int32                                                                                                                  `path:"rx-thr-fail-low-delta-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxVoaAttenuation                         *int32                                                                                                                  `path:"rx-voa-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
	RxVoaAttenuationConfigVal                *int32                                                                                                                  `path:"rx-voa-attenuation-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	SafetyControlMode                        E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"safety-control-mode" module:"Cisco-IOS-XR-controller-optics-oper"`
	SafetyControlModeConfigVal               E_Cisco_IOS_XRControllerOpticsOper_OpticsAmplifierSafetyControlMode                                                     `path:"safety-control-mode-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	SecondOrderPolarizationModeDispersion    *string                                                                                                                 `path:"second-order-polarization-mode-dispersion" module:"Cisco-IOS-XR-controller-optics-oper"`
	SkipSnmpPmTable                          *int32                                                                                                                  `path:"skip-snmp-pm-table" module:"Cisco-IOS-XR-controller-optics-oper"`
	Snr                                      *string                                                                                                                 `path:"snr" module:"Cisco-IOS-XR-controller-optics-oper"`
	SubmarineInfo                            *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo                            `path:"submarine-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	TempHighThreshold                        *int32                                                                                                                  `path:"temp-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TempHighWarningThreshold                 *int32                                                                                                                  `path:"temp-high-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TempLowThreshold                         *int32                                                                                                                  `path:"temp-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TempLowWarningThreshold                  *int32                                                                                                                  `path:"temp-low-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	Temperature                              *int32                                                                                                                  `path:"temperature" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalClRxPower                           *string                                                                                                                 `path:"total-cl-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalClTxPower                           *string                                                                                                                 `path:"total-cl-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalRxPower                             *int32                                                                                                                  `path:"total-rx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalRxPowermW                           *int32                                                                                                                  `path:"total-rx-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalTxPower                             *int32                                                                                                                  `path:"total-tx-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TotalTxPowermW                           *int32                                                                                                                  `path:"total-tx-powerm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransceiverInfo                          *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo                          `path:"transceiver-info" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransmitNPower                           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower                           `path:"transmit-n-power" module:"Cisco-IOS-XR-controller-optics-oper"`
	TransportAdminState                      E_Cisco_IOS_XRControllerOpticsOper_OpticsTas                                                                            `path:"transport-admin-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxConfigVal                              *bool                                                                                                                   `path:"tx-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxEnable                                 *bool                                                                                                                   `path:"tx-enable" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxHighThreshold                          *int32                                                                                                                  `path:"tx-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxHighThresholdmW                        *int32                                                                                                                  `path:"tx-high-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxHighWarningThreshold                   *int32                                                                                                                  `path:"tx-high-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxHighWarningThresholdmW                 *int32                                                                                                                  `path:"tx-high-warning-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLowThreshold                           *int32                                                                                                                  `path:"tx-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLowThresholdmW                         *int32                                                                                                                  `path:"tx-low-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLowWarningThreshold                    *int32                                                                                                                  `path:"tx-low-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxLowWarningThresholdmW                  *int32                                                                                                                  `path:"tx-low-warning-thresholdm-w" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxPowerThConfigurable                    *bool                                                                                                                   `path:"tx-power-th-configurable" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxPsd                                    *string                                                                                                                 `path:"tx-psd" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxSpanLoss                               *int32                                                                                                                  `path:"tx-span-loss" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxVoaAttenuation                         *int32                                                                                                                  `path:"tx-voa-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
	TxVoaAttenuationConfigVal                *int32                                                                                                                  `path:"tx-voa-attenuation-config-val" module:"Cisco-IOS-XR-controller-optics-oper"`
	VoltHighThreshold                        *int32                                                                                                                  `path:"volt-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	VoltHighWarningThreshold                 *int32                                                                                                                  `path:"volt-high-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	VoltLowThreshold                         *int32                                                                                                                  `path:"volt-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	VoltLowWarningThreshold                  *int32                                                                                                                  `path:"volt-low-warning-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	Voltage                                  *int32                                                                                                                  `path:"voltage" module:"Cisco-IOS-XR-controller-optics-oper"`
	WaitToRestore                            *uint32                                                                                                                 `path:"wait-to-restore" module:"Cisco-IOS-XR-controller-optics-oper"`
	Wavelength                               *string                                                                                                                 `path:"wavelength" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) IsYANGGoStruct() {
}

// GetOrCreateAinsInfo retrieves the value of the AinsInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateAinsInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo {
	if t.AinsInfo != nil {
		return t.AinsInfo
	}
	t.AinsInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo{}
	return t.AinsInfo
}

// GetOrCreateEgressChannelSliceAttenuation retrieves the value of the EgressChannelSliceAttenuation field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateEgressChannelSliceAttenuation() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation {
	if t.EgressChannelSliceAttenuation != nil {
		return t.EgressChannelSliceAttenuation
	}
	t.EgressChannelSliceAttenuation = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation{}
	return t.EgressChannelSliceAttenuation
}

// GetOrCreateEgressChannelSliceAttenuationConfigured retrieves the value of the EgressChannelSliceAttenuationConfigured field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateEgressChannelSliceAttenuationConfigured() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured {
	if t.EgressChannelSliceAttenuationConfigured != nil {
		return t.EgressChannelSliceAttenuationConfigured
	}
	t.EgressChannelSliceAttenuationConfigured = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured{}
	return t.EgressChannelSliceAttenuationConfigured
}

// GetOrCreateExtParamThresholdVal retrieves the value of the ExtParamThresholdVal field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateExtParamThresholdVal() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal {
	if t.ExtParamThresholdVal != nil {
		return t.ExtParamThresholdVal
	}
	t.ExtParamThresholdVal = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal{}
	return t.ExtParamThresholdVal
}

// GetOrCreateExtParamVal retrieves the value of the ExtParamVal field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateExtParamVal() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal {
	if t.ExtParamVal != nil {
		return t.ExtParamVal
	}
	t.ExtParamVal = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal{}
	return t.ExtParamVal
}

// GetOrCreateExtendedAlarmAlarmInfo retrieves the value of the ExtendedAlarmAlarmInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateExtendedAlarmAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo {
	if t.ExtendedAlarmAlarmInfo != nil {
		return t.ExtendedAlarmAlarmInfo
	}
	t.ExtendedAlarmAlarmInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo{}
	return t.ExtendedAlarmAlarmInfo
}

// GetOrCreateIngressChannelSliceAttenuation retrieves the value of the IngressChannelSliceAttenuation field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateIngressChannelSliceAttenuation() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation {
	if t.IngressChannelSliceAttenuation != nil {
		return t.IngressChannelSliceAttenuation
	}
	t.IngressChannelSliceAttenuation = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation{}
	return t.IngressChannelSliceAttenuation
}

// GetOrCreateIngressChannelSliceAttenuationConfigured retrieves the value of the IngressChannelSliceAttenuationConfigured field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateIngressChannelSliceAttenuationConfigured() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured {
	if t.IngressChannelSliceAttenuationConfigured != nil {
		return t.IngressChannelSliceAttenuationConfigured
	}
	t.IngressChannelSliceAttenuationConfigured = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured{}
	return t.IngressChannelSliceAttenuationConfigured
}

// GetOrCreateNetworkSrlgInfo retrieves the value of the NetworkSrlgInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateNetworkSrlgInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo {
	if t.NetworkSrlgInfo != nil {
		return t.NetworkSrlgInfo
	}
	t.NetworkSrlgInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo{}
	return t.NetworkSrlgInfo
}

// GetOrCreateOpticsAlarmInfo retrieves the value of the OpticsAlarmInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateOpticsAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo {
	if t.OpticsAlarmInfo != nil {
		return t.OpticsAlarmInfo
	}
	t.OpticsAlarmInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo{}
	return t.OpticsAlarmInfo
}

// GetOrCreateOtsAlarmInfo retrieves the value of the OtsAlarmInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateOtsAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo {
	if t.OtsAlarmInfo != nil {
		return t.OtsAlarmInfo
	}
	t.OtsAlarmInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo{}
	return t.OtsAlarmInfo
}

// GetOrCreateRamanTxPower retrieves the value of the RamanTxPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateRamanTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower {
	if t.RamanTxPower != nil {
		return t.RamanTxPower
	}
	t.RamanTxPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower{}
	return t.RamanTxPower
}

// GetOrCreateRamanTxPowerConfig retrieves the value of the RamanTxPowerConfig field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateRamanTxPowerConfig() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig {
	if t.RamanTxPowerConfig != nil {
		return t.RamanTxPowerConfig
	}
	t.RamanTxPowerConfig = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig{}
	return t.RamanTxPowerConfig
}

// GetOrCreateReceiveNPower retrieves the value of the ReceiveNPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateReceiveNPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower {
	if t.ReceiveNPower != nil {
		return t.ReceiveNPower
	}
	t.ReceiveNPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower{}
	return t.ReceiveNPower
}

// GetOrCreateSubmarineInfo retrieves the value of the SubmarineInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateSubmarineInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo {
	if t.SubmarineInfo != nil {
		return t.SubmarineInfo
	}
	t.SubmarineInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo{}
	return t.SubmarineInfo
}

// GetOrCreateTransceiverInfo retrieves the value of the TransceiverInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateTransceiverInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo {
	if t.TransceiverInfo != nil {
		return t.TransceiverInfo
	}
	t.TransceiverInfo = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo{}
	return t.TransceiverInfo
}

// GetOrCreateTransmitNPower retrieves the value of the TransmitNPower field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOrCreateTransmitNPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower {
	if t.TransmitNPower != nil {
		return t.TransmitNPower
	}
	t.TransmitNPower = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower{}
	return t.TransmitNPower
}

// GetAinsInfo returns the value of the AinsInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field AinsInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetAinsInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo {
	if t != nil && t.AinsInfo != nil {
		return t.AinsInfo
	}
	return nil
}

// GetEgressChannelSliceAttenuation returns the value of the EgressChannelSliceAttenuation struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field EgressChannelSliceAttenuation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetEgressChannelSliceAttenuation() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation {
	if t != nil && t.EgressChannelSliceAttenuation != nil {
		return t.EgressChannelSliceAttenuation
	}
	return nil
}

// GetEgressChannelSliceAttenuationConfigured returns the value of the EgressChannelSliceAttenuationConfigured struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field EgressChannelSliceAttenuationConfigured is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetEgressChannelSliceAttenuationConfigured() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured {
	if t != nil && t.EgressChannelSliceAttenuationConfigured != nil {
		return t.EgressChannelSliceAttenuationConfigured
	}
	return nil
}

// GetExtParamThresholdVal returns the value of the ExtParamThresholdVal struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field ExtParamThresholdVal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetExtParamThresholdVal() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal {
	if t != nil && t.ExtParamThresholdVal != nil {
		return t.ExtParamThresholdVal
	}
	return nil
}

// GetExtParamVal returns the value of the ExtParamVal struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field ExtParamVal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetExtParamVal() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal {
	if t != nil && t.ExtParamVal != nil {
		return t.ExtParamVal
	}
	return nil
}

// GetExtendedAlarmAlarmInfo returns the value of the ExtendedAlarmAlarmInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field ExtendedAlarmAlarmInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetExtendedAlarmAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo {
	if t != nil && t.ExtendedAlarmAlarmInfo != nil {
		return t.ExtendedAlarmAlarmInfo
	}
	return nil
}

// GetIngressChannelSliceAttenuation returns the value of the IngressChannelSliceAttenuation struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field IngressChannelSliceAttenuation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetIngressChannelSliceAttenuation() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuation {
	if t != nil && t.IngressChannelSliceAttenuation != nil {
		return t.IngressChannelSliceAttenuation
	}
	return nil
}

// GetIngressChannelSliceAttenuationConfigured returns the value of the IngressChannelSliceAttenuationConfigured struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field IngressChannelSliceAttenuationConfigured is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetIngressChannelSliceAttenuationConfigured() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_IngressChannelSliceAttenuationConfigured {
	if t != nil && t.IngressChannelSliceAttenuationConfigured != nil {
		return t.IngressChannelSliceAttenuationConfigured
	}
	return nil
}

// GetNetworkSrlgInfo returns the value of the NetworkSrlgInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field NetworkSrlgInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetNetworkSrlgInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_NetworkSrlgInfo {
	if t != nil && t.NetworkSrlgInfo != nil {
		return t.NetworkSrlgInfo
	}
	return nil
}

// GetOpticsAlarmInfo returns the value of the OpticsAlarmInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field OpticsAlarmInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOpticsAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OpticsAlarmInfo {
	if t != nil && t.OpticsAlarmInfo != nil {
		return t.OpticsAlarmInfo
	}
	return nil
}

// GetOtsAlarmInfo returns the value of the OtsAlarmInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field OtsAlarmInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetOtsAlarmInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_OtsAlarmInfo {
	if t != nil && t.OtsAlarmInfo != nil {
		return t.OtsAlarmInfo
	}
	return nil
}

// GetRamanTxPower returns the value of the RamanTxPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field RamanTxPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetRamanTxPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPower {
	if t != nil && t.RamanTxPower != nil {
		return t.RamanTxPower
	}
	return nil
}

// GetRamanTxPowerConfig returns the value of the RamanTxPowerConfig struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field RamanTxPowerConfig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetRamanTxPowerConfig() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_RamanTxPowerConfig {
	if t != nil && t.RamanTxPowerConfig != nil {
		return t.RamanTxPowerConfig
	}
	return nil
}

// GetReceiveNPower returns the value of the ReceiveNPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field ReceiveNPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetReceiveNPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ReceiveNPower {
	if t != nil && t.ReceiveNPower != nil {
		return t.ReceiveNPower
	}
	return nil
}

// GetSubmarineInfo returns the value of the SubmarineInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field SubmarineInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetSubmarineInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_SubmarineInfo {
	if t != nil && t.SubmarineInfo != nil {
		return t.SubmarineInfo
	}
	return nil
}

// GetTransceiverInfo returns the value of the TransceiverInfo struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field TransceiverInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetTransceiverInfo() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransceiverInfo {
	if t != nil && t.TransceiverInfo != nil {
		return t.TransceiverInfo
	}
	return nil
}

// GetTransmitNPower returns the value of the TransmitNPower struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo. If the receiver or the field TransmitNPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) GetTransmitNPower() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_TransmitNPower {
	if t != nil && t.TransmitNPower != nil {
		return t.TransmitNPower
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ains-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo struct {
	AinsRemainingSecs *uint32                                              `path:"ains-remaining-secs" module:"Cisco-IOS-XR-controller-optics-oper"`
	AinsState         E_Cisco_IOS_XRControllerOpticsOper_OpticsAinsStateEt `path:"ains-state" module:"Cisco-IOS-XR-controller-optics-oper"`
	AinsTimerMinutes  *uint32                                              `path:"ains-timer-minutes" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_AinsInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/egress-channel-slice-attenuation YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/egress-channel-slice-attenuation-configured YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured struct {
	Count []*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count `path:"count" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/egress-channel-slice-attenuation-configured/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count struct {
	EgressChannelSlice            *uint32 `path:"egress-channel-slice" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressChannelSliceAttenuation *string `path:"egress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuationConfigured_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/egress-channel-slice-attenuation/count YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count struct {
	EgressChannelSlice            *uint32 `path:"egress-channel-slice" module:"Cisco-IOS-XR-controller-optics-oper"`
	EgressChannelSliceAttenuation *string `path:"egress-channel-slice-attenuation" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_EgressChannelSliceAttenuation_Count) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ext-param-threshold-val YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal struct {
	IsiCorrectionAlarmHighThreshold               *int32 `path:"isi-correction-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsiCorrectionAlarmLowThreshold                *int32 `path:"isi-correction-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsiCorrectionWarnHighThreshold                *int32 `path:"isi-correction-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsiCorrectionWarnLowThreshold                 *int32 `path:"isi-correction-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyAlarmHighThreshold          *int32 `path:"laser-diff-frequency-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyAlarmLowThreshold           *int32 `path:"laser-diff-frequency-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyWarnHighThreshold           *int32 `path:"laser-diff-frequency-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyWarnLowThreshold            *int32 `path:"laser-diff-frequency-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureAlarmHighThreshold        *int32 `path:"laser-diff-temperature-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureAlarmLowThreshold         *int32 `path:"laser-diff-temperature-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureWarnHighThreshold         *int32 `path:"laser-diff-temperature-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureWarnLowThreshold          *int32 `path:"laser-diff-temperature-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateAlarmHighThreshold                     *int32 `path:"pam-rate-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateAlarmLowThreshold                      *int32 `path:"pam-rate-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateWarnHighThreshold                      *int32 `path:"pam-rate-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateWarnLowThreshold                       *int32 `path:"pam-rate-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAccumulatedAlarmHighThreshold        *int64 `path:"pre-fec-ber-accumulated-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAccumulatedAlarmLowThreshold         *int64 `path:"pre-fec-ber-accumulated-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAccumulatedWarnHighThreshold         *int64 `path:"pre-fec-ber-accumulated-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAccumulatedWarnLowThreshold          *int64 `path:"pre-fec-ber-accumulated-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAlarmHighThreshold                   *int64 `path:"pre-fec-ber-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAlarmLowThreshold                    *int64 `path:"pre-fec-ber-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerInstantaneousAlarmHighThreshold      *int64 `path:"pre-fec-ber-instantaneous-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerInstantaneousAlarmLowThreshold       *int64 `path:"pre-fec-ber-instantaneous-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerInstantaneousWarnHighThreshold       *int64 `path:"pre-fec-ber-instantaneous-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerInstantaneousWarnLowThreshold        *int64 `path:"pre-fec-ber-instantaneous-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMaxAlarmHighThreshold         *int64 `path:"pre-fec-ber-latched-max-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMaxAlarmLowThreshold          *int64 `path:"pre-fec-ber-latched-max-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMaxWarnHighThreshold          *int64 `path:"pre-fec-ber-latched-max-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMaxWarnLowThreshold           *int64 `path:"pre-fec-ber-latched-max-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMinAlarmHighThreshold         *int64 `path:"pre-fec-ber-latched-min-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMinAlarmLowThreshold          *int64 `path:"pre-fec-ber-latched-min-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMinWarnHighThreshold          *int64 `path:"pre-fec-ber-latched-min-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMinWarnLowThreshold           *int64 `path:"pre-fec-ber-latched-min-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerWarnHighThreshold                    *int64 `path:"pre-fec-ber-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerWarnLowThreshold                     *int64 `path:"pre-fec-ber-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrAlarmHighThreshold                         *int32 `path:"snr-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrAlarmLowThreshold                          *int32 `path:"snr-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrWarnHighThreshold                          *int32 `path:"snr-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrWarnLowThreshold                           *int32 `path:"snr-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentAlarmHighThreshold                  *int32 `path:"tec-current-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentAlarmLowThreshold                   *int32 `path:"tec-current-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentWarnHighThreshold                   *int32 `path:"tec-current-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentWarnLowThreshold                    *int32 `path:"tec-current-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAccumulatedAlarmHighThreshold   *int64 `path:"uncorrected-ber-accumulated-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAccumulatedAlarmLowThreshold    *int64 `path:"uncorrected-ber-accumulated-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAccumulatedWarnHighThreshold    *int64 `path:"uncorrected-ber-accumulated-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAccumulatedWarnLowThreshold     *int64 `path:"uncorrected-ber-accumulated-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAlarmHighThreshold              *int64 `path:"uncorrected-ber-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAlarmLowThreshold               *int64 `path:"uncorrected-ber-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerInstantaneousAlarmHighThreshold *int64 `path:"uncorrected-ber-instantaneous-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerInstantaneousAlarmLowThreshold  *int64 `path:"uncorrected-ber-instantaneous-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerInstantaneousWarnHighThreshold  *int64 `path:"uncorrected-ber-instantaneous-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerInstantaneousWarnLowThreshold   *int64 `path:"uncorrected-ber-instantaneous-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMaxAlarmHighThreshold    *int64 `path:"uncorrected-ber-latched-max-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMaxAlarmLowThreshold     *int64 `path:"uncorrected-ber-latched-max-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMaxWarnHighThreshold     *int64 `path:"uncorrected-ber-latched-max-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMaxWarnLowThreshold      *int64 `path:"uncorrected-ber-latched-max-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMinAlarmHighThreshold    *int64 `path:"uncorrected-ber-latched-min-alarm-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMinAlarmLowThreshold     *int64 `path:"uncorrected-ber-latched-min-alarm-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMinWarnHighThreshold     *int64 `path:"uncorrected-ber-latched-min-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMinWarnLowThreshold      *int64 `path:"uncorrected-ber-latched-min-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerWarnHighThreshold               *int64 `path:"uncorrected-ber-warn-high-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerWarnLowThreshold                *int64 `path:"uncorrected-ber-warn-low-threshold" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamThresholdVal) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/ext-param-val YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal struct {
	IsiCorrectionLane1          *int32 `path:"isi-correction-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsiCorrectionLane2          *int32 `path:"isi-correction-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyLane1     *int32 `path:"laser-diff-frequency-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffFrequencyLane2     *int32 `path:"laser-diff-frequency-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureLane1   *int32 `path:"laser-diff-temperature-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LaserDiffTemperatureLane2   *int32 `path:"laser-diff-temperature-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateLane1                *int32 `path:"pam-rate-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	PamRateLane2                *int32 `path:"pam-rate-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBer                   *int64 `path:"pre-fec-ber" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerAccumulated        *int64 `path:"pre-fec-ber-accumulated" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerInstantaneous      *int64 `path:"pre-fec-ber-instantaneous" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMax         *int64 `path:"pre-fec-ber-latched-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	PreFecBerLatchedMin         *int64 `path:"pre-fec-ber-latched-min" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrLane1                    *int32 `path:"snr-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	SnrLane2                    *int32 `path:"snr-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentLane1             *int32 `path:"tec-current-lane1" module:"Cisco-IOS-XR-controller-optics-oper"`
	TecCurrentLane2             *int32 `path:"tec-current-lane2" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBer              *int64 `path:"uncorrected-ber" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerAccumulated   *int64 `path:"uncorrected-ber-accumulated" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerInstantaneous *int64 `path:"uncorrected-ber-instantaneous" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMax    *int64 `path:"uncorrected-ber-latched-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	UncorrectedBerLatchedMin    *int64 `path:"uncorrected-ber-latched-min" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtParamVal) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo struct {
	HiIsi1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1                   `path:"hi-isi1" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiIsi2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2                   `path:"hi-isi2" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiLaserFreq1             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1             `path:"hi-laser-freq1" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiLaserFreq2             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2             `path:"hi-laser-freq2" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPam1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1                   `path:"hi-pam1" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPam2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2                   `path:"hi-pam2" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPreFecberCur           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur           `path:"hi-pre-fecber-cur" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPreFecberCurAcc        *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc        `path:"hi-pre-fecber-cur-acc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPreFecberMax           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax           `path:"hi-pre-fecber-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPreFecberMin           *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin           `path:"hi-pre-fecber-min" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiPreFecberPriorAcc      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc      `path:"hi-pre-fecber-prior-acc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiSnr1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1                   `path:"hi-snr1" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiSnr2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2                   `path:"hi-snr2" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiTec1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1                   `path:"hi-tec1" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiTec2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2                   `path:"hi-tec2" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiUncorrectedBerCur      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur      `path:"hi-uncorrected-ber-cur" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiUncorrectedBerCurAcc   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc   `path:"hi-uncorrected-ber-cur-acc" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiUncorrectedBerMax      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax      `path:"hi-uncorrected-ber-max" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiUncorrectedBerMin      *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin      `path:"hi-uncorrected-ber-min" module:"Cisco-IOS-XR-controller-optics-oper"`
	HiUncorrectedBerPriorAcc *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc `path:"hi-uncorrected-ber-prior-acc" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoIsi1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1                   `path:"lo-isi1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoIsi2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2                   `path:"lo-isi2" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoLaserFreq1             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1             `path:"lo-laser-freq1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoLaserFreq2             *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2             `path:"lo-laser-freq2" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoPam1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1                   `path:"lo-pam1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoPam2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2                   `path:"lo-pam2" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoSnr                    *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr                    `path:"lo-snr" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoSnr1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1                   `path:"lo-snr1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoTec1                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1                   `path:"lo-tec1" module:"Cisco-IOS-XR-controller-optics-oper"`
	LoTec2                   *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2                   `path:"lo-tec2" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) IsYANGGoStruct() {
}

// GetOrCreateHiIsi1 retrieves the value of the HiIsi1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiIsi1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1 {
	if t.HiIsi1 != nil {
		return t.HiIsi1
	}
	t.HiIsi1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1{}
	return t.HiIsi1
}

// GetOrCreateHiIsi2 retrieves the value of the HiIsi2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiIsi2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2 {
	if t.HiIsi2 != nil {
		return t.HiIsi2
	}
	t.HiIsi2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2{}
	return t.HiIsi2
}

// GetOrCreateHiLaserFreq1 retrieves the value of the HiLaserFreq1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiLaserFreq1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1 {
	if t.HiLaserFreq1 != nil {
		return t.HiLaserFreq1
	}
	t.HiLaserFreq1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1{}
	return t.HiLaserFreq1
}

// GetOrCreateHiLaserFreq2 retrieves the value of the HiLaserFreq2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiLaserFreq2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2 {
	if t.HiLaserFreq2 != nil {
		return t.HiLaserFreq2
	}
	t.HiLaserFreq2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2{}
	return t.HiLaserFreq2
}

// GetOrCreateHiPam1 retrieves the value of the HiPam1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPam1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1 {
	if t.HiPam1 != nil {
		return t.HiPam1
	}
	t.HiPam1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1{}
	return t.HiPam1
}

// GetOrCreateHiPam2 retrieves the value of the HiPam2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPam2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2 {
	if t.HiPam2 != nil {
		return t.HiPam2
	}
	t.HiPam2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2{}
	return t.HiPam2
}

// GetOrCreateHiPreFecberCur retrieves the value of the HiPreFecberCur field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPreFecberCur() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur {
	if t.HiPreFecberCur != nil {
		return t.HiPreFecberCur
	}
	t.HiPreFecberCur = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur{}
	return t.HiPreFecberCur
}

// GetOrCreateHiPreFecberCurAcc retrieves the value of the HiPreFecberCurAcc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPreFecberCurAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc {
	if t.HiPreFecberCurAcc != nil {
		return t.HiPreFecberCurAcc
	}
	t.HiPreFecberCurAcc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc{}
	return t.HiPreFecberCurAcc
}

// GetOrCreateHiPreFecberMax retrieves the value of the HiPreFecberMax field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPreFecberMax() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax {
	if t.HiPreFecberMax != nil {
		return t.HiPreFecberMax
	}
	t.HiPreFecberMax = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax{}
	return t.HiPreFecberMax
}

// GetOrCreateHiPreFecberMin retrieves the value of the HiPreFecberMin field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPreFecberMin() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin {
	if t.HiPreFecberMin != nil {
		return t.HiPreFecberMin
	}
	t.HiPreFecberMin = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin{}
	return t.HiPreFecberMin
}

// GetOrCreateHiPreFecberPriorAcc retrieves the value of the HiPreFecberPriorAcc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiPreFecberPriorAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc {
	if t.HiPreFecberPriorAcc != nil {
		return t.HiPreFecberPriorAcc
	}
	t.HiPreFecberPriorAcc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc{}
	return t.HiPreFecberPriorAcc
}

// GetOrCreateHiSnr1 retrieves the value of the HiSnr1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiSnr1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1 {
	if t.HiSnr1 != nil {
		return t.HiSnr1
	}
	t.HiSnr1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1{}
	return t.HiSnr1
}

// GetOrCreateHiSnr2 retrieves the value of the HiSnr2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiSnr2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2 {
	if t.HiSnr2 != nil {
		return t.HiSnr2
	}
	t.HiSnr2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2{}
	return t.HiSnr2
}

// GetOrCreateHiTec1 retrieves the value of the HiTec1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiTec1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1 {
	if t.HiTec1 != nil {
		return t.HiTec1
	}
	t.HiTec1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1{}
	return t.HiTec1
}

// GetOrCreateHiTec2 retrieves the value of the HiTec2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiTec2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2 {
	if t.HiTec2 != nil {
		return t.HiTec2
	}
	t.HiTec2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2{}
	return t.HiTec2
}

// GetOrCreateHiUncorrectedBerCur retrieves the value of the HiUncorrectedBerCur field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiUncorrectedBerCur() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur {
	if t.HiUncorrectedBerCur != nil {
		return t.HiUncorrectedBerCur
	}
	t.HiUncorrectedBerCur = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur{}
	return t.HiUncorrectedBerCur
}

// GetOrCreateHiUncorrectedBerCurAcc retrieves the value of the HiUncorrectedBerCurAcc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiUncorrectedBerCurAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc {
	if t.HiUncorrectedBerCurAcc != nil {
		return t.HiUncorrectedBerCurAcc
	}
	t.HiUncorrectedBerCurAcc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc{}
	return t.HiUncorrectedBerCurAcc
}

// GetOrCreateHiUncorrectedBerMax retrieves the value of the HiUncorrectedBerMax field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiUncorrectedBerMax() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax {
	if t.HiUncorrectedBerMax != nil {
		return t.HiUncorrectedBerMax
	}
	t.HiUncorrectedBerMax = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax{}
	return t.HiUncorrectedBerMax
}

// GetOrCreateHiUncorrectedBerMin retrieves the value of the HiUncorrectedBerMin field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiUncorrectedBerMin() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin {
	if t.HiUncorrectedBerMin != nil {
		return t.HiUncorrectedBerMin
	}
	t.HiUncorrectedBerMin = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin{}
	return t.HiUncorrectedBerMin
}

// GetOrCreateHiUncorrectedBerPriorAcc retrieves the value of the HiUncorrectedBerPriorAcc field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateHiUncorrectedBerPriorAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc {
	if t.HiUncorrectedBerPriorAcc != nil {
		return t.HiUncorrectedBerPriorAcc
	}
	t.HiUncorrectedBerPriorAcc = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc{}
	return t.HiUncorrectedBerPriorAcc
}

// GetOrCreateLoIsi1 retrieves the value of the LoIsi1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoIsi1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1 {
	if t.LoIsi1 != nil {
		return t.LoIsi1
	}
	t.LoIsi1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1{}
	return t.LoIsi1
}

// GetOrCreateLoIsi2 retrieves the value of the LoIsi2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoIsi2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2 {
	if t.LoIsi2 != nil {
		return t.LoIsi2
	}
	t.LoIsi2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2{}
	return t.LoIsi2
}

// GetOrCreateLoLaserFreq1 retrieves the value of the LoLaserFreq1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoLaserFreq1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1 {
	if t.LoLaserFreq1 != nil {
		return t.LoLaserFreq1
	}
	t.LoLaserFreq1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1{}
	return t.LoLaserFreq1
}

// GetOrCreateLoLaserFreq2 retrieves the value of the LoLaserFreq2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoLaserFreq2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2 {
	if t.LoLaserFreq2 != nil {
		return t.LoLaserFreq2
	}
	t.LoLaserFreq2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2{}
	return t.LoLaserFreq2
}

// GetOrCreateLoPam1 retrieves the value of the LoPam1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoPam1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1 {
	if t.LoPam1 != nil {
		return t.LoPam1
	}
	t.LoPam1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1{}
	return t.LoPam1
}

// GetOrCreateLoPam2 retrieves the value of the LoPam2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoPam2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2 {
	if t.LoPam2 != nil {
		return t.LoPam2
	}
	t.LoPam2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2{}
	return t.LoPam2
}

// GetOrCreateLoSnr retrieves the value of the LoSnr field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoSnr() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr {
	if t.LoSnr != nil {
		return t.LoSnr
	}
	t.LoSnr = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr{}
	return t.LoSnr
}

// GetOrCreateLoSnr1 retrieves the value of the LoSnr1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoSnr1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1 {
	if t.LoSnr1 != nil {
		return t.LoSnr1
	}
	t.LoSnr1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1{}
	return t.LoSnr1
}

// GetOrCreateLoTec1 retrieves the value of the LoTec1 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoTec1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1 {
	if t.LoTec1 != nil {
		return t.LoTec1
	}
	t.LoTec1 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1{}
	return t.LoTec1
}

// GetOrCreateLoTec2 retrieves the value of the LoTec2 field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetOrCreateLoTec2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2 {
	if t.LoTec2 != nil {
		return t.LoTec2
	}
	t.LoTec2 = &Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2{}
	return t.LoTec2
}

// GetHiIsi1 returns the value of the HiIsi1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiIsi1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiIsi1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1 {
	if t != nil && t.HiIsi1 != nil {
		return t.HiIsi1
	}
	return nil
}

// GetHiIsi2 returns the value of the HiIsi2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiIsi2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiIsi2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2 {
	if t != nil && t.HiIsi2 != nil {
		return t.HiIsi2
	}
	return nil
}

// GetHiLaserFreq1 returns the value of the HiLaserFreq1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiLaserFreq1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiLaserFreq1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1 {
	if t != nil && t.HiLaserFreq1 != nil {
		return t.HiLaserFreq1
	}
	return nil
}

// GetHiLaserFreq2 returns the value of the HiLaserFreq2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiLaserFreq2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiLaserFreq2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2 {
	if t != nil && t.HiLaserFreq2 != nil {
		return t.HiLaserFreq2
	}
	return nil
}

// GetHiPam1 returns the value of the HiPam1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPam1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPam1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1 {
	if t != nil && t.HiPam1 != nil {
		return t.HiPam1
	}
	return nil
}

// GetHiPam2 returns the value of the HiPam2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPam2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPam2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2 {
	if t != nil && t.HiPam2 != nil {
		return t.HiPam2
	}
	return nil
}

// GetHiPreFecberCur returns the value of the HiPreFecberCur struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPreFecberCur is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPreFecberCur() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur {
	if t != nil && t.HiPreFecberCur != nil {
		return t.HiPreFecberCur
	}
	return nil
}

// GetHiPreFecberCurAcc returns the value of the HiPreFecberCurAcc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPreFecberCurAcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPreFecberCurAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc {
	if t != nil && t.HiPreFecberCurAcc != nil {
		return t.HiPreFecberCurAcc
	}
	return nil
}

// GetHiPreFecberMax returns the value of the HiPreFecberMax struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPreFecberMax is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPreFecberMax() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax {
	if t != nil && t.HiPreFecberMax != nil {
		return t.HiPreFecberMax
	}
	return nil
}

// GetHiPreFecberMin returns the value of the HiPreFecberMin struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPreFecberMin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPreFecberMin() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin {
	if t != nil && t.HiPreFecberMin != nil {
		return t.HiPreFecberMin
	}
	return nil
}

// GetHiPreFecberPriorAcc returns the value of the HiPreFecberPriorAcc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiPreFecberPriorAcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiPreFecberPriorAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc {
	if t != nil && t.HiPreFecberPriorAcc != nil {
		return t.HiPreFecberPriorAcc
	}
	return nil
}

// GetHiSnr1 returns the value of the HiSnr1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiSnr1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiSnr1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1 {
	if t != nil && t.HiSnr1 != nil {
		return t.HiSnr1
	}
	return nil
}

// GetHiSnr2 returns the value of the HiSnr2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiSnr2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiSnr2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2 {
	if t != nil && t.HiSnr2 != nil {
		return t.HiSnr2
	}
	return nil
}

// GetHiTec1 returns the value of the HiTec1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiTec1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiTec1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1 {
	if t != nil && t.HiTec1 != nil {
		return t.HiTec1
	}
	return nil
}

// GetHiTec2 returns the value of the HiTec2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiTec2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiTec2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2 {
	if t != nil && t.HiTec2 != nil {
		return t.HiTec2
	}
	return nil
}

// GetHiUncorrectedBerCur returns the value of the HiUncorrectedBerCur struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiUncorrectedBerCur is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiUncorrectedBerCur() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur {
	if t != nil && t.HiUncorrectedBerCur != nil {
		return t.HiUncorrectedBerCur
	}
	return nil
}

// GetHiUncorrectedBerCurAcc returns the value of the HiUncorrectedBerCurAcc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiUncorrectedBerCurAcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiUncorrectedBerCurAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc {
	if t != nil && t.HiUncorrectedBerCurAcc != nil {
		return t.HiUncorrectedBerCurAcc
	}
	return nil
}

// GetHiUncorrectedBerMax returns the value of the HiUncorrectedBerMax struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiUncorrectedBerMax is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiUncorrectedBerMax() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax {
	if t != nil && t.HiUncorrectedBerMax != nil {
		return t.HiUncorrectedBerMax
	}
	return nil
}

// GetHiUncorrectedBerMin returns the value of the HiUncorrectedBerMin struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiUncorrectedBerMin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiUncorrectedBerMin() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMin {
	if t != nil && t.HiUncorrectedBerMin != nil {
		return t.HiUncorrectedBerMin
	}
	return nil
}

// GetHiUncorrectedBerPriorAcc returns the value of the HiUncorrectedBerPriorAcc struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field HiUncorrectedBerPriorAcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetHiUncorrectedBerPriorAcc() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerPriorAcc {
	if t != nil && t.HiUncorrectedBerPriorAcc != nil {
		return t.HiUncorrectedBerPriorAcc
	}
	return nil
}

// GetLoIsi1 returns the value of the LoIsi1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoIsi1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoIsi1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi1 {
	if t != nil && t.LoIsi1 != nil {
		return t.LoIsi1
	}
	return nil
}

// GetLoIsi2 returns the value of the LoIsi2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoIsi2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoIsi2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoIsi2 {
	if t != nil && t.LoIsi2 != nil {
		return t.LoIsi2
	}
	return nil
}

// GetLoLaserFreq1 returns the value of the LoLaserFreq1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoLaserFreq1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoLaserFreq1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq1 {
	if t != nil && t.LoLaserFreq1 != nil {
		return t.LoLaserFreq1
	}
	return nil
}

// GetLoLaserFreq2 returns the value of the LoLaserFreq2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoLaserFreq2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoLaserFreq2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoLaserFreq2 {
	if t != nil && t.LoLaserFreq2 != nil {
		return t.LoLaserFreq2
	}
	return nil
}

// GetLoPam1 returns the value of the LoPam1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoPam1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoPam1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam1 {
	if t != nil && t.LoPam1 != nil {
		return t.LoPam1
	}
	return nil
}

// GetLoPam2 returns the value of the LoPam2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoPam2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoPam2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoPam2 {
	if t != nil && t.LoPam2 != nil {
		return t.LoPam2
	}
	return nil
}

// GetLoSnr returns the value of the LoSnr struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoSnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoSnr() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr {
	if t != nil && t.LoSnr != nil {
		return t.LoSnr
	}
	return nil
}

// GetLoSnr1 returns the value of the LoSnr1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoSnr1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoSnr1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoSnr1 {
	if t != nil && t.LoSnr1 != nil {
		return t.LoSnr1
	}
	return nil
}

// GetLoTec1 returns the value of the LoTec1 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoTec1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoTec1() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec1 {
	if t != nil && t.LoTec1 != nil {
		return t.LoTec1
	}
	return nil
}

// GetLoTec2 returns the value of the LoTec2 struct pointer
// from Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo. If the receiver or the field LoTec2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) GetLoTec2() *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_LoTec2 {
	if t != nil && t.LoTec2 != nil {
		return t.LoTec2
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-isi1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-isi2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiIsi2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-laser-freq1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-laser-freq2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiLaserFreq2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pam1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pam2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPam2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pre-fecber-cur YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCur) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pre-fecber-cur-acc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberCurAcc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pre-fecber-max YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMax) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pre-fecber-min YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberMin) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-pre-fecber-prior-acc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiPreFecberPriorAcc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-snr1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-snr2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiSnr2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-tec1 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec1) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2 represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-tec2 YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2 struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiTec2) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-uncorrected-ber-cur YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCur) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-uncorrected-ber-cur-acc YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerCurAcc) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}

// Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax represents the /Cisco-IOS-XR-controller-optics-oper/optics-oper/optics-ports/optics-port/optics-info/extended-alarm-alarm-info/hi-uncorrected-ber-max YANG schema element.
type Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax struct {
	Counter    *uint32 `path:"counter" module:"Cisco-IOS-XR-controller-optics-oper"`
	IsDetected *bool   `path:"is-detected" module:"Cisco-IOS-XR-controller-optics-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax.
func (*Cisco_IOS_XRControllerOpticsOper_OpticsOper_OpticsPorts_OpticsPort_OpticsInfo_ExtendedAlarmAlarmInfo_HiUncorrectedBerMax) ΛBelongingModule() string {
	return "Cisco-IOS-XR-controller-optics-oper"
}
