/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-switch-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-switch-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-fabric-plane-health-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-fabric-plane-health-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &CiscoDevice{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// CiscoDevice represents the /CiscoDevice YANG schema element.
type CiscoDevice struct {
	Fabric     *Cisco_IOS_XRFabricPlaneHealthOper_Fabric `path:"fabric" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	ShowSwitch *Cisco_IOS_XRSwitchOper_ShowSwitch        `path:"show-switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that CiscoDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*CiscoDevice) IsYANGGoStruct() {}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *CiscoDevice) GetOrCreateFabric() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric{}
	return t.Fabric
}

// GetOrCreateShowSwitch retrieves the value of the ShowSwitch field
// or returns the existing field if it already exists.
func (t *CiscoDevice) GetOrCreateShowSwitch() *Cisco_IOS_XRSwitchOper_ShowSwitch {
	if t.ShowSwitch != nil {
		return t.ShowSwitch
	}
	t.ShowSwitch = &Cisco_IOS_XRSwitchOper_ShowSwitch{}
	return t.ShowSwitch
}

// GetFabric returns the value of the Fabric struct pointer
// from CiscoDevice. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *CiscoDevice) GetFabric() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetShowSwitch returns the value of the ShowSwitch struct pointer
// from CiscoDevice. If the receiver or the field ShowSwitch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *CiscoDevice) GetShowSwitch() *Cisco_IOS_XRSwitchOper_ShowSwitch {
	if t != nil && t.ShowSwitch != nil {
		return t.ShowSwitch
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["CiscoDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *CiscoDevice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *CiscoDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of CiscoDevice.
func (*CiscoDevice) ΛBelongingModule() string {
	return ""
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric struct {
	FabricHealth   *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth   `path:"fabric-health" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabricPlaneIds *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds `path:"fabric-plane-ids" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric) IsYANGGoStruct() {}

// GetOrCreateFabricHealth retrieves the value of the FabricHealth field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) GetOrCreateFabricHealth() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth {
	if t.FabricHealth != nil {
		return t.FabricHealth
	}
	t.FabricHealth = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth{}
	return t.FabricHealth
}

// GetOrCreateFabricPlaneIds retrieves the value of the FabricPlaneIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) GetOrCreateFabricPlaneIds() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds {
	if t.FabricPlaneIds != nil {
		return t.FabricPlaneIds
	}
	t.FabricPlaneIds = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds{}
	return t.FabricPlaneIds
}

// GetFabricHealth returns the value of the FabricHealth struct pointer
// from Cisco_IOS_XRFabricPlaneHealthOper_Fabric. If the receiver or the field FabricHealth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) GetFabricHealth() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth {
	if t != nil && t.FabricHealth != nil {
		return t.FabricHealth
	}
	return nil
}

// GetFabricPlaneIds returns the value of the FabricPlaneIds struct pointer
// from Cisco_IOS_XRFabricPlaneHealthOper_Fabric. If the receiver or the field FabricPlaneIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) GetFabricPlaneIds() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds {
	if t != nil && t.FabricPlaneIds != nil {
		return t.FabricPlaneIds
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth struct {
	AggrStatus         *string                                                                `path:"aggr-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsDn         *int32                                                                 `path:"fia-asics-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsTotal      *int32                                                                 `path:"fia-asics-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsUp         *int32                                                                 `path:"fia-asics-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneAdminDn       *int32                                                                 `path:"plane-admin-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneDn            *int32                                                                 `path:"plane-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneMcastDn       *int32                                                                 `path:"plane-mcast-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneUp            *int32                                                                 `path:"plane-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackFcc            *int32                                                                 `path:"rack-fcc" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackHealthBag      []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag `path:"rack-health-bag" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackLcc            *int32                                                                 `path:"rack-lcc" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackTotal          *int32                                                                 `path:"rack-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsDn         *int32                                                                 `path:"sfe-asics-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsTotal      *int32                                                                 `path:"sfe-asics-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsUp         *int32                                                                 `path:"sfe-asics-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	ShowSysPlaneDetail *bool                                                                  `path:"show-sys-plane-detail" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SysPlaneInfo       []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo  `path:"sys-plane-info" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag struct {
	ActiverpCardNpuInfo *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo `path:"activerp-card-npu-info" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsDn          *int32                                                                                   `path:"fia-asics-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsTotal       *int32                                                                                   `path:"fia-asics-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FiaAsicsUp          *int32                                                                                   `path:"fia-asics-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FsdbPlaPtr          []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr        `path:"fsdb-pla-ptr" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FsdbStatus          *string                                                                                  `path:"fsdb-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	IsValid             *bool                                                                                    `path:"is-valid" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LcCardNpuInfo       []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo     `path:"lc-card-npu-info" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	NpuFeStatus         *string                                                                                  `path:"npu-fe-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	NumValidFabids      *int32                                                                                   `path:"num-valid-fabids" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackNum             *string                                                                                  `path:"rack-num" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackPlaneInfo       []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo     `path:"rack-plane-info" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackType            *string                                                                                  `path:"rack-type" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsDn          *int32                                                                                   `path:"sfe-asics-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsTotal       *int32                                                                                   `path:"sfe-asics-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SfeAsicsUp          *int32                                                                                   `path:"sfe-asics-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	ShowRackPlaneDetail *bool                                                                                    `path:"show-rack-plane-detail" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) IsYANGGoStruct() {}

// GetOrCreateActiverpCardNpuInfo retrieves the value of the ActiverpCardNpuInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) GetOrCreateActiverpCardNpuInfo() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo {
	if t.ActiverpCardNpuInfo != nil {
		return t.ActiverpCardNpuInfo
	}
	t.ActiverpCardNpuInfo = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo{}
	return t.ActiverpCardNpuInfo
}

// GetActiverpCardNpuInfo returns the value of the ActiverpCardNpuInfo struct pointer
// from Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag. If the receiver or the field ActiverpCardNpuInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) GetActiverpCardNpuInfo() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo {
	if t != nil && t.ActiverpCardNpuInfo != nil {
		return t.ActiverpCardNpuInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/activerp-card-npu-info YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo struct {
	AsicListPtr []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr `path:"asic-list-ptr" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FeStatus    *bool                                                                                                  `path:"fe-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalAsics  *uint32                                                                                                `path:"total-asics" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/activerp-card-npu-info/asic-list-ptr YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr struct {
	AsicInstance *uint32 `path:"asic-instance" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicState    *uint32 `path:"asic-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicStateStr *string `path:"asic-state-str" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicValid    *bool   `path:"asic-valid" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabReach     *bool   `path:"fab-reach" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	IsBelow      *bool   `path:"is-below" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackNum      *uint32 `path:"rack-num" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SlotNum      *uint32 `path:"slot-num" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalAvailbw *uint32 `path:"total-availbw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalBw      *uint32 `path:"total-bw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalReqdbw  *uint32 `path:"total-reqdbw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_ActiverpCardNpuInfo_AsicListPtr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/fsdb-pla-ptr YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr struct {
	FabidAddress         *string `path:"fabid-address" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabidStatus          *string `path:"fabid-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	MaxLinksPerAsic      *int32  `path:"max-links-per-asic" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	MaxUpLinksPerAsic    *int32  `path:"max-up-links-per-asic" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	MinLinksPerAsic      *int32  `path:"min-links-per-asic" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	MinUpLinksPerAsic    *int32  `path:"min-up-links-per-asic" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_0Mask          *string `path:"plane-0-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_1Mask          *string `path:"plane-1-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_2Mask          *string `path:"plane-2-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_3Mask          *string `path:"plane-3-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_4Mask          *string `path:"plane-4-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_5Mask          *string `path:"plane-5-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_6Mask          *string `path:"plane-6-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Plane_7Mask          *string `path:"plane-7-mask" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	ShowFabidUnreachable *bool   `path:"show-fabid-unreachable" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalLinks           *int32  `path:"total-links" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalUpLinks         *int32  `path:"total-up-links" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_FsdbPlaPtr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/lc-card-npu-info YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo struct {
	AsicListPtr []*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr `path:"asic-list-ptr" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FeStatus    *bool                                                                                            `path:"fe-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalAsics  *uint32                                                                                          `path:"total-asics" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/lc-card-npu-info/asic-list-ptr YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr struct {
	AsicInstance *uint32 `path:"asic-instance" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicState    *uint32 `path:"asic-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicStateStr *string `path:"asic-state-str" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicValid    *bool   `path:"asic-valid" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabReach     *bool   `path:"fab-reach" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	IsBelow      *bool   `path:"is-below" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RackNum      *uint32 `path:"rack-num" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	SlotNum      *uint32 `path:"slot-num" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalAvailbw *uint32 `path:"total-availbw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalBw      *uint32 `path:"total-bw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalReqdbw  *uint32 `path:"total-reqdbw" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_LcCardNpuInfo_AsicListPtr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/rack-health-bag/rack-plane-info YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo struct {
	AsicsDn            *int32  `path:"asics-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicsTotal         *int32  `path:"asics-total" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	AsicsUp            *int32  `path:"asics-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	NumReachableFabids *int32  `path:"num-reachable-fabids" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneId            *uint32 `path:"plane-id" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneState         *string `path:"plane-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_RackHealthBag_RackPlaneInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-health/sys-plane-info YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo struct {
	AdminState       *string `path:"admin-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	IsDataDrop       *bool   `path:"is-data-drop" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneId          *uint32 `path:"plane-id" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PlaneState       *string `path:"plane-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RacksWPlaneFault *int32  `path:"racks-w-plane-fault" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricHealth_SysPlaneInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-plane-ids YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds struct {
	FabricPlaneId map[uint32]*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId `path:"fabric-plane-id" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) IsYANGGoStruct() {}

// NewFabricPlaneId creates a new entry in the FabricPlaneId list of the
// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) NewFabricPlaneId(FabricPlaneKey uint32) (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FabricPlaneId == nil {
		t.FabricPlaneId = make(map[uint32]*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId)
	}

	key := FabricPlaneKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FabricPlaneId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FabricPlaneId", key)
	}

	t.FabricPlaneId[key] = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId{
		FabricPlaneKey: &FabricPlaneKey,
	}

	return t.FabricPlaneId[key], nil
}

// RenameFabricPlaneId renames an entry in the list FabricPlaneId within
// the Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) RenameFabricPlaneId(oldK, newK uint32) error {
	if _, ok := t.FabricPlaneId[newK]; ok {
		return fmt.Errorf("key %v already exists in FabricPlaneId", newK)
	}

	e, ok := t.FabricPlaneId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FabricPlaneId", oldK)
	}
	e.FabricPlaneKey = &newK

	t.FabricPlaneId[newK] = e
	delete(t.FabricPlaneId, oldK)
	return nil
}

// GetOrCreateFabricPlaneIdMap returns the list (map) from Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) GetOrCreateFabricPlaneIdMap() map[uint32]*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId {
	if t.FabricPlaneId == nil {
		t.FabricPlaneId = make(map[uint32]*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId)
	}
	return t.FabricPlaneId
}

// GetOrCreateFabricPlaneId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) GetOrCreateFabricPlaneId(FabricPlaneKey uint32) *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId {

	key := FabricPlaneKey

	if v, ok := t.FabricPlaneId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFabricPlaneId(FabricPlaneKey)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFabricPlaneId got unexpected error: %v", err))
	}
	return v
}

// GetFabricPlaneId retrieves the value with the specified key from
// the FabricPlaneId map field of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) GetFabricPlaneId(FabricPlaneKey uint32) *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId {

	if t == nil {
		return nil
	}

	key := FabricPlaneKey

	if lm, ok := t.FabricPlaneId[key]; ok {
		return lm
	}
	return nil
}

// AppendFabricPlaneId appends the supplied Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId struct to the
// list FabricPlaneId of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) AppendFabricPlaneId(v *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) error {
	if v.FabricPlaneKey == nil {
		return fmt.Errorf("invalid nil key received for FabricPlaneKey")
	}

	key := *v.FabricPlaneKey

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FabricPlaneId == nil {
		t.FabricPlaneId = make(map[uint32]*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId)
	}

	if _, ok := t.FabricPlaneId[key]; ok {
		return fmt.Errorf("duplicate key for list FabricPlaneId %v", key)
	}

	t.FabricPlaneId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-plane-ids/fabric-plane-id YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId struct {
	FabricPlaneInfo  *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo  `path:"fabric-plane-info" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabricPlaneKey   *uint32                                                                                 `path:"fabric-plane-key" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	FabricPlaneStats *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats `path:"fabric-plane-stats" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) IsYANGGoStruct() {}

// GetOrCreateFabricPlaneInfo retrieves the value of the FabricPlaneInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) GetOrCreateFabricPlaneInfo() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo {
	if t.FabricPlaneInfo != nil {
		return t.FabricPlaneInfo
	}
	t.FabricPlaneInfo = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo{}
	return t.FabricPlaneInfo
}

// GetOrCreateFabricPlaneStats retrieves the value of the FabricPlaneStats field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) GetOrCreateFabricPlaneStats() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats {
	if t.FabricPlaneStats != nil {
		return t.FabricPlaneStats
	}
	t.FabricPlaneStats = &Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats{}
	return t.FabricPlaneStats
}

// GetFabricPlaneInfo returns the value of the FabricPlaneInfo struct pointer
// from Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId. If the receiver or the field FabricPlaneInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) GetFabricPlaneInfo() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo {
	if t != nil && t.FabricPlaneInfo != nil {
		return t.FabricPlaneInfo
	}
	return nil
}

// GetFabricPlaneStats returns the value of the FabricPlaneStats struct pointer
// from Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId. If the receiver or the field FabricPlaneStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) GetFabricPlaneStats() *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats {
	if t != nil && t.FabricPlaneStats != nil {
		return t.FabricPlaneStats
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FabricPlaneKey == nil {
		return nil, fmt.Errorf("nil value for key FabricPlaneKey")
	}

	return map[string]interface{}{
		"fabric-plane-key": *t.FabricPlaneKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-plane-ids/fabric-plane-id/fabric-plane-info YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo struct {
	AdminState     *string `path:"admin-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	DownBundles    *int32  `path:"down-bundles" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Planeid        *int32  `path:"planeid" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	PpuState       *string `path:"ppu-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TotalBundles   *int32  `path:"total-bundles" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	UcastCntDn     *int32  `path:"ucast-cnt-dn" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	UcastCntSomeUp *int32  `path:"ucast-cnt-some-up" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	UcastOperState *string `path:"ucast-oper-state" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats represents the /Cisco-IOS-XR-fabric-plane-health-oper/fabric/fabric-plane-ids/fabric-plane-id/fabric-plane-stats YANG schema element.
type Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats struct {
	AsicInternalDrops    *uint32 `path:"asic-internal-drops" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	IsAsicInternalError  *bool   `path:"is-asic-internal-error" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LastClearElapsed     *uint32 `path:"last-clear-elapsed" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LastClearReason      *string `path:"last-clear-reason" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LastClearReqTs       *string `path:"last-clear-req-ts" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LastClearStatus      *string `path:"last-clear-status" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	LastClearTs          *string `path:"last-clear-ts" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	McastLostCells       *uint32 `path:"mcast-lost-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	Planeid              *uint32 `path:"planeid" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxCeCells            *uint64 `path:"rx-ce-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxCeCellsIsOverflow  *bool   `path:"rx-ce-cells-is-overflow" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxDataCells          *uint64 `path:"rx-data-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxPeCells            *uint64 `path:"rx-pe-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxPeCellsIsOverflow  *bool   `path:"rx-pe-cells-is-overflow" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxUceCells           *uint64 `path:"rx-uce-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	RxUceCellsIsOverflow *bool   `path:"rx-uce-cells-is-overflow" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	TxDataCells          *uint64 `path:"tx-data-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
	UcastLostCells       *uint32 `path:"ucast-lost-cells" module:"Cisco-IOS-XR-fabric-plane-health-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats.
func (*Cisco_IOS_XRFabricPlaneHealthOper_Fabric_FabricPlaneIds_FabricPlaneId_FabricPlaneStats) ΛBelongingModule() string {
	return "Cisco-IOS-XR-fabric-plane-health-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch represents the /Cisco-IOS-XR-switch-oper/show-switch YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch struct {
	All           *Cisco_IOS_XRSwitchOper_ShowSwitch_All           `path:"all" module:"Cisco-IOS-XR-switch-oper"`
	Bridge        *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge        `path:"bridge" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrity *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity `path:"data-integrity" module:"Cisco-IOS-XR-switch-oper"`
	Debug         *Cisco_IOS_XRSwitchOper_ShowSwitch_Debug         `path:"debug" module:"Cisco-IOS-XR-switch-oper"`
	Events        *Cisco_IOS_XRSwitchOper_ShowSwitch_Events        `path:"events" module:"Cisco-IOS-XR-switch-oper"`
	Fdb           *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb           `path:"fdb" module:"Cisco-IOS-XR-switch-oper"`
	Health        *Cisco_IOS_XRSwitchOper_ShowSwitch_Health        `path:"health" module:"Cisco-IOS-XR-switch-oper"`
	Mac           *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac           `path:"mac" module:"Cisco-IOS-XR-switch-oper"`
	Policing      *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing      `path:"policing" module:"Cisco-IOS-XR-switch-oper"`
	Reachable     *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable     `path:"reachable" module:"Cisco-IOS-XR-switch-oper"`
	Serdes        *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes        `path:"serdes" module:"Cisco-IOS-XR-switch-oper"`
	Statistics    *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics    `path:"statistics" module:"Cisco-IOS-XR-switch-oper"`
	Summary       *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary       `path:"summary" module:"Cisco-IOS-XR-switch-oper"`
	Trunk         *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk         `path:"trunk" module:"Cisco-IOS-XR-switch-oper"`
	Txq           *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq           `path:"txq" module:"Cisco-IOS-XR-switch-oper"`
	Vlan          *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan          `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch) IsYANGGoStruct() {}

// GetOrCreateAll retrieves the value of the All field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateAll() *Cisco_IOS_XRSwitchOper_ShowSwitch_All {
	if t.All != nil {
		return t.All
	}
	t.All = &Cisco_IOS_XRSwitchOper_ShowSwitch_All{}
	return t.All
}

// GetOrCreateBridge retrieves the value of the Bridge field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateBridge() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge {
	if t.Bridge != nil {
		return t.Bridge
	}
	t.Bridge = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge{}
	return t.Bridge
}

// GetOrCreateDataIntegrity retrieves the value of the DataIntegrity field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateDataIntegrity() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity {
	if t.DataIntegrity != nil {
		return t.DataIntegrity
	}
	t.DataIntegrity = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity{}
	return t.DataIntegrity
}

// GetOrCreateDebug retrieves the value of the Debug field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateDebug() *Cisco_IOS_XRSwitchOper_ShowSwitch_Debug {
	if t.Debug != nil {
		return t.Debug
	}
	t.Debug = &Cisco_IOS_XRSwitchOper_ShowSwitch_Debug{}
	return t.Debug
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateEvents() *Cisco_IOS_XRSwitchOper_ShowSwitch_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &Cisco_IOS_XRSwitchOper_ShowSwitch_Events{}
	return t.Events
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateFdb() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb{}
	return t.Fdb
}

// GetOrCreateHealth retrieves the value of the Health field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateHealth() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health {
	if t.Health != nil {
		return t.Health
	}
	t.Health = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health{}
	return t.Health
}

// GetOrCreateMac retrieves the value of the Mac field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateMac() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac {
	if t.Mac != nil {
		return t.Mac
	}
	t.Mac = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac{}
	return t.Mac
}

// GetOrCreatePolicing retrieves the value of the Policing field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreatePolicing() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing {
	if t.Policing != nil {
		return t.Policing
	}
	t.Policing = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing{}
	return t.Policing
}

// GetOrCreateReachable retrieves the value of the Reachable field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateReachable() *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable {
	if t.Reachable != nil {
		return t.Reachable
	}
	t.Reachable = &Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable{}
	return t.Reachable
}

// GetOrCreateSerdes retrieves the value of the Serdes field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateSerdes() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes {
	if t.Serdes != nil {
		return t.Serdes
	}
	t.Serdes = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes{}
	return t.Serdes
}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics{}
	return t.Statistics
}

// GetOrCreateSummary retrieves the value of the Summary field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateSummary() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary {
	if t.Summary != nil {
		return t.Summary
	}
	t.Summary = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary{}
	return t.Summary
}

// GetOrCreateTrunk retrieves the value of the Trunk field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateTrunk() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk {
	if t.Trunk != nil {
		return t.Trunk
	}
	t.Trunk = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk{}
	return t.Trunk
}

// GetOrCreateTxq retrieves the value of the Txq field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateTxq() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq {
	if t.Txq != nil {
		return t.Txq
	}
	t.Txq = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq{}
	return t.Txq
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetOrCreateVlan() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan{}
	return t.Vlan
}

// GetAll returns the value of the All struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field All is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetAll() *Cisco_IOS_XRSwitchOper_ShowSwitch_All {
	if t != nil && t.All != nil {
		return t.All
	}
	return nil
}

// GetBridge returns the value of the Bridge struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Bridge is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetBridge() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge {
	if t != nil && t.Bridge != nil {
		return t.Bridge
	}
	return nil
}

// GetDataIntegrity returns the value of the DataIntegrity struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field DataIntegrity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetDataIntegrity() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity {
	if t != nil && t.DataIntegrity != nil {
		return t.DataIntegrity
	}
	return nil
}

// GetDebug returns the value of the Debug struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Debug is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetDebug() *Cisco_IOS_XRSwitchOper_ShowSwitch_Debug {
	if t != nil && t.Debug != nil {
		return t.Debug
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetEvents() *Cisco_IOS_XRSwitchOper_ShowSwitch_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetFdb() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHealth returns the value of the Health struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Health is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetHealth() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health {
	if t != nil && t.Health != nil {
		return t.Health
	}
	return nil
}

// GetMac returns the value of the Mac struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Mac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetMac() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac {
	if t != nil && t.Mac != nil {
		return t.Mac
	}
	return nil
}

// GetPolicing returns the value of the Policing struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Policing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetPolicing() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing {
	if t != nil && t.Policing != nil {
		return t.Policing
	}
	return nil
}

// GetReachable returns the value of the Reachable struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Reachable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetReachable() *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable {
	if t != nil && t.Reachable != nil {
		return t.Reachable
	}
	return nil
}

// GetSerdes returns the value of the Serdes struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Serdes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetSerdes() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes {
	if t != nil && t.Serdes != nil {
		return t.Serdes
	}
	return nil
}

// GetStatistics returns the value of the Statistics struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetSummary returns the value of the Summary struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Summary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetSummary() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary {
	if t != nil && t.Summary != nil {
		return t.Summary
	}
	return nil
}

// GetTrunk returns the value of the Trunk struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Trunk is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetTrunk() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk {
	if t != nil && t.Trunk != nil {
		return t.Trunk
	}
	return nil
}

// GetTxq returns the value of the Txq struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Txq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetTxq() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq {
	if t != nil && t.Txq != nil {
		return t.Txq
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) GetVlan() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All represents the /Cisco-IOS-XR-switch-oper/show-switch/all YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All struct {
	AllInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances `path:"all-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All) IsYANGGoStruct() {}

// GetOrCreateAllInstances retrieves the value of the AllInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All) GetOrCreateAllInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances {
	if t.AllInstances != nil {
		return t.AllInstances
	}
	t.AllInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances{}
	return t.AllInstances
}

// GetAllInstances returns the value of the AllInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All. If the receiver or the field AllInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All) GetAllInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances {
	if t != nil && t.AllInstances != nil {
		return t.AllInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances struct {
	AllInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance `path:"all-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) IsYANGGoStruct() {}

// NewAllInstance creates a new entry in the AllInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) NewAllInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AllInstance == nil {
		t.AllInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AllInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AllInstance", key)
	}

	t.AllInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance{
		NodeId: &NodeId,
	}

	return t.AllInstance[key], nil
}

// RenameAllInstance renames an entry in the list AllInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) RenameAllInstance(oldK, newK string) error {
	if _, ok := t.AllInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in AllInstance", newK)
	}

	e, ok := t.AllInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AllInstance", oldK)
	}
	e.NodeId = &newK

	t.AllInstance[newK] = e
	delete(t.AllInstance, oldK)
	return nil
}

// GetOrCreateAllInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) GetOrCreateAllInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance {
	if t.AllInstance == nil {
		t.AllInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance)
	}
	return t.AllInstance
}

// GetOrCreateAllInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) GetOrCreateAllInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance {

	key := NodeId

	if v, ok := t.AllInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAllInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAllInstance got unexpected error: %v", err))
	}
	return v
}

// GetAllInstance retrieves the value with the specified key from
// the AllInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) GetAllInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.AllInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendAllInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance struct to the
// list AllInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) AppendAllInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AllInstance == nil {
		t.AllInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance)
	}

	if _, ok := t.AllInstance[key]; ok {
		return fmt.Errorf("duplicate key for list AllInstance %v", key)
	}

	t.AllInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance struct {
	EthswBridge             *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge             `path:"ethsw-bridge" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityError *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError `path:"ethsw-data-integrity-error" module:"Cisco-IOS-XR-switch-oper"`
	EthswDebugCounters      *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters      `path:"ethsw-debug-counters" module:"Cisco-IOS-XR-switch-oper"`
	EthswEvents             *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents             `path:"ethsw-events" module:"Cisco-IOS-XR-switch-oper"`
	EthswFdb                *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb                `path:"ethsw-fdb" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthState        *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState        `path:"ethsw-health-state" module:"Cisco-IOS-XR-switch-oper"`
	EthswMac                *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac                `path:"ethsw-mac" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicing           *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing           `path:"ethsw-policing" module:"Cisco-IOS-XR-switch-oper"`
	EthswSerdes             *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes             `path:"ethsw-serdes" module:"Cisco-IOS-XR-switch-oper"`
	EthswStatistics         *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics         `path:"ethsw-statistics" module:"Cisco-IOS-XR-switch-oper"`
	EthswSummay             *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay             `path:"ethsw-summay" module:"Cisco-IOS-XR-switch-oper"`
	EthswTrunk              *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk              `path:"ethsw-trunk" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxq                *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq                `path:"ethsw-txq" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanIfo            *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo            `path:"ethsw-vlan-ifo" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanMembership     *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership     `path:"ethsw-vlan-membership" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                  *string                                                                                 `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) IsYANGGoStruct() {}

// GetOrCreateEthswBridge retrieves the value of the EthswBridge field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswBridge() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge {
	if t.EthswBridge != nil {
		return t.EthswBridge
	}
	t.EthswBridge = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge{}
	return t.EthswBridge
}

// GetOrCreateEthswDataIntegrityError retrieves the value of the EthswDataIntegrityError field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswDataIntegrityError() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError {
	if t.EthswDataIntegrityError != nil {
		return t.EthswDataIntegrityError
	}
	t.EthswDataIntegrityError = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError{}
	return t.EthswDataIntegrityError
}

// GetOrCreateEthswDebugCounters retrieves the value of the EthswDebugCounters field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswDebugCounters() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters {
	if t.EthswDebugCounters != nil {
		return t.EthswDebugCounters
	}
	t.EthswDebugCounters = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters{}
	return t.EthswDebugCounters
}

// GetOrCreateEthswEvents retrieves the value of the EthswEvents field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswEvents() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents {
	if t.EthswEvents != nil {
		return t.EthswEvents
	}
	t.EthswEvents = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents{}
	return t.EthswEvents
}

// GetOrCreateEthswFdb retrieves the value of the EthswFdb field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswFdb() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb {
	if t.EthswFdb != nil {
		return t.EthswFdb
	}
	t.EthswFdb = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb{}
	return t.EthswFdb
}

// GetOrCreateEthswHealthState retrieves the value of the EthswHealthState field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswHealthState() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState {
	if t.EthswHealthState != nil {
		return t.EthswHealthState
	}
	t.EthswHealthState = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState{}
	return t.EthswHealthState
}

// GetOrCreateEthswMac retrieves the value of the EthswMac field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswMac() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac {
	if t.EthswMac != nil {
		return t.EthswMac
	}
	t.EthswMac = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac{}
	return t.EthswMac
}

// GetOrCreateEthswPolicing retrieves the value of the EthswPolicing field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswPolicing() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing {
	if t.EthswPolicing != nil {
		return t.EthswPolicing
	}
	t.EthswPolicing = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing{}
	return t.EthswPolicing
}

// GetOrCreateEthswSerdes retrieves the value of the EthswSerdes field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswSerdes() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes {
	if t.EthswSerdes != nil {
		return t.EthswSerdes
	}
	t.EthswSerdes = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes{}
	return t.EthswSerdes
}

// GetOrCreateEthswStatistics retrieves the value of the EthswStatistics field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics {
	if t.EthswStatistics != nil {
		return t.EthswStatistics
	}
	t.EthswStatistics = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics{}
	return t.EthswStatistics
}

// GetOrCreateEthswSummay retrieves the value of the EthswSummay field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswSummay() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay {
	if t.EthswSummay != nil {
		return t.EthswSummay
	}
	t.EthswSummay = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay{}
	return t.EthswSummay
}

// GetOrCreateEthswTrunk retrieves the value of the EthswTrunk field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswTrunk() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk {
	if t.EthswTrunk != nil {
		return t.EthswTrunk
	}
	t.EthswTrunk = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk{}
	return t.EthswTrunk
}

// GetOrCreateEthswTxq retrieves the value of the EthswTxq field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswTxq() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq {
	if t.EthswTxq != nil {
		return t.EthswTxq
	}
	t.EthswTxq = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq{}
	return t.EthswTxq
}

// GetOrCreateEthswVlanIfo retrieves the value of the EthswVlanIfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswVlanIfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo {
	if t.EthswVlanIfo != nil {
		return t.EthswVlanIfo
	}
	t.EthswVlanIfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo{}
	return t.EthswVlanIfo
}

// GetOrCreateEthswVlanMembership retrieves the value of the EthswVlanMembership field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetOrCreateEthswVlanMembership() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership {
	if t.EthswVlanMembership != nil {
		return t.EthswVlanMembership
	}
	t.EthswVlanMembership = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership{}
	return t.EthswVlanMembership
}

// GetEthswBridge returns the value of the EthswBridge struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswBridge is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswBridge() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge {
	if t != nil && t.EthswBridge != nil {
		return t.EthswBridge
	}
	return nil
}

// GetEthswDataIntegrityError returns the value of the EthswDataIntegrityError struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswDataIntegrityError is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswDataIntegrityError() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError {
	if t != nil && t.EthswDataIntegrityError != nil {
		return t.EthswDataIntegrityError
	}
	return nil
}

// GetEthswDebugCounters returns the value of the EthswDebugCounters struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswDebugCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswDebugCounters() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters {
	if t != nil && t.EthswDebugCounters != nil {
		return t.EthswDebugCounters
	}
	return nil
}

// GetEthswEvents returns the value of the EthswEvents struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswEvents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswEvents() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents {
	if t != nil && t.EthswEvents != nil {
		return t.EthswEvents
	}
	return nil
}

// GetEthswFdb returns the value of the EthswFdb struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswFdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswFdb() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb {
	if t != nil && t.EthswFdb != nil {
		return t.EthswFdb
	}
	return nil
}

// GetEthswHealthState returns the value of the EthswHealthState struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswHealthState is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswHealthState() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState {
	if t != nil && t.EthswHealthState != nil {
		return t.EthswHealthState
	}
	return nil
}

// GetEthswMac returns the value of the EthswMac struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswMac() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac {
	if t != nil && t.EthswMac != nil {
		return t.EthswMac
	}
	return nil
}

// GetEthswPolicing returns the value of the EthswPolicing struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswPolicing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswPolicing() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing {
	if t != nil && t.EthswPolicing != nil {
		return t.EthswPolicing
	}
	return nil
}

// GetEthswSerdes returns the value of the EthswSerdes struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswSerdes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswSerdes() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes {
	if t != nil && t.EthswSerdes != nil {
		return t.EthswSerdes
	}
	return nil
}

// GetEthswStatistics returns the value of the EthswStatistics struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics {
	if t != nil && t.EthswStatistics != nil {
		return t.EthswStatistics
	}
	return nil
}

// GetEthswSummay returns the value of the EthswSummay struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswSummay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswSummay() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay {
	if t != nil && t.EthswSummay != nil {
		return t.EthswSummay
	}
	return nil
}

// GetEthswTrunk returns the value of the EthswTrunk struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswTrunk is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswTrunk() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk {
	if t != nil && t.EthswTrunk != nil {
		return t.EthswTrunk
	}
	return nil
}

// GetEthswTxq returns the value of the EthswTxq struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswTxq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswTxq() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq {
	if t != nil && t.EthswTxq != nil {
		return t.EthswTxq
	}
	return nil
}

// GetEthswVlanIfo returns the value of the EthswVlanIfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswVlanIfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswVlanIfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo {
	if t != nil && t.EthswVlanIfo != nil {
		return t.EthswVlanIfo
	}
	return nil
}

// GetEthswVlanMembership returns the value of the EthswVlanMembership struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance. If the receiver or the field EthswVlanMembership is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) GetEthswVlanMembership() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership {
	if t != nil && t.EthswVlanMembership != nil {
		return t.EthswVlanMembership
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-bridge YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge struct {
	EthswBridgeEgressInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo  `path:"ethsw-bridge-egress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswBridgeIngressInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo `path:"ethsw-bridge-ingress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo      *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo        `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-bridge/ethsw-bridge-egress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo struct {
	EgressBroadcastFrames *uint64 `path:"egress-broadcast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressControlPackets  *uint64 `path:"egress-control-packets" module:"Cisco-IOS-XR-switch-oper"`
	EgressDiscardedFrames *uint64 `path:"egress-discarded-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressMulticastFrames *uint64 `path:"egress-multicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressOtherDrops      *uint64 `path:"egress-other-drops" module:"Cisco-IOS-XR-switch-oper"`
	EgressPortVlanTcDp    *string `path:"egress-port-vlan-tc-dp" module:"Cisco-IOS-XR-switch-oper"`
	EgressTransmitQCong   *uint64 `path:"egress-transmit-q-cong" module:"Cisco-IOS-XR-switch-oper"`
	EgressUnicastFrames   *uint64 `path:"egress-unicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EntryNumber           *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeEgressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-bridge/ethsw-bridge-ingress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo struct {
	EntryNumber          *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
	IngressFrames        *uint64 `path:"ingress-frames" module:"Cisco-IOS-XR-switch-oper"`
	IngressOtherDiscards *uint64 `path:"ingress-other-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressPortVlan      *string `path:"ingress-port-vlan" module:"Cisco-IOS-XR-switch-oper"`
	IngressSecDiscards   *uint64 `path:"ingress-sec-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressVlanDiscards  *uint64 `path:"ingress-vlan-discards" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswBridgeIngressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-bridge/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswBridge_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                              `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                  `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                              `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                              `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                              `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                              `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                              `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                              `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-data-integrity-error/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDataIntegrityError_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-debug-counters YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters struct {
	DmaHealthChecks                      *string                                                                                                                   `path:"dma-health-checks" module:"Cisco-IOS-XR-switch-oper"`
	DmaMaxRxPacketsDequeuedPerInterrupt  *uint64                                                                                                                   `path:"dma-max-rx-packets-dequeued-per-interrupt" module:"Cisco-IOS-XR-switch-oper"`
	DmaMaxTxPacketsFreedPerInterrupt     *uint64                                                                                                                   `path:"dma-max-tx-packets-freed-per-interrupt" module:"Cisco-IOS-XR-switch-oper"`
	DmaRxPacketDequeueErrors             *uint64                                                                                                                   `path:"dma-rx-packet-dequeue-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaRxPacketsDequeued                 *uint64                                                                                                                   `path:"dma-rx-packets-dequeued" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxBufferAllocationCount           *uint64                                                                                                                   `path:"dma-tx-buffer-allocation-count" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxBufferFreeCount                 *uint64                                                                                                                   `path:"dma-tx-buffer-free-count" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketCompletionErrors          *uint64                                                                                                                   `path:"dma-tx-packet-completion-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketMessageTooBigErrors       *uint64                                                                                                                   `path:"dma-tx-packet-message-too-big-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketNoBufferErrors            *uint64                                                                                                                   `path:"dma-tx-packet-no-buffer-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketNoMessageErrors           *uint64                                                                                                                   `path:"dma-tx-packet-no-message-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketQueueErrors               *uint64                                                                                                                   `path:"dma-tx-packet-queue-errors" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketsCompleted                *uint64                                                                                                                   `path:"dma-tx-packets-completed" module:"Cisco-IOS-XR-switch-oper"`
	DmaTxPacketsQueued                   *uint64                                                                                                                   `path:"dma-tx-packets-queued" module:"Cisco-IOS-XR-switch-oper"`
	EthswDebugCountersCoreStatisticsInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo `path:"ethsw-debug-counters-core-statistics-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                    *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo                      `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	RxThreadWatchdogCount                *uint64                                                                                                                   `path:"rx-thread-watchdog-count" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestHeldEvent             *uint32                                                                                                                   `path:"task-lock-longest-held-event" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestHeldTime              *uint64                                                                                                                   `path:"task-lock-longest-held-time" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestWaitEvent             *uint32                                                                                                                   `path:"task-lock-longest-wait-event" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestWaitTime              *uint64                                                                                                                   `path:"task-lock-longest-wait-time" module:"Cisco-IOS-XR-switch-oper"`
	TaskUnlockLongestWaitEvent           *uint32                                                                                                                   `path:"task-unlock-longest-wait-event" module:"Cisco-IOS-XR-switch-oper"`
	TaskUnlockLongestWaitTime            *uint64                                                                                                                   `path:"task-unlock-longest-wait-time" module:"Cisco-IOS-XR-switch-oper"`
	TxThreadWatchdogCount                *uint64                                                                                                                   `path:"tx-thread-watchdog-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-debug-counters/ethsw-debug-counters-core-statistics-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo struct {
	AerCount                  *uint64 `path:"aer-count" module:"Cisco-IOS-XR-switch-oper"`
	Core                      *uint32 `path:"core" module:"Cisco-IOS-XR-switch-oper"`
	HotplugCount              *uint64 `path:"hotplug-count" module:"Cisco-IOS-XR-switch-oper"`
	MsiCount                  *uint64 `path:"msi-count" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestHeldTime   *uint64 `path:"task-lock-longest-held-time" module:"Cisco-IOS-XR-switch-oper"`
	TaskLockLongestWaitTime   *uint64 `path:"task-lock-longest-wait-time" module:"Cisco-IOS-XR-switch-oper"`
	TaskUnlockLongestWaitTime *uint64 `path:"task-unlock-longest-wait-time" module:"Cisco-IOS-XR-switch-oper"`
	WatchdogCount             *uint64 `path:"watchdog-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswDebugCountersCoreStatisticsInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-debug-counters/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswDebugCounters_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-events YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents struct {
	EthswEventInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo  `path:"ethsw-event-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo   *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	MaxQueuedEvents     *uint32                                                                                       `path:"max-queued-events" module:"Cisco-IOS-XR-switch-oper"`
	MaxQueuedEventsTime *string                                                                                       `path:"max-queued-events-time" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropped        *uint64                                                                                       `path:"total-dropped" module:"Cisco-IOS-XR-switch-oper"`
	TotalHandled        *uint64                                                                                       `path:"total-handled" module:"Cisco-IOS-XR-switch-oper"`
	TotalNotified       *uint64                                                                                       `path:"total-notified" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueued         *uint64                                                                                       `path:"total-queued" module:"Cisco-IOS-XR-switch-oper"`
	TotalReceived       *uint64                                                                                       `path:"total-received" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-events/ethsw-event-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo struct {
	Dropped  *uint32 `path:"dropped" module:"Cisco-IOS-XR-switch-oper"`
	Handled  *uint32 `path:"handled" module:"Cisco-IOS-XR-switch-oper"`
	Id       *uint32 `path:"id" module:"Cisco-IOS-XR-switch-oper"`
	Name     *string `path:"name" module:"Cisco-IOS-XR-switch-oper"`
	Notified *uint32 `path:"notified" module:"Cisco-IOS-XR-switch-oper"`
	Queued   *uint32 `path:"queued" module:"Cisco-IOS-XR-switch-oper"`
	Received *uint32 `path:"received" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswEventInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-events/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswEvents_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-fdb YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb struct {
	EthswFdbCoreInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo  `path:"ethsw-fdb-core-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswFdbInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo      `path:"ethsw-fdb-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswFdbStatistic []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic `path:"ethsw-fdb-statistic" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo   `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	HasTrunkEntry     *string                                                                                      `path:"has-trunk-entry" module:"Cisco-IOS-XR-switch-oper"`
	TrunkEntryMessage *string                                                                                      `path:"trunk-entry-message" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-fdb/ethsw-fdb-core-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo struct {
	FdbEntries       *uint32 `path:"fdb-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbInstance      *string `path:"fdb-instance" module:"Cisco-IOS-XR-switch-oper"`
	FdbStaticEntries *uint32 `path:"fdb-static-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbCoreInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-fdb/ethsw-fdb-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo struct {
	FdbIndex       *uint32 `path:"fdb-index" module:"Cisco-IOS-XR-switch-oper"`
	FdbMacAddr     *string `path:"fdb-mac-addr" module:"Cisco-IOS-XR-switch-oper"`
	FdbPort        *string `path:"fdb-port" module:"Cisco-IOS-XR-switch-oper"`
	FdbStaticEntry *string `path:"fdb-static-entry" module:"Cisco-IOS-XR-switch-oper"`
	FdbSyncedCores *uint32 `path:"fdb-synced-cores" module:"Cisco-IOS-XR-switch-oper"`
	FdbTrapEntry   *string `path:"fdb-trap-entry" module:"Cisco-IOS-XR-switch-oper"`
	FdbVlan        *uint32 `path:"fdb-vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-fdb/ethsw-fdb-statistic YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic struct {
	FdbAddrInsertErrors     *uint32 `path:"fdb-addr-insert-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrQFull            *string `path:"fdb-addr-q-full" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrUpdateErrors     *uint32 `path:"fdb-addr-update-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrUpdatesQ         *uint32 `path:"fdb-addr-updates-q" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddressUpdates       *uint32 `path:"fdb-address-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbAgedUpdates          *uint32 `path:"fdb-aged-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbAllocationErrors     *uint32 `path:"fdb-allocation-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesAdded         *uint32 `path:"fdb-entries-added" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesDeleted       *uint32 `path:"fdb-entries-deleted" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesUpdated       *uint32 `path:"fdb-entries-updated" module:"Cisco-IOS-XR-switch-oper"`
	FdbFlushed              *uint32 `path:"fdb-flushed" module:"Cisco-IOS-XR-switch-oper"`
	FdbForwardingQFull      *string `path:"fdb-forwarding-q-full" module:"Cisco-IOS-XR-switch-oper"`
	FdbForwardingUpdates    *uint32 `path:"fdb-forwarding-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbMaxHashChain         *uint32 `path:"fdb-max-hash-chain" module:"Cisco-IOS-XR-switch-oper"`
	FdbMaxShadowEntries     *uint32 `path:"fdb-max-shadow-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbNewAddress           *uint32 `path:"fdb-new-address" module:"Cisco-IOS-XR-switch-oper"`
	FdbShadowEntries        *uint32 `path:"fdb-shadow-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbTransplantUpdates    *uint32 `path:"fdb-transplant-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbforwardingUpdatesQed *uint32 `path:"fdbforwarding-updates-qed" module:"Cisco-IOS-XR-switch-oper"`
	FdbmemoryErrors         *uint32 `path:"fdbmemory-errors" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswFdbStatistic) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-fdb/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswFdb_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState struct {
	EthswHealthStatePortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo `path:"ethsw-health-state-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo        *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo          `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo struct {
	EthswHealthStateAdminStateInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo    `path:"ethsw-health-state-admin-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateHealthStateInfo   []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo   `path:"ethsw-health-state-health-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateHistoryEntryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo  `path:"ethsw-health-state-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateLinkStateInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo     `path:"ethsw-health-state-link-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerActiveInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo `path:"ethsw-health-state-partner-active-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerInfo       []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo       `path:"ethsw-health-state-partner-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerStateInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo  `path:"ethsw-health-state-partner-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePhySyncStateInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo  `path:"ethsw-health-state-phy-sync-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateSyncStateInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo     `path:"ethsw-health-state-sync-state-info" module:"Cisco-IOS-XR-switch-oper"`
	MonitorEnabled                    *string                                                                                                                                       `path:"monitor-enabled" module:"Cisco-IOS-XR-switch-oper"`
	MonitorMode                       *string                                                                                                                                       `path:"monitor-mode" module:"Cisco-IOS-XR-switch-oper"`
	PollingCount                      *uint32                                                                                                                                       `path:"polling-count" module:"Cisco-IOS-XR-switch-oper"`
	PollingIntervalMs                 *uint32                                                                                                                                       `path:"polling-interval-ms" module:"Cisco-IOS-XR-switch-oper"`
	PollingMode                       *string                                                                                                                                       `path:"polling-mode" module:"Cisco-IOS-XR-switch-oper"`
	Port                              *uint32                                                                                                                                       `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortName                          *string                                                                                                                                       `path:"port-name" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryAttempts                  *uint32                                                                                                                                       `path:"recovery-attempts" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryEnabled                   *string                                                                                                                                       `path:"recovery-enabled" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryMode                      *string                                                                                                                                       `path:"recovery-mode" module:"Cisco-IOS-XR-switch-oper"`
	UnstableLinkThreshold             *uint32                                                                                                                                       `path:"unstable-link-threshold" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-admin-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-health-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo struct {
	Epoch    *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault    *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	Instance *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	NewState *string `path:"new-state" module:"Cisco-IOS-XR-switch-oper"`
	Type     *string `path:"type" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-link-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-partner-active-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo struct {
	CardType    *uint32 `path:"card-type" module:"Cisco-IOS-XR-switch-oper"`
	LogicalSlot *uint32 `path:"logical-slot" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-partner-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo struct {
	Active      *uint32 `path:"active" module:"Cisco-IOS-XR-switch-oper"`
	CardName    *string `path:"card-name" module:"Cisco-IOS-XR-switch-oper"`
	CardType    *uint32 `path:"card-type" module:"Cisco-IOS-XR-switch-oper"`
	Epoch       *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	LogicalSlot *uint32 `path:"logical-slot" module:"Cisco-IOS-XR-switch-oper"`
	Present     *uint32 `path:"present" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-partner-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-phy-sync-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-health-state-port-info/ethsw-health-state-sync-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-health-state/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswHealthState_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-mac YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPortInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo   `path:"ethsw-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-mac/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-mac/ethsw-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo struct {
	EthswRegisterData []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData `path:"ethsw-register-data" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8                                                                                                     `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-mac/ethsw-port-info/ethsw-register-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData struct {
	BaseReg     *string `path:"base-reg" module:"Cisco-IOS-XR-switch-oper"`
	Description *string `path:"description" module:"Cisco-IOS-XR-switch-oper"`
	Value       *string `path:"value" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswMac_EthswPortInfo_EthswRegisterData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-policing YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                               `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                               `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                               `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                               `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                               `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                               `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-policing/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-policing/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswPolicing_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-serdes YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPortInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo   `path:"ethsw-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-serdes/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-serdes/ethsw-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo struct {
	EthswRegisterData []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData `path:"ethsw-register-data" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8                                                                                                        `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-serdes/ethsw-port-info/ethsw-register-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData struct {
	BaseReg     *string `path:"base-reg" module:"Cisco-IOS-XR-switch-oper"`
	Description *string `path:"description" module:"Cisco-IOS-XR-switch-oper"`
	Value       *string `path:"value" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSerdes_EthswPortInfo_EthswRegisterData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-statistics YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics struct {
	EthswDetailedStatInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo `path:"ethsw-detailed-stat-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo     *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswSummaryStatInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo  `path:"ethsw-summary-stat-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-statistics/ethsw-detailed-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo struct {
	ConnectsTo           *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port                 *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortSpeed            *string `path:"port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PortState            *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	RxBadCrc             *uint64 `path:"rx-bad-crc" module:"Cisco-IOS-XR-switch-oper"`
	RxBadOctets          *uint64 `path:"rx-bad-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxBroadcastPackets   *uint64 `path:"rx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxCollisons          *uint64 `path:"rx-collisons" module:"Cisco-IOS-XR-switch-oper"`
	RxErrors             *uint64 `path:"rx-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxFifoOverrun        *uint64 `path:"rx-fifo-overrun" module:"Cisco-IOS-XR-switch-oper"`
	RxFlowControl        *uint64 `path:"rx-flow-control" module:"Cisco-IOS-XR-switch-oper"`
	RxFragments          *uint64 `path:"rx-fragments" module:"Cisco-IOS-XR-switch-oper"`
	RxGoodOctets         *uint64 `path:"rx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxJabber             *uint64 `path:"rx-jabber" module:"Cisco-IOS-XR-switch-oper"`
	RxMulticastPackets   *uint64 `path:"rx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxOversize           *uint64 `path:"rx-oversize" module:"Cisco-IOS-XR-switch-oper"`
	RxPolicingDrops      *uint64 `path:"rx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_1024Max  *uint64 `path:"rx-tx-packets-1024-max" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_128_255  *uint64 `path:"rx-tx-packets-128-255" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_256_511  *uint64 `path:"rx-tx-packets-256-511" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_512_1023 *uint64 `path:"rx-tx-packets-512-1023" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_64       *uint64 `path:"rx-tx-packets-64" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_65_127   *uint64 `path:"rx-tx-packets-65-127" module:"Cisco-IOS-XR-switch-oper"`
	RxUndersize          *uint64 `path:"rx-undersize" module:"Cisco-IOS-XR-switch-oper"`
	RxUnicastPackets     *uint64 `path:"rx-unicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxBroadcastPackets   *uint64 `path:"tx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDeferred           *uint64 `path:"tx-deferred" module:"Cisco-IOS-XR-switch-oper"`
	TxExcessCollision    *uint64 `path:"tx-excess-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxFifoUnrun          *uint64 `path:"tx-fifo-unrun" module:"Cisco-IOS-XR-switch-oper"`
	TxGoodOctets         *uint64 `path:"tx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	TxLateCollisions     *uint64 `path:"tx-late-collisions" module:"Cisco-IOS-XR-switch-oper"`
	TxMultiCollision     *uint64 `path:"tx-multi-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxMulticastPackets   *uint64 `path:"tx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxPolicingDrops      *uint64 `path:"tx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxQueueDrops         *uint64 `path:"tx-queue-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxUnitcastPackets    *uint64 `path:"tx-unitcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxflowControl        *uint64 `path:"txflow-control" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswDetailedStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-statistics/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-statistics/ethsw-summary-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo struct {
	ConnectsTo       *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port             *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortState        *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	PortStateChanges *uint32 `path:"port-state-changes" module:"Cisco-IOS-XR-switch-oper"`
	RxDropsErrors    *uint64 `path:"rx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxPackets        *uint64 `path:"rx-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDropsErrors    *uint64 `path:"tx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	TxPackets        *uint64 `path:"tx-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswStatistics_EthswSummaryStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-summay YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswSumInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo    `path:"ethsw-sum-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-summay/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-summay/ethsw-sum-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo struct {
	ConnectsTo        *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortAdminState    *string `path:"port-admin-state" module:"Cisco-IOS-XR-switch-oper"`
	PortForwarding    *string `path:"port-forwarding" module:"Cisco-IOS-XR-switch-oper"`
	PortProtocolState *string `path:"port-protocol-state" module:"Cisco-IOS-XR-switch-oper"`
	PortSpeed         *string `path:"port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PortState         *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswSummay_EthswSumInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-trunk YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTrunkInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo  `path:"ethsw-trunk-info" module:"Cisco-IOS-XR-switch-oper"`
	MemberCount       *uint8                                                                                       `path:"member-count" module:"Cisco-IOS-XR-switch-oper"`
	TrunkName         *string                                                                                      `path:"trunk-name" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-trunk/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-trunk/ethsw-trunk-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo struct {
	Port       *uint8 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortStatus *uint8 `path:"port-status" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTrunk_EthswTrunkInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq struct {
	EthswLocationInfo              *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo                `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo      `path:"ethsw-txq-configuration-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsDetailedInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo `path:"ethsw-txq-statistics-detailed-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsSummaryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo  `path:"ethsw-txq-statistics-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	InitialConfiguration           *string                                                                                                   `path:"initial-configuration" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-configuration-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo struct {
	EthswTxqConfigurationGlobalInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo  `path:"ethsw-txq-configuration-global-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationPortInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo    `path:"ethsw-txq-configuration-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationProfileInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo `path:"ethsw-txq-configuration-profile-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-configuration-info/ethsw-txq-configuration-global-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo struct {
	GlobalBuffers                    *uint32 `path:"global-buffers" module:"Cisco-IOS-XR-switch-oper"`
	GlobalTrafficDescriptors         *uint32 `path:"global-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetBuffers               *uint32 `path:"multi-target-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetTrafficDescriptors    *uint32 `path:"multi-target-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0Buffers               *uint32 `path:"shared-pool0-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0TrafficDescriptors    *uint32 `path:"shared-pool0-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressBuffers             *uint32 `path:"sniffed-egress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressTrafficDescriptors  *uint32 `path:"sniffed-egress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressBuffers            *uint32 `path:"sniffed-ingress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressTrafficDescriptors *uint32 `path:"sniffed-ingress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMode   *string `path:"weighted-round-robin-schedule-mode" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMtu    *string `path:"weighted-round-robin-schedule-mtu" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-configuration-info/ethsw-txq-configuration-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo struct {
	ConfigDropProfile      *uint32 `path:"config-drop-profile" module:"Cisco-IOS-XR-switch-oper"`
	ConfigSchedulerProfile *uint32 `path:"config-scheduler-profile" module:"Cisco-IOS-XR-switch-oper"`
	Port                   *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo struct {
	EthswTxqConfigurationProfilePerTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo `path:"ethsw-txq-configuration-profile-per-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Id                                              *uint32                                                                                                                                                                               `path:"id" module:"Cisco-IOS-XR-switch-oper"`
	MaxBuffers                                      *uint32                                                                                                                                                                               `path:"max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MaxTrafficDescriptors                           *uint32                                                                                                                                                                               `path:"max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                                         *string                                                                                                                                                                               `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info/ethsw-txq-configuration-profile-per-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo struct {
	ArbitrationGroup                  *string `path:"arbitration-group" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxBuffers            *uint32 `path:"drop-profile0-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxTrafficDescriptors *uint32 `path:"drop-profile0-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxBuffers            *uint32 `path:"drop-profile1-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxTrafficDescriptors *uint32 `path:"drop-profile1-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxBuffers            *uint32 `path:"drop-profile2-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxTrafficDescriptors *uint32 `path:"drop-profile2-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                           *string `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                      *uint32 `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxBuffers            *uint32 `path:"traffic-class-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxTrafficDescriptors *uint32 `path:"traffic-class-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinWeight          *uint32 `path:"weighted-round-robin-weight" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-detailed-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo struct {
	EthswTxqStatisticsDetailedPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo `path:"ethsw-txq-statistics-detailed-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo struct {
	EthswTxqStatisticsDetailedTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo `path:"ethsw-txq-statistics-detailed-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                                       *uint32                                                                                                                                                                                 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes                             *uint64                                                                                                                                                                                 `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets                           *uint64                                                                                                                                                                                 `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes                           *uint64                                                                                                                                                                                 `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets                         *uint64                                                                                                                                                                                 `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                               *string                                                                                                                                                                                 `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor                          *string                                                                                                                                                                                 `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo struct {
	EthswTxqStatisticsDetailedColorInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo `path:"ethsw-txq-statistics-detailed-color-info" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                        *string                                                                                                                                                                                                                     `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info/ethsw-txq-statistics-detailed-color-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo struct {
	Color       *string `path:"color" module:"Cisco-IOS-XR-switch-oper"`
	DropBytes   *uint64 `path:"drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	DropPackets *uint64 `path:"drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	PassBytes   *uint64 `path:"pass-bytes" module:"Cisco-IOS-XR-switch-oper"`
	PassPackets *uint64 `path:"pass-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo struct {
	EthswTxqStatisticsSummaryPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo `path:"ethsw-txq-statistics-summary-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-txq/ethsw-txq-statistics-summary-info/ethsw-txq-statistics-summary-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo struct {
	Port               *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes     *uint64 `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets   *uint64 `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes   *uint64 `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets *uint64 `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass       *string `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor  *string `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswTxq_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-ifo YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo   `path:"ethsw-vlan-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-ifo/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-ifo/ethsw-vlan-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo struct {
	Vlan    *uint32 `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
	VlanUse *string `path:"vlan-use" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanIfo_EthswVlanInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-membership YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo   `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanMembInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo `path:"ethsw-vlan-memb-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-membership/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/all/all-instances/all-instance/ethsw-vlan-membership/ethsw-vlan-memb-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo struct {
	Ports []uint8 `path:"ports" module:"Cisco-IOS-XR-switch-oper"`
	Vlan  *uint32 `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_All_AllInstances_AllInstance_EthswVlanMembership_EthswVlanMembInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge struct {
	BridgeInstances  *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances  `path:"bridge-instances" module:"Cisco-IOS-XR-switch-oper"`
	BridgeStatistics *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics `path:"bridge-statistics" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) IsYANGGoStruct() {}

// GetOrCreateBridgeInstances retrieves the value of the BridgeInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) GetOrCreateBridgeInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances {
	if t.BridgeInstances != nil {
		return t.BridgeInstances
	}
	t.BridgeInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances{}
	return t.BridgeInstances
}

// GetOrCreateBridgeStatistics retrieves the value of the BridgeStatistics field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) GetOrCreateBridgeStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics {
	if t.BridgeStatistics != nil {
		return t.BridgeStatistics
	}
	t.BridgeStatistics = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics{}
	return t.BridgeStatistics
}

// GetBridgeInstances returns the value of the BridgeInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge. If the receiver or the field BridgeInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) GetBridgeInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances {
	if t != nil && t.BridgeInstances != nil {
		return t.BridgeInstances
	}
	return nil
}

// GetBridgeStatistics returns the value of the BridgeStatistics struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge. If the receiver or the field BridgeStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) GetBridgeStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics {
	if t != nil && t.BridgeStatistics != nil {
		return t.BridgeStatistics
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances struct {
	BridgeInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance `path:"bridge-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) IsYANGGoStruct() {}

// NewBridgeInstance creates a new entry in the BridgeInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) NewBridgeInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeInstance == nil {
		t.BridgeInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeInstance", key)
	}

	t.BridgeInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance{
		NodeId: &NodeId,
	}

	return t.BridgeInstance[key], nil
}

// RenameBridgeInstance renames an entry in the list BridgeInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) RenameBridgeInstance(oldK, newK string) error {
	if _, ok := t.BridgeInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeInstance", newK)
	}

	e, ok := t.BridgeInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeInstance", oldK)
	}
	e.NodeId = &newK

	t.BridgeInstance[newK] = e
	delete(t.BridgeInstance, oldK)
	return nil
}

// GetOrCreateBridgeInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) GetOrCreateBridgeInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance {
	if t.BridgeInstance == nil {
		t.BridgeInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance)
	}
	return t.BridgeInstance
}

// GetOrCreateBridgeInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) GetOrCreateBridgeInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance {

	key := NodeId

	if v, ok := t.BridgeInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeInstance got unexpected error: %v", err))
	}
	return v
}

// GetBridgeInstance retrieves the value with the specified key from
// the BridgeInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) GetBridgeInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.BridgeInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendBridgeInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance struct to the
// list BridgeInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) AppendBridgeInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeInstance == nil {
		t.BridgeInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance)
	}

	if _, ok := t.BridgeInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeInstance %v", key)
	}

	t.BridgeInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-instances/bridge-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance struct {
	EthswBridgeEgressInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo  `path:"ethsw-bridge-egress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswBridgeIngressInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo `path:"ethsw-bridge-ingress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo      *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo        `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                 *string                                                                                           `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) IsYANGGoStruct() {}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-instances/bridge-instance/ethsw-bridge-egress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo struct {
	EgressBroadcastFrames *uint64 `path:"egress-broadcast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressControlPackets  *uint64 `path:"egress-control-packets" module:"Cisco-IOS-XR-switch-oper"`
	EgressDiscardedFrames *uint64 `path:"egress-discarded-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressMulticastFrames *uint64 `path:"egress-multicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressOtherDrops      *uint64 `path:"egress-other-drops" module:"Cisco-IOS-XR-switch-oper"`
	EgressPortVlanTcDp    *string `path:"egress-port-vlan-tc-dp" module:"Cisco-IOS-XR-switch-oper"`
	EgressTransmitQCong   *uint64 `path:"egress-transmit-q-cong" module:"Cisco-IOS-XR-switch-oper"`
	EgressUnicastFrames   *uint64 `path:"egress-unicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EntryNumber           *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeEgressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-instances/bridge-instance/ethsw-bridge-ingress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo struct {
	EntryNumber          *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
	IngressFrames        *uint64 `path:"ingress-frames" module:"Cisco-IOS-XR-switch-oper"`
	IngressOtherDiscards *uint64 `path:"ingress-other-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressPortVlan      *string `path:"ingress-port-vlan" module:"Cisco-IOS-XR-switch-oper"`
	IngressSecDiscards   *uint64 `path:"ingress-sec-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressVlanDiscards  *uint64 `path:"ingress-vlan-discards" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswBridgeIngressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-instances/bridge-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeInstances_BridgeInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics struct {
	BridgeStatisticsInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances `path:"bridge-statistics-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) IsYANGGoStruct() {}

// GetOrCreateBridgeStatisticsInstances retrieves the value of the BridgeStatisticsInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) GetOrCreateBridgeStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances {
	if t.BridgeStatisticsInstances != nil {
		return t.BridgeStatisticsInstances
	}
	t.BridgeStatisticsInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances{}
	return t.BridgeStatisticsInstances
}

// GetBridgeStatisticsInstances returns the value of the BridgeStatisticsInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics. If the receiver or the field BridgeStatisticsInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) GetBridgeStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances {
	if t != nil && t.BridgeStatisticsInstances != nil {
		return t.BridgeStatisticsInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics/bridge-statistics-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances struct {
	BridgeStatisticsInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance `path:"bridge-statistics-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) IsYANGGoStruct() {
}

// NewBridgeStatisticsInstance creates a new entry in the BridgeStatisticsInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) NewBridgeStatisticsInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeStatisticsInstance == nil {
		t.BridgeStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BridgeStatisticsInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BridgeStatisticsInstance", key)
	}

	t.BridgeStatisticsInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance{
		NodeId: &NodeId,
	}

	return t.BridgeStatisticsInstance[key], nil
}

// RenameBridgeStatisticsInstance renames an entry in the list BridgeStatisticsInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) RenameBridgeStatisticsInstance(oldK, newK string) error {
	if _, ok := t.BridgeStatisticsInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BridgeStatisticsInstance", newK)
	}

	e, ok := t.BridgeStatisticsInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BridgeStatisticsInstance", oldK)
	}
	e.NodeId = &newK

	t.BridgeStatisticsInstance[newK] = e
	delete(t.BridgeStatisticsInstance, oldK)
	return nil
}

// GetOrCreateBridgeStatisticsInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) GetOrCreateBridgeStatisticsInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance {
	if t.BridgeStatisticsInstance == nil {
		t.BridgeStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance)
	}
	return t.BridgeStatisticsInstance
}

// GetOrCreateBridgeStatisticsInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) GetOrCreateBridgeStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance {

	key := NodeId

	if v, ok := t.BridgeStatisticsInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBridgeStatisticsInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBridgeStatisticsInstance got unexpected error: %v", err))
	}
	return v
}

// GetBridgeStatisticsInstance retrieves the value with the specified key from
// the BridgeStatisticsInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) GetBridgeStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.BridgeStatisticsInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendBridgeStatisticsInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance struct to the
// list BridgeStatisticsInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) AppendBridgeStatisticsInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BridgeStatisticsInstance == nil {
		t.BridgeStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance)
	}

	if _, ok := t.BridgeStatisticsInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BridgeStatisticsInstance %v", key)
	}

	t.BridgeStatisticsInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics/bridge-statistics-instances/bridge-statistics-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance struct {
	EthswBridgeEgressInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo  `path:"ethsw-bridge-egress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswBridgeIngressInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo `path:"ethsw-bridge-ingress-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo      *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo        `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                 *string                                                                                                                                `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics/bridge-statistics-instances/bridge-statistics-instance/ethsw-bridge-egress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo struct {
	EgressBroadcastFrames *uint64 `path:"egress-broadcast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressControlPackets  *uint64 `path:"egress-control-packets" module:"Cisco-IOS-XR-switch-oper"`
	EgressDiscardedFrames *uint64 `path:"egress-discarded-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressMulticastFrames *uint64 `path:"egress-multicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EgressOtherDrops      *uint64 `path:"egress-other-drops" module:"Cisco-IOS-XR-switch-oper"`
	EgressPortVlanTcDp    *string `path:"egress-port-vlan-tc-dp" module:"Cisco-IOS-XR-switch-oper"`
	EgressTransmitQCong   *uint64 `path:"egress-transmit-q-cong" module:"Cisco-IOS-XR-switch-oper"`
	EgressUnicastFrames   *uint64 `path:"egress-unicast-frames" module:"Cisco-IOS-XR-switch-oper"`
	EntryNumber           *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeEgressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics/bridge-statistics-instances/bridge-statistics-instance/ethsw-bridge-ingress-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo struct {
	EntryNumber          *uint8  `path:"entry-number" module:"Cisco-IOS-XR-switch-oper"`
	IngressFrames        *uint64 `path:"ingress-frames" module:"Cisco-IOS-XR-switch-oper"`
	IngressOtherDiscards *uint64 `path:"ingress-other-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressPortVlan      *string `path:"ingress-port-vlan" module:"Cisco-IOS-XR-switch-oper"`
	IngressSecDiscards   *uint64 `path:"ingress-sec-discards" module:"Cisco-IOS-XR-switch-oper"`
	IngressVlanDiscards  *uint64 `path:"ingress-vlan-discards" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswBridgeIngressInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/bridge/bridge-statistics/bridge-statistics-instances/bridge-statistics-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Bridge_BridgeStatistics_BridgeStatisticsInstances_BridgeStatisticsInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity struct {
	DataIntegrityError *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError `path:"data-integrity-error" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) IsYANGGoStruct() {}

// GetOrCreateDataIntegrityError retrieves the value of the DataIntegrityError field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) GetOrCreateDataIntegrityError() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError {
	if t.DataIntegrityError != nil {
		return t.DataIntegrityError
	}
	t.DataIntegrityError = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError{}
	return t.DataIntegrityError
}

// GetDataIntegrityError returns the value of the DataIntegrityError struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity. If the receiver or the field DataIntegrityError is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) GetDataIntegrityError() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError {
	if t != nil && t.DataIntegrityError != nil {
		return t.DataIntegrityError
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError struct {
	DataIntegrityErrorHistory *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory `path:"data-integrity-error-history" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorInfo    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo    `path:"data-integrity-error-info" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorSummary *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorSummary `path:"data-integrity-error-summary" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) IsYANGGoStruct() {}

// GetOrCreateDataIntegrityErrorHistory retrieves the value of the DataIntegrityErrorHistory field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetOrCreateDataIntegrityErrorHistory() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory {
	if t.DataIntegrityErrorHistory != nil {
		return t.DataIntegrityErrorHistory
	}
	t.DataIntegrityErrorHistory = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory{}
	return t.DataIntegrityErrorHistory
}

// GetOrCreateDataIntegrityErrorInfo retrieves the value of the DataIntegrityErrorInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetOrCreateDataIntegrityErrorInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo {
	if t.DataIntegrityErrorInfo != nil {
		return t.DataIntegrityErrorInfo
	}
	t.DataIntegrityErrorInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo{}
	return t.DataIntegrityErrorInfo
}

// GetOrCreateDataIntegrityErrorSummary retrieves the value of the DataIntegrityErrorSummary field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetOrCreateDataIntegrityErrorSummary() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorSummary {
	if t.DataIntegrityErrorSummary != nil {
		return t.DataIntegrityErrorSummary
	}
	t.DataIntegrityErrorSummary = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorSummary{}
	return t.DataIntegrityErrorSummary
}

// GetDataIntegrityErrorHistory returns the value of the DataIntegrityErrorHistory struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError. If the receiver or the field DataIntegrityErrorHistory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetDataIntegrityErrorHistory() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory {
	if t != nil && t.DataIntegrityErrorHistory != nil {
		return t.DataIntegrityErrorHistory
	}
	return nil
}

// GetDataIntegrityErrorInfo returns the value of the DataIntegrityErrorInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError. If the receiver or the field DataIntegrityErrorInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetDataIntegrityErrorInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo {
	if t != nil && t.DataIntegrityErrorInfo != nil {
		return t.DataIntegrityErrorInfo
	}
	return nil
}

// GetDataIntegrityErrorSummary returns the value of the DataIntegrityErrorSummary struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError. If the receiver or the field DataIntegrityErrorSummary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) GetDataIntegrityErrorSummary() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorSummary {
	if t != nil && t.DataIntegrityErrorSummary != nil {
		return t.DataIntegrityErrorSummary
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory struct {
	DataIntegrityErrorHistoryHwTableNumbers    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers    `path:"data-integrity-error-history-hw-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances `path:"data-integrity-error-history-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryLogTableNumbers   *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers   `path:"data-integrity-error-history-log-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryMemTypeNumbers    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers    `path:"data-integrity-error-history-mem-type-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryHwTableNumbers retrieves the value of the DataIntegrityErrorHistoryHwTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetOrCreateDataIntegrityErrorHistoryHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers {
	if t.DataIntegrityErrorHistoryHwTableNumbers != nil {
		return t.DataIntegrityErrorHistoryHwTableNumbers
	}
	t.DataIntegrityErrorHistoryHwTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers{}
	return t.DataIntegrityErrorHistoryHwTableNumbers
}

// GetOrCreateDataIntegrityErrorHistoryLocationInstances retrieves the value of the DataIntegrityErrorHistoryLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetOrCreateDataIntegrityErrorHistoryLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances {
	if t.DataIntegrityErrorHistoryLocationInstances != nil {
		return t.DataIntegrityErrorHistoryLocationInstances
	}
	t.DataIntegrityErrorHistoryLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances{}
	return t.DataIntegrityErrorHistoryLocationInstances
}

// GetOrCreateDataIntegrityErrorHistoryLogTableNumbers retrieves the value of the DataIntegrityErrorHistoryLogTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetOrCreateDataIntegrityErrorHistoryLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers {
	if t.DataIntegrityErrorHistoryLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryLogTableNumbers
	}
	t.DataIntegrityErrorHistoryLogTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers{}
	return t.DataIntegrityErrorHistoryLogTableNumbers
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeNumbers retrieves the value of the DataIntegrityErrorHistoryMemTypeNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetOrCreateDataIntegrityErrorHistoryMemTypeNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers {
	if t.DataIntegrityErrorHistoryMemTypeNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeNumbers
	}
	t.DataIntegrityErrorHistoryMemTypeNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers{}
	return t.DataIntegrityErrorHistoryMemTypeNumbers
}

// GetDataIntegrityErrorHistoryHwTableNumbers returns the value of the DataIntegrityErrorHistoryHwTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory. If the receiver or the field DataIntegrityErrorHistoryHwTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetDataIntegrityErrorHistoryHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers {
	if t != nil && t.DataIntegrityErrorHistoryHwTableNumbers != nil {
		return t.DataIntegrityErrorHistoryHwTableNumbers
	}
	return nil
}

// GetDataIntegrityErrorHistoryLocationInstances returns the value of the DataIntegrityErrorHistoryLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory. If the receiver or the field DataIntegrityErrorHistoryLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetDataIntegrityErrorHistoryLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryLocationInstances != nil {
		return t.DataIntegrityErrorHistoryLocationInstances
	}
	return nil
}

// GetDataIntegrityErrorHistoryLogTableNumbers returns the value of the DataIntegrityErrorHistoryLogTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory. If the receiver or the field DataIntegrityErrorHistoryLogTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetDataIntegrityErrorHistoryLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers {
	if t != nil && t.DataIntegrityErrorHistoryLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryLogTableNumbers
	}
	return nil
}

// GetDataIntegrityErrorHistoryMemTypeNumbers returns the value of the DataIntegrityErrorHistoryMemTypeNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory. If the receiver or the field DataIntegrityErrorHistoryMemTypeNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) GetDataIntegrityErrorHistoryMemTypeNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeNumbers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers struct {
	DataIntegrityErrorHistoryHwTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber `path:"data-integrity-error-history-hw-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryHwTableNumber creates a new entry in the DataIntegrityErrorHistoryHwTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) NewDataIntegrityErrorHistoryHwTableNumber(HwTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber)
	}

	key := HwTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryHwTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryHwTableNumber", key)
	}

	t.DataIntegrityErrorHistoryHwTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber{
		HwTable: &HwTable,
	}

	return t.DataIntegrityErrorHistoryHwTableNumber[key], nil
}

// RenameDataIntegrityErrorHistoryHwTableNumber renames an entry in the list DataIntegrityErrorHistoryHwTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) RenameDataIntegrityErrorHistoryHwTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryHwTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryHwTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryHwTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryHwTableNumber", oldK)
	}
	e.HwTable = &newK

	t.DataIntegrityErrorHistoryHwTableNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryHwTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryHwTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) GetOrCreateDataIntegrityErrorHistoryHwTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber {
	if t.DataIntegrityErrorHistoryHwTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber)
	}
	return t.DataIntegrityErrorHistoryHwTableNumber
}

// GetOrCreateDataIntegrityErrorHistoryHwTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) GetOrCreateDataIntegrityErrorHistoryHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber {

	key := HwTable

	if v, ok := t.DataIntegrityErrorHistoryHwTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryHwTableNumber(HwTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryHwTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryHwTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryHwTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) GetDataIntegrityErrorHistoryHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber {

	if t == nil {
		return nil
	}

	key := HwTable

	if lm, ok := t.DataIntegrityErrorHistoryHwTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryHwTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber struct to the
// list DataIntegrityErrorHistoryHwTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) AppendDataIntegrityErrorHistoryHwTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) error {
	if v.HwTable == nil {
		return fmt.Errorf("invalid nil key received for HwTable")
	}

	key := *v.HwTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryHwTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryHwTableNumber %v", key)
	}

	t.DataIntegrityErrorHistoryHwTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber struct {
	DataIntegrityErrorHistoryHwTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances `path:"data-integrity-error-history-hw-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryHwTableLogTableNumbers   *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers   `path:"data-integrity-error-history-hw-table-log-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	HwTable                                           *uint32                                                                                                                                                                                                                        `path:"hw-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstances retrieves the value of the DataIntegrityErrorHistoryHwTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances {
	if t.DataIntegrityErrorHistoryHwTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryHwTableLocationInstances
	}
	t.DataIntegrityErrorHistoryHwTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances{}
	return t.DataIntegrityErrorHistoryHwTableLocationInstances
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumbers retrieves the value of the DataIntegrityErrorHistoryHwTableLogTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers {
	if t.DataIntegrityErrorHistoryHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryHwTableLogTableNumbers
	}
	t.DataIntegrityErrorHistoryHwTableLogTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers{}
	return t.DataIntegrityErrorHistoryHwTableLogTableNumbers
}

// GetDataIntegrityErrorHistoryHwTableLocationInstances returns the value of the DataIntegrityErrorHistoryHwTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber. If the receiver or the field DataIntegrityErrorHistoryHwTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) GetDataIntegrityErrorHistoryHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryHwTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryHwTableLocationInstances
	}
	return nil
}

// GetDataIntegrityErrorHistoryHwTableLogTableNumbers returns the value of the DataIntegrityErrorHistoryHwTableLogTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber. If the receiver or the field DataIntegrityErrorHistoryHwTableLogTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) GetDataIntegrityErrorHistoryHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers {
	if t != nil && t.DataIntegrityErrorHistoryHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryHwTableLogTableNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HwTable == nil {
		return nil, fmt.Errorf("nil value for key HwTable")
	}

	return map[string]interface{}{
		"hw-table": *t.HwTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances struct {
	DataIntegrityErrorHistoryHwTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance `path:"data-integrity-error-history-hw-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryHwTableLocationInstance creates a new entry in the DataIntegrityErrorHistoryHwTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) NewDataIntegrityErrorHistoryHwTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryHwTableLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryHwTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryHwTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryHwTableLocationInstance renames an entry in the list DataIntegrityErrorHistoryHwTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) RenameDataIntegrityErrorHistoryHwTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryHwTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryHwTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryHwTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryHwTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance {
	if t.DataIntegrityErrorHistoryHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance)
	}
	return t.DataIntegrityErrorHistoryHwTableLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryHwTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryHwTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryHwTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryHwTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) GetDataIntegrityErrorHistoryHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryHwTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance struct to the
// list DataIntegrityErrorHistoryHwTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) AppendDataIntegrityErrorHistoryHwTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryHwTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryHwTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryHwTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                                                                                                              `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                                                                                                                      `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                          `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                      `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-location-instances/data-integrity-error-history-hw-table-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLocationInstances_DataIntegrityErrorHistoryHwTableLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers struct {
	DataIntegrityErrorHistoryHwTableLogTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber `path:"data-integrity-error-history-hw-table-log-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryHwTableLogTableNumber creates a new entry in the DataIntegrityErrorHistoryHwTableLogTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) NewDataIntegrityErrorHistoryHwTableLogTableNumber(LogTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber)
	}

	key := LogTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryHwTableLogTableNumber", key)
	}

	t.DataIntegrityErrorHistoryHwTableLogTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber{
		LogTable: &LogTable,
	}

	return t.DataIntegrityErrorHistoryHwTableLogTableNumber[key], nil
}

// RenameDataIntegrityErrorHistoryHwTableLogTableNumber renames an entry in the list DataIntegrityErrorHistoryHwTableLogTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) RenameDataIntegrityErrorHistoryHwTableLogTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryHwTableLogTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryHwTableLogTableNumber", oldK)
	}
	e.LogTable = &newK

	t.DataIntegrityErrorHistoryHwTableLogTableNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryHwTableLogTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber {
	if t.DataIntegrityErrorHistoryHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber)
	}
	return t.DataIntegrityErrorHistoryHwTableLogTableNumber
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber {

	key := LogTable

	if v, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryHwTableLogTableNumber(LogTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryHwTableLogTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryHwTableLogTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryHwTableLogTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) GetDataIntegrityErrorHistoryHwTableLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber {

	if t == nil {
		return nil
	}

	key := LogTable

	if lm, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryHwTableLogTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber struct to the
// list DataIntegrityErrorHistoryHwTableLogTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) AppendDataIntegrityErrorHistoryHwTableLogTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) error {
	if v.LogTable == nil {
		return fmt.Errorf("invalid nil key received for LogTable")
	}

	key := *v.LogTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryHwTableLogTableNumber %v", key)
	}

	t.DataIntegrityErrorHistoryHwTableLogTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber struct {
	DataIntegrityErrorHistoryHwTableLogTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances `path:"data-integrity-error-history-hw-table-log-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	LogTable                                                  *uint32                                                                                                                                                                                                                                                                                                                               `path:"log-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstances retrieves the value of the DataIntegrityErrorHistoryHwTableLogTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances {
	if t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances
	}
	t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances{}
	return t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances
}

// GetDataIntegrityErrorHistoryHwTableLogTableLocationInstances returns the value of the DataIntegrityErrorHistoryHwTableLogTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber. If the receiver or the field DataIntegrityErrorHistoryHwTableLogTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) GetDataIntegrityErrorHistoryHwTableLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryHwTableLogTableLocationInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogTable == nil {
		return nil, fmt.Errorf("nil value for key LogTable")
	}

	return map[string]interface{}{
		"log-table": *t.LogTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances struct {
	DataIntegrityErrorHistoryHwTableLogTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance `path:"data-integrity-error-history-hw-table-log-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryHwTableLogTableLocationInstance creates a new entry in the DataIntegrityErrorHistoryHwTableLogTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) NewDataIntegrityErrorHistoryHwTableLogTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryHwTableLogTableLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryHwTableLogTableLocationInstance renames an entry in the list DataIntegrityErrorHistoryHwTableLogTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) RenameDataIntegrityErrorHistoryHwTableLogTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryHwTableLogTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryHwTableLogTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance {
	if t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance)
	}
	return t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryHwTableLogTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryHwTableLogTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryHwTableLogTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryHwTableLogTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) GetDataIntegrityErrorHistoryHwTableLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryHwTableLogTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance struct to the
// list DataIntegrityErrorHistoryHwTableLogTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) AppendDataIntegrityErrorHistoryHwTableLogTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryHwTableLogTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryHwTableLogTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                                                                                                                                                                                                                             `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-hw-table-numbers/data-integrity-error-history-hw-table-number/data-integrity-error-history-hw-table-log-table-numbers/data-integrity-error-history-hw-table-log-table-number/data-integrity-error-history-hw-table-log-table-location-instances/data-integrity-error-history-hw-table-log-table-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryHwTableNumbers_DataIntegrityErrorHistoryHwTableNumber_DataIntegrityErrorHistoryHwTableLogTableNumbers_DataIntegrityErrorHistoryHwTableLogTableNumber_DataIntegrityErrorHistoryHwTableLogTableLocationInstances_DataIntegrityErrorHistoryHwTableLogTableLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances struct {
	DataIntegrityErrorHistoryLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance `path:"data-integrity-error-history-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryLocationInstance creates a new entry in the DataIntegrityErrorHistoryLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) NewDataIntegrityErrorHistoryLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLocationInstance == nil {
		t.DataIntegrityErrorHistoryLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryLocationInstance renames an entry in the list DataIntegrityErrorHistoryLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) RenameDataIntegrityErrorHistoryLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) GetOrCreateDataIntegrityErrorHistoryLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance {
	if t.DataIntegrityErrorHistoryLocationInstance == nil {
		t.DataIntegrityErrorHistoryLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance)
	}
	return t.DataIntegrityErrorHistoryLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) GetOrCreateDataIntegrityErrorHistoryLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) GetDataIntegrityErrorHistoryLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance struct to the
// list DataIntegrityErrorHistoryLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) AppendDataIntegrityErrorHistoryLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLocationInstance == nil {
		t.DataIntegrityErrorHistoryLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                 `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                         `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                             `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                         `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                         `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                         `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                         `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                         `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                         `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-location-instances/data-integrity-error-history-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLocationInstances_DataIntegrityErrorHistoryLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers struct {
	DataIntegrityErrorHistoryLogTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber `path:"data-integrity-error-history-log-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryLogTableNumber creates a new entry in the DataIntegrityErrorHistoryLogTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) NewDataIntegrityErrorHistoryLogTableNumber(LogTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLogTableNumber == nil {
		t.DataIntegrityErrorHistoryLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber)
	}

	key := LogTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryLogTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryLogTableNumber", key)
	}

	t.DataIntegrityErrorHistoryLogTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber{
		LogTable: &LogTable,
	}

	return t.DataIntegrityErrorHistoryLogTableNumber[key], nil
}

// RenameDataIntegrityErrorHistoryLogTableNumber renames an entry in the list DataIntegrityErrorHistoryLogTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) RenameDataIntegrityErrorHistoryLogTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryLogTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryLogTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryLogTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryLogTableNumber", oldK)
	}
	e.LogTable = &newK

	t.DataIntegrityErrorHistoryLogTableNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryLogTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryLogTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryLogTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber {
	if t.DataIntegrityErrorHistoryLogTableNumber == nil {
		t.DataIntegrityErrorHistoryLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber)
	}
	return t.DataIntegrityErrorHistoryLogTableNumber
}

// GetOrCreateDataIntegrityErrorHistoryLogTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber {

	key := LogTable

	if v, ok := t.DataIntegrityErrorHistoryLogTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryLogTableNumber(LogTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryLogTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryLogTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryLogTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) GetDataIntegrityErrorHistoryLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber {

	if t == nil {
		return nil
	}

	key := LogTable

	if lm, ok := t.DataIntegrityErrorHistoryLogTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryLogTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber struct to the
// list DataIntegrityErrorHistoryLogTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) AppendDataIntegrityErrorHistoryLogTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) error {
	if v.LogTable == nil {
		return fmt.Errorf("invalid nil key received for LogTable")
	}

	key := *v.LogTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLogTableNumber == nil {
		t.DataIntegrityErrorHistoryLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryLogTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryLogTableNumber %v", key)
	}

	t.DataIntegrityErrorHistoryLogTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber struct {
	DataIntegrityErrorHistoryLogTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances `path:"data-integrity-error-history-log-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	LogTable                                           *uint32                                                                                                                                                                                                                           `path:"log-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstances retrieves the value of the DataIntegrityErrorHistoryLogTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances {
	if t.DataIntegrityErrorHistoryLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryLogTableLocationInstances
	}
	t.DataIntegrityErrorHistoryLogTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances{}
	return t.DataIntegrityErrorHistoryLogTableLocationInstances
}

// GetDataIntegrityErrorHistoryLogTableLocationInstances returns the value of the DataIntegrityErrorHistoryLogTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber. If the receiver or the field DataIntegrityErrorHistoryLogTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) GetDataIntegrityErrorHistoryLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryLogTableLocationInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogTable == nil {
		return nil, fmt.Errorf("nil value for key LogTable")
	}

	return map[string]interface{}{
		"log-table": *t.LogTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances struct {
	DataIntegrityErrorHistoryLogTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance `path:"data-integrity-error-history-log-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryLogTableLocationInstance creates a new entry in the DataIntegrityErrorHistoryLogTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) NewDataIntegrityErrorHistoryLogTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryLogTableLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryLogTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryLogTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryLogTableLocationInstance renames an entry in the list DataIntegrityErrorHistoryLogTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) RenameDataIntegrityErrorHistoryLogTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryLogTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryLogTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryLogTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryLogTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance {
	if t.DataIntegrityErrorHistoryLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance)
	}
	return t.DataIntegrityErrorHistoryLogTableLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryLogTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryLogTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryLogTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryLogTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) GetDataIntegrityErrorHistoryLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryLogTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance struct to the
// list DataIntegrityErrorHistoryLogTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) AppendDataIntegrityErrorHistoryLogTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryLogTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryLogTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryLogTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                                                                                                                  `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                                                                                                                          `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                              `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                          `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                                                                                                                          `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                                                                                                                          `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                                                                                                                          `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                                                                                                                          `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                                                                                                                          `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-log-table-numbers/data-integrity-error-history-log-table-number/data-integrity-error-history-log-table-location-instances/data-integrity-error-history-log-table-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryLogTableNumbers_DataIntegrityErrorHistoryLogTableNumber_DataIntegrityErrorHistoryLogTableLocationInstances_DataIntegrityErrorHistoryLogTableLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers struct {
	DataIntegrityErrorHistoryMemTypeNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber `path:"data-integrity-error-history-mem-type-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeNumber creates a new entry in the DataIntegrityErrorHistoryMemTypeNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) NewDataIntegrityErrorHistoryMemTypeNumber(MemType uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber)
	}

	key := MemType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeNumber", key)
	}

	t.DataIntegrityErrorHistoryMemTypeNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber{
		MemType: &MemType,
	}

	return t.DataIntegrityErrorHistoryMemTypeNumber[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeNumber renames an entry in the list DataIntegrityErrorHistoryMemTypeNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) RenameDataIntegrityErrorHistoryMemTypeNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeNumber", oldK)
	}
	e.MemType = &newK

	t.DataIntegrityErrorHistoryMemTypeNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber {
	if t.DataIntegrityErrorHistoryMemTypeNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber)
	}
	return t.DataIntegrityErrorHistoryMemTypeNumber
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeNumber(MemType uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber {

	key := MemType

	if v, ok := t.DataIntegrityErrorHistoryMemTypeNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeNumber(MemType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) GetDataIntegrityErrorHistoryMemTypeNumber(MemType uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber {

	if t == nil {
		return nil
	}

	key := MemType

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber struct to the
// list DataIntegrityErrorHistoryMemTypeNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) AppendDataIntegrityErrorHistoryMemTypeNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) error {
	if v.MemType == nil {
		return fmt.Errorf("invalid nil key received for MemType")
	}

	key := *v.MemType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeNumber %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber struct {
	DataIntegrityErrorHistoryMemTypeHwTableNumbers    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers    `path:"data-integrity-error-history-mem-type-hw-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryMemTypeLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances `path:"data-integrity-error-history-mem-type-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	MemType                                           *uint32                                                                                                                                                                                                                        `path:"mem-type" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumbers retrieves the value of the DataIntegrityErrorHistoryMemTypeHwTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers {
	if t.DataIntegrityErrorHistoryMemTypeHwTableNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableNumbers
	}
	t.DataIntegrityErrorHistoryMemTypeHwTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers{}
	return t.DataIntegrityErrorHistoryMemTypeHwTableNumbers
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstances retrieves the value of the DataIntegrityErrorHistoryMemTypeLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances {
	if t.DataIntegrityErrorHistoryMemTypeLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeLocationInstances
	}
	t.DataIntegrityErrorHistoryMemTypeLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances{}
	return t.DataIntegrityErrorHistoryMemTypeLocationInstances
}

// GetDataIntegrityErrorHistoryMemTypeHwTableNumbers returns the value of the DataIntegrityErrorHistoryMemTypeHwTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber. If the receiver or the field DataIntegrityErrorHistoryMemTypeHwTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) GetDataIntegrityErrorHistoryMemTypeHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeHwTableNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableNumbers
	}
	return nil
}

// GetDataIntegrityErrorHistoryMemTypeLocationInstances returns the value of the DataIntegrityErrorHistoryMemTypeLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber. If the receiver or the field DataIntegrityErrorHistoryMemTypeLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) GetDataIntegrityErrorHistoryMemTypeLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeLocationInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MemType == nil {
		return nil, fmt.Errorf("nil value for key MemType")
	}

	return map[string]interface{}{
		"mem-type": *t.MemType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers struct {
	DataIntegrityErrorHistoryMemTypeHwTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber `path:"data-integrity-error-history-mem-type-hw-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeHwTableNumber creates a new entry in the DataIntegrityErrorHistoryMemTypeHwTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) NewDataIntegrityErrorHistoryMemTypeHwTableNumber(HwTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber)
	}

	key := HwTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeHwTableNumber", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber{
		HwTable: &HwTable,
	}

	return t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeHwTableNumber renames an entry in the list DataIntegrityErrorHistoryMemTypeHwTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) RenameDataIntegrityErrorHistoryMemTypeHwTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeHwTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeHwTableNumber", oldK)
	}
	e.HwTable = &newK

	t.DataIntegrityErrorHistoryMemTypeHwTableNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeHwTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber {
	if t.DataIntegrityErrorHistoryMemTypeHwTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber)
	}
	return t.DataIntegrityErrorHistoryMemTypeHwTableNumber
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber {

	key := HwTable

	if v, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeHwTableNumber(HwTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeHwTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeHwTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) GetDataIntegrityErrorHistoryMemTypeHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber {

	if t == nil {
		return nil
	}

	key := HwTable

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeHwTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber struct to the
// list DataIntegrityErrorHistoryMemTypeHwTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) AppendDataIntegrityErrorHistoryMemTypeHwTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) error {
	if v.HwTable == nil {
		return fmt.Errorf("invalid nil key received for HwTable")
	}

	key := *v.HwTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeHwTableNumber %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber struct {
	DataIntegrityErrorHistoryMemTypeHwTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances `path:"data-integrity-error-history-mem-type-hw-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers   *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers   `path:"data-integrity-error-history-mem-type-hw-table-log-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	HwTable                                                  *uint32                                                                                                                                                                                                                                                                                                                            `path:"hw-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstances retrieves the value of the DataIntegrityErrorHistoryMemTypeHwTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances
	}
	t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances{}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers retrieves the value of the DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers
	}
	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers{}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLocationInstances returns the value of the DataIntegrityErrorHistoryMemTypeHwTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber. If the receiver or the field DataIntegrityErrorHistoryMemTypeHwTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) GetDataIntegrityErrorHistoryMemTypeHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstances
	}
	return nil
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers returns the value of the DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber. If the receiver or the field DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) GetDataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HwTable == nil {
		return nil, fmt.Errorf("nil value for key HwTable")
	}

	return map[string]interface{}{
		"hw-table": *t.HwTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances struct {
	DataIntegrityErrorHistoryMemTypeHwTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance `path:"data-integrity-error-history-mem-type-hw-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeHwTableLocationInstance creates a new entry in the DataIntegrityErrorHistoryMemTypeHwTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) NewDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeHwTableLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeHwTableLocationInstance renames an entry in the list DataIntegrityErrorHistoryMemTypeHwTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) RenameDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeHwTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeHwTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance)
	}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeHwTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) GetDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeHwTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance struct to the
// list DataIntegrityErrorHistoryMemTypeHwTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) AppendDataIntegrityErrorHistoryMemTypeHwTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeHwTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                                                                                                                                                                                                                         `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-location-instances/data-integrity-error-history-mem-type-hw-table-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers struct {
	DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber `path:"data-integrity-error-history-mem-type-hw-table-log-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber creates a new entry in the DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) NewDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(LogTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber)
	}

	key := LogTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber{
		LogTable: &LogTable,
	}

	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber renames an entry in the list DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) RenameDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber", oldK)
	}
	e.LogTable = &newK

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber)
	}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber {

	key := LogTable

	if v, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(LogTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) GetDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(LogTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber {

	if t == nil {
		return nil
	}

	key := LogTable

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber struct to the
// list DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) AppendDataIntegrityErrorHistoryMemTypeHwTableLogTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) error {
	if v.LogTable == nil {
		return fmt.Errorf("invalid nil key received for LogTable")
	}

	key := *v.LogTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber struct {
	DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances `path:"data-integrity-error-history-mem-type-hw-table-log-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	LogTable                                                         *uint32                                                                                                                                                                                                                                                                                                                                                                                                                                                 `path:"log-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances retrieves the value of the DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances
	}
	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances{}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances returns the value of the DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber. If the receiver or the field DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) GetDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances {
	if t != nil && t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances != nil {
		return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LogTable == nil {
		return nil, fmt.Errorf("nil value for key LogTable")
	}

	return map[string]interface{}{
		"log-table": *t.LogTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances struct {
	DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance `path:"data-integrity-error-history-mem-type-hw-table-log-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance creates a new entry in the DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) NewDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance renames an entry in the list DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) RenameDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance {
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance)
	}
	return t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) GetDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance struct to the
// list DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) AppendDataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string`path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint`path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint`path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint`path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint`path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint`path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint`path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint`path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint`path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-hw-table-numbers/data-integrity-error-history-mem-type-hw-table-number/data-integrity-error-history-mem-type-hw-table-log-table-numbers/data-integrity-error-history-mem-type-hw-table-log-table-number/data-integrity-error-history-mem-type-hw-table-log-table-location-instances/data-integrity-error-history-mem-type-hw-table-log-table-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeHwTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumbers_DataIntegrityErrorHistoryMemTypeHwTableLogTableNumber_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstances_DataIntegrityErrorHistoryMemTypeHwTableLogTableLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances struct {
	DataIntegrityErrorHistoryMemTypeLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance `path:"data-integrity-error-history-mem-type-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorHistoryMemTypeLocationInstance creates a new entry in the DataIntegrityErrorHistoryMemTypeLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) NewDataIntegrityErrorHistoryMemTypeLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorHistoryMemTypeLocationInstance", key)
	}

	t.DataIntegrityErrorHistoryMemTypeLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorHistoryMemTypeLocationInstance[key], nil
}

// RenameDataIntegrityErrorHistoryMemTypeLocationInstance renames an entry in the list DataIntegrityErrorHistoryMemTypeLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) RenameDataIntegrityErrorHistoryMemTypeLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorHistoryMemTypeLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorHistoryMemTypeLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorHistoryMemTypeLocationInstance[newK] = e
	delete(t.DataIntegrityErrorHistoryMemTypeLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance {
	if t.DataIntegrityErrorHistoryMemTypeLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance)
	}
	return t.DataIntegrityErrorHistoryMemTypeLocationInstance
}

// GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorHistoryMemTypeLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorHistoryMemTypeLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorHistoryMemTypeLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorHistoryMemTypeLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) GetDataIntegrityErrorHistoryMemTypeLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorHistoryMemTypeLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance struct to the
// list DataIntegrityErrorHistoryMemTypeLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) AppendDataIntegrityErrorHistoryMemTypeLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorHistoryMemTypeLocationInstance == nil {
		t.DataIntegrityErrorHistoryMemTypeLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorHistoryMemTypeLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorHistoryMemTypeLocationInstance %v", key)
	}

	t.DataIntegrityErrorHistoryMemTypeLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance struct {
	EthswDataIntegrityErrorHistoryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo `path:"ethsw-data-integrity-error-history-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorInformation []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation `path:"ethsw-data-integrity-error-information" module:"Cisco-IOS-XR-switch-oper"`
	EthswDataIntegrityErrorSummaryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo `path:"ethsw-data-integrity-error-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo                  *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo                    `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                             *string                                                                                                                                                                                                                                                                                                              `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-history-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo struct {
	EthswDataIntegrityErrorHistoryEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo `path:"ethsw-data-integrity-error-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                         *uint32                                                                                                                                                                                                                                                                                                                                                      `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-history-info/ethsw-data-integrity-error-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo struct {
	CorrectionMethod   *string `path:"correction-method" module:"Cisco-IOS-XR-switch-oper"`
	ErrorStatus        *string `path:"error-status" module:"Cisco-IOS-XR-switch-oper"`
	ErrorTime          *string `path:"error-time" module:"Cisco-IOS-XR-switch-oper"`
	ErrorType          *string `path:"error-type" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable      *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableIndex *string `path:"hardware-table-index" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName  *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance           *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	Interrupt          *uint32 `path:"interrupt" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable       *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableIndex  *string `path:"logical-table-index" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName   *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryRow          *uint32 `path:"memory-row" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType         *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName     *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryUsage        *string `path:"memory-usage" module:"Cisco-IOS-XR-switch-oper"`
	TcamRuleIndex      *string `path:"tcam-rule-index" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorHistoryInfo_EthswDataIntegrityErrorHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-information YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation struct {
	EthswDataIntegrityErrorInformationEntryInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo `path:"ethsw-data-integrity-error-information-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                          `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-information/ethsw-data-integrity-error-information-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTable                          *string `path:"hardware-table" module:"Cisco-IOS-XR-switch-oper"`
	HardwareTableName                      *string `path:"hardware-table-name" module:"Cisco-IOS-XR-switch-oper"`
	Instance                               *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	LastErrorTime                          *string `path:"last-error-time" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTable                           *string `path:"logical-table" module:"Cisco-IOS-XR-switch-oper"`
	LogicalTableName                       *string `path:"logical-table-name" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ProtectionType                         *string `path:"protection-type" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorInformation_EthswDataIntegrityErrorInformationEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo struct {
	EthswDataIntegrityErrorSummaryEntryInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo `path:"ethsw-data-integrity-error-summary-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	NumberOfEntries                             *uint32                                                                                                                                                                                                                                                                                                                                                      `path:"number-of-entries" module:"Cisco-IOS-XR-switch-oper"`
	TotalCorrectedErrorCount                    *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalMultiBitErrorCorrectionCodeErrorCount  *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalParityErrorCount                       *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalSingleBitErrorCorrectionCodeErrorCount *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	TotalUncorrectedErrorCount                  *uint64                                                                                                                                                                                                                                                                                                                                                      `path:"total-uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-data-integrity-error-summary-info/ethsw-data-integrity-error-summary-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo struct {
	CorrectedErrorCount                    *uint32 `path:"corrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
	MemoryType                             *uint32 `path:"memory-type" module:"Cisco-IOS-XR-switch-oper"`
	MemoryTypeName                         *string `path:"memory-type-name" module:"Cisco-IOS-XR-switch-oper"`
	MultiBitErrorCorrectionCodeErrorCount  *uint32 `path:"multi-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	ParityErrorCount                       *uint32 `path:"parity-error-count" module:"Cisco-IOS-XR-switch-oper"`
	SingleBitErrorCorrectionCodeErrorCount *uint32 `path:"single-bit-error-correction-code-error-count" module:"Cisco-IOS-XR-switch-oper"`
	UncorrectedErrorCount                  *uint32 `path:"uncorrected-error-count" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswDataIntegrityErrorSummaryInfo_EthswDataIntegrityErrorSummaryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-history/data-integrity-error-history-mem-type-numbers/data-integrity-error-history-mem-type-number/data-integrity-error-history-mem-type-location-instances/data-integrity-error-history-mem-type-location-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorHistory_DataIntegrityErrorHistoryMemTypeNumbers_DataIntegrityErrorHistoryMemTypeNumber_DataIntegrityErrorHistoryMemTypeLocationInstances_DataIntegrityErrorHistoryMemTypeLocationInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo struct {
	DataIntegrityErrorInfoHwTableNumbers    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers    `path:"data-integrity-error-info-hw-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorInfoLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLocationInstances `path:"data-integrity-error-info-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorInfoLogTableNumbers   *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLogTableNumbers   `path:"data-integrity-error-info-log-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorInfoMemTypeNumbers    *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoMemTypeNumbers    `path:"data-integrity-error-info-mem-type-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorInfoHwTableNumbers retrieves the value of the DataIntegrityErrorInfoHwTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetOrCreateDataIntegrityErrorInfoHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers {
	if t.DataIntegrityErrorInfoHwTableNumbers != nil {
		return t.DataIntegrityErrorInfoHwTableNumbers
	}
	t.DataIntegrityErrorInfoHwTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers{}
	return t.DataIntegrityErrorInfoHwTableNumbers
}

// GetOrCreateDataIntegrityErrorInfoLocationInstances retrieves the value of the DataIntegrityErrorInfoLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetOrCreateDataIntegrityErrorInfoLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLocationInstances {
	if t.DataIntegrityErrorInfoLocationInstances != nil {
		return t.DataIntegrityErrorInfoLocationInstances
	}
	t.DataIntegrityErrorInfoLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLocationInstances{}
	return t.DataIntegrityErrorInfoLocationInstances
}

// GetOrCreateDataIntegrityErrorInfoLogTableNumbers retrieves the value of the DataIntegrityErrorInfoLogTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetOrCreateDataIntegrityErrorInfoLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLogTableNumbers {
	if t.DataIntegrityErrorInfoLogTableNumbers != nil {
		return t.DataIntegrityErrorInfoLogTableNumbers
	}
	t.DataIntegrityErrorInfoLogTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLogTableNumbers{}
	return t.DataIntegrityErrorInfoLogTableNumbers
}

// GetOrCreateDataIntegrityErrorInfoMemTypeNumbers retrieves the value of the DataIntegrityErrorInfoMemTypeNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetOrCreateDataIntegrityErrorInfoMemTypeNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoMemTypeNumbers {
	if t.DataIntegrityErrorInfoMemTypeNumbers != nil {
		return t.DataIntegrityErrorInfoMemTypeNumbers
	}
	t.DataIntegrityErrorInfoMemTypeNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoMemTypeNumbers{}
	return t.DataIntegrityErrorInfoMemTypeNumbers
}

// GetDataIntegrityErrorInfoHwTableNumbers returns the value of the DataIntegrityErrorInfoHwTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo. If the receiver or the field DataIntegrityErrorInfoHwTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetDataIntegrityErrorInfoHwTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers {
	if t != nil && t.DataIntegrityErrorInfoHwTableNumbers != nil {
		return t.DataIntegrityErrorInfoHwTableNumbers
	}
	return nil
}

// GetDataIntegrityErrorInfoLocationInstances returns the value of the DataIntegrityErrorInfoLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo. If the receiver or the field DataIntegrityErrorInfoLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetDataIntegrityErrorInfoLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLocationInstances {
	if t != nil && t.DataIntegrityErrorInfoLocationInstances != nil {
		return t.DataIntegrityErrorInfoLocationInstances
	}
	return nil
}

// GetDataIntegrityErrorInfoLogTableNumbers returns the value of the DataIntegrityErrorInfoLogTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo. If the receiver or the field DataIntegrityErrorInfoLogTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetDataIntegrityErrorInfoLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoLogTableNumbers {
	if t != nil && t.DataIntegrityErrorInfoLogTableNumbers != nil {
		return t.DataIntegrityErrorInfoLogTableNumbers
	}
	return nil
}

// GetDataIntegrityErrorInfoMemTypeNumbers returns the value of the DataIntegrityErrorInfoMemTypeNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo. If the receiver or the field DataIntegrityErrorInfoMemTypeNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) GetDataIntegrityErrorInfoMemTypeNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoMemTypeNumbers {
	if t != nil && t.DataIntegrityErrorInfoMemTypeNumbers != nil {
		return t.DataIntegrityErrorInfoMemTypeNumbers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-info/data-integrity-error-info-hw-table-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers struct {
	DataIntegrityErrorInfoHwTableNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber `path:"data-integrity-error-info-hw-table-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) IsYANGGoStruct() {
}

// NewDataIntegrityErrorInfoHwTableNumber creates a new entry in the DataIntegrityErrorInfoHwTableNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) NewDataIntegrityErrorInfoHwTableNumber(HwTable uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorInfoHwTableNumber == nil {
		t.DataIntegrityErrorInfoHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber)
	}

	key := HwTable

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorInfoHwTableNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorInfoHwTableNumber", key)
	}

	t.DataIntegrityErrorInfoHwTableNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber{
		HwTable: &HwTable,
	}

	return t.DataIntegrityErrorInfoHwTableNumber[key], nil
}

// RenameDataIntegrityErrorInfoHwTableNumber renames an entry in the list DataIntegrityErrorInfoHwTableNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) RenameDataIntegrityErrorInfoHwTableNumber(oldK, newK uint32) error {
	if _, ok := t.DataIntegrityErrorInfoHwTableNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorInfoHwTableNumber", newK)
	}

	e, ok := t.DataIntegrityErrorInfoHwTableNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorInfoHwTableNumber", oldK)
	}
	e.HwTable = &newK

	t.DataIntegrityErrorInfoHwTableNumber[newK] = e
	delete(t.DataIntegrityErrorInfoHwTableNumber, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorInfoHwTableNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) GetOrCreateDataIntegrityErrorInfoHwTableNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber {
	if t.DataIntegrityErrorInfoHwTableNumber == nil {
		t.DataIntegrityErrorInfoHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber)
	}
	return t.DataIntegrityErrorInfoHwTableNumber
}

// GetOrCreateDataIntegrityErrorInfoHwTableNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) GetOrCreateDataIntegrityErrorInfoHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber {

	key := HwTable

	if v, ok := t.DataIntegrityErrorInfoHwTableNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorInfoHwTableNumber(HwTable)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorInfoHwTableNumber got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorInfoHwTableNumber retrieves the value with the specified key from
// the DataIntegrityErrorInfoHwTableNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) GetDataIntegrityErrorInfoHwTableNumber(HwTable uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber {

	if t == nil {
		return nil
	}

	key := HwTable

	if lm, ok := t.DataIntegrityErrorInfoHwTableNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorInfoHwTableNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber struct to the
// list DataIntegrityErrorInfoHwTableNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) AppendDataIntegrityErrorInfoHwTableNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) error {
	if v.HwTable == nil {
		return fmt.Errorf("invalid nil key received for HwTable")
	}

	key := *v.HwTable

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorInfoHwTableNumber == nil {
		t.DataIntegrityErrorInfoHwTableNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber)
	}

	if _, ok := t.DataIntegrityErrorInfoHwTableNumber[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorInfoHwTableNumber %v", key)
	}

	t.DataIntegrityErrorInfoHwTableNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-info/data-integrity-error-info-hw-table-numbers/data-integrity-error-info-hw-table-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber struct {
	DataIntegrityErrorInfoHwTableLocationInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances `path:"data-integrity-error-info-hw-table-location-instances" module:"Cisco-IOS-XR-switch-oper"`
	DataIntegrityErrorInfoHwTableLogTableNumbers   *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLogTableNumbers   `path:"data-integrity-error-info-hw-table-log-table-numbers" module:"Cisco-IOS-XR-switch-oper"`
	HwTable                                        *uint32                                                                                                                                                                                                            `path:"hw-table" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) IsYANGGoStruct() {
}

// GetOrCreateDataIntegrityErrorInfoHwTableLocationInstances retrieves the value of the DataIntegrityErrorInfoHwTableLocationInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) GetOrCreateDataIntegrityErrorInfoHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances {
	if t.DataIntegrityErrorInfoHwTableLocationInstances != nil {
		return t.DataIntegrityErrorInfoHwTableLocationInstances
	}
	t.DataIntegrityErrorInfoHwTableLocationInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances{}
	return t.DataIntegrityErrorInfoHwTableLocationInstances
}

// GetOrCreateDataIntegrityErrorInfoHwTableLogTableNumbers retrieves the value of the DataIntegrityErrorInfoHwTableLogTableNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) GetOrCreateDataIntegrityErrorInfoHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLogTableNumbers {
	if t.DataIntegrityErrorInfoHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorInfoHwTableLogTableNumbers
	}
	t.DataIntegrityErrorInfoHwTableLogTableNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLogTableNumbers{}
	return t.DataIntegrityErrorInfoHwTableLogTableNumbers
}

// GetDataIntegrityErrorInfoHwTableLocationInstances returns the value of the DataIntegrityErrorInfoHwTableLocationInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber. If the receiver or the field DataIntegrityErrorInfoHwTableLocationInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) GetDataIntegrityErrorInfoHwTableLocationInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances {
	if t != nil && t.DataIntegrityErrorInfoHwTableLocationInstances != nil {
		return t.DataIntegrityErrorInfoHwTableLocationInstances
	}
	return nil
}

// GetDataIntegrityErrorInfoHwTableLogTableNumbers returns the value of the DataIntegrityErrorInfoHwTableLogTableNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber. If the receiver or the field DataIntegrityErrorInfoHwTableLogTableNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) GetDataIntegrityErrorInfoHwTableLogTableNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLogTableNumbers {
	if t != nil && t.DataIntegrityErrorInfoHwTableLogTableNumbers != nil {
		return t.DataIntegrityErrorInfoHwTableLogTableNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HwTable == nil {
		return nil, fmt.Errorf("nil value for key HwTable")
	}

	return map[string]interface{}{
		"hw-table": *t.HwTable,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/data-integrity/data-integrity-error/data-integrity-error-info/data-integrity-error-info-hw-table-numbers/data-integrity-error-info-hw-table-number/data-integrity-error-info-hw-table-location-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances struct {
	DataIntegrityErrorInfoHwTableLocationInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance `path:"data-integrity-error-info-hw-table-location-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) IsYANGGoStruct() {
}

// NewDataIntegrityErrorInfoHwTableLocationInstance creates a new entry in the DataIntegrityErrorInfoHwTableLocationInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) NewDataIntegrityErrorInfoHwTableLocationInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorInfoHwTableLocationInstance == nil {
		t.DataIntegrityErrorInfoHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DataIntegrityErrorInfoHwTableLocationInstance", key)
	}

	t.DataIntegrityErrorInfoHwTableLocationInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance{
		NodeId: &NodeId,
	}

	return t.DataIntegrityErrorInfoHwTableLocationInstance[key], nil
}

// RenameDataIntegrityErrorInfoHwTableLocationInstance renames an entry in the list DataIntegrityErrorInfoHwTableLocationInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) RenameDataIntegrityErrorInfoHwTableLocationInstance(oldK, newK string) error {
	if _, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in DataIntegrityErrorInfoHwTableLocationInstance", newK)
	}

	e, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DataIntegrityErrorInfoHwTableLocationInstance", oldK)
	}
	e.NodeId = &newK

	t.DataIntegrityErrorInfoHwTableLocationInstance[newK] = e
	delete(t.DataIntegrityErrorInfoHwTableLocationInstance, oldK)
	return nil
}

// GetOrCreateDataIntegrityErrorInfoHwTableLocationInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) GetOrCreateDataIntegrityErrorInfoHwTableLocationInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance {
	if t.DataIntegrityErrorInfoHwTableLocationInstance == nil {
		t.DataIntegrityErrorInfoHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance)
	}
	return t.DataIntegrityErrorInfoHwTableLocationInstance
}

// GetOrCreateDataIntegrityErrorInfoHwTableLocationInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) GetOrCreateDataIntegrityErrorInfoHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance {

	key := NodeId

	if v, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDataIntegrityErrorInfoHwTableLocationInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDataIntegrityErrorInfoHwTableLocationInstance got unexpected error: %v", err))
	}
	return v
}

// GetDataIntegrityErrorInfoHwTableLocationInstance retrieves the value with the specified key from
// the DataIntegrityErrorInfoHwTableLocationInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) GetDataIntegrityErrorInfoHwTableLocationInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendDataIntegrityErrorInfoHwTableLocationInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance struct to the
// list DataIntegrityErrorInfoHwTableLocationInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) AppendDataIntegrityErrorInfoHwTableLocationInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DataIntegrityErrorInfoHwTableLocationInstance == nil {
		t.DataIntegrityErrorInfoHwTableLocationInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances_DataIntegrityErrorInfoHwTableLocationInstance)
	}

	if _, ok := t.DataIntegrityErrorInfoHwTableLocationInstance[key]; ok {
		return fmt.Errorf("duplicate key for list DataIntegrityErrorInfoHwTableLocationInstance %v", key)
	}

	t.DataIntegrityErrorInfoHwTableLocationInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_DataIntegrity_DataIntegrityError_DataIntegrityErrorInfo_DataIntegrityErrorInfoHwTableNumbers_DataIntegrityErrorInfoHwTableNumber_DataIntegrityErrorInfoHwTableLocationInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}
