/*
Package native is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-switch-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-switch-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-fabric-plane-health-oper.yang
  - yang/vendor/cisco/xr/2431/Cisco-IOS-XR-fabric-plane-health-oper-sub1.yang
  - yang/vendor/cisco/xr/2431/cisco-semver.yang
  - yang/vendor/cisco/xr/2431/ietf-inet-types.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/2431/...
*/
package native

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-statistics/fdb-statistics-instances/fdb-statistics-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbStatistics_FdbStatisticsInstances_FdbStatisticsInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds struct {
	FdbVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId `path:"fdb-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) IsYANGGoStruct() {}

// NewFdbVlanId creates a new entry in the FdbVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) NewFdbVlanId(Vlan uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdbVlanId == nil {
		t.FdbVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId)
	}

	key := Vlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FdbVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FdbVlanId", key)
	}

	t.FdbVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId{
		Vlan: &Vlan,
	}

	return t.FdbVlanId[key], nil
}

// RenameFdbVlanId renames an entry in the list FdbVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) RenameFdbVlanId(oldK, newK uint32) error {
	if _, ok := t.FdbVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in FdbVlanId", newK)
	}

	e, ok := t.FdbVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FdbVlanId", oldK)
	}
	e.Vlan = &newK

	t.FdbVlanId[newK] = e
	delete(t.FdbVlanId, oldK)
	return nil
}

// GetOrCreateFdbVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) GetOrCreateFdbVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId {
	if t.FdbVlanId == nil {
		t.FdbVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId)
	}
	return t.FdbVlanId
}

// GetOrCreateFdbVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) GetOrCreateFdbVlanId(Vlan uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId {

	key := Vlan

	if v, ok := t.FdbVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFdbVlanId(Vlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFdbVlanId got unexpected error: %v", err))
	}
	return v
}

// GetFdbVlanId retrieves the value with the specified key from
// the FdbVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) GetFdbVlanId(Vlan uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId {

	if t == nil {
		return nil
	}

	key := Vlan

	if lm, ok := t.FdbVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendFdbVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId struct to the
// list FdbVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) AppendFdbVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) error {
	if v.Vlan == nil {
		return fmt.Errorf("invalid nil key received for Vlan")
	}

	key := *v.Vlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdbVlanId == nil {
		t.FdbVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId)
	}

	if _, ok := t.FdbVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list FdbVlanId %v", key)
	}

	t.FdbVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId struct {
	FdbVlanInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances `path:"fdb-vlan-instances" module:"Cisco-IOS-XR-switch-oper"`
	Vlan             *uint32                                                                      `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) IsYANGGoStruct() {}

// GetOrCreateFdbVlanInstances retrieves the value of the FdbVlanInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) GetOrCreateFdbVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances {
	if t.FdbVlanInstances != nil {
		return t.FdbVlanInstances
	}
	t.FdbVlanInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances{}
	return t.FdbVlanInstances
}

// GetFdbVlanInstances returns the value of the FdbVlanInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId. If the receiver or the field FdbVlanInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) GetFdbVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances {
	if t != nil && t.FdbVlanInstances != nil {
		return t.FdbVlanInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vlan == nil {
		return nil, fmt.Errorf("nil value for key Vlan")
	}

	return map[string]interface{}{
		"vlan": *t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances struct {
	FdbVlanInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance `path:"fdb-vlan-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) IsYANGGoStruct() {
}

// NewFdbVlanInstance creates a new entry in the FdbVlanInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) NewFdbVlanInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdbVlanInstance == nil {
		t.FdbVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FdbVlanInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FdbVlanInstance", key)
	}

	t.FdbVlanInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance{
		NodeId: &NodeId,
	}

	return t.FdbVlanInstance[key], nil
}

// RenameFdbVlanInstance renames an entry in the list FdbVlanInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) RenameFdbVlanInstance(oldK, newK string) error {
	if _, ok := t.FdbVlanInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in FdbVlanInstance", newK)
	}

	e, ok := t.FdbVlanInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FdbVlanInstance", oldK)
	}
	e.NodeId = &newK

	t.FdbVlanInstance[newK] = e
	delete(t.FdbVlanInstance, oldK)
	return nil
}

// GetOrCreateFdbVlanInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) GetOrCreateFdbVlanInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance {
	if t.FdbVlanInstance == nil {
		t.FdbVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance)
	}
	return t.FdbVlanInstance
}

// GetOrCreateFdbVlanInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) GetOrCreateFdbVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance {

	key := NodeId

	if v, ok := t.FdbVlanInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFdbVlanInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFdbVlanInstance got unexpected error: %v", err))
	}
	return v
}

// GetFdbVlanInstance retrieves the value with the specified key from
// the FdbVlanInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) GetFdbVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.FdbVlanInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendFdbVlanInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance struct to the
// list FdbVlanInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) AppendFdbVlanInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdbVlanInstance == nil {
		t.FdbVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance)
	}

	if _, ok := t.FdbVlanInstance[key]; ok {
		return fmt.Errorf("duplicate key for list FdbVlanInstance %v", key)
	}

	t.FdbVlanInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances/fdb-vlan-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance struct {
	EthswFdbCoreInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo  `path:"ethsw-fdb-core-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswFdbInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo      `path:"ethsw-fdb-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswFdbStatistic []*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic `path:"ethsw-fdb-statistic" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo   `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	HasTrunkEntry     *string                                                                                                          `path:"has-trunk-entry" module:"Cisco-IOS-XR-switch-oper"`
	NodeId            *string                                                                                                          `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	TrunkEntryMessage *string                                                                                                          `path:"trunk-entry-message" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances/fdb-vlan-instance/ethsw-fdb-core-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo struct {
	FdbEntries       *uint32 `path:"fdb-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbInstance      *string `path:"fdb-instance" module:"Cisco-IOS-XR-switch-oper"`
	FdbStaticEntries *uint32 `path:"fdb-static-entries" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbCoreInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances/fdb-vlan-instance/ethsw-fdb-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo struct {
	FdbIndex       *uint32 `path:"fdb-index" module:"Cisco-IOS-XR-switch-oper"`
	FdbMacAddr     *string `path:"fdb-mac-addr" module:"Cisco-IOS-XR-switch-oper"`
	FdbPort        *string `path:"fdb-port" module:"Cisco-IOS-XR-switch-oper"`
	FdbStaticEntry *string `path:"fdb-static-entry" module:"Cisco-IOS-XR-switch-oper"`
	FdbSyncedCores *uint32 `path:"fdb-synced-cores" module:"Cisco-IOS-XR-switch-oper"`
	FdbTrapEntry   *string `path:"fdb-trap-entry" module:"Cisco-IOS-XR-switch-oper"`
	FdbVlan        *uint32 `path:"fdb-vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances/fdb-vlan-instance/ethsw-fdb-statistic YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic struct {
	FdbAddrInsertErrors     *uint32 `path:"fdb-addr-insert-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrQFull            *string `path:"fdb-addr-q-full" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrUpdateErrors     *uint32 `path:"fdb-addr-update-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddrUpdatesQ         *uint32 `path:"fdb-addr-updates-q" module:"Cisco-IOS-XR-switch-oper"`
	FdbAddressUpdates       *uint32 `path:"fdb-address-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbAgedUpdates          *uint32 `path:"fdb-aged-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbAllocationErrors     *uint32 `path:"fdb-allocation-errors" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesAdded         *uint32 `path:"fdb-entries-added" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesDeleted       *uint32 `path:"fdb-entries-deleted" module:"Cisco-IOS-XR-switch-oper"`
	FdbEntriesUpdated       *uint32 `path:"fdb-entries-updated" module:"Cisco-IOS-XR-switch-oper"`
	FdbFlushed              *uint32 `path:"fdb-flushed" module:"Cisco-IOS-XR-switch-oper"`
	FdbForwardingQFull      *string `path:"fdb-forwarding-q-full" module:"Cisco-IOS-XR-switch-oper"`
	FdbForwardingUpdates    *uint32 `path:"fdb-forwarding-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbMaxHashChain         *uint32 `path:"fdb-max-hash-chain" module:"Cisco-IOS-XR-switch-oper"`
	FdbMaxShadowEntries     *uint32 `path:"fdb-max-shadow-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbNewAddress           *uint32 `path:"fdb-new-address" module:"Cisco-IOS-XR-switch-oper"`
	FdbShadowEntries        *uint32 `path:"fdb-shadow-entries" module:"Cisco-IOS-XR-switch-oper"`
	FdbTransplantUpdates    *uint32 `path:"fdb-transplant-updates" module:"Cisco-IOS-XR-switch-oper"`
	FdbforwardingUpdatesQed *uint32 `path:"fdbforwarding-updates-qed" module:"Cisco-IOS-XR-switch-oper"`
	FdbmemoryErrors         *uint32 `path:"fdbmemory-errors" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswFdbStatistic) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/fdb/fdb-vlan-ids/fdb-vlan-id/fdb-vlan-instances/fdb-vlan-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Fdb_FdbVlanIds_FdbVlanId_FdbVlanInstances_FdbVlanInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health represents the /Cisco-IOS-XR-switch-oper/show-switch/health YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health struct {
	HealthState *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState `path:"health-state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health) IsYANGGoStruct() {}

// GetOrCreateHealthState retrieves the value of the HealthState field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health) GetOrCreateHealthState() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState {
	if t.HealthState != nil {
		return t.HealthState
	}
	t.HealthState = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState{}
	return t.HealthState
}

// GetHealthState returns the value of the HealthState struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Health. If the receiver or the field HealthState is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health) GetHealthState() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState {
	if t != nil && t.HealthState != nil {
		return t.HealthState
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState struct {
	HealthStateInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances `path:"health-state-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) IsYANGGoStruct() {}

// GetOrCreateHealthStateInstances retrieves the value of the HealthStateInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) GetOrCreateHealthStateInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances {
	if t.HealthStateInstances != nil {
		return t.HealthStateInstances
	}
	t.HealthStateInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances{}
	return t.HealthStateInstances
}

// GetHealthStateInstances returns the value of the HealthStateInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState. If the receiver or the field HealthStateInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) GetHealthStateInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances {
	if t != nil && t.HealthStateInstances != nil {
		return t.HealthStateInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances struct {
	HealthStateInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance `path:"health-state-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) IsYANGGoStruct() {}

// NewHealthStateInstance creates a new entry in the HealthStateInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) NewHealthStateInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HealthStateInstance == nil {
		t.HealthStateInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HealthStateInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HealthStateInstance", key)
	}

	t.HealthStateInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance{
		NodeId: &NodeId,
	}

	return t.HealthStateInstance[key], nil
}

// RenameHealthStateInstance renames an entry in the list HealthStateInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) RenameHealthStateInstance(oldK, newK string) error {
	if _, ok := t.HealthStateInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in HealthStateInstance", newK)
	}

	e, ok := t.HealthStateInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HealthStateInstance", oldK)
	}
	e.NodeId = &newK

	t.HealthStateInstance[newK] = e
	delete(t.HealthStateInstance, oldK)
	return nil
}

// GetOrCreateHealthStateInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) GetOrCreateHealthStateInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance {
	if t.HealthStateInstance == nil {
		t.HealthStateInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance)
	}
	return t.HealthStateInstance
}

// GetOrCreateHealthStateInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) GetOrCreateHealthStateInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance {

	key := NodeId

	if v, ok := t.HealthStateInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHealthStateInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHealthStateInstance got unexpected error: %v", err))
	}
	return v
}

// GetHealthStateInstance retrieves the value with the specified key from
// the HealthStateInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) GetHealthStateInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.HealthStateInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendHealthStateInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance struct to the
// list HealthStateInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) AppendHealthStateInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HealthStateInstance == nil {
		t.HealthStateInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance)
	}

	if _, ok := t.HealthStateInstance[key]; ok {
		return fmt.Errorf("duplicate key for list HealthStateInstance %v", key)
	}

	t.HealthStateInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance struct {
	HealthStatePortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers `path:"health-state-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                 *string                                                                                                               `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) IsYANGGoStruct() {
}

// GetOrCreateHealthStatePortNumbers retrieves the value of the HealthStatePortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) GetOrCreateHealthStatePortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers {
	if t.HealthStatePortNumbers != nil {
		return t.HealthStatePortNumbers
	}
	t.HealthStatePortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers{}
	return t.HealthStatePortNumbers
}

// GetHealthStatePortNumbers returns the value of the HealthStatePortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance. If the receiver or the field HealthStatePortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) GetHealthStatePortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers {
	if t != nil && t.HealthStatePortNumbers != nil {
		return t.HealthStatePortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers struct {
	HealthStatePortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber `path:"health-state-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) IsYANGGoStruct() {
}

// NewHealthStatePortNumber creates a new entry in the HealthStatePortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) NewHealthStatePortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HealthStatePortNumber == nil {
		t.HealthStatePortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HealthStatePortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HealthStatePortNumber", key)
	}

	t.HealthStatePortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber{
		PortNum: &PortNum,
	}

	return t.HealthStatePortNumber[key], nil
}

// RenameHealthStatePortNumber renames an entry in the list HealthStatePortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) RenameHealthStatePortNumber(oldK, newK uint32) error {
	if _, ok := t.HealthStatePortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in HealthStatePortNumber", newK)
	}

	e, ok := t.HealthStatePortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HealthStatePortNumber", oldK)
	}
	e.PortNum = &newK

	t.HealthStatePortNumber[newK] = e
	delete(t.HealthStatePortNumber, oldK)
	return nil
}

// GetOrCreateHealthStatePortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) GetOrCreateHealthStatePortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber {
	if t.HealthStatePortNumber == nil {
		t.HealthStatePortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber)
	}
	return t.HealthStatePortNumber
}

// GetOrCreateHealthStatePortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) GetOrCreateHealthStatePortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber {

	key := PortNum

	if v, ok := t.HealthStatePortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHealthStatePortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHealthStatePortNumber got unexpected error: %v", err))
	}
	return v
}

// GetHealthStatePortNumber retrieves the value with the specified key from
// the HealthStatePortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) GetHealthStatePortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.HealthStatePortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendHealthStatePortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber struct to the
// list HealthStatePortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) AppendHealthStatePortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HealthStatePortNumber == nil {
		t.HealthStatePortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber)
	}

	if _, ok := t.HealthStatePortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list HealthStatePortNumber %v", key)
	}

	t.HealthStatePortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber struct {
	EthswHealthStatePortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo `path:"ethsw-health-state-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo        *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo          `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                  *uint32                                                                                                                                                                `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo struct {
	EthswHealthStateAdminStateInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo    `path:"ethsw-health-state-admin-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateHealthStateInfo   []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo   `path:"ethsw-health-state-health-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateHistoryEntryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo  `path:"ethsw-health-state-history-entry-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateLinkStateInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo     `path:"ethsw-health-state-link-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerActiveInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo `path:"ethsw-health-state-partner-active-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerInfo       []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo       `path:"ethsw-health-state-partner-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePartnerStateInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo  `path:"ethsw-health-state-partner-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStatePhySyncStateInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo  `path:"ethsw-health-state-phy-sync-state-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswHealthStateSyncStateInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo     `path:"ethsw-health-state-sync-state-info" module:"Cisco-IOS-XR-switch-oper"`
	MonitorEnabled                    *string                                                                                                                                                                                                  `path:"monitor-enabled" module:"Cisco-IOS-XR-switch-oper"`
	MonitorMode                       *string                                                                                                                                                                                                  `path:"monitor-mode" module:"Cisco-IOS-XR-switch-oper"`
	PollingCount                      *uint32                                                                                                                                                                                                  `path:"polling-count" module:"Cisco-IOS-XR-switch-oper"`
	PollingIntervalMs                 *uint32                                                                                                                                                                                                  `path:"polling-interval-ms" module:"Cisco-IOS-XR-switch-oper"`
	PollingMode                       *string                                                                                                                                                                                                  `path:"polling-mode" module:"Cisco-IOS-XR-switch-oper"`
	Port                              *uint32                                                                                                                                                                                                  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortName                          *string                                                                                                                                                                                                  `path:"port-name" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryAttempts                  *uint32                                                                                                                                                                                                  `path:"recovery-attempts" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryEnabled                   *string                                                                                                                                                                                                  `path:"recovery-enabled" module:"Cisco-IOS-XR-switch-oper"`
	RecoveryMode                      *string                                                                                                                                                                                                  `path:"recovery-mode" module:"Cisco-IOS-XR-switch-oper"`
	UnstableLinkThreshold             *uint32                                                                                                                                                                                                  `path:"unstable-link-threshold" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-admin-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateAdminStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-health-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHealthStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-history-entry-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo struct {
	Epoch    *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault    *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	Instance *uint32 `path:"instance" module:"Cisco-IOS-XR-switch-oper"`
	NewState *string `path:"new-state" module:"Cisco-IOS-XR-switch-oper"`
	Type     *string `path:"type" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateHistoryEntryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-link-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateLinkStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-partner-active-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo struct {
	CardType    *uint32 `path:"card-type" module:"Cisco-IOS-XR-switch-oper"`
	LogicalSlot *uint32 `path:"logical-slot" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerActiveInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-partner-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo struct {
	Active      *uint32 `path:"active" module:"Cisco-IOS-XR-switch-oper"`
	CardName    *string `path:"card-name" module:"Cisco-IOS-XR-switch-oper"`
	CardType    *uint32 `path:"card-type" module:"Cisco-IOS-XR-switch-oper"`
	Epoch       *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	LogicalSlot *uint32 `path:"logical-slot" module:"Cisco-IOS-XR-switch-oper"`
	Present     *uint32 `path:"present" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-partner-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePartnerStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-phy-sync-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStatePhySyncStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-health-state-port-info/ethsw-health-state-sync-state-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo struct {
	Count *uint32 `path:"count" module:"Cisco-IOS-XR-switch-oper"`
	Epoch *string `path:"epoch" module:"Cisco-IOS-XR-switch-oper"`
	Fault *string `path:"fault" module:"Cisco-IOS-XR-switch-oper"`
	State *string `path:"state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswHealthStatePortInfo_EthswHealthStateSyncStateInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/health/health-state/health-state-instances/health-state-instance/health-state-port-numbers/health-state-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Health_HealthState_HealthStateInstances_HealthStateInstance_HealthStatePortNumbers_HealthStatePortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac represents the /Cisco-IOS-XR-switch-oper/show-switch/mac YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac struct {
	MacInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances `path:"mac-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) IsYANGGoStruct() {}

// GetOrCreateMacInstances retrieves the value of the MacInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) GetOrCreateMacInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances {
	if t.MacInstances != nil {
		return t.MacInstances
	}
	t.MacInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances{}
	return t.MacInstances
}

// GetMacInstances returns the value of the MacInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Mac. If the receiver or the field MacInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) GetMacInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances {
	if t != nil && t.MacInstances != nil {
		return t.MacInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances struct {
	MacInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance `path:"mac-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) IsYANGGoStruct() {}

// NewMacInstance creates a new entry in the MacInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) NewMacInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacInstance == nil {
		t.MacInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacInstance", key)
	}

	t.MacInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance{
		NodeId: &NodeId,
	}

	return t.MacInstance[key], nil
}

// RenameMacInstance renames an entry in the list MacInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) RenameMacInstance(oldK, newK string) error {
	if _, ok := t.MacInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MacInstance", newK)
	}

	e, ok := t.MacInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacInstance", oldK)
	}
	e.NodeId = &newK

	t.MacInstance[newK] = e
	delete(t.MacInstance, oldK)
	return nil
}

// GetOrCreateMacInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) GetOrCreateMacInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance {
	if t.MacInstance == nil {
		t.MacInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance)
	}
	return t.MacInstance
}

// GetOrCreateMacInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) GetOrCreateMacInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance {

	key := NodeId

	if v, ok := t.MacInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacInstance got unexpected error: %v", err))
	}
	return v
}

// GetMacInstance retrieves the value with the specified key from
// the MacInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) GetMacInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.MacInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendMacInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance struct to the
// list MacInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) AppendMacInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacInstance == nil {
		t.MacInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance)
	}

	if _, ok := t.MacInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MacInstance %v", key)
	}

	t.MacInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance struct {
	MacPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers `path:"mac-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
	NodeId         *string                                                                        `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) IsYANGGoStruct() {}

// GetOrCreateMacPortNumbers retrieves the value of the MacPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) GetOrCreateMacPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers {
	if t.MacPortNumbers != nil {
		return t.MacPortNumbers
	}
	t.MacPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers{}
	return t.MacPortNumbers
}

// GetMacPortNumbers returns the value of the MacPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance. If the receiver or the field MacPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) GetMacPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers {
	if t != nil && t.MacPortNumbers != nil {
		return t.MacPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance/mac-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers struct {
	MacPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber `path:"mac-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) IsYANGGoStruct() {
}

// NewMacPortNumber creates a new entry in the MacPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) NewMacPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacPortNumber == nil {
		t.MacPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacPortNumber", key)
	}

	t.MacPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber{
		Port: &Port,
	}

	return t.MacPortNumber[key], nil
}

// RenameMacPortNumber renames an entry in the list MacPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) RenameMacPortNumber(oldK, newK uint32) error {
	if _, ok := t.MacPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in MacPortNumber", newK)
	}

	e, ok := t.MacPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacPortNumber", oldK)
	}
	e.Port = &newK

	t.MacPortNumber[newK] = e
	delete(t.MacPortNumber, oldK)
	return nil
}

// GetOrCreateMacPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) GetOrCreateMacPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber {
	if t.MacPortNumber == nil {
		t.MacPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber)
	}
	return t.MacPortNumber
}

// GetOrCreateMacPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) GetOrCreateMacPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber {

	key := Port

	if v, ok := t.MacPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetMacPortNumber retrieves the value with the specified key from
// the MacPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) GetMacPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.MacPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendMacPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber struct to the
// list MacPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) AppendMacPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacPortNumber == nil {
		t.MacPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber)
	}

	if _, ok := t.MacPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list MacPortNumber %v", key)
	}

	t.MacPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance/mac-port-numbers/mac-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPortInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo   `path:"ethsw-port-info" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint32                                                                                                        `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance/mac-port-numbers/mac-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance/mac-port-numbers/mac-port-number/ethsw-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo struct {
	EthswRegisterData []*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData `path:"ethsw-register-data" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8                                                                                                                         `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData represents the /Cisco-IOS-XR-switch-oper/show-switch/mac/mac-instances/mac-instance/mac-port-numbers/mac-port-number/ethsw-port-info/ethsw-register-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData struct {
	BaseReg     *string `path:"base-reg" module:"Cisco-IOS-XR-switch-oper"`
	Description *string `path:"description" module:"Cisco-IOS-XR-switch-oper"`
	Value       *string `path:"value" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Mac_MacInstances_MacInstance_MacPortNumbers_MacPortNumber_EthswPortInfo_EthswRegisterData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing represents the /Cisco-IOS-XR-switch-oper/show-switch/policing YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing struct {
	PolicingConfig     *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig     `path:"policing-config" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatistics *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics `path:"policing-statistics" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) IsYANGGoStruct() {}

// GetOrCreatePolicingConfig retrieves the value of the PolicingConfig field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) GetOrCreatePolicingConfig() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig {
	if t.PolicingConfig != nil {
		return t.PolicingConfig
	}
	t.PolicingConfig = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig{}
	return t.PolicingConfig
}

// GetOrCreatePolicingStatistics retrieves the value of the PolicingStatistics field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) GetOrCreatePolicingStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics {
	if t.PolicingStatistics != nil {
		return t.PolicingStatistics
	}
	t.PolicingStatistics = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics{}
	return t.PolicingStatistics
}

// GetPolicingConfig returns the value of the PolicingConfig struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing. If the receiver or the field PolicingConfig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) GetPolicingConfig() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig {
	if t != nil && t.PolicingConfig != nil {
		return t.PolicingConfig
	}
	return nil
}

// GetPolicingStatistics returns the value of the PolicingStatistics struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing. If the receiver or the field PolicingStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) GetPolicingStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics {
	if t != nil && t.PolicingStatistics != nil {
		return t.PolicingStatistics
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig struct {
	PolicingConfigInstances   *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances   `path:"policing-config-instances" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers `path:"policing-config-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigVlanIds     *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds     `path:"policing-config-vlan-ids" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) IsYANGGoStruct() {}

// GetOrCreatePolicingConfigInstances retrieves the value of the PolicingConfigInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetOrCreatePolicingConfigInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances {
	if t.PolicingConfigInstances != nil {
		return t.PolicingConfigInstances
	}
	t.PolicingConfigInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances{}
	return t.PolicingConfigInstances
}

// GetOrCreatePolicingConfigPortNumbers retrieves the value of the PolicingConfigPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetOrCreatePolicingConfigPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers {
	if t.PolicingConfigPortNumbers != nil {
		return t.PolicingConfigPortNumbers
	}
	t.PolicingConfigPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers{}
	return t.PolicingConfigPortNumbers
}

// GetOrCreatePolicingConfigVlanIds retrieves the value of the PolicingConfigVlanIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetOrCreatePolicingConfigVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds {
	if t.PolicingConfigVlanIds != nil {
		return t.PolicingConfigVlanIds
	}
	t.PolicingConfigVlanIds = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds{}
	return t.PolicingConfigVlanIds
}

// GetPolicingConfigInstances returns the value of the PolicingConfigInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig. If the receiver or the field PolicingConfigInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetPolicingConfigInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances {
	if t != nil && t.PolicingConfigInstances != nil {
		return t.PolicingConfigInstances
	}
	return nil
}

// GetPolicingConfigPortNumbers returns the value of the PolicingConfigPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig. If the receiver or the field PolicingConfigPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetPolicingConfigPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers {
	if t != nil && t.PolicingConfigPortNumbers != nil {
		return t.PolicingConfigPortNumbers
	}
	return nil
}

// GetPolicingConfigVlanIds returns the value of the PolicingConfigVlanIds struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig. If the receiver or the field PolicingConfigVlanIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) GetPolicingConfigVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds {
	if t != nil && t.PolicingConfigVlanIds != nil {
		return t.PolicingConfigVlanIds
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances struct {
	PolicingConfigInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance `path:"policing-config-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) IsYANGGoStruct() {
}

// NewPolicingConfigInstance creates a new entry in the PolicingConfigInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) NewPolicingConfigInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigInstance == nil {
		t.PolicingConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigInstance", key)
	}

	t.PolicingConfigInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance{
		NodeId: &NodeId,
	}

	return t.PolicingConfigInstance[key], nil
}

// RenamePolicingConfigInstance renames an entry in the list PolicingConfigInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) RenamePolicingConfigInstance(oldK, newK string) error {
	if _, ok := t.PolicingConfigInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigInstance", newK)
	}

	e, ok := t.PolicingConfigInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingConfigInstance[newK] = e
	delete(t.PolicingConfigInstance, oldK)
	return nil
}

// GetOrCreatePolicingConfigInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) GetOrCreatePolicingConfigInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance {
	if t.PolicingConfigInstance == nil {
		t.PolicingConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance)
	}
	return t.PolicingConfigInstance
}

// GetOrCreatePolicingConfigInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) GetOrCreatePolicingConfigInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance {

	key := NodeId

	if v, ok := t.PolicingConfigInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigInstance retrieves the value with the specified key from
// the PolicingConfigInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) GetPolicingConfigInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingConfigInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance struct to the
// list PolicingConfigInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) AppendPolicingConfigInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigInstance == nil {
		t.PolicingConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance)
	}

	if _, ok := t.PolicingConfigInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigInstance %v", key)
	}

	t.PolicingConfigInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-instances/policing-config-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                           `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                           `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                           `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                           `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                           `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                           `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                           `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-instances/policing-config-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-instances/policing-config-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigInstances_PolicingConfigInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers struct {
	PolicingConfigPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber `path:"policing-config-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) IsYANGGoStruct() {
}

// NewPolicingConfigPortNumber creates a new entry in the PolicingConfigPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) NewPolicingConfigPortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortNumber == nil {
		t.PolicingConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigPortNumber", key)
	}

	t.PolicingConfigPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber{
		PortNum: &PortNum,
	}

	return t.PolicingConfigPortNumber[key], nil
}

// RenamePolicingConfigPortNumber renames an entry in the list PolicingConfigPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) RenamePolicingConfigPortNumber(oldK, newK uint32) error {
	if _, ok := t.PolicingConfigPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigPortNumber", newK)
	}

	e, ok := t.PolicingConfigPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigPortNumber", oldK)
	}
	e.PortNum = &newK

	t.PolicingConfigPortNumber[newK] = e
	delete(t.PolicingConfigPortNumber, oldK)
	return nil
}

// GetOrCreatePolicingConfigPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) GetOrCreatePolicingConfigPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber {
	if t.PolicingConfigPortNumber == nil {
		t.PolicingConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber)
	}
	return t.PolicingConfigPortNumber
}

// GetOrCreatePolicingConfigPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) GetOrCreatePolicingConfigPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber {

	key := PortNum

	if v, ok := t.PolicingConfigPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigPortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigPortNumber retrieves the value with the specified key from
// the PolicingConfigPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) GetPolicingConfigPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.PolicingConfigPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber struct to the
// list PolicingConfigPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) AppendPolicingConfigPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortNumber == nil {
		t.PolicingConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber)
	}

	if _, ok := t.PolicingConfigPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigPortNumber %v", key)
	}

	t.PolicingConfigPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber struct {
	PolicingConfigPortInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances `path:"policing-config-port-instances" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPortVlanIds   *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds   `path:"policing-config-port-vlan-ids" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                     *uint32                                                                                                                                   `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) IsYANGGoStruct() {
}

// GetOrCreatePolicingConfigPortInstances retrieves the value of the PolicingConfigPortInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) GetOrCreatePolicingConfigPortInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances {
	if t.PolicingConfigPortInstances != nil {
		return t.PolicingConfigPortInstances
	}
	t.PolicingConfigPortInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances{}
	return t.PolicingConfigPortInstances
}

// GetOrCreatePolicingConfigPortVlanIds retrieves the value of the PolicingConfigPortVlanIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) GetOrCreatePolicingConfigPortVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds {
	if t.PolicingConfigPortVlanIds != nil {
		return t.PolicingConfigPortVlanIds
	}
	t.PolicingConfigPortVlanIds = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds{}
	return t.PolicingConfigPortVlanIds
}

// GetPolicingConfigPortInstances returns the value of the PolicingConfigPortInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber. If the receiver or the field PolicingConfigPortInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) GetPolicingConfigPortInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances {
	if t != nil && t.PolicingConfigPortInstances != nil {
		return t.PolicingConfigPortInstances
	}
	return nil
}

// GetPolicingConfigPortVlanIds returns the value of the PolicingConfigPortVlanIds struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber. If the receiver or the field PolicingConfigPortVlanIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) GetPolicingConfigPortVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds {
	if t != nil && t.PolicingConfigPortVlanIds != nil {
		return t.PolicingConfigPortVlanIds
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances struct {
	PolicingConfigPortInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance `path:"policing-config-port-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) IsYANGGoStruct() {
}

// NewPolicingConfigPortInstance creates a new entry in the PolicingConfigPortInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) NewPolicingConfigPortInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortInstance == nil {
		t.PolicingConfigPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigPortInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigPortInstance", key)
	}

	t.PolicingConfigPortInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance{
		NodeId: &NodeId,
	}

	return t.PolicingConfigPortInstance[key], nil
}

// RenamePolicingConfigPortInstance renames an entry in the list PolicingConfigPortInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) RenamePolicingConfigPortInstance(oldK, newK string) error {
	if _, ok := t.PolicingConfigPortInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigPortInstance", newK)
	}

	e, ok := t.PolicingConfigPortInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigPortInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingConfigPortInstance[newK] = e
	delete(t.PolicingConfigPortInstance, oldK)
	return nil
}

// GetOrCreatePolicingConfigPortInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) GetOrCreatePolicingConfigPortInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance {
	if t.PolicingConfigPortInstance == nil {
		t.PolicingConfigPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance)
	}
	return t.PolicingConfigPortInstance
}

// GetOrCreatePolicingConfigPortInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) GetOrCreatePolicingConfigPortInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance {

	key := NodeId

	if v, ok := t.PolicingConfigPortInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigPortInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigPortInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigPortInstance retrieves the value with the specified key from
// the PolicingConfigPortInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) GetPolicingConfigPortInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingConfigPortInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigPortInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance struct to the
// list PolicingConfigPortInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) AppendPolicingConfigPortInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortInstance == nil {
		t.PolicingConfigPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance)
	}

	if _, ok := t.PolicingConfigPortInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigPortInstance %v", key)
	}

	t.PolicingConfigPortInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-instances/policing-config-port-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                                      `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                                      `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                                      `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                                      `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                                      `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                                      `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                                      `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-instances/policing-config-port-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-instances/policing-config-port-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortInstances_PolicingConfigPortInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds struct {
	PolicingConfigPortVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId `path:"policing-config-port-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) IsYANGGoStruct() {
}

// NewPolicingConfigPortVlanId creates a new entry in the PolicingConfigPortVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) NewPolicingConfigPortVlanId(VlanId uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortVlanId == nil {
		t.PolicingConfigPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigPortVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigPortVlanId", key)
	}

	t.PolicingConfigPortVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId{
		VlanId: &VlanId,
	}

	return t.PolicingConfigPortVlanId[key], nil
}

// RenamePolicingConfigPortVlanId renames an entry in the list PolicingConfigPortVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) RenamePolicingConfigPortVlanId(oldK, newK uint32) error {
	if _, ok := t.PolicingConfigPortVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigPortVlanId", newK)
	}

	e, ok := t.PolicingConfigPortVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigPortVlanId", oldK)
	}
	e.VlanId = &newK

	t.PolicingConfigPortVlanId[newK] = e
	delete(t.PolicingConfigPortVlanId, oldK)
	return nil
}

// GetOrCreatePolicingConfigPortVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) GetOrCreatePolicingConfigPortVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId {
	if t.PolicingConfigPortVlanId == nil {
		t.PolicingConfigPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId)
	}
	return t.PolicingConfigPortVlanId
}

// GetOrCreatePolicingConfigPortVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) GetOrCreatePolicingConfigPortVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId {

	key := VlanId

	if v, ok := t.PolicingConfigPortVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigPortVlanId(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigPortVlanId got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigPortVlanId retrieves the value with the specified key from
// the PolicingConfigPortVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) GetPolicingConfigPortVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.PolicingConfigPortVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigPortVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId struct to the
// list PolicingConfigPortVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) AppendPolicingConfigPortVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortVlanId == nil {
		t.PolicingConfigPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId)
	}

	if _, ok := t.PolicingConfigPortVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigPortVlanId %v", key)
	}

	t.PolicingConfigPortVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids/policing-config-port-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId struct {
	PolicingConfigPortVlanInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances `path:"policing-config-port-vlan-instances" module:"Cisco-IOS-XR-switch-oper"`
	VlanId                          *uint32                                                                                                                                                                                          `path:"vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) IsYANGGoStruct() {
}

// GetOrCreatePolicingConfigPortVlanInstances retrieves the value of the PolicingConfigPortVlanInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) GetOrCreatePolicingConfigPortVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances {
	if t.PolicingConfigPortVlanInstances != nil {
		return t.PolicingConfigPortVlanInstances
	}
	t.PolicingConfigPortVlanInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances{}
	return t.PolicingConfigPortVlanInstances
}

// GetPolicingConfigPortVlanInstances returns the value of the PolicingConfigPortVlanInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId. If the receiver or the field PolicingConfigPortVlanInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) GetPolicingConfigPortVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances {
	if t != nil && t.PolicingConfigPortVlanInstances != nil {
		return t.PolicingConfigPortVlanInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids/policing-config-port-vlan-id/policing-config-port-vlan-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances struct {
	PolicingConfigPortVlanInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance `path:"policing-config-port-vlan-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) IsYANGGoStruct() {
}

// NewPolicingConfigPortVlanInstance creates a new entry in the PolicingConfigPortVlanInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) NewPolicingConfigPortVlanInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortVlanInstance == nil {
		t.PolicingConfigPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigPortVlanInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigPortVlanInstance", key)
	}

	t.PolicingConfigPortVlanInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance{
		NodeId: &NodeId,
	}

	return t.PolicingConfigPortVlanInstance[key], nil
}

// RenamePolicingConfigPortVlanInstance renames an entry in the list PolicingConfigPortVlanInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) RenamePolicingConfigPortVlanInstance(oldK, newK string) error {
	if _, ok := t.PolicingConfigPortVlanInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigPortVlanInstance", newK)
	}

	e, ok := t.PolicingConfigPortVlanInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigPortVlanInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingConfigPortVlanInstance[newK] = e
	delete(t.PolicingConfigPortVlanInstance, oldK)
	return nil
}

// GetOrCreatePolicingConfigPortVlanInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) GetOrCreatePolicingConfigPortVlanInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance {
	if t.PolicingConfigPortVlanInstance == nil {
		t.PolicingConfigPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance)
	}
	return t.PolicingConfigPortVlanInstance
}

// GetOrCreatePolicingConfigPortVlanInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) GetOrCreatePolicingConfigPortVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance {

	key := NodeId

	if v, ok := t.PolicingConfigPortVlanInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigPortVlanInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigPortVlanInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigPortVlanInstance retrieves the value with the specified key from
// the PolicingConfigPortVlanInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) GetPolicingConfigPortVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingConfigPortVlanInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigPortVlanInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance struct to the
// list PolicingConfigPortVlanInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) AppendPolicingConfigPortVlanInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigPortVlanInstance == nil {
		t.PolicingConfigPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance)
	}

	if _, ok := t.PolicingConfigPortVlanInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigPortVlanInstance %v", key)
	}

	t.PolicingConfigPortVlanInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids/policing-config-port-vlan-id/policing-config-port-vlan-instances/policing-config-port-vlan-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                                                                                                 `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                                                                                                 `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                                                                                                 `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                                                                                                 `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                                                                                                 `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                                                                                                 `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                                                                                                 `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids/policing-config-port-vlan-id/policing-config-port-vlan-instances/policing-config-port-vlan-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-port-numbers/policing-config-port-number/policing-config-port-vlan-ids/policing-config-port-vlan-id/policing-config-port-vlan-instances/policing-config-port-vlan-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigPortNumbers_PolicingConfigPortNumber_PolicingConfigPortVlanIds_PolicingConfigPortVlanId_PolicingConfigPortVlanInstances_PolicingConfigPortVlanInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds struct {
	PolicingConfigVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId `path:"policing-config-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) IsYANGGoStruct() {
}

// NewPolicingConfigVlanId creates a new entry in the PolicingConfigVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) NewPolicingConfigVlanId(VlanId uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigVlanId == nil {
		t.PolicingConfigVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigVlanId", key)
	}

	t.PolicingConfigVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId{
		VlanId: &VlanId,
	}

	return t.PolicingConfigVlanId[key], nil
}

// RenamePolicingConfigVlanId renames an entry in the list PolicingConfigVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) RenamePolicingConfigVlanId(oldK, newK uint32) error {
	if _, ok := t.PolicingConfigVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigVlanId", newK)
	}

	e, ok := t.PolicingConfigVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigVlanId", oldK)
	}
	e.VlanId = &newK

	t.PolicingConfigVlanId[newK] = e
	delete(t.PolicingConfigVlanId, oldK)
	return nil
}

// GetOrCreatePolicingConfigVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) GetOrCreatePolicingConfigVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId {
	if t.PolicingConfigVlanId == nil {
		t.PolicingConfigVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId)
	}
	return t.PolicingConfigVlanId
}

// GetOrCreatePolicingConfigVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) GetOrCreatePolicingConfigVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId {

	key := VlanId

	if v, ok := t.PolicingConfigVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigVlanId(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigVlanId got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigVlanId retrieves the value with the specified key from
// the PolicingConfigVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) GetPolicingConfigVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.PolicingConfigVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId struct to the
// list PolicingConfigVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) AppendPolicingConfigVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigVlanId == nil {
		t.PolicingConfigVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId)
	}

	if _, ok := t.PolicingConfigVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigVlanId %v", key)
	}

	t.PolicingConfigVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids/policing-config-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId struct {
	PolicingConfigVlanInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances `path:"policing-config-vlan-instances" module:"Cisco-IOS-XR-switch-oper"`
	VlanId                      *uint32                                                                                                                           `path:"vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) IsYANGGoStruct() {
}

// GetOrCreatePolicingConfigVlanInstances retrieves the value of the PolicingConfigVlanInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) GetOrCreatePolicingConfigVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances {
	if t.PolicingConfigVlanInstances != nil {
		return t.PolicingConfigVlanInstances
	}
	t.PolicingConfigVlanInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances{}
	return t.PolicingConfigVlanInstances
}

// GetPolicingConfigVlanInstances returns the value of the PolicingConfigVlanInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId. If the receiver or the field PolicingConfigVlanInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) GetPolicingConfigVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances {
	if t != nil && t.PolicingConfigVlanInstances != nil {
		return t.PolicingConfigVlanInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids/policing-config-vlan-id/policing-config-vlan-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances struct {
	PolicingConfigVlanInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance `path:"policing-config-vlan-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) IsYANGGoStruct() {
}

// NewPolicingConfigVlanInstance creates a new entry in the PolicingConfigVlanInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) NewPolicingConfigVlanInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigVlanInstance == nil {
		t.PolicingConfigVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingConfigVlanInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingConfigVlanInstance", key)
	}

	t.PolicingConfigVlanInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance{
		NodeId: &NodeId,
	}

	return t.PolicingConfigVlanInstance[key], nil
}

// RenamePolicingConfigVlanInstance renames an entry in the list PolicingConfigVlanInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) RenamePolicingConfigVlanInstance(oldK, newK string) error {
	if _, ok := t.PolicingConfigVlanInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingConfigVlanInstance", newK)
	}

	e, ok := t.PolicingConfigVlanInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingConfigVlanInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingConfigVlanInstance[newK] = e
	delete(t.PolicingConfigVlanInstance, oldK)
	return nil
}

// GetOrCreatePolicingConfigVlanInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) GetOrCreatePolicingConfigVlanInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance {
	if t.PolicingConfigVlanInstance == nil {
		t.PolicingConfigVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance)
	}
	return t.PolicingConfigVlanInstance
}

// GetOrCreatePolicingConfigVlanInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) GetOrCreatePolicingConfigVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance {

	key := NodeId

	if v, ok := t.PolicingConfigVlanInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingConfigVlanInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingConfigVlanInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingConfigVlanInstance retrieves the value with the specified key from
// the PolicingConfigVlanInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) GetPolicingConfigVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingConfigVlanInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingConfigVlanInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance struct to the
// list PolicingConfigVlanInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) AppendPolicingConfigVlanInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingConfigVlanInstance == nil {
		t.PolicingConfigVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance)
	}

	if _, ok := t.PolicingConfigVlanInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingConfigVlanInstance %v", key)
	}

	t.PolicingConfigVlanInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids/policing-config-vlan-id/policing-config-vlan-instances/policing-config-vlan-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                              `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                              `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                              `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                              `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                              `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                              `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                              `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids/policing-config-vlan-id/policing-config-vlan-instances/policing-config-vlan-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-config/policing-config-vlan-ids/policing-config-vlan-id/policing-config-vlan-instances/policing-config-vlan-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingConfig_PolicingConfigVlanIds_PolicingConfigVlanId_PolicingConfigVlanInstances_PolicingConfigVlanInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics struct {
	PolicingStatisticsInstances   *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances   `path:"policing-statistics-instances" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatisticsPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers `path:"policing-statistics-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatisticsVlanIds     *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds     `path:"policing-statistics-vlan-ids" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) IsYANGGoStruct() {}

// GetOrCreatePolicingStatisticsInstances retrieves the value of the PolicingStatisticsInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetOrCreatePolicingStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances {
	if t.PolicingStatisticsInstances != nil {
		return t.PolicingStatisticsInstances
	}
	t.PolicingStatisticsInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances{}
	return t.PolicingStatisticsInstances
}

// GetOrCreatePolicingStatisticsPortNumbers retrieves the value of the PolicingStatisticsPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetOrCreatePolicingStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers {
	if t.PolicingStatisticsPortNumbers != nil {
		return t.PolicingStatisticsPortNumbers
	}
	t.PolicingStatisticsPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers{}
	return t.PolicingStatisticsPortNumbers
}

// GetOrCreatePolicingStatisticsVlanIds retrieves the value of the PolicingStatisticsVlanIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetOrCreatePolicingStatisticsVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds {
	if t.PolicingStatisticsVlanIds != nil {
		return t.PolicingStatisticsVlanIds
	}
	t.PolicingStatisticsVlanIds = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds{}
	return t.PolicingStatisticsVlanIds
}

// GetPolicingStatisticsInstances returns the value of the PolicingStatisticsInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics. If the receiver or the field PolicingStatisticsInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetPolicingStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances {
	if t != nil && t.PolicingStatisticsInstances != nil {
		return t.PolicingStatisticsInstances
	}
	return nil
}

// GetPolicingStatisticsPortNumbers returns the value of the PolicingStatisticsPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics. If the receiver or the field PolicingStatisticsPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetPolicingStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers {
	if t != nil && t.PolicingStatisticsPortNumbers != nil {
		return t.PolicingStatisticsPortNumbers
	}
	return nil
}

// GetPolicingStatisticsVlanIds returns the value of the PolicingStatisticsVlanIds struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics. If the receiver or the field PolicingStatisticsVlanIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) GetPolicingStatisticsVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds {
	if t != nil && t.PolicingStatisticsVlanIds != nil {
		return t.PolicingStatisticsVlanIds
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances struct {
	PolicingStatisticsInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance `path:"policing-statistics-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) IsYANGGoStruct() {
}

// NewPolicingStatisticsInstance creates a new entry in the PolicingStatisticsInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) NewPolicingStatisticsInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsInstance == nil {
		t.PolicingStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsInstance", key)
	}

	t.PolicingStatisticsInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance{
		NodeId: &NodeId,
	}

	return t.PolicingStatisticsInstance[key], nil
}

// RenamePolicingStatisticsInstance renames an entry in the list PolicingStatisticsInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) RenamePolicingStatisticsInstance(oldK, newK string) error {
	if _, ok := t.PolicingStatisticsInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsInstance", newK)
	}

	e, ok := t.PolicingStatisticsInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingStatisticsInstance[newK] = e
	delete(t.PolicingStatisticsInstance, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) GetOrCreatePolicingStatisticsInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance {
	if t.PolicingStatisticsInstance == nil {
		t.PolicingStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance)
	}
	return t.PolicingStatisticsInstance
}

// GetOrCreatePolicingStatisticsInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) GetOrCreatePolicingStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance {

	key := NodeId

	if v, ok := t.PolicingStatisticsInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsInstance retrieves the value with the specified key from
// the PolicingStatisticsInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) GetPolicingStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingStatisticsInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance struct to the
// list PolicingStatisticsInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) AppendPolicingStatisticsInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsInstance == nil {
		t.PolicingStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance)
	}

	if _, ok := t.PolicingStatisticsInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsInstance %v", key)
	}

	t.PolicingStatisticsInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-instances/policing-statistics-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                       `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                       `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                       `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                       `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                       `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                       `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                       `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-instances/policing-statistics-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-instances/policing-statistics-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsInstances_PolicingStatisticsInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers struct {
	PolicingStatisticsPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber `path:"policing-statistics-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) IsYANGGoStruct() {
}

// NewPolicingStatisticsPortNumber creates a new entry in the PolicingStatisticsPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) NewPolicingStatisticsPortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortNumber == nil {
		t.PolicingStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsPortNumber", key)
	}

	t.PolicingStatisticsPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber{
		PortNum: &PortNum,
	}

	return t.PolicingStatisticsPortNumber[key], nil
}

// RenamePolicingStatisticsPortNumber renames an entry in the list PolicingStatisticsPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) RenamePolicingStatisticsPortNumber(oldK, newK uint32) error {
	if _, ok := t.PolicingStatisticsPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsPortNumber", newK)
	}

	e, ok := t.PolicingStatisticsPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsPortNumber", oldK)
	}
	e.PortNum = &newK

	t.PolicingStatisticsPortNumber[newK] = e
	delete(t.PolicingStatisticsPortNumber, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) GetOrCreatePolicingStatisticsPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber {
	if t.PolicingStatisticsPortNumber == nil {
		t.PolicingStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber)
	}
	return t.PolicingStatisticsPortNumber
}

// GetOrCreatePolicingStatisticsPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) GetOrCreatePolicingStatisticsPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber {

	key := PortNum

	if v, ok := t.PolicingStatisticsPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsPortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsPortNumber retrieves the value with the specified key from
// the PolicingStatisticsPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) GetPolicingStatisticsPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.PolicingStatisticsPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber struct to the
// list PolicingStatisticsPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) AppendPolicingStatisticsPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortNumber == nil {
		t.PolicingStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber)
	}

	if _, ok := t.PolicingStatisticsPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsPortNumber %v", key)
	}

	t.PolicingStatisticsPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber struct {
	PolicingStatisticsPortInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances `path:"policing-statistics-port-instances" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatisticsPortVlanIds   *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds   `path:"policing-statistics-port-vlan-ids" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                         *uint32                                                                                                                                                   `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) IsYANGGoStruct() {
}

// GetOrCreatePolicingStatisticsPortInstances retrieves the value of the PolicingStatisticsPortInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) GetOrCreatePolicingStatisticsPortInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances {
	if t.PolicingStatisticsPortInstances != nil {
		return t.PolicingStatisticsPortInstances
	}
	t.PolicingStatisticsPortInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances{}
	return t.PolicingStatisticsPortInstances
}

// GetOrCreatePolicingStatisticsPortVlanIds retrieves the value of the PolicingStatisticsPortVlanIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) GetOrCreatePolicingStatisticsPortVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds {
	if t.PolicingStatisticsPortVlanIds != nil {
		return t.PolicingStatisticsPortVlanIds
	}
	t.PolicingStatisticsPortVlanIds = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds{}
	return t.PolicingStatisticsPortVlanIds
}

// GetPolicingStatisticsPortInstances returns the value of the PolicingStatisticsPortInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber. If the receiver or the field PolicingStatisticsPortInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) GetPolicingStatisticsPortInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances {
	if t != nil && t.PolicingStatisticsPortInstances != nil {
		return t.PolicingStatisticsPortInstances
	}
	return nil
}

// GetPolicingStatisticsPortVlanIds returns the value of the PolicingStatisticsPortVlanIds struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber. If the receiver or the field PolicingStatisticsPortVlanIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) GetPolicingStatisticsPortVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds {
	if t != nil && t.PolicingStatisticsPortVlanIds != nil {
		return t.PolicingStatisticsPortVlanIds
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances struct {
	PolicingStatisticsPortInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance `path:"policing-statistics-port-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) IsYANGGoStruct() {
}

// NewPolicingStatisticsPortInstance creates a new entry in the PolicingStatisticsPortInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) NewPolicingStatisticsPortInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortInstance == nil {
		t.PolicingStatisticsPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsPortInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsPortInstance", key)
	}

	t.PolicingStatisticsPortInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance{
		NodeId: &NodeId,
	}

	return t.PolicingStatisticsPortInstance[key], nil
}

// RenamePolicingStatisticsPortInstance renames an entry in the list PolicingStatisticsPortInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) RenamePolicingStatisticsPortInstance(oldK, newK string) error {
	if _, ok := t.PolicingStatisticsPortInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsPortInstance", newK)
	}

	e, ok := t.PolicingStatisticsPortInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsPortInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingStatisticsPortInstance[newK] = e
	delete(t.PolicingStatisticsPortInstance, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsPortInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) GetOrCreatePolicingStatisticsPortInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance {
	if t.PolicingStatisticsPortInstance == nil {
		t.PolicingStatisticsPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance)
	}
	return t.PolicingStatisticsPortInstance
}

// GetOrCreatePolicingStatisticsPortInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) GetOrCreatePolicingStatisticsPortInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance {

	key := NodeId

	if v, ok := t.PolicingStatisticsPortInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsPortInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsPortInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsPortInstance retrieves the value with the specified key from
// the PolicingStatisticsPortInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) GetPolicingStatisticsPortInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingStatisticsPortInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsPortInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance struct to the
// list PolicingStatisticsPortInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) AppendPolicingStatisticsPortInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortInstance == nil {
		t.PolicingStatisticsPortInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance)
	}

	if _, ok := t.PolicingStatisticsPortInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsPortInstance %v", key)
	}

	t.PolicingStatisticsPortInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-instances/policing-statistics-port-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                                                          `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                                                          `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                                                          `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                                                          `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                                                          `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                                                          `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                                                          `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-instances/policing-statistics-port-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-instances/policing-statistics-port-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortInstances_PolicingStatisticsPortInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds struct {
	PolicingStatisticsPortVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId `path:"policing-statistics-port-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) IsYANGGoStruct() {
}

// NewPolicingStatisticsPortVlanId creates a new entry in the PolicingStatisticsPortVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) NewPolicingStatisticsPortVlanId(VlanId uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortVlanId == nil {
		t.PolicingStatisticsPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsPortVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsPortVlanId", key)
	}

	t.PolicingStatisticsPortVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId{
		VlanId: &VlanId,
	}

	return t.PolicingStatisticsPortVlanId[key], nil
}

// RenamePolicingStatisticsPortVlanId renames an entry in the list PolicingStatisticsPortVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) RenamePolicingStatisticsPortVlanId(oldK, newK uint32) error {
	if _, ok := t.PolicingStatisticsPortVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsPortVlanId", newK)
	}

	e, ok := t.PolicingStatisticsPortVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsPortVlanId", oldK)
	}
	e.VlanId = &newK

	t.PolicingStatisticsPortVlanId[newK] = e
	delete(t.PolicingStatisticsPortVlanId, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsPortVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) GetOrCreatePolicingStatisticsPortVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId {
	if t.PolicingStatisticsPortVlanId == nil {
		t.PolicingStatisticsPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId)
	}
	return t.PolicingStatisticsPortVlanId
}

// GetOrCreatePolicingStatisticsPortVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) GetOrCreatePolicingStatisticsPortVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId {

	key := VlanId

	if v, ok := t.PolicingStatisticsPortVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsPortVlanId(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsPortVlanId got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsPortVlanId retrieves the value with the specified key from
// the PolicingStatisticsPortVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) GetPolicingStatisticsPortVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.PolicingStatisticsPortVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsPortVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId struct to the
// list PolicingStatisticsPortVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) AppendPolicingStatisticsPortVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortVlanId == nil {
		t.PolicingStatisticsPortVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId)
	}

	if _, ok := t.PolicingStatisticsPortVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsPortVlanId %v", key)
	}

	t.PolicingStatisticsPortVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids/policing-statistics-port-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId struct {
	PolicingStatisticsPortVlanInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances `path:"policing-statistics-port-vlan-instances" module:"Cisco-IOS-XR-switch-oper"`
	VlanId                              *uint32                                                                                                                                                                                                                  `path:"vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) IsYANGGoStruct() {
}

// GetOrCreatePolicingStatisticsPortVlanInstances retrieves the value of the PolicingStatisticsPortVlanInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) GetOrCreatePolicingStatisticsPortVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances {
	if t.PolicingStatisticsPortVlanInstances != nil {
		return t.PolicingStatisticsPortVlanInstances
	}
	t.PolicingStatisticsPortVlanInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances{}
	return t.PolicingStatisticsPortVlanInstances
}

// GetPolicingStatisticsPortVlanInstances returns the value of the PolicingStatisticsPortVlanInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId. If the receiver or the field PolicingStatisticsPortVlanInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) GetPolicingStatisticsPortVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances {
	if t != nil && t.PolicingStatisticsPortVlanInstances != nil {
		return t.PolicingStatisticsPortVlanInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids/policing-statistics-port-vlan-id/policing-statistics-port-vlan-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances struct {
	PolicingStatisticsPortVlanInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance `path:"policing-statistics-port-vlan-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) IsYANGGoStruct() {
}

// NewPolicingStatisticsPortVlanInstance creates a new entry in the PolicingStatisticsPortVlanInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) NewPolicingStatisticsPortVlanInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortVlanInstance == nil {
		t.PolicingStatisticsPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsPortVlanInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsPortVlanInstance", key)
	}

	t.PolicingStatisticsPortVlanInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance{
		NodeId: &NodeId,
	}

	return t.PolicingStatisticsPortVlanInstance[key], nil
}

// RenamePolicingStatisticsPortVlanInstance renames an entry in the list PolicingStatisticsPortVlanInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) RenamePolicingStatisticsPortVlanInstance(oldK, newK string) error {
	if _, ok := t.PolicingStatisticsPortVlanInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsPortVlanInstance", newK)
	}

	e, ok := t.PolicingStatisticsPortVlanInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsPortVlanInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingStatisticsPortVlanInstance[newK] = e
	delete(t.PolicingStatisticsPortVlanInstance, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsPortVlanInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) GetOrCreatePolicingStatisticsPortVlanInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance {
	if t.PolicingStatisticsPortVlanInstance == nil {
		t.PolicingStatisticsPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance)
	}
	return t.PolicingStatisticsPortVlanInstance
}

// GetOrCreatePolicingStatisticsPortVlanInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) GetOrCreatePolicingStatisticsPortVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance {

	key := NodeId

	if v, ok := t.PolicingStatisticsPortVlanInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsPortVlanInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsPortVlanInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsPortVlanInstance retrieves the value with the specified key from
// the PolicingStatisticsPortVlanInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) GetPolicingStatisticsPortVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingStatisticsPortVlanInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsPortVlanInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance struct to the
// list PolicingStatisticsPortVlanInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) AppendPolicingStatisticsPortVlanInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsPortVlanInstance == nil {
		t.PolicingStatisticsPortVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance)
	}

	if _, ok := t.PolicingStatisticsPortVlanInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsPortVlanInstance %v", key)
	}

	t.PolicingStatisticsPortVlanInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids/policing-statistics-port-vlan-id/policing-statistics-port-vlan-instances/policing-statistics-port-vlan-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                                                                                                                             `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                                                                                                                             `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                                                                                                                             `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                                                                                                                             `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                                                                                                                             `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                                                                                                                             `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                                                                                                                             `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids/policing-statistics-port-vlan-id/policing-statistics-port-vlan-instances/policing-statistics-port-vlan-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-port-numbers/policing-statistics-port-number/policing-statistics-port-vlan-ids/policing-statistics-port-vlan-id/policing-statistics-port-vlan-instances/policing-statistics-port-vlan-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsPortNumbers_PolicingStatisticsPortNumber_PolicingStatisticsPortVlanIds_PolicingStatisticsPortVlanId_PolicingStatisticsPortVlanInstances_PolicingStatisticsPortVlanInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds struct {
	PolicingStatisticsVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId `path:"policing-statistics-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) IsYANGGoStruct() {
}

// NewPolicingStatisticsVlanId creates a new entry in the PolicingStatisticsVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) NewPolicingStatisticsVlanId(VlanId uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsVlanId == nil {
		t.PolicingStatisticsVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsVlanId", key)
	}

	t.PolicingStatisticsVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId{
		VlanId: &VlanId,
	}

	return t.PolicingStatisticsVlanId[key], nil
}

// RenamePolicingStatisticsVlanId renames an entry in the list PolicingStatisticsVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) RenamePolicingStatisticsVlanId(oldK, newK uint32) error {
	if _, ok := t.PolicingStatisticsVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsVlanId", newK)
	}

	e, ok := t.PolicingStatisticsVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsVlanId", oldK)
	}
	e.VlanId = &newK

	t.PolicingStatisticsVlanId[newK] = e
	delete(t.PolicingStatisticsVlanId, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) GetOrCreatePolicingStatisticsVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId {
	if t.PolicingStatisticsVlanId == nil {
		t.PolicingStatisticsVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId)
	}
	return t.PolicingStatisticsVlanId
}

// GetOrCreatePolicingStatisticsVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) GetOrCreatePolicingStatisticsVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId {

	key := VlanId

	if v, ok := t.PolicingStatisticsVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsVlanId(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsVlanId got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsVlanId retrieves the value with the specified key from
// the PolicingStatisticsVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) GetPolicingStatisticsVlanId(VlanId uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.PolicingStatisticsVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId struct to the
// list PolicingStatisticsVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) AppendPolicingStatisticsVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsVlanId == nil {
		t.PolicingStatisticsVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId)
	}

	if _, ok := t.PolicingStatisticsVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsVlanId %v", key)
	}

	t.PolicingStatisticsVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids/policing-statistics-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId struct {
	PolicingStatisticsVlanInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances `path:"policing-statistics-vlan-instances" module:"Cisco-IOS-XR-switch-oper"`
	VlanId                          *uint32                                                                                                                                           `path:"vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) IsYANGGoStruct() {
}

// GetOrCreatePolicingStatisticsVlanInstances retrieves the value of the PolicingStatisticsVlanInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) GetOrCreatePolicingStatisticsVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances {
	if t.PolicingStatisticsVlanInstances != nil {
		return t.PolicingStatisticsVlanInstances
	}
	t.PolicingStatisticsVlanInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances{}
	return t.PolicingStatisticsVlanInstances
}

// GetPolicingStatisticsVlanInstances returns the value of the PolicingStatisticsVlanInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId. If the receiver or the field PolicingStatisticsVlanInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) GetPolicingStatisticsVlanInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances {
	if t != nil && t.PolicingStatisticsVlanInstances != nil {
		return t.PolicingStatisticsVlanInstances
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids/policing-statistics-vlan-id/policing-statistics-vlan-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances struct {
	PolicingStatisticsVlanInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance `path:"policing-statistics-vlan-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) IsYANGGoStruct() {
}

// NewPolicingStatisticsVlanInstance creates a new entry in the PolicingStatisticsVlanInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) NewPolicingStatisticsVlanInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsVlanInstance == nil {
		t.PolicingStatisticsVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicingStatisticsVlanInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicingStatisticsVlanInstance", key)
	}

	t.PolicingStatisticsVlanInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance{
		NodeId: &NodeId,
	}

	return t.PolicingStatisticsVlanInstance[key], nil
}

// RenamePolicingStatisticsVlanInstance renames an entry in the list PolicingStatisticsVlanInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) RenamePolicingStatisticsVlanInstance(oldK, newK string) error {
	if _, ok := t.PolicingStatisticsVlanInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicingStatisticsVlanInstance", newK)
	}

	e, ok := t.PolicingStatisticsVlanInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicingStatisticsVlanInstance", oldK)
	}
	e.NodeId = &newK

	t.PolicingStatisticsVlanInstance[newK] = e
	delete(t.PolicingStatisticsVlanInstance, oldK)
	return nil
}

// GetOrCreatePolicingStatisticsVlanInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) GetOrCreatePolicingStatisticsVlanInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance {
	if t.PolicingStatisticsVlanInstance == nil {
		t.PolicingStatisticsVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance)
	}
	return t.PolicingStatisticsVlanInstance
}

// GetOrCreatePolicingStatisticsVlanInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) GetOrCreatePolicingStatisticsVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance {

	key := NodeId

	if v, ok := t.PolicingStatisticsVlanInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicingStatisticsVlanInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicingStatisticsVlanInstance got unexpected error: %v", err))
	}
	return v
}

// GetPolicingStatisticsVlanInstance retrieves the value with the specified key from
// the PolicingStatisticsVlanInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) GetPolicingStatisticsVlanInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.PolicingStatisticsVlanInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendPolicingStatisticsVlanInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance struct to the
// list PolicingStatisticsVlanInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) AppendPolicingStatisticsVlanInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicingStatisticsVlanInstance == nil {
		t.PolicingStatisticsVlanInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance)
	}

	if _, ok := t.PolicingStatisticsVlanInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PolicingStatisticsVlanInstance %v", key)
	}

	t.PolicingStatisticsVlanInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids/policing-statistics-vlan-id/policing-statistics-vlan-instances/policing-statistics-vlan-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance struct {
	EthswLocationInfo         *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPolicingPortData     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData `path:"ethsw-policing-port-data" module:"Cisco-IOS-XR-switch-oper"`
	NodeId                    *string                                                                                                                                                                                                  `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgress      *string                                                                                                                                                                                                  `path:"policing-config-egress" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigEgressMru   *uint32                                                                                                                                                                                                  `path:"policing-config-egress-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0    *string                                                                                                                                                                                                  `path:"policing-config-ingress0" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress0Mru *uint32                                                                                                                                                                                                  `path:"policing-config-ingress0-mru" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1    *string                                                                                                                                                                                                  `path:"policing-config-ingress1" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigIngress1Mru *uint32                                                                                                                                                                                                  `path:"policing-config-ingress1-mru" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids/policing-statistics-vlan-id/policing-statistics-vlan-instances/policing-statistics-vlan-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData represents the /Cisco-IOS-XR-switch-oper/show-switch/policing/policing-statistics/policing-statistics-vlan-ids/policing-statistics-vlan-id/policing-statistics-vlan-instances/policing-statistics-vlan-instance/ethsw-policing-port-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData struct {
	PolicingConfigCbs     *uint64 `path:"policing-config-cbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCir     *uint64 `path:"policing-config-cir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigCirPcnt *uint32 `path:"policing-config-cir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPbs     *uint64 `path:"policing-config-pbs" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPir     *uint64 `path:"policing-config-pir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingConfigPirPcnt *uint32 `path:"policing-config-pir-pcnt" module:"Cisco-IOS-XR-switch-oper"`
	PolicingCountOnly     *string `path:"policing-count-only" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDesc          *string `path:"policing-desc" module:"Cisco-IOS-XR-switch-oper"`
	PolicingDir           *string `path:"policing-dir" module:"Cisco-IOS-XR-switch-oper"`
	PolicingId            *uint32 `path:"policing-id" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPort          *string `path:"policing-port" module:"Cisco-IOS-XR-switch-oper"`
	PolicingPortSpeed     *string `path:"policing-port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsGreen    *uint64 `path:"policing-stats-green" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsRed      *uint64 `path:"policing-stats-red" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsTotal    *uint64 `path:"policing-stats-total" module:"Cisco-IOS-XR-switch-oper"`
	PolicingStatsYellow   *uint64 `path:"policing-stats-yellow" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUp            *uint32 `path:"policing-up" module:"Cisco-IOS-XR-switch-oper"`
	PolicingUpMask        *uint32 `path:"policing-up-mask" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVid           *uint32 `path:"policing-vid" module:"Cisco-IOS-XR-switch-oper"`
	PolicingVidMask       *uint32 `path:"policing-vid-mask" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Policing_PolicingStatistics_PolicingStatisticsVlanIds_PolicingStatisticsVlanId_PolicingStatisticsVlanInstances_PolicingStatisticsVlanInstance_EthswPolicingPortData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable represents the /Cisco-IOS-XR-switch-oper/show-switch/reachable YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable struct {
	EthswReachableInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo `path:"ethsw-reachable-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/reachable/ethsw-reachable-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Reachable_EthswReachableInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes struct {
	SerdesInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances `path:"serdes-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) IsYANGGoStruct() {}

// GetOrCreateSerdesInstances retrieves the value of the SerdesInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) GetOrCreateSerdesInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances {
	if t.SerdesInstances != nil {
		return t.SerdesInstances
	}
	t.SerdesInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances{}
	return t.SerdesInstances
}

// GetSerdesInstances returns the value of the SerdesInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes. If the receiver or the field SerdesInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) GetSerdesInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances {
	if t != nil && t.SerdesInstances != nil {
		return t.SerdesInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances struct {
	SerdesInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance `path:"serdes-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) IsYANGGoStruct() {}

// NewSerdesInstance creates a new entry in the SerdesInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) NewSerdesInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SerdesInstance == nil {
		t.SerdesInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SerdesInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SerdesInstance", key)
	}

	t.SerdesInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance{
		NodeId: &NodeId,
	}

	return t.SerdesInstance[key], nil
}

// RenameSerdesInstance renames an entry in the list SerdesInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) RenameSerdesInstance(oldK, newK string) error {
	if _, ok := t.SerdesInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in SerdesInstance", newK)
	}

	e, ok := t.SerdesInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SerdesInstance", oldK)
	}
	e.NodeId = &newK

	t.SerdesInstance[newK] = e
	delete(t.SerdesInstance, oldK)
	return nil
}

// GetOrCreateSerdesInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) GetOrCreateSerdesInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance {
	if t.SerdesInstance == nil {
		t.SerdesInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance)
	}
	return t.SerdesInstance
}

// GetOrCreateSerdesInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) GetOrCreateSerdesInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance {

	key := NodeId

	if v, ok := t.SerdesInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSerdesInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSerdesInstance got unexpected error: %v", err))
	}
	return v
}

// GetSerdesInstance retrieves the value with the specified key from
// the SerdesInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) GetSerdesInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.SerdesInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendSerdesInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance struct to the
// list SerdesInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) AppendSerdesInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SerdesInstance == nil {
		t.SerdesInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance)
	}

	if _, ok := t.SerdesInstance[key]; ok {
		return fmt.Errorf("duplicate key for list SerdesInstance %v", key)
	}

	t.SerdesInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance struct {
	NodeId            *string                                                                                    `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	SerdesPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers `path:"serdes-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) IsYANGGoStruct() {}

// GetOrCreateSerdesPortNumbers retrieves the value of the SerdesPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) GetOrCreateSerdesPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers {
	if t.SerdesPortNumbers != nil {
		return t.SerdesPortNumbers
	}
	t.SerdesPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers{}
	return t.SerdesPortNumbers
}

// GetSerdesPortNumbers returns the value of the SerdesPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance. If the receiver or the field SerdesPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) GetSerdesPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers {
	if t != nil && t.SerdesPortNumbers != nil {
		return t.SerdesPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance/serdes-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers struct {
	SerdesPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber `path:"serdes-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) IsYANGGoStruct() {
}

// NewSerdesPortNumber creates a new entry in the SerdesPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) NewSerdesPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SerdesPortNumber == nil {
		t.SerdesPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SerdesPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SerdesPortNumber", key)
	}

	t.SerdesPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber{
		Port: &Port,
	}

	return t.SerdesPortNumber[key], nil
}

// RenameSerdesPortNumber renames an entry in the list SerdesPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) RenameSerdesPortNumber(oldK, newK uint32) error {
	if _, ok := t.SerdesPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in SerdesPortNumber", newK)
	}

	e, ok := t.SerdesPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SerdesPortNumber", oldK)
	}
	e.Port = &newK

	t.SerdesPortNumber[newK] = e
	delete(t.SerdesPortNumber, oldK)
	return nil
}

// GetOrCreateSerdesPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) GetOrCreateSerdesPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber {
	if t.SerdesPortNumber == nil {
		t.SerdesPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber)
	}
	return t.SerdesPortNumber
}

// GetOrCreateSerdesPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) GetOrCreateSerdesPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber {

	key := Port

	if v, ok := t.SerdesPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSerdesPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSerdesPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetSerdesPortNumber retrieves the value with the specified key from
// the SerdesPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) GetSerdesPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.SerdesPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendSerdesPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber struct to the
// list SerdesPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) AppendSerdesPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SerdesPortNumber == nil {
		t.SerdesPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber)
	}

	if _, ok := t.SerdesPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list SerdesPortNumber %v", key)
	}

	t.SerdesPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance/serdes-port-numbers/serdes-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswPortInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo   `path:"ethsw-port-info" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint32                                                                                                                       `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance/serdes-port-numbers/serdes-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance/serdes-port-numbers/serdes-port-number/ethsw-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo struct {
	EthswRegisterData []*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData `path:"ethsw-register-data" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8                                                                                                                                        `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData represents the /Cisco-IOS-XR-switch-oper/show-switch/serdes/serdes-instances/serdes-instance/serdes-port-numbers/serdes-port-number/ethsw-port-info/ethsw-register-data YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData struct {
	BaseReg     *string `path:"base-reg" module:"Cisco-IOS-XR-switch-oper"`
	Description *string `path:"description" module:"Cisco-IOS-XR-switch-oper"`
	Value       *string `path:"value" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Serdes_SerdesInstances_SerdesInstance_SerdesPortNumbers_SerdesPortNumber_EthswPortInfo_EthswRegisterData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics struct {
	StatisticsDetail    *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail    `path:"statistics-detail" module:"Cisco-IOS-XR-switch-oper"`
	StatisticsInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances `path:"statistics-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) IsYANGGoStruct() {}

// GetOrCreateStatisticsDetail retrieves the value of the StatisticsDetail field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) GetOrCreateStatisticsDetail() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail {
	if t.StatisticsDetail != nil {
		return t.StatisticsDetail
	}
	t.StatisticsDetail = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail{}
	return t.StatisticsDetail
}

// GetOrCreateStatisticsInstances retrieves the value of the StatisticsInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) GetOrCreateStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances {
	if t.StatisticsInstances != nil {
		return t.StatisticsInstances
	}
	t.StatisticsInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances{}
	return t.StatisticsInstances
}

// GetStatisticsDetail returns the value of the StatisticsDetail struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics. If the receiver or the field StatisticsDetail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) GetStatisticsDetail() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail {
	if t != nil && t.StatisticsDetail != nil {
		return t.StatisticsDetail
	}
	return nil
}

// GetStatisticsInstances returns the value of the StatisticsInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics. If the receiver or the field StatisticsInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) GetStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances {
	if t != nil && t.StatisticsInstances != nil {
		return t.StatisticsInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail struct {
	StatisticsDetailInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances `path:"statistics-detail-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) IsYANGGoStruct() {}

// GetOrCreateStatisticsDetailInstances retrieves the value of the StatisticsDetailInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) GetOrCreateStatisticsDetailInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances {
	if t.StatisticsDetailInstances != nil {
		return t.StatisticsDetailInstances
	}
	t.StatisticsDetailInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances{}
	return t.StatisticsDetailInstances
}

// GetStatisticsDetailInstances returns the value of the StatisticsDetailInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail. If the receiver or the field StatisticsDetailInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) GetStatisticsDetailInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances {
	if t != nil && t.StatisticsDetailInstances != nil {
		return t.StatisticsDetailInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances struct {
	StatisticsDetailInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance `path:"statistics-detail-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) IsYANGGoStruct() {
}

// NewStatisticsDetailInstance creates a new entry in the StatisticsDetailInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) NewStatisticsDetailInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsDetailInstance == nil {
		t.StatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StatisticsDetailInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StatisticsDetailInstance", key)
	}

	t.StatisticsDetailInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance{
		NodeId: &NodeId,
	}

	return t.StatisticsDetailInstance[key], nil
}

// RenameStatisticsDetailInstance renames an entry in the list StatisticsDetailInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) RenameStatisticsDetailInstance(oldK, newK string) error {
	if _, ok := t.StatisticsDetailInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in StatisticsDetailInstance", newK)
	}

	e, ok := t.StatisticsDetailInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StatisticsDetailInstance", oldK)
	}
	e.NodeId = &newK

	t.StatisticsDetailInstance[newK] = e
	delete(t.StatisticsDetailInstance, oldK)
	return nil
}

// GetOrCreateStatisticsDetailInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) GetOrCreateStatisticsDetailInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance {
	if t.StatisticsDetailInstance == nil {
		t.StatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance)
	}
	return t.StatisticsDetailInstance
}

// GetOrCreateStatisticsDetailInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) GetOrCreateStatisticsDetailInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance {

	key := NodeId

	if v, ok := t.StatisticsDetailInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatisticsDetailInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatisticsDetailInstance got unexpected error: %v", err))
	}
	return v
}

// GetStatisticsDetailInstance retrieves the value with the specified key from
// the StatisticsDetailInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) GetStatisticsDetailInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.StatisticsDetailInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendStatisticsDetailInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance struct to the
// list StatisticsDetailInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) AppendStatisticsDetailInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsDetailInstance == nil {
		t.StatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance)
	}

	if _, ok := t.StatisticsDetailInstance[key]; ok {
		return fmt.Errorf("duplicate key for list StatisticsDetailInstance %v", key)
	}

	t.StatisticsDetailInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance struct {
	NodeId                      *string                                                                                                                                       `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	StatisticsDetailPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers `path:"statistics-detail-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) IsYANGGoStruct() {
}

// GetOrCreateStatisticsDetailPortNumbers retrieves the value of the StatisticsDetailPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) GetOrCreateStatisticsDetailPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers {
	if t.StatisticsDetailPortNumbers != nil {
		return t.StatisticsDetailPortNumbers
	}
	t.StatisticsDetailPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers{}
	return t.StatisticsDetailPortNumbers
}

// GetStatisticsDetailPortNumbers returns the value of the StatisticsDetailPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance. If the receiver or the field StatisticsDetailPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) GetStatisticsDetailPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers {
	if t != nil && t.StatisticsDetailPortNumbers != nil {
		return t.StatisticsDetailPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance/statistics-detail-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers struct {
	StatisticsDetailPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber `path:"statistics-detail-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) IsYANGGoStruct() {
}

// NewStatisticsDetailPortNumber creates a new entry in the StatisticsDetailPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) NewStatisticsDetailPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsDetailPortNumber == nil {
		t.StatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StatisticsDetailPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StatisticsDetailPortNumber", key)
	}

	t.StatisticsDetailPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber{
		Port: &Port,
	}

	return t.StatisticsDetailPortNumber[key], nil
}

// RenameStatisticsDetailPortNumber renames an entry in the list StatisticsDetailPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) RenameStatisticsDetailPortNumber(oldK, newK uint32) error {
	if _, ok := t.StatisticsDetailPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in StatisticsDetailPortNumber", newK)
	}

	e, ok := t.StatisticsDetailPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StatisticsDetailPortNumber", oldK)
	}
	e.Port = &newK

	t.StatisticsDetailPortNumber[newK] = e
	delete(t.StatisticsDetailPortNumber, oldK)
	return nil
}

// GetOrCreateStatisticsDetailPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) GetOrCreateStatisticsDetailPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber {
	if t.StatisticsDetailPortNumber == nil {
		t.StatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber)
	}
	return t.StatisticsDetailPortNumber
}

// GetOrCreateStatisticsDetailPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) GetOrCreateStatisticsDetailPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber {

	key := Port

	if v, ok := t.StatisticsDetailPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatisticsDetailPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatisticsDetailPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetStatisticsDetailPortNumber retrieves the value with the specified key from
// the StatisticsDetailPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) GetStatisticsDetailPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.StatisticsDetailPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendStatisticsDetailPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber struct to the
// list StatisticsDetailPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) AppendStatisticsDetailPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsDetailPortNumber == nil {
		t.StatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber)
	}

	if _, ok := t.StatisticsDetailPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list StatisticsDetailPortNumber %v", key)
	}

	t.StatisticsDetailPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance/statistics-detail-port-numbers/statistics-detail-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber struct {
	EthswDetailedStatInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo `path:"ethsw-detailed-stat-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo     *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswSummaryStatInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo  `path:"ethsw-summary-stat-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                  *uint32                                                                                                                                                                                          `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance/statistics-detail-port-numbers/statistics-detail-port-number/ethsw-detailed-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo struct {
	ConnectsTo           *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port                 *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortSpeed            *string `path:"port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PortState            *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	RxBadCrc             *uint64 `path:"rx-bad-crc" module:"Cisco-IOS-XR-switch-oper"`
	RxBadOctets          *uint64 `path:"rx-bad-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxBroadcastPackets   *uint64 `path:"rx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxCollisons          *uint64 `path:"rx-collisons" module:"Cisco-IOS-XR-switch-oper"`
	RxErrors             *uint64 `path:"rx-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxFifoOverrun        *uint64 `path:"rx-fifo-overrun" module:"Cisco-IOS-XR-switch-oper"`
	RxFlowControl        *uint64 `path:"rx-flow-control" module:"Cisco-IOS-XR-switch-oper"`
	RxFragments          *uint64 `path:"rx-fragments" module:"Cisco-IOS-XR-switch-oper"`
	RxGoodOctets         *uint64 `path:"rx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxJabber             *uint64 `path:"rx-jabber" module:"Cisco-IOS-XR-switch-oper"`
	RxMulticastPackets   *uint64 `path:"rx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxOversize           *uint64 `path:"rx-oversize" module:"Cisco-IOS-XR-switch-oper"`
	RxPolicingDrops      *uint64 `path:"rx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_1024Max  *uint64 `path:"rx-tx-packets-1024-max" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_128_255  *uint64 `path:"rx-tx-packets-128-255" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_256_511  *uint64 `path:"rx-tx-packets-256-511" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_512_1023 *uint64 `path:"rx-tx-packets-512-1023" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_64       *uint64 `path:"rx-tx-packets-64" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_65_127   *uint64 `path:"rx-tx-packets-65-127" module:"Cisco-IOS-XR-switch-oper"`
	RxUndersize          *uint64 `path:"rx-undersize" module:"Cisco-IOS-XR-switch-oper"`
	RxUnicastPackets     *uint64 `path:"rx-unicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxBroadcastPackets   *uint64 `path:"tx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDeferred           *uint64 `path:"tx-deferred" module:"Cisco-IOS-XR-switch-oper"`
	TxExcessCollision    *uint64 `path:"tx-excess-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxFifoUnrun          *uint64 `path:"tx-fifo-unrun" module:"Cisco-IOS-XR-switch-oper"`
	TxGoodOctets         *uint64 `path:"tx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	TxLateCollisions     *uint64 `path:"tx-late-collisions" module:"Cisco-IOS-XR-switch-oper"`
	TxMultiCollision     *uint64 `path:"tx-multi-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxMulticastPackets   *uint64 `path:"tx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxPolicingDrops      *uint64 `path:"tx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxQueueDrops         *uint64 `path:"tx-queue-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxUnitcastPackets    *uint64 `path:"tx-unitcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxflowControl        *uint64 `path:"txflow-control" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswDetailedStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance/statistics-detail-port-numbers/statistics-detail-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-detail/statistics-detail-instances/statistics-detail-instance/statistics-detail-port-numbers/statistics-detail-port-number/ethsw-summary-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo struct {
	ConnectsTo       *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port             *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortState        *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	PortStateChanges *uint32 `path:"port-state-changes" module:"Cisco-IOS-XR-switch-oper"`
	RxDropsErrors    *uint64 `path:"rx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxPackets        *uint64 `path:"rx-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDropsErrors    *uint64 `path:"tx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	TxPackets        *uint64 `path:"tx-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsDetail_StatisticsDetailInstances_StatisticsDetailInstance_StatisticsDetailPortNumbers_StatisticsDetailPortNumber_EthswSummaryStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances struct {
	StatisticsInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance `path:"statistics-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) IsYANGGoStruct() {}

// NewStatisticsInstance creates a new entry in the StatisticsInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) NewStatisticsInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsInstance == nil {
		t.StatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StatisticsInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StatisticsInstance", key)
	}

	t.StatisticsInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance{
		NodeId: &NodeId,
	}

	return t.StatisticsInstance[key], nil
}

// RenameStatisticsInstance renames an entry in the list StatisticsInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) RenameStatisticsInstance(oldK, newK string) error {
	if _, ok := t.StatisticsInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in StatisticsInstance", newK)
	}

	e, ok := t.StatisticsInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StatisticsInstance", oldK)
	}
	e.NodeId = &newK

	t.StatisticsInstance[newK] = e
	delete(t.StatisticsInstance, oldK)
	return nil
}

// GetOrCreateStatisticsInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) GetOrCreateStatisticsInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance {
	if t.StatisticsInstance == nil {
		t.StatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance)
	}
	return t.StatisticsInstance
}

// GetOrCreateStatisticsInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) GetOrCreateStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance {

	key := NodeId

	if v, ok := t.StatisticsInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatisticsInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatisticsInstance got unexpected error: %v", err))
	}
	return v
}

// GetStatisticsInstance retrieves the value with the specified key from
// the StatisticsInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) GetStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.StatisticsInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendStatisticsInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance struct to the
// list StatisticsInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) AppendStatisticsInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsInstance == nil {
		t.StatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance)
	}

	if _, ok := t.StatisticsInstance[key]; ok {
		return fmt.Errorf("duplicate key for list StatisticsInstance %v", key)
	}

	t.StatisticsInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance struct {
	NodeId                *string                                                                                                    `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	StatisticsPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers `path:"statistics-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) IsYANGGoStruct() {
}

// GetOrCreateStatisticsPortNumbers retrieves the value of the StatisticsPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) GetOrCreateStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers {
	if t.StatisticsPortNumbers != nil {
		return t.StatisticsPortNumbers
	}
	t.StatisticsPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers{}
	return t.StatisticsPortNumbers
}

// GetStatisticsPortNumbers returns the value of the StatisticsPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance. If the receiver or the field StatisticsPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) GetStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers {
	if t != nil && t.StatisticsPortNumbers != nil {
		return t.StatisticsPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance/statistics-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers struct {
	StatisticsPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber `path:"statistics-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) IsYANGGoStruct() {
}

// NewStatisticsPortNumber creates a new entry in the StatisticsPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) NewStatisticsPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsPortNumber == nil {
		t.StatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StatisticsPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StatisticsPortNumber", key)
	}

	t.StatisticsPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber{
		Port: &Port,
	}

	return t.StatisticsPortNumber[key], nil
}

// RenameStatisticsPortNumber renames an entry in the list StatisticsPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) RenameStatisticsPortNumber(oldK, newK uint32) error {
	if _, ok := t.StatisticsPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in StatisticsPortNumber", newK)
	}

	e, ok := t.StatisticsPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StatisticsPortNumber", oldK)
	}
	e.Port = &newK

	t.StatisticsPortNumber[newK] = e
	delete(t.StatisticsPortNumber, oldK)
	return nil
}

// GetOrCreateStatisticsPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) GetOrCreateStatisticsPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber {
	if t.StatisticsPortNumber == nil {
		t.StatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber)
	}
	return t.StatisticsPortNumber
}

// GetOrCreateStatisticsPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) GetOrCreateStatisticsPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber {

	key := Port

	if v, ok := t.StatisticsPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatisticsPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatisticsPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetStatisticsPortNumber retrieves the value with the specified key from
// the StatisticsPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) GetStatisticsPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.StatisticsPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendStatisticsPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber struct to the
// list StatisticsPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) AppendStatisticsPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatisticsPortNumber == nil {
		t.StatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber)
	}

	if _, ok := t.StatisticsPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list StatisticsPortNumber %v", key)
	}

	t.StatisticsPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance/statistics-port-numbers/statistics-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber struct {
	EthswDetailedStatInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo `path:"ethsw-detailed-stat-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswLocationInfo     *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo       `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswSummaryStatInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo  `path:"ethsw-summary-stat-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                  *uint32                                                                                                                                                 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance/statistics-port-numbers/statistics-port-number/ethsw-detailed-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo struct {
	ConnectsTo           *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port                 *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortSpeed            *string `path:"port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PortState            *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	RxBadCrc             *uint64 `path:"rx-bad-crc" module:"Cisco-IOS-XR-switch-oper"`
	RxBadOctets          *uint64 `path:"rx-bad-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxBroadcastPackets   *uint64 `path:"rx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxCollisons          *uint64 `path:"rx-collisons" module:"Cisco-IOS-XR-switch-oper"`
	RxErrors             *uint64 `path:"rx-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxFifoOverrun        *uint64 `path:"rx-fifo-overrun" module:"Cisco-IOS-XR-switch-oper"`
	RxFlowControl        *uint64 `path:"rx-flow-control" module:"Cisco-IOS-XR-switch-oper"`
	RxFragments          *uint64 `path:"rx-fragments" module:"Cisco-IOS-XR-switch-oper"`
	RxGoodOctets         *uint64 `path:"rx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	RxJabber             *uint64 `path:"rx-jabber" module:"Cisco-IOS-XR-switch-oper"`
	RxMulticastPackets   *uint64 `path:"rx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	RxOversize           *uint64 `path:"rx-oversize" module:"Cisco-IOS-XR-switch-oper"`
	RxPolicingDrops      *uint64 `path:"rx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_1024Max  *uint64 `path:"rx-tx-packets-1024-max" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_128_255  *uint64 `path:"rx-tx-packets-128-255" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_256_511  *uint64 `path:"rx-tx-packets-256-511" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_512_1023 *uint64 `path:"rx-tx-packets-512-1023" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_64       *uint64 `path:"rx-tx-packets-64" module:"Cisco-IOS-XR-switch-oper"`
	RxTxPackets_65_127   *uint64 `path:"rx-tx-packets-65-127" module:"Cisco-IOS-XR-switch-oper"`
	RxUndersize          *uint64 `path:"rx-undersize" module:"Cisco-IOS-XR-switch-oper"`
	RxUnicastPackets     *uint64 `path:"rx-unicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxBroadcastPackets   *uint64 `path:"tx-broadcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDeferred           *uint64 `path:"tx-deferred" module:"Cisco-IOS-XR-switch-oper"`
	TxExcessCollision    *uint64 `path:"tx-excess-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxFifoUnrun          *uint64 `path:"tx-fifo-unrun" module:"Cisco-IOS-XR-switch-oper"`
	TxGoodOctets         *uint64 `path:"tx-good-octets" module:"Cisco-IOS-XR-switch-oper"`
	TxLateCollisions     *uint64 `path:"tx-late-collisions" module:"Cisco-IOS-XR-switch-oper"`
	TxMultiCollision     *uint64 `path:"tx-multi-collision" module:"Cisco-IOS-XR-switch-oper"`
	TxMulticastPackets   *uint64 `path:"tx-multicast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxPolicingDrops      *uint64 `path:"tx-policing-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxQueueDrops         *uint64 `path:"tx-queue-drops" module:"Cisco-IOS-XR-switch-oper"`
	TxUnitcastPackets    *uint64 `path:"tx-unitcast-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxflowControl        *uint64 `path:"txflow-control" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswDetailedStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance/statistics-port-numbers/statistics-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/statistics/statistics-instances/statistics-instance/statistics-port-numbers/statistics-port-number/ethsw-summary-stat-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo struct {
	ConnectsTo       *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port             *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortState        *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
	PortStateChanges *uint32 `path:"port-state-changes" module:"Cisco-IOS-XR-switch-oper"`
	RxDropsErrors    *uint64 `path:"rx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	RxPackets        *uint64 `path:"rx-packets" module:"Cisco-IOS-XR-switch-oper"`
	TxDropsErrors    *uint64 `path:"tx-drops-errors" module:"Cisco-IOS-XR-switch-oper"`
	TxPackets        *uint64 `path:"tx-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Statistics_StatisticsInstances_StatisticsInstance_StatisticsPortNumbers_StatisticsPortNumber_EthswSummaryStatInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary represents the /Cisco-IOS-XR-switch-oper/show-switch/summary YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary struct {
	SummaryInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances `path:"summary-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) IsYANGGoStruct() {}

// GetOrCreateSummaryInstances retrieves the value of the SummaryInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) GetOrCreateSummaryInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances {
	if t.SummaryInstances != nil {
		return t.SummaryInstances
	}
	t.SummaryInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances{}
	return t.SummaryInstances
}

// GetSummaryInstances returns the value of the SummaryInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Summary. If the receiver or the field SummaryInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) GetSummaryInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances {
	if t != nil && t.SummaryInstances != nil {
		return t.SummaryInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances struct {
	SummaryInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance `path:"summary-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) IsYANGGoStruct() {}

// NewSummaryInstance creates a new entry in the SummaryInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) NewSummaryInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryInstance == nil {
		t.SummaryInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryInstance", key)
	}

	t.SummaryInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance{
		NodeId: &NodeId,
	}

	return t.SummaryInstance[key], nil
}

// RenameSummaryInstance renames an entry in the list SummaryInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) RenameSummaryInstance(oldK, newK string) error {
	if _, ok := t.SummaryInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryInstance", newK)
	}

	e, ok := t.SummaryInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryInstance", oldK)
	}
	e.NodeId = &newK

	t.SummaryInstance[newK] = e
	delete(t.SummaryInstance, oldK)
	return nil
}

// GetOrCreateSummaryInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) GetOrCreateSummaryInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance {
	if t.SummaryInstance == nil {
		t.SummaryInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance)
	}
	return t.SummaryInstance
}

// GetOrCreateSummaryInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) GetOrCreateSummaryInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance {

	key := NodeId

	if v, ok := t.SummaryInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryInstance got unexpected error: %v", err))
	}
	return v
}

// GetSummaryInstance retrieves the value with the specified key from
// the SummaryInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) GetSummaryInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.SummaryInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendSummaryInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance struct to the
// list SummaryInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) AppendSummaryInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryInstance == nil {
		t.SummaryInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance)
	}

	if _, ok := t.SummaryInstance[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryInstance %v", key)
	}

	t.SummaryInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances/summary-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance struct {
	NodeId             *string                                                                                        `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	SummaryPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers `path:"summary-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) IsYANGGoStruct() {}

// GetOrCreateSummaryPortNumbers retrieves the value of the SummaryPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) GetOrCreateSummaryPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers {
	if t.SummaryPortNumbers != nil {
		return t.SummaryPortNumbers
	}
	t.SummaryPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers{}
	return t.SummaryPortNumbers
}

// GetSummaryPortNumbers returns the value of the SummaryPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance. If the receiver or the field SummaryPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) GetSummaryPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers {
	if t != nil && t.SummaryPortNumbers != nil {
		return t.SummaryPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances/summary-instance/summary-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers struct {
	SummaryPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber `path:"summary-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) IsYANGGoStruct() {
}

// NewSummaryPortNumber creates a new entry in the SummaryPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) NewSummaryPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryPortNumber == nil {
		t.SummaryPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryPortNumber", key)
	}

	t.SummaryPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber{
		Port: &Port,
	}

	return t.SummaryPortNumber[key], nil
}

// RenameSummaryPortNumber renames an entry in the list SummaryPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) RenameSummaryPortNumber(oldK, newK uint32) error {
	if _, ok := t.SummaryPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryPortNumber", newK)
	}

	e, ok := t.SummaryPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryPortNumber", oldK)
	}
	e.Port = &newK

	t.SummaryPortNumber[newK] = e
	delete(t.SummaryPortNumber, oldK)
	return nil
}

// GetOrCreateSummaryPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) GetOrCreateSummaryPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber {
	if t.SummaryPortNumber == nil {
		t.SummaryPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber)
	}
	return t.SummaryPortNumber
}

// GetOrCreateSummaryPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) GetOrCreateSummaryPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber {

	key := Port

	if v, ok := t.SummaryPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetSummaryPortNumber retrieves the value with the specified key from
// the SummaryPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) GetSummaryPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.SummaryPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendSummaryPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber struct to the
// list SummaryPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) AppendSummaryPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryPortNumber == nil {
		t.SummaryPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber)
	}

	if _, ok := t.SummaryPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryPortNumber %v", key)
	}

	t.SummaryPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances/summary-instance/summary-port-numbers/summary-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswSumInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo    `path:"ethsw-sum-info" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint32                                                                                                                            `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances/summary-instance/summary-port-numbers/summary-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/summary/summary-instances/summary-instance/summary-port-numbers/summary-port-number/ethsw-sum-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo struct {
	ConnectsTo        *string `path:"connects-to" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint8  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortAdminState    *string `path:"port-admin-state" module:"Cisco-IOS-XR-switch-oper"`
	PortForwarding    *string `path:"port-forwarding" module:"Cisco-IOS-XR-switch-oper"`
	PortProtocolState *string `path:"port-protocol-state" module:"Cisco-IOS-XR-switch-oper"`
	PortSpeed         *string `path:"port-speed" module:"Cisco-IOS-XR-switch-oper"`
	PortState         *string `path:"port-state" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Summary_SummaryInstances_SummaryInstance_SummaryPortNumbers_SummaryPortNumber_EthswSumInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk struct {
	TrunkInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances `path:"trunk-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) IsYANGGoStruct() {}

// GetOrCreateTrunkInstances retrieves the value of the TrunkInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) GetOrCreateTrunkInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances {
	if t.TrunkInstances != nil {
		return t.TrunkInstances
	}
	t.TrunkInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances{}
	return t.TrunkInstances
}

// GetTrunkInstances returns the value of the TrunkInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk. If the receiver or the field TrunkInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) GetTrunkInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances {
	if t != nil && t.TrunkInstances != nil {
		return t.TrunkInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances struct {
	TrunkInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance `path:"trunk-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) IsYANGGoStruct() {}

// NewTrunkInstance creates a new entry in the TrunkInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) NewTrunkInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrunkInstance == nil {
		t.TrunkInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrunkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrunkInstance", key)
	}

	t.TrunkInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance{
		NodeId: &NodeId,
	}

	return t.TrunkInstance[key], nil
}

// RenameTrunkInstance renames an entry in the list TrunkInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) RenameTrunkInstance(oldK, newK string) error {
	if _, ok := t.TrunkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in TrunkInstance", newK)
	}

	e, ok := t.TrunkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrunkInstance", oldK)
	}
	e.NodeId = &newK

	t.TrunkInstance[newK] = e
	delete(t.TrunkInstance, oldK)
	return nil
}

// GetOrCreateTrunkInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) GetOrCreateTrunkInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance {
	if t.TrunkInstance == nil {
		t.TrunkInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance)
	}
	return t.TrunkInstance
}

// GetOrCreateTrunkInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) GetOrCreateTrunkInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance {

	key := NodeId

	if v, ok := t.TrunkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrunkInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrunkInstance got unexpected error: %v", err))
	}
	return v
}

// GetTrunkInstance retrieves the value with the specified key from
// the TrunkInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) GetTrunkInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.TrunkInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendTrunkInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance struct to the
// list TrunkInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) AppendTrunkInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrunkInstance == nil {
		t.TrunkInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance)
	}

	if _, ok := t.TrunkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list TrunkInstance %v", key)
	}

	t.TrunkInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances/trunk-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance struct {
	NodeId           *string                                                                                `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	TrunkPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers `path:"trunk-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) IsYANGGoStruct() {}

// GetOrCreateTrunkPortNumbers retrieves the value of the TrunkPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) GetOrCreateTrunkPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers {
	if t.TrunkPortNumbers != nil {
		return t.TrunkPortNumbers
	}
	t.TrunkPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers{}
	return t.TrunkPortNumbers
}

// GetTrunkPortNumbers returns the value of the TrunkPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance. If the receiver or the field TrunkPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) GetTrunkPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers {
	if t != nil && t.TrunkPortNumbers != nil {
		return t.TrunkPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances/trunk-instance/trunk-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers struct {
	TrunkPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber `path:"trunk-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) IsYANGGoStruct() {
}

// NewTrunkPortNumber creates a new entry in the TrunkPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) NewTrunkPortNumber(Port uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrunkPortNumber == nil {
		t.TrunkPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber)
	}

	key := Port

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrunkPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrunkPortNumber", key)
	}

	t.TrunkPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber{
		Port: &Port,
	}

	return t.TrunkPortNumber[key], nil
}

// RenameTrunkPortNumber renames an entry in the list TrunkPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) RenameTrunkPortNumber(oldK, newK uint32) error {
	if _, ok := t.TrunkPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in TrunkPortNumber", newK)
	}

	e, ok := t.TrunkPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrunkPortNumber", oldK)
	}
	e.Port = &newK

	t.TrunkPortNumber[newK] = e
	delete(t.TrunkPortNumber, oldK)
	return nil
}

// GetOrCreateTrunkPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) GetOrCreateTrunkPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber {
	if t.TrunkPortNumber == nil {
		t.TrunkPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber)
	}
	return t.TrunkPortNumber
}

// GetOrCreateTrunkPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) GetOrCreateTrunkPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber {

	key := Port

	if v, ok := t.TrunkPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrunkPortNumber(Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrunkPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetTrunkPortNumber retrieves the value with the specified key from
// the TrunkPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) GetTrunkPortNumber(Port uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber {

	if t == nil {
		return nil
	}

	key := Port

	if lm, ok := t.TrunkPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendTrunkPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber struct to the
// list TrunkPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) AppendTrunkPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) error {
	if v.Port == nil {
		return fmt.Errorf("invalid nil key received for Port")
	}

	key := *v.Port

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrunkPortNumber == nil {
		t.TrunkPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber)
	}

	if _, ok := t.TrunkPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list TrunkPortNumber %v", key)
	}

	t.TrunkPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances/trunk-instance/trunk-port-numbers/trunk-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTrunkInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo  `path:"ethsw-trunk-info" module:"Cisco-IOS-XR-switch-oper"`
	MemberCount       *uint8                                                                                                                   `path:"member-count" module:"Cisco-IOS-XR-switch-oper"`
	Port              *uint32                                                                                                                  `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TrunkName         *string                                                                                                                  `path:"trunk-name" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"port": *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances/trunk-instance/trunk-port-numbers/trunk-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/trunk/trunk-instances/trunk-instance/trunk-port-numbers/trunk-port-number/ethsw-trunk-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo struct {
	Port       *uint8 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	PortStatus *uint8 `path:"port-status" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Trunk_TrunkInstances_TrunkInstance_TrunkPortNumbers_TrunkPortNumber_EthswTrunkInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq represents the /Cisco-IOS-XR-switch-oper/show-switch/txq YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq struct {
	TxqConfig     *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig     `path:"txq-config" module:"Cisco-IOS-XR-switch-oper"`
	TxqStatistics *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics `path:"txq-statistics" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) IsYANGGoStruct() {}

// GetOrCreateTxqConfig retrieves the value of the TxqConfig field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) GetOrCreateTxqConfig() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig {
	if t.TxqConfig != nil {
		return t.TxqConfig
	}
	t.TxqConfig = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig{}
	return t.TxqConfig
}

// GetOrCreateTxqStatistics retrieves the value of the TxqStatistics field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) GetOrCreateTxqStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics {
	if t.TxqStatistics != nil {
		return t.TxqStatistics
	}
	t.TxqStatistics = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics{}
	return t.TxqStatistics
}

// GetTxqConfig returns the value of the TxqConfig struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq. If the receiver or the field TxqConfig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) GetTxqConfig() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig {
	if t != nil && t.TxqConfig != nil {
		return t.TxqConfig
	}
	return nil
}

// GetTxqStatistics returns the value of the TxqStatistics struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq. If the receiver or the field TxqStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) GetTxqStatistics() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics {
	if t != nil && t.TxqStatistics != nil {
		return t.TxqStatistics
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig struct {
	TxqConfigInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances `path:"txq-config-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) IsYANGGoStruct() {}

// GetOrCreateTxqConfigInstances retrieves the value of the TxqConfigInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) GetOrCreateTxqConfigInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances {
	if t.TxqConfigInstances != nil {
		return t.TxqConfigInstances
	}
	t.TxqConfigInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances{}
	return t.TxqConfigInstances
}

// GetTxqConfigInstances returns the value of the TxqConfigInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig. If the receiver or the field TxqConfigInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) GetTxqConfigInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances {
	if t != nil && t.TxqConfigInstances != nil {
		return t.TxqConfigInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances struct {
	TxqConfigInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance `path:"txq-config-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) IsYANGGoStruct() {}

// NewTxqConfigInstance creates a new entry in the TxqConfigInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) NewTxqConfigInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqConfigInstance == nil {
		t.TxqConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqConfigInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqConfigInstance", key)
	}

	t.TxqConfigInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance{
		NodeId: &NodeId,
	}

	return t.TxqConfigInstance[key], nil
}

// RenameTxqConfigInstance renames an entry in the list TxqConfigInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) RenameTxqConfigInstance(oldK, newK string) error {
	if _, ok := t.TxqConfigInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqConfigInstance", newK)
	}

	e, ok := t.TxqConfigInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqConfigInstance", oldK)
	}
	e.NodeId = &newK

	t.TxqConfigInstance[newK] = e
	delete(t.TxqConfigInstance, oldK)
	return nil
}

// GetOrCreateTxqConfigInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) GetOrCreateTxqConfigInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance {
	if t.TxqConfigInstance == nil {
		t.TxqConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance)
	}
	return t.TxqConfigInstance
}

// GetOrCreateTxqConfigInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) GetOrCreateTxqConfigInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance {

	key := NodeId

	if v, ok := t.TxqConfigInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqConfigInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqConfigInstance got unexpected error: %v", err))
	}
	return v
}

// GetTxqConfigInstance retrieves the value with the specified key from
// the TxqConfigInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) GetTxqConfigInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.TxqConfigInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqConfigInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance struct to the
// list TxqConfigInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) AppendTxqConfigInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqConfigInstance == nil {
		t.TxqConfigInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance)
	}

	if _, ok := t.TxqConfigInstance[key]; ok {
		return fmt.Errorf("duplicate key for list TxqConfigInstance %v", key)
	}

	t.TxqConfigInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance struct {
	NodeId               *string                                                                                                    `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	TxqConfigPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers `path:"txq-config-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) IsYANGGoStruct() {
}

// GetOrCreateTxqConfigPortNumbers retrieves the value of the TxqConfigPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) GetOrCreateTxqConfigPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers {
	if t.TxqConfigPortNumbers != nil {
		return t.TxqConfigPortNumbers
	}
	t.TxqConfigPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers{}
	return t.TxqConfigPortNumbers
}

// GetTxqConfigPortNumbers returns the value of the TxqConfigPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance. If the receiver or the field TxqConfigPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) GetTxqConfigPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers {
	if t != nil && t.TxqConfigPortNumbers != nil {
		return t.TxqConfigPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers struct {
	TxqConfigPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber `path:"txq-config-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) IsYANGGoStruct() {
}

// NewTxqConfigPortNumber creates a new entry in the TxqConfigPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) NewTxqConfigPortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqConfigPortNumber == nil {
		t.TxqConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqConfigPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqConfigPortNumber", key)
	}

	t.TxqConfigPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber{
		PortNum: &PortNum,
	}

	return t.TxqConfigPortNumber[key], nil
}

// RenameTxqConfigPortNumber renames an entry in the list TxqConfigPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) RenameTxqConfigPortNumber(oldK, newK uint32) error {
	if _, ok := t.TxqConfigPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqConfigPortNumber", newK)
	}

	e, ok := t.TxqConfigPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqConfigPortNumber", oldK)
	}
	e.PortNum = &newK

	t.TxqConfigPortNumber[newK] = e
	delete(t.TxqConfigPortNumber, oldK)
	return nil
}

// GetOrCreateTxqConfigPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) GetOrCreateTxqConfigPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber {
	if t.TxqConfigPortNumber == nil {
		t.TxqConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber)
	}
	return t.TxqConfigPortNumber
}

// GetOrCreateTxqConfigPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) GetOrCreateTxqConfigPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber {

	key := PortNum

	if v, ok := t.TxqConfigPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqConfigPortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqConfigPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetTxqConfigPortNumber retrieves the value with the specified key from
// the TxqConfigPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) GetTxqConfigPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.TxqConfigPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqConfigPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber struct to the
// list TxqConfigPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) AppendTxqConfigPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqConfigPortNumber == nil {
		t.TxqConfigPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber)
	}

	if _, ok := t.TxqConfigPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list TxqConfigPortNumber %v", key)
	}

	t.TxqConfigPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber struct {
	EthswLocationInfo              *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo                `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo      `path:"ethsw-txq-configuration-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsDetailedInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo `path:"ethsw-txq-statistics-detailed-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsSummaryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo  `path:"ethsw-txq-statistics-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	InitialConfiguration           *string                                                                                                                                                         `path:"initial-configuration" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                        *uint32                                                                                                                                                         `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-configuration-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo struct {
	EthswTxqConfigurationGlobalInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo  `path:"ethsw-txq-configuration-global-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationPortInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo    `path:"ethsw-txq-configuration-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationProfileInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo `path:"ethsw-txq-configuration-profile-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-global-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo struct {
	GlobalBuffers                    *uint32 `path:"global-buffers" module:"Cisco-IOS-XR-switch-oper"`
	GlobalTrafficDescriptors         *uint32 `path:"global-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetBuffers               *uint32 `path:"multi-target-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetTrafficDescriptors    *uint32 `path:"multi-target-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0Buffers               *uint32 `path:"shared-pool0-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0TrafficDescriptors    *uint32 `path:"shared-pool0-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressBuffers             *uint32 `path:"sniffed-egress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressTrafficDescriptors  *uint32 `path:"sniffed-egress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressBuffers            *uint32 `path:"sniffed-ingress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressTrafficDescriptors *uint32 `path:"sniffed-ingress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMode   *string `path:"weighted-round-robin-schedule-mode" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMtu    *string `path:"weighted-round-robin-schedule-mtu" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo struct {
	ConfigDropProfile      *uint32 `path:"config-drop-profile" module:"Cisco-IOS-XR-switch-oper"`
	ConfigSchedulerProfile *uint32 `path:"config-scheduler-profile" module:"Cisco-IOS-XR-switch-oper"`
	Port                   *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo struct {
	EthswTxqConfigurationProfilePerTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo `path:"ethsw-txq-configuration-profile-per-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Id                                              *uint32                                                                                                                                                                                                                                     `path:"id" module:"Cisco-IOS-XR-switch-oper"`
	MaxBuffers                                      *uint32                                                                                                                                                                                                                                     `path:"max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MaxTrafficDescriptors                           *uint32                                                                                                                                                                                                                                     `path:"max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                                         *string                                                                                                                                                                                                                                     `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info/ethsw-txq-configuration-profile-per-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo struct {
	ArbitrationGroup                  *string `path:"arbitration-group" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxBuffers            *uint32 `path:"drop-profile0-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxTrafficDescriptors *uint32 `path:"drop-profile0-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxBuffers            *uint32 `path:"drop-profile1-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxTrafficDescriptors *uint32 `path:"drop-profile1-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxBuffers            *uint32 `path:"drop-profile2-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxTrafficDescriptors *uint32 `path:"drop-profile2-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                           *string `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                      *uint32 `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxBuffers            *uint32 `path:"traffic-class-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxTrafficDescriptors *uint32 `path:"traffic-class-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinWeight          *uint32 `path:"weighted-round-robin-weight" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-detailed-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo struct {
	EthswTxqStatisticsDetailedPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo `path:"ethsw-txq-statistics-detailed-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo struct {
	EthswTxqStatisticsDetailedTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo `path:"ethsw-txq-statistics-detailed-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                                       *uint32                                                                                                                                                                                                                                       `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes                             *uint64                                                                                                                                                                                                                                       `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets                           *uint64                                                                                                                                                                                                                                       `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes                           *uint64                                                                                                                                                                                                                                       `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets                         *uint64                                                                                                                                                                                                                                       `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                               *string                                                                                                                                                                                                                                       `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor                          *string                                                                                                                                                                                                                                       `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo struct {
	EthswTxqStatisticsDetailedColorInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo `path:"ethsw-txq-statistics-detailed-color-info" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                        *string                                                                                                                                                                                                                                                                           `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info/ethsw-txq-statistics-detailed-color-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo struct {
	Color       *string `path:"color" module:"Cisco-IOS-XR-switch-oper"`
	DropBytes   *uint64 `path:"drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	DropPackets *uint64 `path:"drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	PassBytes   *uint64 `path:"pass-bytes" module:"Cisco-IOS-XR-switch-oper"`
	PassPackets *uint64 `path:"pass-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo struct {
	EthswTxqStatisticsSummaryPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo `path:"ethsw-txq-statistics-summary-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-config/txq-config-instances/txq-config-instance/txq-config-port-numbers/txq-config-port-number/ethsw-txq-statistics-summary-info/ethsw-txq-statistics-summary-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo struct {
	Port               *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes     *uint64 `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets   *uint64 `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes   *uint64 `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets *uint64 `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass       *string `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor  *string `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqConfig_TxqConfigInstances_TxqConfigInstance_TxqConfigPortNumbers_TxqConfigPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics struct {
	TxqStatisticsDetail    *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail    `path:"txq-statistics-detail" module:"Cisco-IOS-XR-switch-oper"`
	TxqStatisticsInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances `path:"txq-statistics-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) IsYANGGoStruct() {}

// GetOrCreateTxqStatisticsDetail retrieves the value of the TxqStatisticsDetail field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) GetOrCreateTxqStatisticsDetail() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail {
	if t.TxqStatisticsDetail != nil {
		return t.TxqStatisticsDetail
	}
	t.TxqStatisticsDetail = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail{}
	return t.TxqStatisticsDetail
}

// GetOrCreateTxqStatisticsInstances retrieves the value of the TxqStatisticsInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) GetOrCreateTxqStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances {
	if t.TxqStatisticsInstances != nil {
		return t.TxqStatisticsInstances
	}
	t.TxqStatisticsInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances{}
	return t.TxqStatisticsInstances
}

// GetTxqStatisticsDetail returns the value of the TxqStatisticsDetail struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics. If the receiver or the field TxqStatisticsDetail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) GetTxqStatisticsDetail() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail {
	if t != nil && t.TxqStatisticsDetail != nil {
		return t.TxqStatisticsDetail
	}
	return nil
}

// GetTxqStatisticsInstances returns the value of the TxqStatisticsInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics. If the receiver or the field TxqStatisticsInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) GetTxqStatisticsInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances {
	if t != nil && t.TxqStatisticsInstances != nil {
		return t.TxqStatisticsInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail struct {
	TxqStatisticsDetailInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances `path:"txq-statistics-detail-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) IsYANGGoStruct() {}

// GetOrCreateTxqStatisticsDetailInstances retrieves the value of the TxqStatisticsDetailInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) GetOrCreateTxqStatisticsDetailInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances {
	if t.TxqStatisticsDetailInstances != nil {
		return t.TxqStatisticsDetailInstances
	}
	t.TxqStatisticsDetailInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances{}
	return t.TxqStatisticsDetailInstances
}

// GetTxqStatisticsDetailInstances returns the value of the TxqStatisticsDetailInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail. If the receiver or the field TxqStatisticsDetailInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) GetTxqStatisticsDetailInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances {
	if t != nil && t.TxqStatisticsDetailInstances != nil {
		return t.TxqStatisticsDetailInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances struct {
	TxqStatisticsDetailInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance `path:"txq-statistics-detail-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) IsYANGGoStruct() {
}

// NewTxqStatisticsDetailInstance creates a new entry in the TxqStatisticsDetailInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) NewTxqStatisticsDetailInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsDetailInstance == nil {
		t.TxqStatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqStatisticsDetailInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqStatisticsDetailInstance", key)
	}

	t.TxqStatisticsDetailInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance{
		NodeId: &NodeId,
	}

	return t.TxqStatisticsDetailInstance[key], nil
}

// RenameTxqStatisticsDetailInstance renames an entry in the list TxqStatisticsDetailInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) RenameTxqStatisticsDetailInstance(oldK, newK string) error {
	if _, ok := t.TxqStatisticsDetailInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqStatisticsDetailInstance", newK)
	}

	e, ok := t.TxqStatisticsDetailInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqStatisticsDetailInstance", oldK)
	}
	e.NodeId = &newK

	t.TxqStatisticsDetailInstance[newK] = e
	delete(t.TxqStatisticsDetailInstance, oldK)
	return nil
}

// GetOrCreateTxqStatisticsDetailInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) GetOrCreateTxqStatisticsDetailInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance {
	if t.TxqStatisticsDetailInstance == nil {
		t.TxqStatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance)
	}
	return t.TxqStatisticsDetailInstance
}

// GetOrCreateTxqStatisticsDetailInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) GetOrCreateTxqStatisticsDetailInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance {

	key := NodeId

	if v, ok := t.TxqStatisticsDetailInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqStatisticsDetailInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqStatisticsDetailInstance got unexpected error: %v", err))
	}
	return v
}

// GetTxqStatisticsDetailInstance retrieves the value with the specified key from
// the TxqStatisticsDetailInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) GetTxqStatisticsDetailInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.TxqStatisticsDetailInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqStatisticsDetailInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance struct to the
// list TxqStatisticsDetailInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) AppendTxqStatisticsDetailInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsDetailInstance == nil {
		t.TxqStatisticsDetailInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance)
	}

	if _, ok := t.TxqStatisticsDetailInstance[key]; ok {
		return fmt.Errorf("duplicate key for list TxqStatisticsDetailInstance %v", key)
	}

	t.TxqStatisticsDetailInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance struct {
	NodeId                         *string                                                                                                                                                          `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	TxqStatisticsDetailPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers `path:"txq-statistics-detail-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) IsYANGGoStruct() {
}

// GetOrCreateTxqStatisticsDetailPortNumbers retrieves the value of the TxqStatisticsDetailPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) GetOrCreateTxqStatisticsDetailPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers {
	if t.TxqStatisticsDetailPortNumbers != nil {
		return t.TxqStatisticsDetailPortNumbers
	}
	t.TxqStatisticsDetailPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers{}
	return t.TxqStatisticsDetailPortNumbers
}

// GetTxqStatisticsDetailPortNumbers returns the value of the TxqStatisticsDetailPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance. If the receiver or the field TxqStatisticsDetailPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) GetTxqStatisticsDetailPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers {
	if t != nil && t.TxqStatisticsDetailPortNumbers != nil {
		return t.TxqStatisticsDetailPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers struct {
	TxqStatisticsDetailPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber `path:"txq-statistics-detail-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) IsYANGGoStruct() {
}

// NewTxqStatisticsDetailPortNumber creates a new entry in the TxqStatisticsDetailPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) NewTxqStatisticsDetailPortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsDetailPortNumber == nil {
		t.TxqStatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqStatisticsDetailPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqStatisticsDetailPortNumber", key)
	}

	t.TxqStatisticsDetailPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber{
		PortNum: &PortNum,
	}

	return t.TxqStatisticsDetailPortNumber[key], nil
}

// RenameTxqStatisticsDetailPortNumber renames an entry in the list TxqStatisticsDetailPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) RenameTxqStatisticsDetailPortNumber(oldK, newK uint32) error {
	if _, ok := t.TxqStatisticsDetailPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqStatisticsDetailPortNumber", newK)
	}

	e, ok := t.TxqStatisticsDetailPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqStatisticsDetailPortNumber", oldK)
	}
	e.PortNum = &newK

	t.TxqStatisticsDetailPortNumber[newK] = e
	delete(t.TxqStatisticsDetailPortNumber, oldK)
	return nil
}

// GetOrCreateTxqStatisticsDetailPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) GetOrCreateTxqStatisticsDetailPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber {
	if t.TxqStatisticsDetailPortNumber == nil {
		t.TxqStatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber)
	}
	return t.TxqStatisticsDetailPortNumber
}

// GetOrCreateTxqStatisticsDetailPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) GetOrCreateTxqStatisticsDetailPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber {

	key := PortNum

	if v, ok := t.TxqStatisticsDetailPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqStatisticsDetailPortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqStatisticsDetailPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetTxqStatisticsDetailPortNumber retrieves the value with the specified key from
// the TxqStatisticsDetailPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) GetTxqStatisticsDetailPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.TxqStatisticsDetailPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqStatisticsDetailPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber struct to the
// list TxqStatisticsDetailPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) AppendTxqStatisticsDetailPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsDetailPortNumber == nil {
		t.TxqStatisticsDetailPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber)
	}

	if _, ok := t.TxqStatisticsDetailPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list TxqStatisticsDetailPortNumber %v", key)
	}

	t.TxqStatisticsDetailPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber struct {
	EthswLocationInfo              *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo                `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo      `path:"ethsw-txq-configuration-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsDetailedInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo `path:"ethsw-txq-statistics-detailed-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsSummaryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo  `path:"ethsw-txq-statistics-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	InitialConfiguration           *string                                                                                                                                                                                                                         `path:"initial-configuration" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                        *uint32                                                                                                                                                                                                                         `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-configuration-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo struct {
	EthswTxqConfigurationGlobalInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo  `path:"ethsw-txq-configuration-global-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationPortInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo    `path:"ethsw-txq-configuration-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationProfileInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo `path:"ethsw-txq-configuration-profile-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-global-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo struct {
	GlobalBuffers                    *uint32 `path:"global-buffers" module:"Cisco-IOS-XR-switch-oper"`
	GlobalTrafficDescriptors         *uint32 `path:"global-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetBuffers               *uint32 `path:"multi-target-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetTrafficDescriptors    *uint32 `path:"multi-target-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0Buffers               *uint32 `path:"shared-pool0-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0TrafficDescriptors    *uint32 `path:"shared-pool0-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressBuffers             *uint32 `path:"sniffed-egress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressTrafficDescriptors  *uint32 `path:"sniffed-egress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressBuffers            *uint32 `path:"sniffed-ingress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressTrafficDescriptors *uint32 `path:"sniffed-ingress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMode   *string `path:"weighted-round-robin-schedule-mode" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMtu    *string `path:"weighted-round-robin-schedule-mtu" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo struct {
	ConfigDropProfile      *uint32 `path:"config-drop-profile" module:"Cisco-IOS-XR-switch-oper"`
	ConfigSchedulerProfile *uint32 `path:"config-scheduler-profile" module:"Cisco-IOS-XR-switch-oper"`
	Port                   *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo struct {
	EthswTxqConfigurationProfilePerTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo `path:"ethsw-txq-configuration-profile-per-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Id                                              *uint32                                                                                                                                                                                                                                                                                                     `path:"id" module:"Cisco-IOS-XR-switch-oper"`
	MaxBuffers                                      *uint32                                                                                                                                                                                                                                                                                                     `path:"max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MaxTrafficDescriptors                           *uint32                                                                                                                                                                                                                                                                                                     `path:"max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                                         *string                                                                                                                                                                                                                                                                                                     `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info/ethsw-txq-configuration-profile-per-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo struct {
	ArbitrationGroup                  *string `path:"arbitration-group" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxBuffers            *uint32 `path:"drop-profile0-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxTrafficDescriptors *uint32 `path:"drop-profile0-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxBuffers            *uint32 `path:"drop-profile1-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxTrafficDescriptors *uint32 `path:"drop-profile1-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxBuffers            *uint32 `path:"drop-profile2-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxTrafficDescriptors *uint32 `path:"drop-profile2-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                           *string `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                      *uint32 `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxBuffers            *uint32 `path:"traffic-class-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxTrafficDescriptors *uint32 `path:"traffic-class-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinWeight          *uint32 `path:"weighted-round-robin-weight" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-detailed-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo struct {
	EthswTxqStatisticsDetailedPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo `path:"ethsw-txq-statistics-detailed-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo struct {
	EthswTxqStatisticsDetailedTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo `path:"ethsw-txq-statistics-detailed-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                                       *uint32                                                                                                                                                                                                                                                                                                       `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes                             *uint64                                                                                                                                                                                                                                                                                                       `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets                           *uint64                                                                                                                                                                                                                                                                                                       `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes                           *uint64                                                                                                                                                                                                                                                                                                       `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets                         *uint64                                                                                                                                                                                                                                                                                                       `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                               *string                                                                                                                                                                                                                                                                                                       `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor                          *string                                                                                                                                                                                                                                                                                                       `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo struct {
	EthswTxqStatisticsDetailedColorInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo `path:"ethsw-txq-statistics-detailed-color-info" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                        *string                                                                                                                                                                                                                                                                                                                                           `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info/ethsw-txq-statistics-detailed-color-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo struct {
	Color       *string `path:"color" module:"Cisco-IOS-XR-switch-oper"`
	DropBytes   *uint64 `path:"drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	DropPackets *uint64 `path:"drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	PassBytes   *uint64 `path:"pass-bytes" module:"Cisco-IOS-XR-switch-oper"`
	PassPackets *uint64 `path:"pass-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo struct {
	EthswTxqStatisticsSummaryPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo `path:"ethsw-txq-statistics-summary-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-detail/txq-statistics-detail-instances/txq-statistics-detail-instance/txq-statistics-detail-port-numbers/txq-statistics-detail-port-number/ethsw-txq-statistics-summary-info/ethsw-txq-statistics-summary-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo struct {
	Port               *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes     *uint64 `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets   *uint64 `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes   *uint64 `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets *uint64 `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass       *string `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor  *string `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsDetail_TxqStatisticsDetailInstances_TxqStatisticsDetailInstance_TxqStatisticsDetailPortNumbers_TxqStatisticsDetailPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances struct {
	TxqStatisticsInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance `path:"txq-statistics-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) IsYANGGoStruct() {}

// NewTxqStatisticsInstance creates a new entry in the TxqStatisticsInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) NewTxqStatisticsInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsInstance == nil {
		t.TxqStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqStatisticsInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqStatisticsInstance", key)
	}

	t.TxqStatisticsInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance{
		NodeId: &NodeId,
	}

	return t.TxqStatisticsInstance[key], nil
}

// RenameTxqStatisticsInstance renames an entry in the list TxqStatisticsInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) RenameTxqStatisticsInstance(oldK, newK string) error {
	if _, ok := t.TxqStatisticsInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqStatisticsInstance", newK)
	}

	e, ok := t.TxqStatisticsInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqStatisticsInstance", oldK)
	}
	e.NodeId = &newK

	t.TxqStatisticsInstance[newK] = e
	delete(t.TxqStatisticsInstance, oldK)
	return nil
}

// GetOrCreateTxqStatisticsInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) GetOrCreateTxqStatisticsInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance {
	if t.TxqStatisticsInstance == nil {
		t.TxqStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance)
	}
	return t.TxqStatisticsInstance
}

// GetOrCreateTxqStatisticsInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) GetOrCreateTxqStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance {

	key := NodeId

	if v, ok := t.TxqStatisticsInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqStatisticsInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqStatisticsInstance got unexpected error: %v", err))
	}
	return v
}

// GetTxqStatisticsInstance retrieves the value with the specified key from
// the TxqStatisticsInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) GetTxqStatisticsInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.TxqStatisticsInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqStatisticsInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance struct to the
// list TxqStatisticsInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) AppendTxqStatisticsInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsInstance == nil {
		t.TxqStatisticsInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance)
	}

	if _, ok := t.TxqStatisticsInstance[key]; ok {
		return fmt.Errorf("duplicate key for list TxqStatisticsInstance %v", key)
	}

	t.TxqStatisticsInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance struct {
	NodeId                   *string                                                                                                                    `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	TxqStatisticsPortNumbers *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers `path:"txq-statistics-port-numbers" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) IsYANGGoStruct() {
}

// GetOrCreateTxqStatisticsPortNumbers retrieves the value of the TxqStatisticsPortNumbers field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) GetOrCreateTxqStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers {
	if t.TxqStatisticsPortNumbers != nil {
		return t.TxqStatisticsPortNumbers
	}
	t.TxqStatisticsPortNumbers = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers{}
	return t.TxqStatisticsPortNumbers
}

// GetTxqStatisticsPortNumbers returns the value of the TxqStatisticsPortNumbers struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance. If the receiver or the field TxqStatisticsPortNumbers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) GetTxqStatisticsPortNumbers() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers {
	if t != nil && t.TxqStatisticsPortNumbers != nil {
		return t.TxqStatisticsPortNumbers
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers struct {
	TxqStatisticsPortNumber map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber `path:"txq-statistics-port-number" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) IsYANGGoStruct() {
}

// NewTxqStatisticsPortNumber creates a new entry in the TxqStatisticsPortNumber list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) NewTxqStatisticsPortNumber(PortNum uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsPortNumber == nil {
		t.TxqStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber)
	}

	key := PortNum

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxqStatisticsPortNumber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxqStatisticsPortNumber", key)
	}

	t.TxqStatisticsPortNumber[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber{
		PortNum: &PortNum,
	}

	return t.TxqStatisticsPortNumber[key], nil
}

// RenameTxqStatisticsPortNumber renames an entry in the list TxqStatisticsPortNumber within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) RenameTxqStatisticsPortNumber(oldK, newK uint32) error {
	if _, ok := t.TxqStatisticsPortNumber[newK]; ok {
		return fmt.Errorf("key %v already exists in TxqStatisticsPortNumber", newK)
	}

	e, ok := t.TxqStatisticsPortNumber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxqStatisticsPortNumber", oldK)
	}
	e.PortNum = &newK

	t.TxqStatisticsPortNumber[newK] = e
	delete(t.TxqStatisticsPortNumber, oldK)
	return nil
}

// GetOrCreateTxqStatisticsPortNumberMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) GetOrCreateTxqStatisticsPortNumberMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber {
	if t.TxqStatisticsPortNumber == nil {
		t.TxqStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber)
	}
	return t.TxqStatisticsPortNumber
}

// GetOrCreateTxqStatisticsPortNumber retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) GetOrCreateTxqStatisticsPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber {

	key := PortNum

	if v, ok := t.TxqStatisticsPortNumber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxqStatisticsPortNumber(PortNum)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxqStatisticsPortNumber got unexpected error: %v", err))
	}
	return v
}

// GetTxqStatisticsPortNumber retrieves the value with the specified key from
// the TxqStatisticsPortNumber map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) GetTxqStatisticsPortNumber(PortNum uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber {

	if t == nil {
		return nil
	}

	key := PortNum

	if lm, ok := t.TxqStatisticsPortNumber[key]; ok {
		return lm
	}
	return nil
}

// AppendTxqStatisticsPortNumber appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber struct to the
// list TxqStatisticsPortNumber of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) AppendTxqStatisticsPortNumber(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) error {
	if v.PortNum == nil {
		return fmt.Errorf("invalid nil key received for PortNum")
	}

	key := *v.PortNum

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxqStatisticsPortNumber == nil {
		t.TxqStatisticsPortNumber = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber)
	}

	if _, ok := t.TxqStatisticsPortNumber[key]; ok {
		return fmt.Errorf("duplicate key for list TxqStatisticsPortNumber %v", key)
	}

	t.TxqStatisticsPortNumber[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber struct {
	EthswLocationInfo              *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo                `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationInfo      []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo      `path:"ethsw-txq-configuration-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsDetailedInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo `path:"ethsw-txq-statistics-detailed-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqStatisticsSummaryInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo  `path:"ethsw-txq-statistics-summary-info" module:"Cisco-IOS-XR-switch-oper"`
	InitialConfiguration           *string                                                                                                                                                                             `path:"initial-configuration" module:"Cisco-IOS-XR-switch-oper"`
	PortNum                        *uint32                                                                                                                                                                             `path:"port-num" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNum == nil {
		return nil, fmt.Errorf("nil value for key PortNum")
	}

	return map[string]interface{}{
		"port-num": *t.PortNum,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-configuration-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo struct {
	EthswTxqConfigurationGlobalInfo  []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo  `path:"ethsw-txq-configuration-global-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationPortInfo    []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo    `path:"ethsw-txq-configuration-port-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswTxqConfigurationProfileInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo `path:"ethsw-txq-configuration-profile-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-global-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo struct {
	GlobalBuffers                    *uint32 `path:"global-buffers" module:"Cisco-IOS-XR-switch-oper"`
	GlobalTrafficDescriptors         *uint32 `path:"global-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetBuffers               *uint32 `path:"multi-target-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MultiTargetTrafficDescriptors    *uint32 `path:"multi-target-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0Buffers               *uint32 `path:"shared-pool0-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SharedPool0TrafficDescriptors    *uint32 `path:"shared-pool0-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressBuffers             *uint32 `path:"sniffed-egress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedEgressTrafficDescriptors  *uint32 `path:"sniffed-egress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressBuffers            *uint32 `path:"sniffed-ingress-buffers" module:"Cisco-IOS-XR-switch-oper"`
	SniffedIngressTrafficDescriptors *uint32 `path:"sniffed-ingress-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMode   *string `path:"weighted-round-robin-schedule-mode" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinScheduleMtu    *string `path:"weighted-round-robin-schedule-mtu" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationGlobalInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo struct {
	ConfigDropProfile      *uint32 `path:"config-drop-profile" module:"Cisco-IOS-XR-switch-oper"`
	ConfigSchedulerProfile *uint32 `path:"config-scheduler-profile" module:"Cisco-IOS-XR-switch-oper"`
	Port                   *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo struct {
	EthswTxqConfigurationProfilePerTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo `path:"ethsw-txq-configuration-profile-per-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Id                                              *uint32                                                                                                                                                                                                                                                         `path:"id" module:"Cisco-IOS-XR-switch-oper"`
	MaxBuffers                                      *uint32                                                                                                                                                                                                                                                         `path:"max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	MaxTrafficDescriptors                           *uint32                                                                                                                                                                                                                                                         `path:"max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                                         *string                                                                                                                                                                                                                                                         `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-configuration-info/ethsw-txq-configuration-profile-info/ethsw-txq-configuration-profile-per-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo struct {
	ArbitrationGroup                  *string `path:"arbitration-group" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxBuffers            *uint32 `path:"drop-profile0-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile0MaxTrafficDescriptors *uint32 `path:"drop-profile0-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxBuffers            *uint32 `path:"drop-profile1-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile1MaxTrafficDescriptors *uint32 `path:"drop-profile1-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxBuffers            *uint32 `path:"drop-profile2-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	DropProfile2MaxTrafficDescriptors *uint32 `path:"drop-profile2-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	Sharing                           *string `path:"sharing" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                      *uint32 `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxBuffers            *uint32 `path:"traffic-class-max-buffers" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassMaxTrafficDescriptors *uint32 `path:"traffic-class-max-traffic-descriptors" module:"Cisco-IOS-XR-switch-oper"`
	WeightedRoundRobinWeight          *uint32 `path:"weighted-round-robin-weight" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqConfigurationInfo_EthswTxqConfigurationProfileInfo_EthswTxqConfigurationProfilePerTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-detailed-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo struct {
	EthswTxqStatisticsDetailedPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo `path:"ethsw-txq-statistics-detailed-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo struct {
	EthswTxqStatisticsDetailedTrafficClassInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo `path:"ethsw-txq-statistics-detailed-traffic-class-info" module:"Cisco-IOS-XR-switch-oper"`
	Port                                       *uint32                                                                                                                                                                                                                                                           `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes                             *uint64                                                                                                                                                                                                                                                           `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets                           *uint64                                                                                                                                                                                                                                                           `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes                           *uint64                                                                                                                                                                                                                                                           `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets                         *uint64                                                                                                                                                                                                                                                           `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                               *string                                                                                                                                                                                                                                                           `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor                          *string                                                                                                                                                                                                                                                           `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo struct {
	EthswTxqStatisticsDetailedColorInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo `path:"ethsw-txq-statistics-detailed-color-info" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass                        *string                                                                                                                                                                                                                                                                                               `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-detailed-info/ethsw-txq-statistics-detailed-port-info/ethsw-txq-statistics-detailed-traffic-class-info/ethsw-txq-statistics-detailed-color-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo struct {
	Color       *string `path:"color" module:"Cisco-IOS-XR-switch-oper"`
	DropBytes   *uint64 `path:"drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	DropPackets *uint64 `path:"drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	PassBytes   *uint64 `path:"pass-bytes" module:"Cisco-IOS-XR-switch-oper"`
	PassPackets *uint64 `path:"pass-packets" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsDetailedInfo_EthswTxqStatisticsDetailedPortInfo_EthswTxqStatisticsDetailedTrafficClassInfo_EthswTxqStatisticsDetailedColorInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-summary-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo struct {
	EthswTxqStatisticsSummaryPortInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo `path:"ethsw-txq-statistics-summary-port-info" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/txq/txq-statistics/txq-statistics-instances/txq-statistics-instance/txq-statistics-port-numbers/txq-statistics-port-number/ethsw-txq-statistics-summary-info/ethsw-txq-statistics-summary-port-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo struct {
	Port               *uint32 `path:"port" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropBytes     *uint64 `path:"total-drop-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalDropPackets   *uint64 `path:"total-drop-packets" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedBytes   *uint64 `path:"total-queued-bytes" module:"Cisco-IOS-XR-switch-oper"`
	TotalQueuedPackets *uint64 `path:"total-queued-packets" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClass       *string `path:"traffic-class" module:"Cisco-IOS-XR-switch-oper"`
	TrafficClassColor  *string `path:"traffic-class-color" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Txq_TxqStatistics_TxqStatisticsInstances_TxqStatisticsInstance_TxqStatisticsPortNumbers_TxqStatisticsPortNumber_EthswTxqStatisticsSummaryInfo_EthswTxqStatisticsSummaryPortInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan struct {
	VlanInfo       *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo       `path:"vlan-info" module:"Cisco-IOS-XR-switch-oper"`
	VlanMembership *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership `path:"vlan-membership" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) IsYANGGoStruct() {}

// GetOrCreateVlanInfo retrieves the value of the VlanInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) GetOrCreateVlanInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo {
	if t.VlanInfo != nil {
		return t.VlanInfo
	}
	t.VlanInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo{}
	return t.VlanInfo
}

// GetOrCreateVlanMembership retrieves the value of the VlanMembership field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) GetOrCreateVlanMembership() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership {
	if t.VlanMembership != nil {
		return t.VlanMembership
	}
	t.VlanMembership = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership{}
	return t.VlanMembership
}

// GetVlanInfo returns the value of the VlanInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan. If the receiver or the field VlanInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) GetVlanInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo {
	if t != nil && t.VlanInfo != nil {
		return t.VlanInfo
	}
	return nil
}

// GetVlanMembership returns the value of the VlanMembership struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan. If the receiver or the field VlanMembership is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) GetVlanMembership() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership {
	if t != nil && t.VlanMembership != nil {
		return t.VlanMembership
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo struct {
	VlanInfoInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances `path:"vlan-info-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) IsYANGGoStruct() {}

// GetOrCreateVlanInfoInstances retrieves the value of the VlanInfoInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) GetOrCreateVlanInfoInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances {
	if t.VlanInfoInstances != nil {
		return t.VlanInfoInstances
	}
	t.VlanInfoInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances{}
	return t.VlanInfoInstances
}

// GetVlanInfoInstances returns the value of the VlanInfoInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo. If the receiver or the field VlanInfoInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) GetVlanInfoInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances {
	if t != nil && t.VlanInfoInstances != nil {
		return t.VlanInfoInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-info/vlan-info-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances struct {
	VlanInfoInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance `path:"vlan-info-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) IsYANGGoStruct() {}

// NewVlanInfoInstance creates a new entry in the VlanInfoInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) NewVlanInfoInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanInfoInstance == nil {
		t.VlanInfoInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanInfoInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanInfoInstance", key)
	}

	t.VlanInfoInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance{
		NodeId: &NodeId,
	}

	return t.VlanInfoInstance[key], nil
}

// RenameVlanInfoInstance renames an entry in the list VlanInfoInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) RenameVlanInfoInstance(oldK, newK string) error {
	if _, ok := t.VlanInfoInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanInfoInstance", newK)
	}

	e, ok := t.VlanInfoInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanInfoInstance", oldK)
	}
	e.NodeId = &newK

	t.VlanInfoInstance[newK] = e
	delete(t.VlanInfoInstance, oldK)
	return nil
}

// GetOrCreateVlanInfoInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) GetOrCreateVlanInfoInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance {
	if t.VlanInfoInstance == nil {
		t.VlanInfoInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance)
	}
	return t.VlanInfoInstance
}

// GetOrCreateVlanInfoInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) GetOrCreateVlanInfoInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance {

	key := NodeId

	if v, ok := t.VlanInfoInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanInfoInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanInfoInstance got unexpected error: %v", err))
	}
	return v
}

// GetVlanInfoInstance retrieves the value with the specified key from
// the VlanInfoInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) GetVlanInfoInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.VlanInfoInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendVlanInfoInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance struct to the
// list VlanInfoInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) AppendVlanInfoInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanInfoInstance == nil {
		t.VlanInfoInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance)
	}

	if _, ok := t.VlanInfoInstance[key]; ok {
		return fmt.Errorf("duplicate key for list VlanInfoInstance %v", key)
	}

	t.VlanInfoInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-info/vlan-info-instances/vlan-info-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanInfo     []*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo   `path:"ethsw-vlan-info" module:"Cisco-IOS-XR-switch-oper"`
	NodeId            *string                                                                                               `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-info/vlan-info-instances/vlan-info-instance/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-info/vlan-info-instances/vlan-info-instance/ethsw-vlan-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo struct {
	Vlan    *uint32 `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
	VlanUse *string `path:"vlan-use" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanInfo_VlanInfoInstances_VlanInfoInstance_EthswVlanInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership struct {
	VlanMembershipInstances *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances `path:"vlan-membership-instances" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) IsYANGGoStruct() {}

// GetOrCreateVlanMembershipInstances retrieves the value of the VlanMembershipInstances field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) GetOrCreateVlanMembershipInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances {
	if t.VlanMembershipInstances != nil {
		return t.VlanMembershipInstances
	}
	t.VlanMembershipInstances = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances{}
	return t.VlanMembershipInstances
}

// GetVlanMembershipInstances returns the value of the VlanMembershipInstances struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership. If the receiver or the field VlanMembershipInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) GetVlanMembershipInstances() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances {
	if t != nil && t.VlanMembershipInstances != nil {
		return t.VlanMembershipInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances struct {
	VlanMembershipInstance map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance `path:"vlan-membership-instance" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) IsYANGGoStruct() {
}

// NewVlanMembershipInstance creates a new entry in the VlanMembershipInstance list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) NewVlanMembershipInstance(NodeId string) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanMembershipInstance == nil {
		t.VlanMembershipInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance)
	}

	key := NodeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanMembershipInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanMembershipInstance", key)
	}

	t.VlanMembershipInstance[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance{
		NodeId: &NodeId,
	}

	return t.VlanMembershipInstance[key], nil
}

// RenameVlanMembershipInstance renames an entry in the list VlanMembershipInstance within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) RenameVlanMembershipInstance(oldK, newK string) error {
	if _, ok := t.VlanMembershipInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanMembershipInstance", newK)
	}

	e, ok := t.VlanMembershipInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanMembershipInstance", oldK)
	}
	e.NodeId = &newK

	t.VlanMembershipInstance[newK] = e
	delete(t.VlanMembershipInstance, oldK)
	return nil
}

// GetOrCreateVlanMembershipInstanceMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) GetOrCreateVlanMembershipInstanceMap() map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance {
	if t.VlanMembershipInstance == nil {
		t.VlanMembershipInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance)
	}
	return t.VlanMembershipInstance
}

// GetOrCreateVlanMembershipInstance retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) GetOrCreateVlanMembershipInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance {

	key := NodeId

	if v, ok := t.VlanMembershipInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanMembershipInstance(NodeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanMembershipInstance got unexpected error: %v", err))
	}
	return v
}

// GetVlanMembershipInstance retrieves the value with the specified key from
// the VlanMembershipInstance map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) GetVlanMembershipInstance(NodeId string) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance {

	if t == nil {
		return nil
	}

	key := NodeId

	if lm, ok := t.VlanMembershipInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendVlanMembershipInstance appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance struct to the
// list VlanMembershipInstance of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) AppendVlanMembershipInstance(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) error {
	if v.NodeId == nil {
		return fmt.Errorf("invalid nil key received for NodeId")
	}

	key := *v.NodeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanMembershipInstance == nil {
		t.VlanMembershipInstance = make(map[string]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance)
	}

	if _, ok := t.VlanMembershipInstance[key]; ok {
		return fmt.Errorf("duplicate key for list VlanMembershipInstance %v", key)
	}

	t.VlanMembershipInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances/vlan-membership-instance YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance struct {
	NodeId                *string                                                                                                                     `path:"node-id" module:"Cisco-IOS-XR-switch-oper"`
	VlanMembershipVlanIds *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds `path:"vlan-membership-vlan-ids" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) IsYANGGoStruct() {
}

// GetOrCreateVlanMembershipVlanIds retrieves the value of the VlanMembershipVlanIds field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) GetOrCreateVlanMembershipVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds {
	if t.VlanMembershipVlanIds != nil {
		return t.VlanMembershipVlanIds
	}
	t.VlanMembershipVlanIds = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds{}
	return t.VlanMembershipVlanIds
}

// GetVlanMembershipVlanIds returns the value of the VlanMembershipVlanIds struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance. If the receiver or the field VlanMembershipVlanIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) GetVlanMembershipVlanIds() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds {
	if t != nil && t.VlanMembershipVlanIds != nil {
		return t.VlanMembershipVlanIds
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NodeId == nil {
		return nil, fmt.Errorf("nil value for key NodeId")
	}

	return map[string]interface{}{
		"node-id": *t.NodeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances/vlan-membership-instance/vlan-membership-vlan-ids YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds struct {
	VlanMembershipVlanId map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId `path:"vlan-membership-vlan-id" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) IsYANGGoStruct() {
}

// NewVlanMembershipVlanId creates a new entry in the VlanMembershipVlanId list of the
// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) NewVlanMembershipVlanId(Vlan uint32) (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanMembershipVlanId == nil {
		t.VlanMembershipVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId)
	}

	key := Vlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanMembershipVlanId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanMembershipVlanId", key)
	}

	t.VlanMembershipVlanId[key] = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId{
		Vlan: &Vlan,
	}

	return t.VlanMembershipVlanId[key], nil
}

// RenameVlanMembershipVlanId renames an entry in the list VlanMembershipVlanId within
// the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) RenameVlanMembershipVlanId(oldK, newK uint32) error {
	if _, ok := t.VlanMembershipVlanId[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanMembershipVlanId", newK)
	}

	e, ok := t.VlanMembershipVlanId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanMembershipVlanId", oldK)
	}
	e.Vlan = &newK

	t.VlanMembershipVlanId[newK] = e
	delete(t.VlanMembershipVlanId, oldK)
	return nil
}

// GetOrCreateVlanMembershipVlanIdMap returns the list (map) from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds.
//
// It initializes the field if not already initialized.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) GetOrCreateVlanMembershipVlanIdMap() map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId {
	if t.VlanMembershipVlanId == nil {
		t.VlanMembershipVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId)
	}
	return t.VlanMembershipVlanId
}

// GetOrCreateVlanMembershipVlanId retrieves the value with the specified keys from
// the receiver Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) GetOrCreateVlanMembershipVlanId(Vlan uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId {

	key := Vlan

	if v, ok := t.VlanMembershipVlanId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanMembershipVlanId(Vlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanMembershipVlanId got unexpected error: %v", err))
	}
	return v
}

// GetVlanMembershipVlanId retrieves the value with the specified key from
// the VlanMembershipVlanId map field of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) GetVlanMembershipVlanId(Vlan uint32) *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId {

	if t == nil {
		return nil
	}

	key := Vlan

	if lm, ok := t.VlanMembershipVlanId[key]; ok {
		return lm
	}
	return nil
}

// AppendVlanMembershipVlanId appends the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId struct to the
// list VlanMembershipVlanId of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds. If the key value(s) specified in
// the supplied Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId already exist in the list, an error is
// returned.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) AppendVlanMembershipVlanId(v *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) error {
	if v.Vlan == nil {
		return fmt.Errorf("invalid nil key received for Vlan")
	}

	key := *v.Vlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanMembershipVlanId == nil {
		t.VlanMembershipVlanId = make(map[uint32]*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId)
	}

	if _, ok := t.VlanMembershipVlanId[key]; ok {
		return fmt.Errorf("duplicate key for list VlanMembershipVlanId %v", key)
	}

	t.VlanMembershipVlanId[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances/vlan-membership-instance/vlan-membership-vlan-ids/vlan-membership-vlan-id YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId struct {
	EthswLocationInfo *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo   `path:"ethsw-location-info" module:"Cisco-IOS-XR-switch-oper"`
	EthswVlanMembInfo []*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo `path:"ethsw-vlan-memb-info" module:"Cisco-IOS-XR-switch-oper"`
	Vlan              *uint32                                                                                                                                                              `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) IsYANGGoStruct() {
}

// GetOrCreateEthswLocationInfo retrieves the value of the EthswLocationInfo field
// or returns the existing field if it already exists.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) GetOrCreateEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo {
	if t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	t.EthswLocationInfo = &Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo{}
	return t.EthswLocationInfo
}

// GetEthswLocationInfo returns the value of the EthswLocationInfo struct pointer
// from Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId. If the receiver or the field EthswLocationInfo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) GetEthswLocationInfo() *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo {
	if t != nil && t.EthswLocationInfo != nil {
		return t.EthswLocationInfo
	}
	return nil
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId struct, which is a YANG list entry.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vlan == nil {
		return nil, fmt.Errorf("nil value for key Vlan")
	}

	return map[string]interface{}{
		"vlan": *t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances/vlan-membership-instance/vlan-membership-vlan-ids/vlan-membership-vlan-id/ethsw-location-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo struct {
	Card      *string `path:"card" module:"Cisco-IOS-XR-switch-oper"`
	Rack      *uint8  `path:"rack" module:"Cisco-IOS-XR-switch-oper"`
	SerialNum *string `path:"serial-num" module:"Cisco-IOS-XR-switch-oper"`
	Switch    *string `path:"switch" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswLocationInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}

// Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo represents the /Cisco-IOS-XR-switch-oper/show-switch/vlan/vlan-membership/vlan-membership-instances/vlan-membership-instance/vlan-membership-vlan-ids/vlan-membership-vlan-id/ethsw-vlan-memb-info YANG schema element.
type Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo struct {
	Ports []uint8 `path:"ports" module:"Cisco-IOS-XR-switch-oper"`
	Vlan  *uint32 `path:"vlan" module:"Cisco-IOS-XR-switch-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo.
func (*Cisco_IOS_XRSwitchOper_ShowSwitch_Vlan_VlanMembership_VlanMembershipInstances_VlanMembershipInstance_VlanMembershipVlanIds_VlanMembershipVlanId_EthswVlanMembInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-switch-oper"
}
