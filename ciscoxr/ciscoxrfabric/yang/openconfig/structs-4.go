/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-types.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/system/openconfig-alarm-types.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage_State.
func (*OpenconfigPlatform_Components_Component_Storage_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	ΛMetadata     []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Subcomponent  map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent `path:"subcomponent" module:"openconfig-platform"`
	ΛSubcomponent []ygot.Annotation                                                              `path:"@subcomponent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the OpenconfigPlatform_Components_Component_Subcomponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponentMap returns the list (map) from OpenconfigPlatform_Components_Component_Subcomponents.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponentMap() map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}
	return t.Subcomponent
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of OpenconfigPlatform_Components_Component_Subcomponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubcomponent deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) DeleteSubcomponent(Name string) {
	key := Name

	delete(t.Subcomponent, key)
}

// AppendSubcomponent appends the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct to the
// list Subcomponent of OpenconfigPlatform_Components_Component_Subcomponents. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) AppendSubcomponent(v *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents.
func (*OpenconfigPlatform_Components_Component_Subcomponents) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                    `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigPlatform_Components_Component_Transceiver_Config           `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig           []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	HostLanes         *OpenconfigPlatform_Components_Component_Transceiver_HostLanes        `path:"host-lanes" module:"openconfig-platform-transceiver"`
	ΛHostLanes        []ygot.Annotation                                                     `path:"@host-lanes" ygotAnnotation:"true"`
	PhysicalChannels  *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels `path:"physical-channels" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannels []ygot.Annotation                                                     `path:"@physical-channels" ygotAnnotation:"true"`
	State             *OpenconfigPlatform_Components_Component_Transceiver_State            `path:"state" module:"openconfig-platform-transceiver"`
	ΛState            []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
	Thresholds        *OpenconfigPlatform_Components_Component_Transceiver_Thresholds       `path:"thresholds" module:"openconfig-platform-transceiver"`
	ΛThresholds       []ygot.Annotation                                                     `path:"@thresholds" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_Config{}
	return t.Config
}

// GetOrCreateHostLanes retrieves the value of the HostLanes field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateHostLanes() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes {
	if t.HostLanes != nil {
		return t.HostLanes
	}
	t.HostLanes = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes{}
	return t.HostLanes
}

// GetOrCreatePhysicalChannels retrieves the value of the PhysicalChannels field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreatePhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	t.PhysicalChannels = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels{}
	return t.PhysicalChannels
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_State{}
	return t.State
}

// GetOrCreateThresholds retrieves the value of the Thresholds field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateThresholds() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds {
	if t.Thresholds != nil {
		return t.Thresholds
	}
	t.Thresholds = &OpenconfigPlatform_Components_Component_Transceiver_Thresholds{}
	return t.Thresholds
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHostLanes returns the value of the HostLanes struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field HostLanes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetHostLanes() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes {
	if t != nil && t.HostLanes != nil {
		return t.HostLanes
	}
	return nil
}

// GetPhysicalChannels returns the value of the PhysicalChannels struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field PhysicalChannels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetPhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t != nil && t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetThresholds returns the value of the Thresholds struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field Thresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetThresholds() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds {
	if t != nil && t.Thresholds != nil {
		return t.Thresholds
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver.
func (*OpenconfigPlatform_Components_Component_Transceiver) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_Config represents the /openconfig-platform/components/component/transceiver/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Config struct {
	ΛMetadata             []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Enabled               *bool                                                         `path:"enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled              []ygot.Annotation                                             `path:"@enabled" ygotAnnotation:"true"`
	EthernetPmdPreconf    E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                  `path:"ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf   []ygot.Annotation                                             `path:"@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FecMode               E_OpenconfigPlatformTypes_FEC_MODE_TYPE                       `path:"fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode              []ygot.Annotation                                             `path:"@fec-mode" ygotAnnotation:"true"`
	FormFactorPreconf     E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE       `path:"form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf    []ygot.Annotation                                             `path:"@form-factor-preconf" ygotAnnotation:"true"`
	ModuleFunctionalType  E_OpenconfigTransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE `path:"module-functional-type" module:"openconfig-platform-transceiver"`
	ΛModuleFunctionalType []ygot.Annotation                                             `path:"@module-functional-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_Config.
func (*OpenconfigPlatform_Components_Component_Transceiver_Config) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_HostLanes represents the /openconfig-platform/components/component/transceiver/host-lanes YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct {
	ΛMetadata []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Lane      map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane `path:"lane" module:"openconfig-platform-transceiver"`
	ΛLane     []ygot.Annotation                                                             `path:"@lane" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_HostLanes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes) IsYANGGoStruct() {}

// NewLane creates a new entry in the Lane list of the
// OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) NewLane(LaneNumber uint8) (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}

	key := LaneNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lane[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lane", key)
	}

	t.Lane[key] = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane{
		LaneNumber: &LaneNumber,
	}

	return t.Lane[key], nil
}

// RenameLane renames an entry in the list Lane within
// the OpenconfigPlatform_Components_Component_Transceiver_HostLanes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) RenameLane(oldK, newK uint8) error {
	if _, ok := t.Lane[newK]; ok {
		return fmt.Errorf("key %v already exists in Lane", newK)
	}

	e, ok := t.Lane[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lane", oldK)
	}
	e.LaneNumber = &newK

	t.Lane[newK] = e
	delete(t.Lane, oldK)
	return nil
}

// GetOrCreateLaneMap returns the list (map) from OpenconfigPlatform_Components_Component_Transceiver_HostLanes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetOrCreateLaneMap() map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}
	return t.Lane
}

// GetOrCreateLane retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetOrCreateLane(LaneNumber uint8) *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {

	key := LaneNumber

	if v, ok := t.Lane[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLane(LaneNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLane got unexpected error: %v", err))
	}
	return v
}

// GetLane retrieves the value with the specified key from
// the Lane map field of OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) GetLane(LaneNumber uint8) *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane {

	if t == nil {
		return nil
	}

	key := LaneNumber

	if lm, ok := t.Lane[key]; ok {
		return lm
	}
	return nil
}

// DeleteLane deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) DeleteLane(LaneNumber uint8) {
	key := LaneNumber

	delete(t.Lane, key)
}

// AppendLane appends the supplied OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane struct to the
// list Lane of OpenconfigPlatform_Components_Component_Transceiver_HostLanes. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) AppendLane(v *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) error {
	if v.LaneNumber == nil {
		return fmt.Errorf("invalid nil key received for LaneNumber")
	}

	key := *v.LaneNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lane == nil {
		t.Lane = make(map[uint8]*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane)
	}

	if _, ok := t.Lane[key]; ok {
		return fmt.Errorf("duplicate key for list Lane %v", key)
	}

	t.Lane[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_HostLanes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_HostLanes.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane struct {
	ΛMetadata   []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig     []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	LaneNumber  *uint8                                                                     `path:"lane-number" module:"openconfig-platform-transceiver"`
	ΛLaneNumber []ygot.Annotation                                                          `path:"@lane-number" ygotAnnotation:"true"`
	State       *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State  `path:"state" module:"openconfig-platform-transceiver"`
	ΛState      []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) GetState() *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LaneNumber == nil {
		return nil, fmt.Errorf("nil value for key LaneNumber")
	}

	return map[string]interface{}{
		"lane-number": *t.LaneNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LaneNumber  *uint8            `path:"lane-number" module:"openconfig-platform-transceiver"`
	ΛLaneNumber []ygot.Annotation `path:"@lane-number" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_Config) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LaneNumber  *uint8            `path:"lane-number" module:"openconfig-platform-transceiver"`
	ΛLaneNumber []ygot.Annotation `path:"@lane-number" ygotAnnotation:"true"`
	TxCdrLol    *bool             `path:"tx-cdr-lol" module:"openconfig-platform-transceiver"`
	ΛTxCdrLol   []ygot.Annotation `path:"@tx-cdr-lol" ygotAnnotation:"true"`
	TxLos       *bool             `path:"tx-los" module:"openconfig-platform-transceiver"`
	ΛTxLos      []ygot.Annotation `path:"@tx-los" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State.
func (*OpenconfigPlatform_Components_Component_Transceiver_HostLanes_Lane_State) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels represents the /openconfig-platform/components/component/transceiver/physical-channels YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Channel   map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel `path:"channel" module:"openconfig-platform-transceiver"`
	ΛChannel  []ygot.Annotation                                                                        `path:"@channel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) NewChannel(Index uint16) (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) RenameChannel(oldK, newK uint16) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannelMap returns the list (map) from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) GetOrCreateChannelMap() map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel {
	if t.Channel == nil {
		t.Channel = make(map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel)
	}
	return t.Channel
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) GetOrCreateChannel(Index uint16) *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) GetChannel(Index uint16) *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) DeleteChannel(Index uint16) {
	key := Index

	delete(t.Channel, key)
}

// AppendChannel appends the supplied OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct to the
// list Channel of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) AppendChannel(v *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct {
	ΛMetadata []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig   []ygot.Annotation                                                                    `path:"@config" ygotAnnotation:"true"`
	Index     *uint16                                                                              `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex    []ygot.Annotation                                                                    `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State  `path:"state" module:"openconfig-platform-transceiver"`
	ΛState    []ygot.Annotation                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetState() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AssociatedOpticalChannel  *string           `path:"associated-optical-channel" module:"openconfig-platform-transceiver"`
	ΛAssociatedOpticalChannel []ygot.Annotation `path:"@associated-optical-channel" ygotAnnotation:"true"`
	Description               *string           `path:"description" module:"openconfig-platform-transceiver"`
	ΛDescription              []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Index                     *uint16           `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex                    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
	TargetOutputPower         *float64          `path:"target-output-power" module:"openconfig-platform-transceiver"`
	ΛTargetOutputPower        []ygot.Annotation `path:"@target-output-power" ygotAnnotation:"true"`
	TxLaser                   *bool             `path:"tx-laser" module:"openconfig-platform-transceiver"`
	ΛTxLaser                  []ygot.Annotation `path:"@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State struct {
	ΛMetadata                 []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	AssociatedOpticalChannel  *string                                                                                                      `path:"associated-optical-channel" module:"openconfig-platform-transceiver"`
	ΛAssociatedOpticalChannel []ygot.Annotation                                                                                            `path:"@associated-optical-channel" ygotAnnotation:"true"`
	Description               *string                                                                                                      `path:"description" module:"openconfig-platform-transceiver"`
	ΛDescription              []ygot.Annotation                                                                                            `path:"@description" ygotAnnotation:"true"`
	Index                     *uint16                                                                                                      `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex                    []ygot.Annotation                                                                                            `path:"@index" ygotAnnotation:"true"`
	InputPower                *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower               `path:"input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower               []ygot.Annotation                                                                                            `path:"@input-power" ygotAnnotation:"true"`
	LaserAge                  *uint8                                                                                                       `path:"laser-age" module:"openconfig-platform-transceiver"`
	ΛLaserAge                 []ygot.Annotation                                                                                            `path:"@laser-age" ygotAnnotation:"true"`
	LaserBiasCurrent          *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent         `path:"laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent         []ygot.Annotation                                                                                            `path:"@laser-bias-current" ygotAnnotation:"true"`
	LaserTemperature          *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature         `path:"laser-temperature" module:"openconfig-platform-transceiver"`
	ΛLaserTemperature         []ygot.Annotation                                                                                            `path:"@laser-temperature" ygotAnnotation:"true"`
	OutputFrequency           *uint64                                                                                                      `path:"output-frequency" module:"openconfig-platform-transceiver"`
	ΛOutputFrequency          []ygot.Annotation                                                                                            `path:"@output-frequency" ygotAnnotation:"true"`
	OutputPower               *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower              `path:"output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower              []ygot.Annotation                                                                                            `path:"@output-power" ygotAnnotation:"true"`
	RxCdrLol                  *bool                                                                                                        `path:"rx-cdr-lol" module:"openconfig-platform-transceiver"`
	ΛRxCdrLol                 []ygot.Annotation                                                                                            `path:"@rx-cdr-lol" ygotAnnotation:"true"`
	RxLos                     *bool                                                                                                        `path:"rx-los" module:"openconfig-platform-transceiver"`
	ΛRxLos                    []ygot.Annotation                                                                                            `path:"@rx-los" ygotAnnotation:"true"`
	TargetFrequencyDeviation  *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation `path:"target-frequency-deviation" module:"openconfig-platform-transceiver"`
	ΛTargetFrequencyDeviation []ygot.Annotation                                                                                            `path:"@target-frequency-deviation" ygotAnnotation:"true"`
	TargetOutputPower         *float64                                                                                                     `path:"target-output-power" module:"openconfig-platform-transceiver"`
	ΛTargetOutputPower        []ygot.Annotation                                                                                            `path:"@target-output-power" ygotAnnotation:"true"`
	TecCurrent                *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent               `path:"tec-current" module:"openconfig-platform-transceiver"`
	ΛTecCurrent               []ygot.Annotation                                                                                            `path:"@tec-current" ygotAnnotation:"true"`
	TxFailure                 *bool                                                                                                        `path:"tx-failure" module:"openconfig-platform-transceiver"`
	ΛTxFailure                []ygot.Annotation                                                                                            `path:"@tx-failure" ygotAnnotation:"true"`
	TxLaser                   *bool                                                                                                        `path:"tx-laser" module:"openconfig-platform-transceiver"`
	ΛTxLaser                  []ygot.Annotation                                                                                            `path:"@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) IsYANGGoStruct() {
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateInputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateLaserTemperature retrieves the value of the LaserTemperature field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateLaserTemperature() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature {
	if t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	t.LaserTemperature = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature{}
	return t.LaserTemperature
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower{}
	return t.OutputPower
}

// GetOrCreateTargetFrequencyDeviation retrieves the value of the TargetFrequencyDeviation field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateTargetFrequencyDeviation() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation {
	if t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	t.TargetFrequencyDeviation = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation{}
	return t.TargetFrequencyDeviation
}

// GetOrCreateTecCurrent retrieves the value of the TecCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateTecCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent {
	if t.TecCurrent != nil {
		return t.TecCurrent
	}
	t.TecCurrent = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent{}
	return t.TecCurrent
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetInputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetLaserTemperature returns the value of the LaserTemperature struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field LaserTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetLaserTemperature() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature {
	if t != nil && t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetTargetFrequencyDeviation returns the value of the TargetFrequencyDeviation struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field TargetFrequencyDeviation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTargetFrequencyDeviation() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation {
	if t != nil && t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	return nil
}

// GetTecCurrent returns the value of the TecCurrent struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field TecCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTecCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent {
	if t != nil && t.TecCurrent != nil {
		return t.TecCurrent
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserTemperature) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TargetFrequencyDeviation) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_TecCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State represents the /openconfig-platform/components/component/transceiver/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State struct {
	ΛMetadata               []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	ConnectorType           E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE                             `path:"connector-type" module:"openconfig-platform-transceiver"`
	ΛConnectorType          []ygot.Annotation                                                           `path:"@connector-type" ygotAnnotation:"true"`
	DateCode                *string                                                                     `path:"date-code" module:"openconfig-platform-transceiver"`
	ΛDateCode               []ygot.Annotation                                                           `path:"@date-code" ygotAnnotation:"true"`
	Enabled                 *bool                                                                       `path:"enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled                []ygot.Annotation                                                           `path:"@enabled" ygotAnnotation:"true"`
	EthernetPmd             E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                                `path:"ethernet-pmd" module:"openconfig-platform-transceiver"`
	ΛEthernetPmd            []ygot.Annotation                                                           `path:"@ethernet-pmd" ygotAnnotation:"true"`
	EthernetPmdPreconf      E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                                `path:"ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf     []ygot.Annotation                                                           `path:"@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FaultCondition          *bool                                                                       `path:"fault-condition" module:"openconfig-platform-transceiver"`
	ΛFaultCondition         []ygot.Annotation                                                           `path:"@fault-condition" ygotAnnotation:"true"`
	FecCorrectedBits        *uint64                                                                     `path:"fec-corrected-bits" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBits       []ygot.Annotation                                                           `path:"@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes       *uint64                                                                     `path:"fec-corrected-bytes" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBytes      []ygot.Annotation                                                           `path:"@fec-corrected-bytes" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigPlatformTypes_FEC_MODE_TYPE                                     `path:"fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode                []ygot.Annotation                                                           `path:"@fec-mode" ygotAnnotation:"true"`
	FecStatus               E_OpenconfigPlatformTypes_FEC_STATUS_TYPE                                   `path:"fec-status" module:"openconfig-platform-transceiver"`
	ΛFecStatus              []ygot.Annotation                                                           `path:"@fec-status" ygotAnnotation:"true"`
	FecUncorrectableBlocks  *uint64                                                                     `path:"fec-uncorrectable-blocks" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableBlocks []ygot.Annotation                                                           `path:"@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords   *uint64                                                                     `path:"fec-uncorrectable-words" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableWords  []ygot.Annotation                                                           `path:"@fec-uncorrectable-words" ygotAnnotation:"true"`
	FormFactor              E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                     `path:"form-factor" module:"openconfig-platform-transceiver"`
	ΛFormFactor             []ygot.Annotation                                                           `path:"@form-factor" ygotAnnotation:"true"`
	FormFactorPreconf       E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                     `path:"form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf      []ygot.Annotation                                                           `path:"@form-factor-preconf" ygotAnnotation:"true"`
	InputPower              *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower       `path:"input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower             []ygot.Annotation                                                           `path:"@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent        *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent `path:"laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent       []ygot.Annotation                                                           `path:"@laser-bias-current" ygotAnnotation:"true"`
	ModuleFunctionalType    E_OpenconfigTransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE               `path:"module-functional-type" module:"openconfig-platform-transceiver"`
	ΛModuleFunctionalType   []ygot.Annotation                                                           `path:"@module-functional-type" ygotAnnotation:"true"`
	OtnComplianceCode       E_OpenconfigTransportTypes_OTN_APPLICATION_CODE                             `path:"otn-compliance-code" module:"openconfig-platform-transceiver"`
	ΛOtnComplianceCode      []ygot.Annotation                                                           `path:"@otn-compliance-code" ygotAnnotation:"true"`
	OutputPower             *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower      `path:"output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower            []ygot.Annotation                                                           `path:"@output-power" ygotAnnotation:"true"`
	PostFecBer              *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer       `path:"post-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPostFecBer             []ygot.Annotation                                                           `path:"@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer               *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer        `path:"pre-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPreFecBer              []ygot.Annotation                                                           `path:"@pre-fec-ber" ygotAnnotation:"true"`
	Present                 E_OpenconfigPlatform_Components_Component_Transceiver_State_Present         `path:"present" module:"openconfig-platform-transceiver"`
	ΛPresent                []ygot.Annotation                                                           `path:"@present" ygotAnnotation:"true"`
	SerialNo                *string                                                                     `path:"serial-no" module:"openconfig-platform-transceiver"`
	ΛSerialNo               []ygot.Annotation                                                           `path:"@serial-no" ygotAnnotation:"true"`
	SonetSdhComplianceCode  E_OpenconfigTransportTypes_SONET_APPLICATION_CODE                           `path:"sonet-sdh-compliance-code" module:"openconfig-platform-transceiver"`
	ΛSonetSdhComplianceCode []ygot.Annotation                                                           `path:"@sonet-sdh-compliance-code" ygotAnnotation:"true"`
	SupplyVoltage           *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage    `path:"supply-voltage" module:"openconfig-platform-transceiver"`
	ΛSupplyVoltage          []ygot.Annotation                                                           `path:"@supply-voltage" ygotAnnotation:"true"`
	Vendor                  *string                                                                     `path:"vendor" module:"openconfig-platform-transceiver"`
	ΛVendor                 []ygot.Annotation                                                           `path:"@vendor" ygotAnnotation:"true"`
	VendorPart              *string                                                                     `path:"vendor-part" module:"openconfig-platform-transceiver"`
	ΛVendorPart             []ygot.Annotation                                                           `path:"@vendor-part" ygotAnnotation:"true"`
	VendorRev               *string                                                                     `path:"vendor-rev" module:"openconfig-platform-transceiver"`
	ΛVendorRev              []ygot.Annotation                                                           `path:"@vendor-rev" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateInputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpenconfigPlatform_Components_Component_Transceiver_State_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreatePostFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreatePreFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateSupplyVoltage retrieves the value of the SupplyVoltage field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateSupplyVoltage() *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage {
	if t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	t.SupplyVoltage = &OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage{}
	return t.SupplyVoltage
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetInputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetPostFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetPreFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetSupplyVoltage returns the value of the SupplyVoltage struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field SupplyVoltage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetSupplyVoltage() *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage {
	if t != nil && t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State.
func (*OpenconfigPlatform_Components_Component_Transceiver_State) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_InputPower represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_InputPower.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage represents the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_SupplyVoltage) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_Thresholds represents the /openconfig-platform/components/component/transceiver/thresholds YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Thresholds struct {
	ΛMetadata  []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Threshold  map[E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY]*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold `path:"threshold" module:"openconfig-platform-transceiver"`
	ΛThreshold []ygot.Annotation                                                                                                              `path:"@threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Thresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds) IsYANGGoStruct() {}

// NewThreshold creates a new entry in the Threshold list of the
// OpenconfigPlatform_Components_Component_Transceiver_Thresholds struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) NewThreshold(Severity E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY]*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold)
	}

	key := Severity

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Threshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Threshold", key)
	}

	t.Threshold[key] = &OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold{
		Severity: Severity,
	}

	return t.Threshold[key], nil
}

// RenameThreshold renames an entry in the list Threshold within
// the OpenconfigPlatform_Components_Component_Transceiver_Thresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) RenameThreshold(oldK, newK E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) error {
	if _, ok := t.Threshold[newK]; ok {
		return fmt.Errorf("key %v already exists in Threshold", newK)
	}

	e, ok := t.Threshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Threshold", oldK)
	}
	e.Severity = newK

	t.Threshold[newK] = e
	delete(t.Threshold, oldK)
	return nil
}

// GetOrCreateThresholdMap returns the list (map) from OpenconfigPlatform_Components_Component_Transceiver_Thresholds.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) GetOrCreateThresholdMap() map[E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY]*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold {
	if t.Threshold == nil {
		t.Threshold = make(map[E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY]*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold)
	}
	return t.Threshold
}

// GetOrCreateThreshold retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_Thresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) GetOrCreateThreshold(Severity E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold {

	key := Severity

	if v, ok := t.Threshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewThreshold(Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateThreshold got unexpected error: %v", err))
	}
	return v
}

// GetThreshold retrieves the value with the specified key from
// the Threshold map field of OpenconfigPlatform_Components_Component_Transceiver_Thresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) GetThreshold(Severity E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold {

	if t == nil {
		return nil
	}

	key := Severity

	if lm, ok := t.Threshold[key]; ok {
		return lm
	}
	return nil
}

// DeleteThreshold deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_Thresholds. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) DeleteThreshold(Severity E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	key := Severity

	delete(t.Threshold, key)
}

// AppendThreshold appends the supplied OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold struct to the
// list Threshold of OpenconfigPlatform_Components_Component_Transceiver_Thresholds. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) AppendThreshold(v *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) error {
	key := v.Severity

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY]*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold)
	}

	if _, ok := t.Threshold[key]; ok {
		return fmt.Errorf("duplicate key for list Threshold %v", key)
	}

	t.Threshold[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Thresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_Thresholds.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Severity  E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY                                `path:"severity" module:"openconfig-platform-transceiver"`
	ΛSeverity []ygot.Annotation                                                               `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State `path:"state" module:"openconfig-platform-transceiver"`
	ΛState    []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) GetState() *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State struct {
	ΛMetadata               []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	InputPowerLower         *float64                                         `path:"input-power-lower" module:"openconfig-platform-transceiver"`
	ΛInputPowerLower        []ygot.Annotation                                `path:"@input-power-lower" ygotAnnotation:"true"`
	InputPowerUpper         *float64                                         `path:"input-power-upper" module:"openconfig-platform-transceiver"`
	ΛInputPowerUpper        []ygot.Annotation                                `path:"@input-power-upper" ygotAnnotation:"true"`
	LaserBiasCurrentLower   *float64                                         `path:"laser-bias-current-lower" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrentLower  []ygot.Annotation                                `path:"@laser-bias-current-lower" ygotAnnotation:"true"`
	LaserBiasCurrentUpper   *float64                                         `path:"laser-bias-current-upper" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrentUpper  []ygot.Annotation                                `path:"@laser-bias-current-upper" ygotAnnotation:"true"`
	LaserTemperatureLower   *float64                                         `path:"laser-temperature-lower" module:"openconfig-platform-transceiver"`
	ΛLaserTemperatureLower  []ygot.Annotation                                `path:"@laser-temperature-lower" ygotAnnotation:"true"`
	LaserTemperatureUpper   *float64                                         `path:"laser-temperature-upper" module:"openconfig-platform-transceiver"`
	ΛLaserTemperatureUpper  []ygot.Annotation                                `path:"@laser-temperature-upper" ygotAnnotation:"true"`
	ModuleTemperatureLower  *float64                                         `path:"module-temperature-lower" module:"openconfig-platform-transceiver"`
	ΛModuleTemperatureLower []ygot.Annotation                                `path:"@module-temperature-lower" ygotAnnotation:"true"`
	ModuleTemperatureUpper  *float64                                         `path:"module-temperature-upper" module:"openconfig-platform-transceiver"`
	ΛModuleTemperatureUpper []ygot.Annotation                                `path:"@module-temperature-upper" ygotAnnotation:"true"`
	OutputPowerLower        *float64                                         `path:"output-power-lower" module:"openconfig-platform-transceiver"`
	ΛOutputPowerLower       []ygot.Annotation                                `path:"@output-power-lower" ygotAnnotation:"true"`
	OutputPowerUpper        *float64                                         `path:"output-power-upper" module:"openconfig-platform-transceiver"`
	ΛOutputPowerUpper       []ygot.Annotation                                `path:"@output-power-upper" ygotAnnotation:"true"`
	Severity                E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"severity" module:"openconfig-platform-transceiver"`
	ΛSeverity               []ygot.Annotation                                `path:"@severity" ygotAnnotation:"true"`
	SupplyVoltageLower      *float64                                         `path:"supply-voltage-lower" module:"openconfig-platform-transceiver"`
	ΛSupplyVoltageLower     []ygot.Annotation                                `path:"@supply-voltage-lower" ygotAnnotation:"true"`
	SupplyVoltageUpper      *float64                                         `path:"supply-voltage-upper" module:"openconfig-platform-transceiver"`
	ΛSupplyVoltageUpper     []ygot.Annotation                                `path:"@supply-voltage-upper" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State.
func (*OpenconfigPlatform_Components_Component_Transceiver_Thresholds_Threshold_State) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}
