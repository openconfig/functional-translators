/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-types.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/system/openconfig-alarm-types.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"committed" module:"openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"free" module:"openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"high-watermark" module:"openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"last-high-watermark" module:"openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"max-limit" module:"openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"name" module:"openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"used" module:"openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"used-threshold-upper-exceeded" module:"openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Config.
func (*OpenconfigPlatform_Components_Component_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard represents the /openconfig-platform/components/component/controller-card YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_ControllerCard_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_ControllerCard_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_ControllerCard_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_ControllerCard_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetOrCreateState() *OpenconfigPlatform_Components_Component_ControllerCard_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_ControllerCard_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_ControllerCard. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetConfig() *OpenconfigPlatform_Components_Component_ControllerCard_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_ControllerCard. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetState() *OpenconfigPlatform_Components_Component_ControllerCard_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard.
func (*OpenconfigPlatform_Components_Component_ControllerCard) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard_Config represents the /openconfig-platform/components/component/controller-card/config YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard_Config.
func (*OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard_State represents the /openconfig-platform/components/component/controller-card/state YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard_State.
func (*OpenconfigPlatform_Components_Component_ControllerCard_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Cpu_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Cpu_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Cpu_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Cpu_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu.
func (*OpenconfigPlatform_Components_Component_Cpu) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu_Config.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu_State.
func (*OpenconfigPlatform_Components_Component_Cpu_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fabric_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fabric_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fabric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fabric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric.
func (*OpenconfigPlatform_Components_Component_Fabric) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric_Config.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric_State.
func (*OpenconfigPlatform_Components_Component_Fabric_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fan_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fan_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan.
func (*OpenconfigPlatform_Components_Component_Fan) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan_Config.
func (*OpenconfigPlatform_Components_Component_Fan_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan_State.
func (*OpenconfigPlatform_Components_Component_Fan_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	ΛMetadata                []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	BackplaneFacingCapacity  *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity `path:"backplane-facing-capacity" module:"openconfig-platform-integrated-circuit"`
	ΛBackplaneFacingCapacity []ygot.Annotation                                                                  `path:"@backplane-facing-capacity" ygotAnnotation:"true"`
	Config                   *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config                  `path:"config" module:"openconfig-platform"`
	ΛConfig                  []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	Memory                   *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory                  `path:"memory" module:"openconfig-platform-integrated-circuit"`
	ΛMemory                  []ygot.Annotation                                                                  `path:"@memory" ygotAnnotation:"true"`
	PipelineCounters         *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters        `path:"pipeline-counters" module:"openconfig-platform-pipeline-counters"`
	ΛPipelineCounters        []ygot.Annotation                                                                  `path:"@pipeline-counters" ygotAnnotation:"true"`
	State                    *OpenconfigPlatform_Components_Component_IntegratedCircuit_State                   `path:"state" module:"openconfig-platform"`
	ΛState                   []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
	Utilization              *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization             `path:"utilization" module:"openconfig-platform"`
	ΛUtilization             []ygot.Annotation                                                                  `path:"@utilization" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateBackplaneFacingCapacity retrieves the value of the BackplaneFacingCapacity field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateBackplaneFacingCapacity() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity {
	if t.BackplaneFacingCapacity != nil {
		return t.BackplaneFacingCapacity
	}
	t.BackplaneFacingCapacity = &OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity{}
	return t.BackplaneFacingCapacity
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Config{}
	return t.Config
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateMemory() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory{}
	return t.Memory
}

// GetOrCreatePipelineCounters retrieves the value of the PipelineCounters field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreatePipelineCounters() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters {
	if t.PipelineCounters != nil {
		return t.PipelineCounters
	}
	t.PipelineCounters = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters{}
	return t.PipelineCounters
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_State{}
	return t.State
}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateUtilization() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization{}
	return t.Utilization
}

// GetBackplaneFacingCapacity returns the value of the BackplaneFacingCapacity struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field BackplaneFacingCapacity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetBackplaneFacingCapacity() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity {
	if t != nil && t.BackplaneFacingCapacity != nil {
		return t.BackplaneFacingCapacity
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetMemory() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPipelineCounters returns the value of the PipelineCounters struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field PipelineCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetPipelineCounters() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters {
	if t != nil && t.PipelineCounters != nil {
		return t.PipelineCounters
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUtilization returns the value of the Utilization struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetUtilization() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State `path:"state" module:"openconfig-platform-integrated-circuit"`
	ΛState    []ygot.Annotation                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvailablePct              *uint16           `path:"available-pct" module:"openconfig-platform-integrated-circuit"`
	ΛAvailablePct             []ygot.Annotation `path:"@available-pct" ygotAnnotation:"true"`
	ConsumedCapacity          *uint64           `path:"consumed-capacity" module:"openconfig-platform-integrated-circuit"`
	ΛConsumedCapacity         []ygot.Annotation `path:"@consumed-capacity" ygotAnnotation:"true"`
	Total                     *uint64           `path:"total" module:"openconfig-platform-integrated-circuit"`
	ΛTotal                    []ygot.Annotation `path:"@total" ygotAnnotation:"true"`
	TotalOperationalCapacity  *uint64           `path:"total-operational-capacity" module:"openconfig-platform-integrated-circuit"`
	ΛTotalOperationalCapacity []ygot.Annotation `path:"@total-operational-capacity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_BackplaneFacingCapacity_State) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Config.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State `path:"state" module:"openconfig-platform-integrated-circuit"`
	ΛState    []ygot.Annotation                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State represents the /openconfig-platform/components/component/integrated-circuit/memory/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State struct {
	ΛMetadata                []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CorrectedParityErrors    *uint64           `path:"corrected-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛCorrectedParityErrors   []ygot.Annotation `path:"@corrected-parity-errors" ygotAnnotation:"true"`
	TotalParityErrors        *uint64           `path:"total-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛTotalParityErrors       []ygot.Annotation `path:"@total-parity-errors" ygotAnnotation:"true"`
	UncorrectedParityErrors  *uint64           `path:"uncorrected-parity-errors" module:"openconfig-platform-integrated-circuit"`
	ΛUncorrectedParityErrors []ygot.Annotation `path:"@uncorrected-parity-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Memory_State) ΛBelongingModule() string {
	return "openconfig-platform-integrated-circuit"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters struct {
	ΛMetadata            []ygot.Annotation                                                                               `path:"@" ygotAnnotation:"true"`
	ControlPlaneTraffic  *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic `path:"control-plane-traffic" module:"openconfig-platform-pipeline-counters"`
	ΛControlPlaneTraffic []ygot.Annotation                                                                               `path:"@control-plane-traffic" ygotAnnotation:"true"`
	Drop                 *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop                `path:"drop" module:"openconfig-platform-pipeline-counters"`
	ΛDrop                []ygot.Annotation                                                                               `path:"@drop" ygotAnnotation:"true"`
	Errors               *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Errors              `path:"errors" module:"openconfig-platform-pipeline-counters"`
	ΛErrors              []ygot.Annotation                                                                               `path:"@errors" ygotAnnotation:"true"`
	Packet               *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Packet              `path:"packet" module:"openconfig-platform-pipeline-counters"`
	ΛPacket              []ygot.Annotation                                                                               `path:"@packet" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) IsYANGGoStruct() {}

// GetOrCreateControlPlaneTraffic retrieves the value of the ControlPlaneTraffic field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetOrCreateControlPlaneTraffic() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic {
	if t.ControlPlaneTraffic != nil {
		return t.ControlPlaneTraffic
	}
	t.ControlPlaneTraffic = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic{}
	return t.ControlPlaneTraffic
}

// GetOrCreateDrop retrieves the value of the Drop field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetOrCreateDrop() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop {
	if t.Drop != nil {
		return t.Drop
	}
	t.Drop = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop{}
	return t.Drop
}

// GetOrCreateErrors retrieves the value of the Errors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetOrCreateErrors() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Errors {
	if t.Errors != nil {
		return t.Errors
	}
	t.Errors = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Errors{}
	return t.Errors
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetOrCreatePacket() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Packet{}
	return t.Packet
}

// GetControlPlaneTraffic returns the value of the ControlPlaneTraffic struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters. If the receiver or the field ControlPlaneTraffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetControlPlaneTraffic() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic {
	if t != nil && t.ControlPlaneTraffic != nil {
		return t.ControlPlaneTraffic
	}
	return nil
}

// GetDrop returns the value of the Drop struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters. If the receiver or the field Drop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetDrop() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop {
	if t != nil && t.Drop != nil {
		return t.Drop
	}
	return nil
}

// GetErrors returns the value of the Errors struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters. If the receiver or the field Errors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetErrors() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Errors {
	if t != nil && t.Errors != nil {
		return t.Errors
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) GetPacket() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic struct {
	ΛMetadata []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State  `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState    []ygot.Annotation                                                                                      `path:"@state" ygotAnnotation:"true"`
	Vendor    *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor `path:"vendor" module:"openconfig-platform-pipeline-counters"`
	ΛVendor   []ygot.Annotation                                                                                      `path:"@vendor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State{}
	return t.State
}

// GetOrCreateVendor retrieves the value of the Vendor field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) GetOrCreateVendor() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor {
	if t.Vendor != nil {
		return t.Vendor
	}
	t.Vendor = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor{}
	return t.Vendor
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVendor returns the value of the Vendor struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic. If the receiver or the field Vendor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) GetVendor() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor {
	if t != nil && t.Vendor != nil {
		return t.Vendor
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DroppedAggregate       *uint64           `path:"dropped-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛDroppedAggregate      []ygot.Annotation `path:"@dropped-aggregate" ygotAnnotation:"true"`
	DroppedBytesAggregate  *uint64           `path:"dropped-bytes-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛDroppedBytesAggregate []ygot.Annotation `path:"@dropped-bytes-aggregate" ygotAnnotation:"true"`
	QueuedAggregate        *uint64           `path:"queued-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛQueuedAggregate       []ygot.Annotation `path:"@queued-aggregate" ygotAnnotation:"true"`
	QueuedBytesAggregate   *uint64           `path:"queued-bytes-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛQueuedBytesAggregate  []ygot.Annotation `path:"@queued-bytes-aggregate" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_State) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop struct {
	ΛMetadata           []ygot.Annotation                                                                                   `path:"@" ygotAnnotation:"true"`
	FabricBlock         *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock        `path:"fabric-block" module:"openconfig-platform-pipeline-counters"`
	ΛFabricBlock        []ygot.Annotation                                                                                   `path:"@fabric-block" ygotAnnotation:"true"`
	HostInterfaceBlock  *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock `path:"host-interface-block" module:"openconfig-platform-pipeline-counters"`
	ΛHostInterfaceBlock []ygot.Annotation                                                                                   `path:"@host-interface-block" ygotAnnotation:"true"`
	InterfaceBlock      *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock     `path:"interface-block" module:"openconfig-platform-pipeline-counters"`
	ΛInterfaceBlock     []ygot.Annotation                                                                                   `path:"@interface-block" ygotAnnotation:"true"`
	LookupBlock         *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock        `path:"lookup-block" module:"openconfig-platform-pipeline-counters"`
	ΛLookupBlock        []ygot.Annotation                                                                                   `path:"@lookup-block" ygotAnnotation:"true"`
	QueueingBlock       *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock      `path:"queueing-block" module:"openconfig-platform-pipeline-counters"`
	ΛQueueingBlock      []ygot.Annotation                                                                                   `path:"@queueing-block" ygotAnnotation:"true"`
	State               *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_State              `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState              []ygot.Annotation                                                                                   `path:"@state" ygotAnnotation:"true"`
	Vendor              *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_Vendor             `path:"vendor" module:"openconfig-platform-pipeline-counters"`
	ΛVendor             []ygot.Annotation                                                                                   `path:"@vendor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) IsYANGGoStruct() {
}

// GetOrCreateFabricBlock retrieves the value of the FabricBlock field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateFabricBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock {
	if t.FabricBlock != nil {
		return t.FabricBlock
	}
	t.FabricBlock = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock{}
	return t.FabricBlock
}

// GetOrCreateHostInterfaceBlock retrieves the value of the HostInterfaceBlock field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateHostInterfaceBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock {
	if t.HostInterfaceBlock != nil {
		return t.HostInterfaceBlock
	}
	t.HostInterfaceBlock = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock{}
	return t.HostInterfaceBlock
}

// GetOrCreateInterfaceBlock retrieves the value of the InterfaceBlock field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateInterfaceBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock {
	if t.InterfaceBlock != nil {
		return t.InterfaceBlock
	}
	t.InterfaceBlock = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock{}
	return t.InterfaceBlock
}

// GetOrCreateLookupBlock retrieves the value of the LookupBlock field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateLookupBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock {
	if t.LookupBlock != nil {
		return t.LookupBlock
	}
	t.LookupBlock = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock{}
	return t.LookupBlock
}

// GetOrCreateQueueingBlock retrieves the value of the QueueingBlock field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateQueueingBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock {
	if t.QueueingBlock != nil {
		return t.QueueingBlock
	}
	t.QueueingBlock = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock{}
	return t.QueueingBlock
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_State{}
	return t.State
}

// GetOrCreateVendor retrieves the value of the Vendor field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetOrCreateVendor() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_Vendor {
	if t.Vendor != nil {
		return t.Vendor
	}
	t.Vendor = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_Vendor{}
	return t.Vendor
}

// GetFabricBlock returns the value of the FabricBlock struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field FabricBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetFabricBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock {
	if t != nil && t.FabricBlock != nil {
		return t.FabricBlock
	}
	return nil
}

// GetHostInterfaceBlock returns the value of the HostInterfaceBlock struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field HostInterfaceBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetHostInterfaceBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock {
	if t != nil && t.HostInterfaceBlock != nil {
		return t.HostInterfaceBlock
	}
	return nil
}

// GetInterfaceBlock returns the value of the InterfaceBlock struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field InterfaceBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetInterfaceBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock {
	if t != nil && t.InterfaceBlock != nil {
		return t.InterfaceBlock
	}
	return nil
}

// GetLookupBlock returns the value of the LookupBlock struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field LookupBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetLookupBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock {
	if t != nil && t.LookupBlock != nil {
		return t.LookupBlock
	}
	return nil
}

// GetQueueingBlock returns the value of the QueueingBlock struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field QueueingBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetQueueingBlock() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock {
	if t != nil && t.QueueingBlock != nil {
		return t.QueueingBlock
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVendor returns the value of the Vendor struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop. If the receiver or the field Vendor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) GetVendor() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_Vendor {
	if t != nil && t.Vendor != nil {
		return t.Vendor
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock struct {
	ΛMetadata []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState    []ygot.Annotation                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FabricAggregate   *uint64           `path:"fabric-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛFabricAggregate  []ygot.Annotation `path:"@fabric-aggregate" ygotAnnotation:"true"`
	InHighPriority    *uint64           `path:"in-high-priority" module:"openconfig-platform-pipeline-counters"`
	ΛInHighPriority   []ygot.Annotation `path:"@in-high-priority" ygotAnnotation:"true"`
	InLowPriority     *uint64           `path:"in-low-priority" module:"openconfig-platform-pipeline-counters"`
	ΛInLowPriority    []ygot.Annotation `path:"@in-low-priority" ygotAnnotation:"true"`
	LostPackets       *uint64           `path:"lost-packets" module:"openconfig-platform-pipeline-counters"`
	ΛLostPackets      []ygot.Annotation `path:"@lost-packets" ygotAnnotation:"true"`
	OutHighPriority   *uint64           `path:"out-high-priority" module:"openconfig-platform-pipeline-counters"`
	ΛOutHighPriority  []ygot.Annotation `path:"@out-high-priority" ygotAnnotation:"true"`
	OutLowPriority    *uint64           `path:"out-low-priority" module:"openconfig-platform-pipeline-counters"`
	ΛOutLowPriority   []ygot.Annotation `path:"@out-low-priority" ygotAnnotation:"true"`
	Oversubscription  *uint64           `path:"oversubscription" module:"openconfig-platform-pipeline-counters"`
	ΛOversubscription []ygot.Annotation `path:"@oversubscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_State) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock struct {
	ΛMetadata []ygot.Annotation                                                                                         `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState    []ygot.Annotation                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FragmentPunt      *uint64           `path:"fragment-punt" module:"openconfig-platform-pipeline-counters"`
	ΛFragmentPunt     []ygot.Annotation `path:"@fragment-punt" ygotAnnotation:"true"`
	HostAggregate     *uint64           `path:"host-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛHostAggregate    []ygot.Annotation `path:"@host-aggregate" ygotAnnotation:"true"`
	InHighPriority    *uint64           `path:"in-high-priority" module:"openconfig-platform-pipeline-counters"`
	ΛInHighPriority   []ygot.Annotation `path:"@in-high-priority" ygotAnnotation:"true"`
	InLowPriority     *uint64           `path:"in-low-priority" module:"openconfig-platform-pipeline-counters"`
	ΛInLowPriority    []ygot.Annotation `path:"@in-low-priority" ygotAnnotation:"true"`
	OutHighPriority   *uint64           `path:"out-high-priority" module:"openconfig-platform-pipeline-counters"`
	ΛOutHighPriority  []ygot.Annotation `path:"@out-high-priority" ygotAnnotation:"true"`
	OutLowPriority    *uint64           `path:"out-low-priority" module:"openconfig-platform-pipeline-counters"`
	ΛOutLowPriority   []ygot.Annotation `path:"@out-low-priority" ygotAnnotation:"true"`
	Oversubscription  *uint64           `path:"oversubscription" module:"openconfig-platform-pipeline-counters"`
	ΛOversubscription []ygot.Annotation `path:"@oversubscription" ygotAnnotation:"true"`
	RateLimit         *uint64           `path:"rate-limit" module:"openconfig-platform-pipeline-counters"`
	ΛRateLimit        []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_State) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock struct {
	ΛMetadata []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState    []ygot.Annotation                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InDrops           *uint64           `path:"in-drops" module:"openconfig-platform-pipeline-counters"`
	ΛInDrops          []ygot.Annotation `path:"@in-drops" ygotAnnotation:"true"`
	OutDrops          *uint64           `path:"out-drops" module:"openconfig-platform-pipeline-counters"`
	ΛOutDrops         []ygot.Annotation `path:"@out-drops" ygotAnnotation:"true"`
	Oversubscription  *uint64           `path:"oversubscription" module:"openconfig-platform-pipeline-counters"`
	ΛOversubscription []ygot.Annotation `path:"@oversubscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_State) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock struct {
	ΛMetadata []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State `path:"state" module:"openconfig-platform-pipeline-counters"`
	ΛState    []ygot.Annotation                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AclDrops                *uint64           `path:"acl-drops" module:"openconfig-platform-pipeline-counters"`
	ΛAclDrops               []ygot.Annotation `path:"@acl-drops" ygotAnnotation:"true"`
	ForwardingPolicy        *uint64           `path:"forwarding-policy" module:"openconfig-platform-pipeline-counters"`
	ΛForwardingPolicy       []ygot.Annotation `path:"@forwarding-policy" ygotAnnotation:"true"`
	FragmentTotalDrops      *uint64           `path:"fragment-total-drops" module:"openconfig-platform-pipeline-counters"`
	ΛFragmentTotalDrops     []ygot.Annotation `path:"@fragment-total-drops" ygotAnnotation:"true"`
	IncorrectSoftwareState  *uint64           `path:"incorrect-software-state" module:"openconfig-platform-pipeline-counters"`
	ΛIncorrectSoftwareState []ygot.Annotation `path:"@incorrect-software-state" ygotAnnotation:"true"`
	InvalidPacket           *uint64           `path:"invalid-packet" module:"openconfig-platform-pipeline-counters"`
	ΛInvalidPacket          []ygot.Annotation `path:"@invalid-packet" ygotAnnotation:"true"`
	LookupAggregate         *uint64           `path:"lookup-aggregate" module:"openconfig-platform-pipeline-counters"`
	ΛLookupAggregate        []ygot.Annotation `path:"@lookup-aggregate" ygotAnnotation:"true"`
	NoLabel                 *uint64           `path:"no-label" module:"openconfig-platform-pipeline-counters"`
	ΛNoLabel                []ygot.Annotation `path:"@no-label" ygotAnnotation:"true"`
	NoNexthop               *uint64           `path:"no-nexthop" module:"openconfig-platform-pipeline-counters"`
	ΛNoNexthop              []ygot.Annotation `path:"@no-nexthop" ygotAnnotation:"true"`
	NoRoute                 *uint64           `path:"no-route" module:"openconfig-platform-pipeline-counters"`
	ΛNoRoute                []ygot.Annotation `path:"@no-route" ygotAnnotation:"true"`
	Oversubscription        *uint64           `path:"oversubscription" module:"openconfig-platform-pipeline-counters"`
	ΛOversubscription       []ygot.Annotation `path:"@oversubscription" ygotAnnotation:"true"`
	RateLimit               *uint64           `path:"rate-limit" module:"openconfig-platform-pipeline-counters"`
	ΛRateLimit              []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_State) ΛBelongingModule() string {
	return "openconfig-platform-pipeline-counters"
}
