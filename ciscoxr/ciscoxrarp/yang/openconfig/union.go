/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-types.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/system/openconfig-alarm-types.yang
  - public/release/models/interfaces/openconfig-if-ip.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
)

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64].
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64]
	Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionBool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionBool) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionFloat64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionFloat64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionInt64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionInt64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionString
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionString) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionUint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionUint64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case bool:
		return UnionBool(v), nil
	case float64:
		return UnionFloat64(v), nil
	case int64:
		return UnionInt64(v), nil
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64].
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64]
	Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionBool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionBool) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionFloat64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionFloat64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionInt64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionInt64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionString
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionString) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionUint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionUint64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case bool:
		return UnionBool(v), nil
	case float64:
		return UnionFloat64(v), nil
	case int64:
		return UnionInt64(v), nil
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
}

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT].
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]
	Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union ensures that E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union ensures that E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
}
