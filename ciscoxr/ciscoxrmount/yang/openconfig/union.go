/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/system/openconfig-system.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
)

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union ensures that UnionUint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union ensures that UnionUint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union ensures that UnionUint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union ensures that UnionUint8
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union ensures that E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union ensures that E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union ensures that UnionUint32
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union ensures that UnionUint32
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union ensures that UnionUint32
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union ensures that UnionUint32
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that UnionString
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (UnionString) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that UnionString
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (UnionString) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that UnionString
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (UnionString) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union()
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that UnionString
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (UnionString) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {
}

// Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union ensures that UnionUint16
// implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union() {
}

// To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) To_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union(i interface{}) (OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union, error) {
	if v, ok := i.(OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-defined-sets/defined-sets/port-sets/port-set/config/port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union()
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union() {
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union ensures that UnionString
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union interface.
func (UnionString) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union() {
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union ensures that UnionUint16
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union interface.
func (UnionUint16) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union() {
}

// To_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) To_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union(i interface{}) (OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union, error) {
	if v, ok := i.(OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-defined-sets/defined-sets/port-sets/port-set/state/port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union()
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union() {
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union ensures that UnionString
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union interface.
func (UnionString) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union() {
}

// Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union ensures that UnionUint16
// implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union interface.
func (UnionUint16) Documentation_for_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union() {
}

// To_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) To_OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union(i interface{}) (OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union, error) {
	if v, ok := i.(OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) To_OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union()
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union ensures that UnionString
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface.
func (UnionString) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union() {
}

// Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union ensures that UnionUint16
// implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union interface.
func (UnionUint16) Documentation_for_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union() {
}

// To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) To_OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union(i interface{}) (OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union, error) {
	if v, ok := i.(OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-keychain/keychains/keychain/config/tolerance within the YANG schema.
// Union type can be one of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, UnionUint32].
type OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union interface {
	// Union type can be one of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, UnionUint32]
	Documentation_for_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union()
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union ensures that E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum
// implements the OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union interface.
func (E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union() {
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union ensures that UnionUint32
// implements the OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union interface.
func (UnionUint32) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union() {}

// To_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigKeychain_Keychains_Keychain_Config) To_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union(i interface{}) (OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union, error) {
	if v, ok := i.(OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union, unknown union type, got: %T, want any of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, uint32]", i, i)
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-keychain/keychains/keychain/keys/key/key-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint64].
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union interface {
	// Union type can be one of [UnionString, UnionUint64]
	Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union()
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union ensures that UnionString
// implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union interface.
func (UnionString) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union() {
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union ensures that UnionUint64
// implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union interface.
func (UnionUint64) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union() {
}

// To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union(i interface{}) (OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union, error) {
	if v, ok := i.(OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union, unknown union type, got: %T, want any of [string, uint64]", i, i)
}

// To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union(i interface{}) (OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union, error) {
	if v, ok := i.(OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union, unknown union type, got: %T, want any of [string, uint64]", i, i)
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-keychain/keychains/keychain/keys/key/state/key-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint64].
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union interface {
	// Union type can be one of [UnionString, UnionUint64]
	Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union()
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union ensures that UnionString
// implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union interface.
func (UnionString) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union() {
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union ensures that UnionUint64
// implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union interface.
func (UnionUint64) Documentation_for_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union() {
}

// To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) To_OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union(i interface{}) (OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union, error) {
	if v, ok := i.(OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union, unknown union type, got: %T, want any of [string, uint64]", i, i)
}

// OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-keychain/keychains/keychain/state/tolerance within the YANG schema.
// Union type can be one of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, UnionUint32].
type OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union interface {
	// Union type can be one of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, UnionUint32]
	Documentation_for_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union()
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union ensures that E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum
// implements the OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union interface.
func (E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum) Documentation_for_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union() {
}

// Documentation_for_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union ensures that UnionUint32
// implements the OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union interface.
func (UnionUint32) Documentation_for_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union() {}

// To_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigKeychain_Keychains_Keychain_State) To_OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union(i interface{}) (OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union, error) {
	if v, ok := i.(OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union, unknown union type, got: %T, want any of [E_OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Enum, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/priority within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum, uint8]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations_BandwidthReservation_State_Priority_Enum, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_ExplicitRouteObjects_ExplicitRouteObject_State_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_RecordRouteObjects_RecordRouteObject_State_ReportedLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelIn_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions_Session_State_LabelOut_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/mpls-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounters_AggregateSidCounter_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/mpls-label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interfaces_Interface_SidCounters_SidCounter_State_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv4_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_Config_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union ensures that E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union interface.
func (E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union ensures that UnionUint8
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union interface.
func (UnionUint8) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Ipv6_State_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union ensures that E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union interface.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_Config_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_ETHERTYPE, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union ensures that E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union interface.
func (E_OpenconfigPacketMatchTypes_ETHERTYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_L2_State_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_Config_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port within the YANG schema.
// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union interface {
	// Union type can be one of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, UnionString, UnionUint16]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union ensures that E_OpenconfigPacketMatchTypes_PortNumRange_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union interface.
func (E_OpenconfigPacketMatchTypes_PortNumRange_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union ensures that UnionUint16
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union interface.
func (UnionUint16) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding_Policies_Policy_Rules_Rule_Transport_State_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_PortNumRange_Enum, string, uint16]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_Config_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Neighbors_Neighbor_RouteReflector_State_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_Config_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/state/route-reflector-cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_PeerGroups_PeerGroup_RouteReflector_State_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/origin within the YANG schema.
// Union type can be one of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union interface {
	// Union type can be one of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union ensures that E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union interface.
func (E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union, unknown union type, got: %T, want any of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin_Union, unknown union type, got: %T, want any of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/origin within the YANG schema.
// Union type can be one of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union interface {
	// Union type can be one of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union ensures that E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union interface.
func (E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union, unknown union type, got: %T, want any of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin_Union, unknown union type, got: %T, want any of [E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_SegmentLists_SegmentList_Segments_Segment_State_Sid_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_AttrSets_AttrSet_TunnelEncapsulation_Tunnels_Tunnel_Subtlvs_Subtlv_State_BindingSid_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/communities/community/state/community within the YANG schema.
// Union type can be one of [E_OpenconfigBgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union interface {
	// Union type can be one of [E_OpenconfigBgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union ensures that E_OpenconfigBgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union interface.
func (E_OpenconfigBgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_Communities_Community_State_Community_Union, unknown union type, got: %T, want any of [E_OpenconfigBgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/ext-communities/ext-community/state/ext-community within the YANG schema.
// Union type can be one of [Binary, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union interface {
	// Union type can be one of [Binary, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union ensures that Binary
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union interface.
func (Binary) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case []byte:
		return Binary(v), nil
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Bgp_Rib_ExtCommunities_ExtCommunity_State_ExtCommunity_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_AllocatedDynamicLocal_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_State_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_AdjacencySids_AdjacencySid_Config_SidId_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_Config_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_FlexAlgoPrefixSids_FlexAlgoPrefixSid_State_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_Config_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/sid-id within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_Levels_Level_AfiSafi_Af_SegmentRouting_PrefixSids_PrefixSid_State_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/config/load-balancing-weight within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/state/load-balancing-weight within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_State_LoadBalancingWeight_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Interfaces_Interface_WeightedEcmp_Config_LoadBalancingWeight_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Isis_Levels_Level_LinkStateDatabase_Lsp_Tlvs_Tlv_RouterCapabilities_Capability_Subtlvs_Subtlv_SegmentRoutingCapability_SrgbDescriptors_SrgbDescriptor_State_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_Config_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_LocalAggregates_Aggregate_State_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/identifier within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/extended-link/state/link-data within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_ExtendedLink_State_LinkData_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union ensures that E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union interface.
func (E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union ensures that E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union interface.
func (E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Enum, E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union ensures that E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union interface.
func (E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union ensures that E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union interface.
func (E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union ensures that E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union interface.
func (E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Enum, E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/state/link-data within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/state/identifier within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state/identifier within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/identifier within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/state/identifier within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop within the YANG schema.
// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union interface {
	// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union ensures that E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union interface.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/next-hop within the YANG schema.
// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union interface {
	// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union ensures that E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union interface.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/set-tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid within the YANG schema.
// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union interface {
	// Union type can be one of [E_OpenconfigMplsTypes_MplsLabel_Enum, UnionString, UnionUint32]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union ensures that E_OpenconfigMplsTypes_MplsLabel_Enum
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union interface.
func (E_OpenconfigMplsTypes_MplsLabel_Enum) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union ensures that UnionUint32
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union interface.
func (UnionUint32) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsTypes_MplsLabel_Enum, string, uint32]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/config/next-hop within the YANG schema.
// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union interface {
	// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union ensures that E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union interface.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/state/next-hop within the YANG schema.
// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString].
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union interface {
	// Union type can be one of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, UnionString]
	Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union()
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union ensures that E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union interface.
func (E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union() {
}

// Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union ensures that UnionString
// implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union interface.
func (UnionString) Documentation_for_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union() {
}

// To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) To_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union(i interface{}) (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union, error) {
	if v, ok := i.(OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64].
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64]
	Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionBool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionBool) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionFloat64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionFloat64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionInt64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionInt64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionString
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionString) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that UnionUint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (UnionUint64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case bool:
		return UnionBool(v), nil
	case float64:
		return UnionFloat64(v), nil
	case int64:
		return UnionInt64(v), nil
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64].
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	// Union type can be one of [UnionBool, UnionFloat64, UnionInt64, UnionString, UnionUint64]
	Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionBool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionBool) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionFloat64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionFloat64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionInt64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionInt64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionString
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionString) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that UnionUint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (UnionUint64) Documentation_for_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case bool:
		return UnionBool(v), nil
	case float64:
		return UnionFloat64(v), nil
	case int64:
		return UnionInt64(v), nil
	case string:
		return UnionString(v), nil
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
}

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT].
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	// Union type can be one of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]
	Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union ensures that E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union ensures that E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Documentation_for_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	if v, ok := i.(OpenconfigPlatform_Components_Component_State_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union()
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union ensures that UnionString
// implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union interface.
func (UnionString) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union() {
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union ensures that UnionUint32
// implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union() {
}

// To_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) To_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union(i interface{}) (OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union, error) {
	if v, ok := i.(OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union()
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union ensures that UnionString
// implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union interface.
func (UnionString) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union() {
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union ensures that UnionUint32
// implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union interface.
func (UnionUint32) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union() {
}

// To_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) To_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union(i interface{}) (OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union, error) {
	if v, ok := i.(OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union()
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union ensures that UnionString
// implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union interface.
func (UnionString) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union() {
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union ensures that UnionUint32
// implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union() {
}

// To_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) To_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union(i interface{}) (OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union, error) {
	if v, ok := i.(OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union()
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union ensures that UnionString
// implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union interface.
func (UnionString) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union() {
}

// Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union ensures that UnionUint32
// implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union interface.
func (UnionUint32) Documentation_for_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union() {
}

// To_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) To_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union(i interface{}) (OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union, error) {
	if v, ok := i.(OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/state/accounting-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/state/authentication-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, UnionString].
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/state/role within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, UnionString].
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/state/authorization-method within the YANG schema.
// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString].
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	// Union type can be one of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, UnionString]
	Documentation_for_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Documentation_for_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// Documentation_for_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that UnionString
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
// Union type can be one of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, UnionString].
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface {
	// Union type can be one of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, UnionString]
	Documentation_for_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union()
}

// Documentation_for_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Documentation_for_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {
}

// Documentation_for_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that UnionString
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {}

// To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/index within the YANG schema.
// Union type can be one of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum, UnionUint32].
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface {
	// Union type can be one of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum, UnionUint32]
	Documentation_for_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union()
}

// Documentation_for_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum) Documentation_for_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {
}

// Documentation_for_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that UnionUint32
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (UnionUint32) Documentation_for_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Cpus_Cpu_State_Index_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum, uint32]", i, i)
}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_Cpus_Cpu_State_Index_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index_Enum, uint32]", i, i)
}

// OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/config/license-data within the YANG schema.
// Union type can be one of [Binary, UnionString].
type OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface {
	// Union type can be one of [Binary, UnionString]
	Documentation_for_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union()
}

// Documentation_for_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that Binary
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (Binary) Documentation_for_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {
}

// Documentation_for_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union ensures that UnionString
// implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union() {
}

// To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) To_OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case []byte:
		return Binary(v), nil
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
}

// OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/license/licenses/license/state/license-data within the YANG schema.
// Union type can be one of [Binary, UnionString].
type OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface {
	// Union type can be one of [Binary, UnionString]
	Documentation_for_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union()
}

// Documentation_for_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that Binary
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (Binary) Documentation_for_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {
}

// Documentation_for_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union ensures that UnionString
// implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union interface.
func (UnionString) Documentation_for_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union() {
}

// To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_License_Licenses_License_State) To_OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union(i interface{}) (OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, error) {
	if v, ok := i.(OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case []byte:
		return Binary(v), nil
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
}
