/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/system/openconfig-system.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv struct {
	ΛMetadata                    []ygot.Annotation                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	InformationalCapabilities    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities   `path:"informational-capabilities" module:"openconfig-network-instance"`
	ΛInformationalCapabilities   []ygot.Annotation                                                                                                                                                                                `path:"@informational-capabilities" ygotAnnotation:"true"`
	NodeAdministrativeTags       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags      `path:"node-administrative-tags" module:"openconfig-network-instance"`
	ΛNodeAdministrativeTags      []ygot.Annotation                                                                                                                                                                                `path:"@node-administrative-tags" ygotAnnotation:"true"`
	SegmentRoutingAlgorithm      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm     `path:"segment-routing-algorithm" module:"openconfig-network-instance"`
	ΛSegmentRoutingAlgorithm     []ygot.Annotation                                                                                                                                                                                `path:"@segment-routing-algorithm" ygotAnnotation:"true"`
	SegmentRoutingSidLabelRange  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange `path:"segment-routing-sid-label-range" module:"openconfig-network-instance"`
	ΛSegmentRoutingSidLabelRange []ygot.Annotation                                                                                                                                                                                `path:"@segment-routing-sid-label-range" ygotAnnotation:"true"`
	State                        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State                       `path:"state" module:"openconfig-network-instance"`
	ΛState                       []ygot.Annotation                                                                                                                                                                                `path:"@state" ygotAnnotation:"true"`
	UnknownTlv                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv                  `path:"unknown-tlv" module:"openconfig-network-instance"`
	ΛUnknownTlv                  []ygot.Annotation                                                                                                                                                                                `path:"@unknown-tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) IsYANGGoStruct() {
}

// GetOrCreateInformationalCapabilities retrieves the value of the InformationalCapabilities field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateInformationalCapabilities() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities {
	if t.InformationalCapabilities != nil {
		return t.InformationalCapabilities
	}
	t.InformationalCapabilities = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities{}
	return t.InformationalCapabilities
}

// GetOrCreateNodeAdministrativeTags retrieves the value of the NodeAdministrativeTags field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateNodeAdministrativeTags() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags {
	if t.NodeAdministrativeTags != nil {
		return t.NodeAdministrativeTags
	}
	t.NodeAdministrativeTags = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags{}
	return t.NodeAdministrativeTags
}

// GetOrCreateSegmentRoutingAlgorithm retrieves the value of the SegmentRoutingAlgorithm field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateSegmentRoutingAlgorithm() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm {
	if t.SegmentRoutingAlgorithm != nil {
		return t.SegmentRoutingAlgorithm
	}
	t.SegmentRoutingAlgorithm = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm{}
	return t.SegmentRoutingAlgorithm
}

// GetOrCreateSegmentRoutingSidLabelRange retrieves the value of the SegmentRoutingSidLabelRange field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateSegmentRoutingSidLabelRange() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange {
	if t.SegmentRoutingSidLabelRange != nil {
		return t.SegmentRoutingSidLabelRange
	}
	t.SegmentRoutingSidLabelRange = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange{}
	return t.SegmentRoutingSidLabelRange
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State{}
	return t.State
}

// GetOrCreateUnknownTlv retrieves the value of the UnknownTlv field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetOrCreateUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv {
	if t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	t.UnknownTlv = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv{}
	return t.UnknownTlv
}

// GetInformationalCapabilities returns the value of the InformationalCapabilities struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field InformationalCapabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetInformationalCapabilities() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities {
	if t != nil && t.InformationalCapabilities != nil {
		return t.InformationalCapabilities
	}
	return nil
}

// GetNodeAdministrativeTags returns the value of the NodeAdministrativeTags struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field NodeAdministrativeTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetNodeAdministrativeTags() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags {
	if t != nil && t.NodeAdministrativeTags != nil {
		return t.NodeAdministrativeTags
	}
	return nil
}

// GetSegmentRoutingAlgorithm returns the value of the SegmentRoutingAlgorithm struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field SegmentRoutingAlgorithm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetSegmentRoutingAlgorithm() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm {
	if t != nil && t.SegmentRoutingAlgorithm != nil {
		return t.SegmentRoutingAlgorithm
	}
	return nil
}

// GetSegmentRoutingSidLabelRange returns the value of the SegmentRoutingSidLabelRange struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field SegmentRoutingSidLabelRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetSegmentRoutingSidLabelRange() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange {
	if t != nil && t.SegmentRoutingSidLabelRange != nil {
		return t.SegmentRoutingSidLabelRange
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnknownTlv returns the value of the UnknownTlv struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv. If the receiver or the field UnknownTlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) GetUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv {
	if t != nil && t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/informational-capabilities YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/informational-capabilities/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExperimentalTe          *bool             `path:"experimental-te" module:"openconfig-network-instance"`
	ΛExperimentalTe         []ygot.Annotation `path:"@experimental-te" ygotAnnotation:"true"`
	GracefulRestartCapable  *bool             `path:"graceful-restart-capable" module:"openconfig-network-instance"`
	ΛGracefulRestartCapable []ygot.Annotation `path:"@graceful-restart-capable" ygotAnnotation:"true"`
	GracefulRestartHelper   *bool             `path:"graceful-restart-helper" module:"openconfig-network-instance"`
	ΛGracefulRestartHelper  []ygot.Annotation `path:"@graceful-restart-helper" ygotAnnotation:"true"`
	PointToPointOverLan     *bool             `path:"point-to-point-over-lan" module:"openconfig-network-instance"`
	ΛPointToPointOverLan    []ygot.Annotation `path:"@point-to-point-over-lan" ygotAnnotation:"true"`
	StubRouter              *bool             `path:"stub-router" module:"openconfig-network-instance"`
	ΛStubRouter             []ygot.Annotation `path:"@stub-router" ygotAnnotation:"true"`
	TrafficEngineering      *bool             `path:"traffic-engineering" module:"openconfig-network-instance"`
	ΛTrafficEngineering     []ygot.Annotation `path:"@traffic-engineering" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_InformationalCapabilities_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/node-administrative-tags YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/node-administrative-tags/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdministrativeTags  []uint32          `path:"administrative-tags" module:"openconfig-network-instance"`
	ΛAdministrativeTags []ygot.Annotation `path:"@administrative-tags" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_NodeAdministrativeTags_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-algorithm YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-algorithm/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State struct {
	ΛMetadata            []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	SupportedAlgorithms  []E_OpenconfigOspfTypes_SR_ALGORITHM `path:"supported-algorithms" module:"openconfig-network-instance"`
	ΛSupportedAlgorithms []ygot.Annotation                    `path:"@supported-algorithms" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingAlgorithm_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Tlvs      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs `path:"tlvs" module:"openconfig-network-instance"`
	ΛTlvs     []ygot.Annotation                                                                                                                                                                                     `path:"@tlvs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) IsYANGGoStruct() {
}

// GetOrCreateTlvs retrieves the value of the Tlvs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) GetOrCreateTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs {
	if t.Tlvs != nil {
		return t.Tlvs
	}
	t.Tlvs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs{}
	return t.Tlvs
}

// GetTlvs returns the value of the Tlvs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange. If the receiver or the field Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) GetTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs {
	if t != nil && t.Tlvs != nil {
		return t.Tlvs
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	Tlv       []*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv `path:"tlv" module:"openconfig-network-instance"`
	ΛTlv      []ygot.Annotation                                                                                                                                                                                           `path:"@tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv struct {
	ΛMetadata   []ygot.Annotation                                                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	SidLabel    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel   `path:"sid-label" module:"openconfig-network-instance"`
	ΛSidLabel   []ygot.Annotation                                                                                                                                                                                                    `path:"@sid-label" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State      `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                                                                                                                                    `path:"@state" ygotAnnotation:"true"`
	UnknownTlv  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv `path:"unknown-tlv" module:"openconfig-network-instance"`
	ΛUnknownTlv []ygot.Annotation                                                                                                                                                                                                    `path:"@unknown-tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) IsYANGGoStruct() {
}

// GetOrCreateSidLabel retrieves the value of the SidLabel field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetOrCreateSidLabel() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel {
	if t.SidLabel != nil {
		return t.SidLabel
	}
	t.SidLabel = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel{}
	return t.SidLabel
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State{}
	return t.State
}

// GetOrCreateUnknownTlv retrieves the value of the UnknownTlv field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetOrCreateUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv {
	if t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	t.UnknownTlv = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv{}
	return t.UnknownTlv
}

// GetSidLabel returns the value of the SidLabel struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv. If the receiver or the field SidLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetSidLabel() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel {
	if t != nil && t.SidLabel != nil {
		return t.SidLabel
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnknownTlv returns the value of the UnknownTlv struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv. If the receiver or the field UnknownTlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) GetUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv {
	if t != nil && t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/sid-label YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/sid-label/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State struct {
	ΛMetadata   []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	EntryType   E_OpenconfigOspfTypes_SrSidType `path:"entry-type" module:"openconfig-network-instance"`
	ΛEntryType  []ygot.Annotation               `path:"@entry-type" ygotAnnotation:"true"`
	FirstValue  *uint32                         `path:"first-value" module:"openconfig-network-instance"`
	ΛFirstValue []ygot.Annotation               `path:"@first-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_SidLabel_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State struct {
	ΛMetadata  []ygot.Annotation                                                                                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	RangeSize  *uint32                                                                                                                                                                                                                   `path:"range-size" module:"openconfig-network-instance"`
	ΛRangeSize []ygot.Annotation                                                                                                                                                                                                         `path:"@range-size" ygotAnnotation:"true"`
	Type       OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State_Type_Union `path:"type" module:"openconfig-network-instance"`
	ΛType      []ygot.Annotation                                                                                                                                                                                                         `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/unknown-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/unknown-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_SegmentRoutingSidLabelRange_Tlvs_Tlv_UnknownTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Type      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State_Type_Union `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                                                                                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/unknown-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                     `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/unknown-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_RouterInformation_Tlvs_Tlv_UnknownTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Scope     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State_Scope `path:"scope" module:"openconfig-network-instance"`
	ΛScope    []ygot.Annotation                                                                                                                                      `path:"@scope" ygotAnnotation:"true"`
	Type      E_OpenconfigOspfTypes_OSPF_OPAQUE_LSA_TYPE                                                                                                             `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                                                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Tlvs      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs `path:"tlvs" module:"openconfig-network-instance"`
	ΛTlvs     []ygot.Annotation                                                                                                                                                 `path:"@tlvs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) IsYANGGoStruct() {
}

// GetOrCreateTlvs retrieves the value of the Tlvs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) GetOrCreateTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs {
	if t.Tlvs != nil {
		return t.Tlvs
	}
	t.Tlvs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs{}
	return t.Tlvs
}

// GetTlvs returns the value of the Tlvs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering. If the receiver or the field Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) GetTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs {
	if t != nil && t.Tlvs != nil {
		return t.Tlvs
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Tlv       []*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv `path:"tlv" module:"openconfig-network-instance"`
	ΛTlv      []ygot.Annotation                                                                                                                                                       `path:"@tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Link           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link          `path:"link" module:"openconfig-network-instance"`
	ΛLink          []ygot.Annotation                                                                                                                                                                   `path:"@link" ygotAnnotation:"true"`
	NodeAttribute  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute `path:"node-attribute" module:"openconfig-network-instance"`
	ΛNodeAttribute []ygot.Annotation                                                                                                                                                                   `path:"@node-attribute" ygotAnnotation:"true"`
	RouterAddress  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress `path:"router-address" module:"openconfig-network-instance"`
	ΛRouterAddress []ygot.Annotation                                                                                                                                                                   `path:"@router-address" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State         `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                                                   `path:"@state" ygotAnnotation:"true"`
	UnknownTlv     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv    `path:"unknown-tlv" module:"openconfig-network-instance"`
	ΛUnknownTlv    []ygot.Annotation                                                                                                                                                                   `path:"@unknown-tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) IsYANGGoStruct() {
}

// GetOrCreateLink retrieves the value of the Link field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetOrCreateLink() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link {
	if t.Link != nil {
		return t.Link
	}
	t.Link = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link{}
	return t.Link
}

// GetOrCreateNodeAttribute retrieves the value of the NodeAttribute field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetOrCreateNodeAttribute() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute {
	if t.NodeAttribute != nil {
		return t.NodeAttribute
	}
	t.NodeAttribute = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute{}
	return t.NodeAttribute
}

// GetOrCreateRouterAddress retrieves the value of the RouterAddress field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetOrCreateRouterAddress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress {
	if t.RouterAddress != nil {
		return t.RouterAddress
	}
	t.RouterAddress = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress{}
	return t.RouterAddress
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State{}
	return t.State
}

// GetOrCreateUnknownTlv retrieves the value of the UnknownTlv field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetOrCreateUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv {
	if t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	t.UnknownTlv = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv{}
	return t.UnknownTlv
}

// GetLink returns the value of the Link struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv. If the receiver or the field Link is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetLink() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link {
	if t != nil && t.Link != nil {
		return t.Link
	}
	return nil
}

// GetNodeAttribute returns the value of the NodeAttribute struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv. If the receiver or the field NodeAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetNodeAttribute() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute {
	if t != nil && t.NodeAttribute != nil {
		return t.NodeAttribute
	}
	return nil
}

// GetRouterAddress returns the value of the RouterAddress struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv. If the receiver or the field RouterAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetRouterAddress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress {
	if t != nil && t.RouterAddress != nil {
		return t.RouterAddress
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnknownTlv returns the value of the UnknownTlv struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv. If the receiver or the field UnknownTlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) GetUnknownTlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv {
	if t != nil && t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	SubTlvs   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs `path:"sub-tlvs" module:"openconfig-network-instance"`
	ΛSubTlvs  []ygot.Annotation                                                                                                                                                                  `path:"@sub-tlvs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) IsYANGGoStruct() {
}

// GetOrCreateSubTlvs retrieves the value of the SubTlvs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) GetOrCreateSubTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs {
	if t.SubTlvs != nil {
		return t.SubTlvs
	}
	t.SubTlvs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs{}
	return t.SubTlvs
}

// GetSubTlvs returns the value of the SubTlvs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link. If the receiver or the field SubTlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) GetSubTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs {
	if t != nil && t.SubTlvs != nil {
		return t.SubTlvs
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	SubTlv    []*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv `path:"sub-tlv" module:"openconfig-network-instance"`
	ΛSubTlv   []ygot.Annotation                                                                                                                                                                           `path:"@sub-tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv struct {
	ΛMetadata             []ygot.Annotation                                                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	AdministrativeGroups  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups `path:"administrative-groups" module:"openconfig-network-instance"`
	ΛAdministrativeGroups []ygot.Annotation                                                                                                                                                                                              `path:"@administrative-groups" ygotAnnotation:"true"`
	State                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State                `path:"state" module:"openconfig-network-instance"`
	ΛState                []ygot.Annotation                                                                                                                                                                                              `path:"@state" ygotAnnotation:"true"`
	UnknownSubtlv         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv        `path:"unknown-subtlv" module:"openconfig-network-instance"`
	ΛUnknownSubtlv        []ygot.Annotation                                                                                                                                                                                              `path:"@unknown-subtlv" ygotAnnotation:"true"`
	UnreservedBandwidths  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths `path:"unreserved-bandwidths" module:"openconfig-network-instance"`
	ΛUnreservedBandwidths []ygot.Annotation                                                                                                                                                                                              `path:"@unreserved-bandwidths" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) IsYANGGoStruct() {
}

// GetOrCreateAdministrativeGroups retrieves the value of the AdministrativeGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetOrCreateAdministrativeGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups {
	if t.AdministrativeGroups != nil {
		return t.AdministrativeGroups
	}
	t.AdministrativeGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups{}
	return t.AdministrativeGroups
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State{}
	return t.State
}

// GetOrCreateUnknownSubtlv retrieves the value of the UnknownSubtlv field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetOrCreateUnknownSubtlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv {
	if t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	t.UnknownSubtlv = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv{}
	return t.UnknownSubtlv
}

// GetOrCreateUnreservedBandwidths retrieves the value of the UnreservedBandwidths field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetOrCreateUnreservedBandwidths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths {
	if t.UnreservedBandwidths != nil {
		return t.UnreservedBandwidths
	}
	t.UnreservedBandwidths = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths{}
	return t.UnreservedBandwidths
}

// GetAdministrativeGroups returns the value of the AdministrativeGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv. If the receiver or the field AdministrativeGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetAdministrativeGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups {
	if t != nil && t.AdministrativeGroups != nil {
		return t.AdministrativeGroups
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnknownSubtlv returns the value of the UnknownSubtlv struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv. If the receiver or the field UnknownSubtlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetUnknownSubtlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv {
	if t != nil && t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	return nil
}

// GetUnreservedBandwidths returns the value of the UnreservedBandwidths struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv. If the receiver or the field UnreservedBandwidths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) GetUnreservedBandwidths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths {
	if t != nil && t.UnreservedBandwidths != nil {
		return t.UnreservedBandwidths
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/administrative-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups struct {
	ΛMetadata   []ygot.Annotation                                                                                                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	AdminGroup  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup `path:"admin-group" module:"openconfig-network-instance"`
	ΛAdminGroup []ygot.Annotation                                                                                                                                                                                                                   `path:"@admin-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) NewAdminGroup(BitIndex uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup)
	}

	key := BitIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup{
		BitIndex: &BitIndex,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) RenameAdminGroup(oldK, newK uint8) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.BitIndex = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) GetOrCreateAdminGroupMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup {
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup)
	}
	return t.AdminGroup
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) GetOrCreateAdminGroup(BitIndex uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup {

	key := BitIndex

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(BitIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) GetAdminGroup(BitIndex uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup {

	if t == nil {
		return nil
	}

	key := BitIndex

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) DeleteAdminGroup(BitIndex uint8) {
	key := BitIndex

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup struct to the
// list AdminGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) AppendAdminGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) error {
	if v.BitIndex == nil {
		return fmt.Errorf("invalid nil key received for BitIndex")
	}

	key := *v.BitIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/administrative-groups/admin-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                               `path:"@" ygotAnnotation:"true"`
	BitIndex  *uint8                                                                                                                                                                                                                          `path:"bit-index" module:"openconfig-network-instance"`
	ΛBitIndex []ygot.Annotation                                                                                                                                                                                                               `path:"@bit-index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BitIndex == nil {
		return nil, fmt.Errorf("nil value for key BitIndex")
	}

	return map[string]interface{}{
		"bit-index": *t.BitIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/administrative-groups/admin-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BitIndex  *uint8            `path:"bit-index" module:"openconfig-network-instance"`
	ΛBitIndex []ygot.Annotation `path:"@bit-index" ygotAnnotation:"true"`
	Set       *bool             `path:"set" module:"openconfig-network-instance"`
	ΛSet      []ygot.Annotation `path:"@set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_AdministrativeGroups_AdminGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State struct {
	ΛMetadata                   []ygot.Annotation                                                                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	LinkId                      *string                                                                                                                                                                                                   `path:"link-id" module:"openconfig-network-instance"`
	ΛLinkId                     []ygot.Annotation                                                                                                                                                                                         `path:"@link-id" ygotAnnotation:"true"`
	LinkType                    E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_LinkType `path:"link-type" module:"openconfig-network-instance"`
	ΛLinkType                   []ygot.Annotation                                                                                                                                                                                         `path:"@link-type" ygotAnnotation:"true"`
	LocalIpAddress              []string                                                                                                                                                                                                  `path:"local-ip-address" module:"openconfig-network-instance"`
	ΛLocalIpAddress             []ygot.Annotation                                                                                                                                                                                         `path:"@local-ip-address" ygotAnnotation:"true"`
	MaximumBandwidth            Binary                                                                                                                                                                                                    `path:"maximum-bandwidth" module:"openconfig-network-instance"`
	ΛMaximumBandwidth           []ygot.Annotation                                                                                                                                                                                         `path:"@maximum-bandwidth" ygotAnnotation:"true"`
	MaximumReservableBandwidth  Binary                                                                                                                                                                                                    `path:"maximum-reservable-bandwidth" module:"openconfig-network-instance"`
	ΛMaximumReservableBandwidth []ygot.Annotation                                                                                                                                                                                         `path:"@maximum-reservable-bandwidth" ygotAnnotation:"true"`
	Metric                      *uint32                                                                                                                                                                                                   `path:"metric" module:"openconfig-network-instance"`
	ΛMetric                     []ygot.Annotation                                                                                                                                                                                         `path:"@metric" ygotAnnotation:"true"`
	RemoteIpAddress             []string                                                                                                                                                                                                  `path:"remote-ip-address" module:"openconfig-network-instance"`
	ΛRemoteIpAddress            []ygot.Annotation                                                                                                                                                                                         `path:"@remote-ip-address" ygotAnnotation:"true"`
	Type                        OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State_Type_Union `path:"type" module:"openconfig-network-instance"`
	ΛType                       []ygot.Annotation                                                                                                                                                                                         `path:"@type" ygotAnnotation:"true"`
	UnknownType                 *uint16                                                                                                                                                                                                   `path:"unknown-type" module:"openconfig-network-instance"`
	ΛUnknownType                []ygot.Annotation                                                                                                                                                                                         `path:"@unknown-type" ygotAnnotation:"true"`
	UnknownValue                Binary                                                                                                                                                                                                    `path:"unknown-value" module:"openconfig-network-instance"`
	ΛUnknownValue               []ygot.Annotation                                                                                                                                                                                         `path:"@unknown-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unknown-subtlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unknown-subtlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnknownSubtlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unreserved-bandwidths YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths struct {
	ΛMetadata            []ygot.Annotation                                                                                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	UnreservedBandwidth  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth `path:"unreserved-bandwidth" module:"openconfig-network-instance"`
	ΛUnreservedBandwidth []ygot.Annotation                                                                                                                                                                                                                            `path:"@unreserved-bandwidth" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) IsYANGGoStruct() {
}

// NewUnreservedBandwidth creates a new entry in the UnreservedBandwidth list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) NewUnreservedBandwidth(Priority uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnreservedBandwidth == nil {
		t.UnreservedBandwidth = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth)
	}

	key := Priority

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnreservedBandwidth[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnreservedBandwidth", key)
	}

	t.UnreservedBandwidth[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth{
		Priority: &Priority,
	}

	return t.UnreservedBandwidth[key], nil
}

// RenameUnreservedBandwidth renames an entry in the list UnreservedBandwidth within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) RenameUnreservedBandwidth(oldK, newK uint8) error {
	if _, ok := t.UnreservedBandwidth[newK]; ok {
		return fmt.Errorf("key %v already exists in UnreservedBandwidth", newK)
	}

	e, ok := t.UnreservedBandwidth[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnreservedBandwidth", oldK)
	}
	e.Priority = &newK

	t.UnreservedBandwidth[newK] = e
	delete(t.UnreservedBandwidth, oldK)
	return nil
}

// GetOrCreateUnreservedBandwidthMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) GetOrCreateUnreservedBandwidthMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth {
	if t.UnreservedBandwidth == nil {
		t.UnreservedBandwidth = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth)
	}
	return t.UnreservedBandwidth
}

// GetOrCreateUnreservedBandwidth retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) GetOrCreateUnreservedBandwidth(Priority uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth {

	key := Priority

	if v, ok := t.UnreservedBandwidth[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnreservedBandwidth(Priority)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnreservedBandwidth got unexpected error: %v", err))
	}
	return v
}

// GetUnreservedBandwidth retrieves the value with the specified key from
// the UnreservedBandwidth map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) GetUnreservedBandwidth(Priority uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth {

	if t == nil {
		return nil
	}

	key := Priority

	if lm, ok := t.UnreservedBandwidth[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnreservedBandwidth deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) DeleteUnreservedBandwidth(Priority uint8) {
	key := Priority

	delete(t.UnreservedBandwidth, key)
}

// AppendUnreservedBandwidth appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth struct to the
// list UnreservedBandwidth of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) AppendUnreservedBandwidth(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) error {
	if v.Priority == nil {
		return fmt.Errorf("invalid nil key received for Priority")
	}

	key := *v.Priority

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnreservedBandwidth == nil {
		t.UnreservedBandwidth = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth)
	}

	if _, ok := t.UnreservedBandwidth[key]; ok {
		return fmt.Errorf("duplicate key for list UnreservedBandwidth %v", key)
	}

	t.UnreservedBandwidth[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unreserved-bandwidths/unreserved-bandwidth YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Priority  *uint8                                                                                                                                                                                                                                   `path:"priority" module:"openconfig-network-instance"`
	ΛPriority []ygot.Annotation                                                                                                                                                                                                                        `path:"@priority" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Priority == nil {
		return nil, fmt.Errorf("nil value for key Priority")
	}

	return map[string]interface{}{
		"priority": *t.Priority,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unreserved-bandwidths/unreserved-bandwidth/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Priority             *uint8            `path:"priority" module:"openconfig-network-instance"`
	ΛPriority            []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
	UnreservedBandwidth  Binary            `path:"unreserved-bandwidth" module:"openconfig-network-instance"`
	ΛUnreservedBandwidth []ygot.Annotation `path:"@unreserved-bandwidth" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_Link_SubTlvs_SubTlv_UnreservedBandwidths_UnreservedBandwidth_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	SubTlvs   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs `path:"sub-tlvs" module:"openconfig-network-instance"`
	ΛSubTlvs  []ygot.Annotation                                                                                                                                                                           `path:"@sub-tlvs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) IsYANGGoStruct() {
}

// GetOrCreateSubTlvs retrieves the value of the SubTlvs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) GetOrCreateSubTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs {
	if t.SubTlvs != nil {
		return t.SubTlvs
	}
	t.SubTlvs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs{}
	return t.SubTlvs
}

// GetSubTlvs returns the value of the SubTlvs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute. If the receiver or the field SubTlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) GetSubTlvs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs {
	if t != nil && t.SubTlvs != nil {
		return t.SubTlvs
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	SubTlv    []*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv `path:"sub-tlv" module:"openconfig-network-instance"`
	ΛSubTlv   []ygot.Annotation                                                                                                                                                                                    `path:"@sub-tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State         `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                                                                                `path:"@state" ygotAnnotation:"true"`
	UnknownSubtlv  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv `path:"unknown-subtlv" module:"openconfig-network-instance"`
	ΛUnknownSubtlv []ygot.Annotation                                                                                                                                                                                                `path:"@unknown-subtlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State{}
	return t.State
}

// GetOrCreateUnknownSubtlv retrieves the value of the UnknownSubtlv field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) GetOrCreateUnknownSubtlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv {
	if t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	t.UnknownSubtlv = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv{}
	return t.UnknownSubtlv
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnknownSubtlv returns the value of the UnknownSubtlv struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv. If the receiver or the field UnknownSubtlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) GetUnknownSubtlv() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv {
	if t != nil && t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State struct {
	ΛMetadata           []ygot.Annotation                                                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	LocalIpv4Addresses  []string                                                                                                                                                                                                           `path:"local-ipv4-addresses" module:"openconfig-network-instance"`
	ΛLocalIpv4Addresses []ygot.Annotation                                                                                                                                                                                                  `path:"@local-ipv4-addresses" ygotAnnotation:"true"`
	LocalIpv6Addresses  []string                                                                                                                                                                                                           `path:"local-ipv6-addresses" module:"openconfig-network-instance"`
	ΛLocalIpv6Addresses []ygot.Annotation                                                                                                                                                                                                  `path:"@local-ipv6-addresses" ygotAnnotation:"true"`
	Type                OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State_Type_Union `path:"type" module:"openconfig-network-instance"`
	ΛType               []ygot.Annotation                                                                                                                                                                                                  `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/unknown-subtlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/unknown-subtlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_NodeAttribute_SubTlvs_SubTlv_UnknownSubtlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/router-address YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/router-address/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-network-instance"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_RouterAddress_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Type      E_OpenconfigOspfTypes_OSPF_TE_LSA_TLV_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                          `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/unknown-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/unknown-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_TrafficEngineering_Tlvs_Tlv_UnknownTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/unknown-tlv YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv struct {
	ΛMetadata []ygot.Annotation                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/unknown-tlv/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Length    *uint16           `path:"length" module:"openconfig-network-instance"`
	ΛLength   []ygot.Annotation `path:"@length" ygotAnnotation:"true"`
	Type      *uint16           `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value     Binary            `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_OpaqueLsa_UnknownTlv_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State          `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                                                        `path:"@state" ygotAnnotation:"true"`
	TypesOfService  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService `path:"types-of-service" module:"openconfig-network-instance"`
	ΛTypesOfService []ygot.Annotation                                                                                                                                        `path:"@types-of-service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State{}
	return t.State
}

// GetOrCreateTypesOfService retrieves the value of the TypesOfService field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) GetOrCreateTypesOfService() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService {
	if t.TypesOfService != nil {
		return t.TypesOfService
	}
	t.TypesOfService = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService{}
	return t.TypesOfService
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTypesOfService returns the value of the TypesOfService struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa. If the receiver or the field TypesOfService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) GetTypesOfService() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService {
	if t != nil && t.TypesOfService != nil {
		return t.TypesOfService
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State struct {
	ΛMetadata         []ygot.Annotation                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	LinkData          OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State_LinkData_Union `path:"link-data" module:"openconfig-network-instance"`
	ΛLinkData         []ygot.Annotation                                                                                                                                             `path:"@link-data" ygotAnnotation:"true"`
	LinkId            *string                                                                                                                                                       `path:"link-id" module:"openconfig-network-instance"`
	ΛLinkId           []ygot.Annotation                                                                                                                                             `path:"@link-id" ygotAnnotation:"true"`
	Metric            *uint16                                                                                                                                                       `path:"metric" module:"openconfig-network-instance"`
	ΛMetric           []ygot.Annotation                                                                                                                                             `path:"@metric" ygotAnnotation:"true"`
	NumberLinks       *uint16                                                                                                                                                       `path:"number-links" module:"openconfig-network-instance"`
	ΛNumberLinks      []ygot.Annotation                                                                                                                                             `path:"@number-links" ygotAnnotation:"true"`
	NumberTosMetrics  *uint16                                                                                                                                                       `path:"number-tos-metrics" module:"openconfig-network-instance"`
	ΛNumberTosMetrics []ygot.Annotation                                                                                                                                             `path:"@number-tos-metrics" ygotAnnotation:"true"`
	Type              E_OpenconfigOspfTypes_ROUTER_LSA_TYPES                                                                                                                        `path:"type" module:"openconfig-network-instance"`
	ΛType             []ygot.Annotation                                                                                                                                             `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/types-of-service YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	TypeOfService  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService `path:"type-of-service" module:"openconfig-network-instance"`
	ΛTypeOfService []ygot.Annotation                                                                                                                                                                `path:"@type-of-service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) IsYANGGoStruct() {
}

// NewTypeOfService creates a new entry in the TypeOfService list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) NewTypeOfService(Tos uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService)
	}

	key := Tos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeOfService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeOfService", key)
	}

	t.TypeOfService[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService{
		Tos: &Tos,
	}

	return t.TypeOfService[key], nil
}

// RenameTypeOfService renames an entry in the list TypeOfService within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) RenameTypeOfService(oldK, newK uint8) error {
	if _, ok := t.TypeOfService[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeOfService", newK)
	}

	e, ok := t.TypeOfService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeOfService", oldK)
	}
	e.Tos = &newK

	t.TypeOfService[newK] = e
	delete(t.TypeOfService, oldK)
	return nil
}

// GetOrCreateTypeOfServiceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) GetOrCreateTypeOfServiceMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService {
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService)
	}
	return t.TypeOfService
}

// GetOrCreateTypeOfService retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) GetOrCreateTypeOfService(Tos uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService {

	key := Tos

	if v, ok := t.TypeOfService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeOfService(Tos)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeOfService got unexpected error: %v", err))
	}
	return v
}

// GetTypeOfService retrieves the value with the specified key from
// the TypeOfService map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) GetTypeOfService(Tos uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService {

	if t == nil {
		return nil
	}

	key := Tos

	if lm, ok := t.TypeOfService[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeOfService deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) DeleteTypeOfService(Tos uint8) {
	key := Tos

	delete(t.TypeOfService, key)
}

// AppendTypeOfService appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService struct to the
// list TypeOfService of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) AppendTypeOfService(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) error {
	if v.Tos == nil {
		return fmt.Errorf("invalid nil key received for Tos")
	}

	key := *v.Tos

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService)
	}

	if _, ok := t.TypeOfService[key]; ok {
		return fmt.Errorf("duplicate key for list TypeOfService %v", key)
	}

	t.TypeOfService[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/types-of-service/type-of-service YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                            `path:"@state" ygotAnnotation:"true"`
	Tos       *uint8                                                                                                                                                                       `path:"tos" module:"openconfig-network-instance"`
	ΛTos      []ygot.Annotation                                                                                                                                                            `path:"@tos" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tos == nil {
		return nil, fmt.Errorf("nil value for key Tos")
	}

	return map[string]interface{}{
		"tos": *t.Tos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/types-of-service/type-of-service/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Metric    *uint16           `path:"metric" module:"openconfig-network-instance"`
	ΛMetric   []ygot.Annotation `path:"@metric" ygotAnnotation:"true"`
	Tos       *uint8            `path:"tos" module:"openconfig-network-instance"`
	ΛTos      []ygot.Annotation `path:"@tos" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_RouterLsa_TypesOfService_TypeOfService_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdvertisingRouter  *string           `path:"advertising-router" module:"openconfig-network-instance"`
	ΛAdvertisingRouter []ygot.Annotation `path:"@advertising-router" ygotAnnotation:"true"`
	Age                *uint16           `path:"age" module:"openconfig-network-instance"`
	ΛAge               []ygot.Annotation `path:"@age" ygotAnnotation:"true"`
	Checksum           *uint16           `path:"checksum" module:"openconfig-network-instance"`
	ΛChecksum          []ygot.Annotation `path:"@checksum" ygotAnnotation:"true"`
	LinkStateId        *string           `path:"link-state-id" module:"openconfig-network-instance"`
	ΛLinkStateId       []ygot.Annotation `path:"@link-state-id" ygotAnnotation:"true"`
	SequenceNumber     *int32            `path:"sequence-number" module:"openconfig-network-instance"`
	ΛSequenceNumber    []ygot.Annotation `path:"@sequence-number" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State          `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                                                         `path:"@state" ygotAnnotation:"true"`
	TypesOfService  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService `path:"types-of-service" module:"openconfig-network-instance"`
	ΛTypesOfService []ygot.Annotation                                                                                                                                         `path:"@types-of-service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State{}
	return t.State
}

// GetOrCreateTypesOfService retrieves the value of the TypesOfService field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) GetOrCreateTypesOfService() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService {
	if t.TypesOfService != nil {
		return t.TypesOfService
	}
	t.TypesOfService = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService{}
	return t.TypesOfService
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTypesOfService returns the value of the TypesOfService struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa. If the receiver or the field TypesOfService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) GetTypesOfService() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService {
	if t != nil && t.TypesOfService != nil {
		return t.TypesOfService
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Metric       *uint16           `path:"metric" module:"openconfig-network-instance"`
	ΛMetric      []ygot.Annotation `path:"@metric" ygotAnnotation:"true"`
	NetworkMask  *uint8            `path:"network-mask" module:"openconfig-network-instance"`
	ΛNetworkMask []ygot.Annotation `path:"@network-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa/types-of-service YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	TypeOfService  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService `path:"type-of-service" module:"openconfig-network-instance"`
	ΛTypeOfService []ygot.Annotation                                                                                                                                                                 `path:"@type-of-service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) IsYANGGoStruct() {
}

// NewTypeOfService creates a new entry in the TypeOfService list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) NewTypeOfService(Tos uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService)
	}

	key := Tos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeOfService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeOfService", key)
	}

	t.TypeOfService[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService{
		Tos: &Tos,
	}

	return t.TypeOfService[key], nil
}

// RenameTypeOfService renames an entry in the list TypeOfService within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) RenameTypeOfService(oldK, newK uint8) error {
	if _, ok := t.TypeOfService[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeOfService", newK)
	}

	e, ok := t.TypeOfService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeOfService", oldK)
	}
	e.Tos = &newK

	t.TypeOfService[newK] = e
	delete(t.TypeOfService, oldK)
	return nil
}

// GetOrCreateTypeOfServiceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) GetOrCreateTypeOfServiceMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService {
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService)
	}
	return t.TypeOfService
}

// GetOrCreateTypeOfService retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) GetOrCreateTypeOfService(Tos uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService {

	key := Tos

	if v, ok := t.TypeOfService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeOfService(Tos)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeOfService got unexpected error: %v", err))
	}
	return v
}

// GetTypeOfService retrieves the value with the specified key from
// the TypeOfService map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) GetTypeOfService(Tos uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService {

	if t == nil {
		return nil
	}

	key := Tos

	if lm, ok := t.TypeOfService[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeOfService deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) DeleteTypeOfService(Tos uint8) {
	key := Tos

	delete(t.TypeOfService, key)
}

// AppendTypeOfService appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService struct to the
// list TypeOfService of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) AppendTypeOfService(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) error {
	if v.Tos == nil {
		return fmt.Errorf("invalid nil key received for Tos")
	}

	key := *v.Tos

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService)
	}

	if _, ok := t.TypeOfService[key]; ok {
		return fmt.Errorf("duplicate key for list TypeOfService %v", key)
	}

	t.TypeOfService[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa/types-of-service/type-of-service YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                             `path:"@state" ygotAnnotation:"true"`
	Tos       *uint8                                                                                                                                                                        `path:"tos" module:"openconfig-network-instance"`
	ΛTos      []ygot.Annotation                                                                                                                                                             `path:"@tos" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tos == nil {
		return nil, fmt.Errorf("nil value for key Tos")
	}

	return map[string]interface{}{
		"tos": *t.Tos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa/types-of-service/type-of-service/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Metric    *uint16           `path:"metric" module:"openconfig-network-instance"`
	ΛMetric   []ygot.Annotation `path:"@metric" ygotAnnotation:"true"`
	Tos       *uint8            `path:"tos" module:"openconfig-network-instance"`
	ΛTos      []ygot.Annotation `path:"@tos" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_Lsas_Lsa_SummaryLsa_TypesOfService_TypeOfService_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State struct {
	ΛMetadata []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	Type      E_OpenconfigOspfTypes_OSPF_LSA_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                   `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_LsaTypes_LsaType_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State struct {
	ΛMetadata   []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	Identifier  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State_Identifier_Union `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier []ygot.Annotation                                                                                                           `path:"@identifier" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Lsdb_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/mpls YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls struct {
	ΛMetadata []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/mpls/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config struct {
	ΛMetadata                  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TrafficEngineeringEnabled  *bool             `path:"traffic-engineering-enabled" module:"openconfig-network-instance"`
	ΛTrafficEngineeringEnabled []ygot.Annotation `path:"@traffic-engineering-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/mpls/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State struct {
	ΛMetadata                  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TrafficEngineeringEnabled  *bool             `path:"traffic-engineering-enabled" module:"openconfig-network-instance"`
	ΛTrafficEngineeringEnabled []ygot.Annotation `path:"@traffic-engineering-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Mpls_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State struct {
	ΛMetadata   []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	Identifier  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State_Identifier_Union `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier []ygot.Annotation                                                                                                      `path:"@identifier" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/virtual-links YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks struct {
	ΛMetadata    []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	VirtualLink  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink `path:"virtual-link" module:"openconfig-network-instance"`
	ΛVirtualLink []ygot.Annotation                                                                                                                    `path:"@virtual-link" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) IsYANGGoStruct() {
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) NewVirtualLink(RemoteRouterId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink)
	}

	key := RemoteRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink{
		RemoteRouterId: &RemoteRouterId,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) RenameVirtualLink(oldK, newK string) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RemoteRouterId = &newK

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLinkMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) GetOrCreateVirtualLinkMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink {
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink)
	}
	return t.VirtualLink
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) GetOrCreateVirtualLink(RemoteRouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink {

	key := RemoteRouterId

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RemoteRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) GetVirtualLink(RemoteRouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink {

	if t == nil {
		return nil
	}

	key := RemoteRouterId

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) DeleteVirtualLink(RemoteRouterId string) {
	key := RemoteRouterId

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink struct to the
// list VirtualLink of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) AppendVirtualLink(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) error {
	if v.RemoteRouterId == nil {
		return fmt.Errorf("invalid nil key received for RemoteRouterId")
	}

	key := *v.RemoteRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/virtual-links/virtual-link YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink struct {
	ΛMetadata       []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig         []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	RemoteRouterId  *string                                                                                                                          `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId []ygot.Annotation                                                                                                                `path:"@remote-router-id" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State  `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteRouterId == nil {
		return nil, fmt.Errorf("nil value for key RemoteRouterId")
	}

	return map[string]interface{}{
		"remote-router-id": *t.RemoteRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/virtual-links/virtual-link/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RemoteRouterId  *string           `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId []ygot.Annotation `path:"@remote-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/virtual-links/virtual-link/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State struct {
	ΛMetadata                  []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	AdjacencyState             E_OpenconfigOspfTypes_OSPF_NEIGHBOR_STATE `path:"adjacency-state" module:"openconfig-network-instance"`
	ΛAdjacencyState            []ygot.Annotation                         `path:"@adjacency-state" ygotAnnotation:"true"`
	BackupDesignatedRouter     *string                                   `path:"backup-designated-router" module:"openconfig-network-instance"`
	ΛBackupDesignatedRouter    []ygot.Annotation                         `path:"@backup-designated-router" ygotAnnotation:"true"`
	DeadTime                   *uint64                                   `path:"dead-time" module:"openconfig-network-instance"`
	ΛDeadTime                  []ygot.Annotation                         `path:"@dead-time" ygotAnnotation:"true"`
	DesignatedRouter           *string                                   `path:"designated-router" module:"openconfig-network-instance"`
	ΛDesignatedRouter          []ygot.Annotation                         `path:"@designated-router" ygotAnnotation:"true"`
	LastEstablishedTime        *uint64                                   `path:"last-established-time" module:"openconfig-network-instance"`
	ΛLastEstablishedTime       []ygot.Annotation                         `path:"@last-established-time" ygotAnnotation:"true"`
	OptionalCapabilities       *string                                   `path:"optional-capabilities" module:"openconfig-network-instance"`
	ΛOptionalCapabilities      []ygot.Annotation                         `path:"@optional-capabilities" ygotAnnotation:"true"`
	Priority                   *uint8                                    `path:"priority" module:"openconfig-network-instance"`
	ΛPriority                  []ygot.Annotation                         `path:"@priority" ygotAnnotation:"true"`
	RemoteRouterId             *string                                   `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId            []ygot.Annotation                         `path:"@remote-router-id" ygotAnnotation:"true"`
	RetransmissionQueueLength  *uint32                                   `path:"retransmission-queue-length" module:"openconfig-network-instance"`
	ΛRetransmissionQueueLength []ygot.Annotation                         `path:"@retransmission-queue-length" ygotAnnotation:"true"`
	StateChanges               *uint32                                   `path:"state-changes" module:"openconfig-network-instance"`
	ΛStateChanges              []ygot.Annotation                         `path:"@state-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_VirtualLinks_VirtualLink_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global struct {
	ΛMetadata                     []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config                        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config                       `path:"config" module:"openconfig-network-instance"`
	ΛConfig                       []ygot.Annotation                                                                                                         `path:"@config" ygotAnnotation:"true"`
	GracefulRestart               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart              `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart              []ygot.Annotation                                                                                                         `path:"@graceful-restart" ygotAnnotation:"true"`
	InterAreaPropagationPolicies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies `path:"inter-area-propagation-policies" module:"openconfig-network-instance"`
	ΛInterAreaPropagationPolicies []ygot.Annotation                                                                                                         `path:"@inter-area-propagation-policies" ygotAnnotation:"true"`
	Mpls                          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls                         `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls                         []ygot.Annotation                                                                                                         `path:"@mpls" ygotAnnotation:"true"`
	State                         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State                        `path:"state" module:"openconfig-network-instance"`
	ΛState                        []ygot.Annotation                                                                                                         `path:"@state" ygotAnnotation:"true"`
	Timers                        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers                       `path:"timers" module:"openconfig-network-instance"`
	ΛTimers                       []ygot.Annotation                                                                                                         `path:"@timers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config{}
	return t.Config
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateInterAreaPropagationPolicies retrieves the value of the InterAreaPropagationPolicies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateInterAreaPropagationPolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies {
	if t.InterAreaPropagationPolicies != nil {
		return t.InterAreaPropagationPolicies
	}
	t.InterAreaPropagationPolicies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies{}
	return t.InterAreaPropagationPolicies
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls{}
	return t.Mpls
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State{}
	return t.State
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetOrCreateTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers{}
	return t.Timers
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetInterAreaPropagationPolicies returns the value of the InterAreaPropagationPolicies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field InterAreaPropagationPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetInterAreaPropagationPolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies {
	if t != nil && t.InterAreaPropagationPolicies != nil {
		return t.InterAreaPropagationPolicies
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) GetTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config struct {
	ΛMetadata                []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	HideTransitOnlyNetworks  *bool                                                                                                                     `path:"hide-transit-only-networks" module:"openconfig-network-instance"`
	ΛHideTransitOnlyNetworks []ygot.Annotation                                                                                                         `path:"@hide-transit-only-networks" ygotAnnotation:"true"`
	IgpShortcuts             *bool                                                                                                                     `path:"igp-shortcuts" module:"openconfig-network-instance"`
	ΛIgpShortcuts            []ygot.Annotation                                                                                                         `path:"@igp-shortcuts" ygotAnnotation:"true"`
	LogAdjacencyChanges      *bool                                                                                                                     `path:"log-adjacency-changes" module:"openconfig-network-instance"`
	ΛLogAdjacencyChanges     []ygot.Annotation                                                                                                         `path:"@log-adjacency-changes" ygotAnnotation:"true"`
	RouterId                 *string                                                                                                                   `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                                                                                                         `path:"@router-id" ygotAnnotation:"true"`
	SummaryRouteCostMode     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config_SummaryRouteCostMode `path:"summary-route-cost-mode" module:"openconfig-network-instance"`
	ΛSummaryRouteCostMode    []ygot.Annotation                                                                                                         `path:"@summary-route-cost-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/graceful-restart YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart struct {
	ΛMetadata []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/graceful-restart/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled     *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled    []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelperOnly  *bool             `path:"helper-only" module:"openconfig-network-instance"`
	ΛHelperOnly []ygot.Annotation `path:"@helper-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/graceful-restart/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled     *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled    []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelperOnly  *bool             `path:"helper-only" module:"openconfig-network-instance"`
	ΛHelperOnly []ygot.Annotation `path:"@helper-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_GracefulRestart_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies struct {
	ΛMetadata                   []ygot.Annotation                                                                                                                                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	InterAreaPropagationPolicy  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy `path:"inter-area-propagation-policy" module:"openconfig-network-instance"`
	ΛInterAreaPropagationPolicy []ygot.Annotation                                                                                                                                                                                                                                                                                                `path:"@inter-area-propagation-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key represents the key for list InterAreaPropagationPolicy of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key struct {
	SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"src-area"`
	DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"dst-area"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"src-area": t.SrcArea,
		"dst-area": t.DstArea,
	}, nil
}

// NewInterAreaPropagationPolicy creates a new entry in the InterAreaPropagationPolicy list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) NewInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterAreaPropagationPolicy", key)
	}

	t.InterAreaPropagationPolicy[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	return t.InterAreaPropagationPolicy[key], nil
}

// RenameInterAreaPropagationPolicy renames an entry in the list InterAreaPropagationPolicy within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) RenameInterAreaPropagationPolicy(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) error {
	if _, ok := t.InterAreaPropagationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in InterAreaPropagationPolicy", newK)
	}

	e, ok := t.InterAreaPropagationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterAreaPropagationPolicy", oldK)
	}
	e.SrcArea = newK.SrcArea
	e.DstArea = newK.DstArea

	t.InterAreaPropagationPolicy[newK] = e
	delete(t.InterAreaPropagationPolicy, oldK)
	return nil
}

// GetOrCreateInterAreaPropagationPolicyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) GetOrCreateInterAreaPropagationPolicyMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}
	return t.InterAreaPropagationPolicy
}

// GetOrCreateInterAreaPropagationPolicy retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) GetOrCreateInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if v, ok := t.InterAreaPropagationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterAreaPropagationPolicy(SrcArea, DstArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterAreaPropagationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetInterAreaPropagationPolicy retrieves the value with the specified key from
// the InterAreaPropagationPolicy map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) GetInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if lm, ok := t.InterAreaPropagationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterAreaPropagationPolicy deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) DeleteInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	delete(t.InterAreaPropagationPolicy, key)
}

// AppendInterAreaPropagationPolicy appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct to the
// list InterAreaPropagationPolicy of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) AppendInterAreaPropagationPolicy(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) error {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: v.SrcArea,
		DstArea: v.DstArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}

	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list InterAreaPropagationPolicy %v", key)
	}

	t.InterAreaPropagationPolicy[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies/inter-area-propagation-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct {
	ΛMetadata []ygot.Annotation                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                           `path:"@config" ygotAnnotation:"true"`
	DstArea   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union                                     `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea  []ygot.Annotation                                                                                                                                           `path:"@dst-area" ygotAnnotation:"true"`
	SrcArea   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union                                     `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea  []ygot.Annotation                                                                                                                                           `path:"@src-area" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dst-area": t.DstArea,
		"src-area": t.SrcArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies/inter-area-propagation-policy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config struct {
	ΛMetadata            []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType                                                                             `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                                                                                                       `path:"@default-import-policy" ygotAnnotation:"true"`
	DstArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea             []ygot.Annotation                                                                                                       `path:"@dst-area" ygotAnnotation:"true"`
	ImportPolicy         []string                                                                                                                `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                                                                                                       `path:"@import-policy" ygotAnnotation:"true"`
	SrcArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea             []ygot.Annotation                                                                                                       `path:"@src-area" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies/inter-area-propagation-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State struct {
	ΛMetadata            []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType                                                                             `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                                                                                                       `path:"@default-import-policy" ygotAnnotation:"true"`
	DstArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea             []ygot.Annotation                                                                                                       `path:"@dst-area" ygotAnnotation:"true"`
	ImportPolicy         []string                                                                                                                `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                                                                                                       `path:"@import-policy" ygotAnnotation:"true"`
	SrcArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Areas_Area_Config_Identifier_Union `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea             []ygot.Annotation                                                                                                       `path:"@src-area" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls struct {
	ΛMetadata   []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config     `path:"config" module:"openconfig-network-instance"`
	ΛConfig     []ygot.Annotation                                                                                            `path:"@config" ygotAnnotation:"true"`
	IgpLdpSync  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync `path:"igp-ldp-sync" module:"openconfig-network-instance"`
	ΛIgpLdpSync []ygot.Annotation                                                                                            `path:"@igp-ldp-sync" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State      `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config{}
	return t.Config
}

// GetOrCreateIgpLdpSync retrieves the value of the IgpLdpSync field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetOrCreateIgpLdpSync() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync {
	if t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	t.IgpLdpSync = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync{}
	return t.IgpLdpSync
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetIgpLdpSync returns the value of the IgpLdpSync struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls. If the receiver or the field IgpLdpSync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetIgpLdpSync() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync {
	if t != nil && t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TrafficEngineeringExtensions  *bool             `path:"traffic-engineering-extensions" module:"openconfig-network-instance"`
	ΛTrafficEngineeringExtensions []ygot.Annotation `path:"@traffic-engineering-extensions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/igp-ldp-sync YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync struct {
	ΛMetadata []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/igp-ldp-sync/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	PostSessionUpDelay  *uint32           `path:"post-session-up-delay" module:"openconfig-network-instance"`
	ΛPostSessionUpDelay []ygot.Annotation `path:"@post-session-up-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/igp-ldp-sync/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	PostSessionUpDelay  *uint32           `path:"post-session-up-delay" module:"openconfig-network-instance"`
	ΛPostSessionUpDelay []ygot.Annotation `path:"@post-session-up-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_IgpLdpSync_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TrafficEngineeringExtensions  *bool             `path:"traffic-engineering-extensions" module:"openconfig-network-instance"`
	ΛTrafficEngineeringExtensions []ygot.Annotation `path:"@traffic-engineering-extensions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Mpls_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State struct {
	ΛMetadata                []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	HideTransitOnlyNetworks  *bool                                                                                                                     `path:"hide-transit-only-networks" module:"openconfig-network-instance"`
	ΛHideTransitOnlyNetworks []ygot.Annotation                                                                                                         `path:"@hide-transit-only-networks" ygotAnnotation:"true"`
	IgpShortcuts             *bool                                                                                                                     `path:"igp-shortcuts" module:"openconfig-network-instance"`
	ΛIgpShortcuts            []ygot.Annotation                                                                                                         `path:"@igp-shortcuts" ygotAnnotation:"true"`
	LogAdjacencyChanges      *bool                                                                                                                     `path:"log-adjacency-changes" module:"openconfig-network-instance"`
	ΛLogAdjacencyChanges     []ygot.Annotation                                                                                                         `path:"@log-adjacency-changes" ygotAnnotation:"true"`
	RouterId                 *string                                                                                                                   `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                                                                                                         `path:"@router-id" ygotAnnotation:"true"`
	SummaryRouteCostMode     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Config_SummaryRouteCostMode `path:"summary-route-cost-mode" module:"openconfig-network-instance"`
	ΛSummaryRouteCostMode    []ygot.Annotation                                                                                                         `path:"@summary-route-cost-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers struct {
	ΛMetadata      []ygot.Annotation                                                                                                 `path:"@" ygotAnnotation:"true"`
	LsaGeneration  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration `path:"lsa-generation" module:"openconfig-network-instance"`
	ΛLsaGeneration []ygot.Annotation                                                                                                 `path:"@lsa-generation" ygotAnnotation:"true"`
	MaxMetric      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric     `path:"max-metric" module:"openconfig-network-instance"`
	ΛMaxMetric     []ygot.Annotation                                                                                                 `path:"@max-metric" ygotAnnotation:"true"`
	Spf            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf           `path:"spf" module:"openconfig-network-instance"`
	ΛSpf           []ygot.Annotation                                                                                                 `path:"@spf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) IsYANGGoStruct() {
}

// GetOrCreateLsaGeneration retrieves the value of the LsaGeneration field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetOrCreateLsaGeneration() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration {
	if t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	t.LsaGeneration = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration{}
	return t.LsaGeneration
}

// GetOrCreateMaxMetric retrieves the value of the MaxMetric field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetOrCreateMaxMetric() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric {
	if t.MaxMetric != nil {
		return t.MaxMetric
	}
	t.MaxMetric = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric{}
	return t.MaxMetric
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetOrCreateSpf() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf{}
	return t.Spf
}

// GetLsaGeneration returns the value of the LsaGeneration struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers. If the receiver or the field LsaGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetLsaGeneration() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration {
	if t != nil && t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	return nil
}

// GetMaxMetric returns the value of the MaxMetric struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers. If the receiver or the field MaxMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetMaxMetric() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric {
	if t != nil && t.MaxMetric != nil {
		return t.MaxMetric
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) GetSpf() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/lsa-generation YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration struct {
	ΛMetadata []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/lsa-generation/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32           `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32           `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation `path:"@maximum-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/lsa-generation/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32                                                                                                                            `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation                                                                                                                  `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32                                                                                                                            `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation                                                                                                                  `path:"@maximum-delay" ygotAnnotation:"true"`
	TimerType     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State_TimerType `path:"timer-type" module:"openconfig-network-instance"`
	ΛTimerType    []ygot.Annotation                                                                                                                  `path:"@timer-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/max-metric YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/max-metric/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Include   []E_OpenconfigOspfTypes_MAX_METRIC_INCLUDE `path:"include" module:"openconfig-network-instance"`
	ΛInclude  []ygot.Annotation                          `path:"@include" ygotAnnotation:"true"`
	Set       *bool                                      `path:"set" module:"openconfig-network-instance"`
	ΛSet      []ygot.Annotation                          `path:"@set" ygotAnnotation:"true"`
	Timeout   *uint64                                    `path:"timeout" module:"openconfig-network-instance"`
	ΛTimeout  []ygot.Annotation                          `path:"@timeout" ygotAnnotation:"true"`
	Trigger   []E_OpenconfigOspfTypes_MAX_METRIC_TRIGGER `path:"trigger" module:"openconfig-network-instance"`
	ΛTrigger  []ygot.Annotation                          `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/max-metric/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Include   []E_OpenconfigOspfTypes_MAX_METRIC_INCLUDE `path:"include" module:"openconfig-network-instance"`
	ΛInclude  []ygot.Annotation                          `path:"@include" ygotAnnotation:"true"`
	Set       *bool                                      `path:"set" module:"openconfig-network-instance"`
	ΛSet      []ygot.Annotation                          `path:"@set" ygotAnnotation:"true"`
	Timeout   *uint64                                    `path:"timeout" module:"openconfig-network-instance"`
	ΛTimeout  []ygot.Annotation                          `path:"@timeout" ygotAnnotation:"true"`
	Trigger   []E_OpenconfigOspfTypes_MAX_METRIC_TRIGGER `path:"trigger" module:"openconfig-network-instance"`
	ΛTrigger  []ygot.Annotation                          `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_MaxMetric_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/spf YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf struct {
	ΛMetadata []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/spf/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32           `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32           `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation `path:"@maximum-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/spf/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32                                                                                                                            `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation                                                                                                                  `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32                                                                                                                            `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation                                                                                                                  `path:"@maximum-delay" ygotAnnotation:"true"`
	TimerType     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_LsaGeneration_State_TimerType `path:"timer-type" module:"openconfig-network-instance"`
	ΛTimerType    []ygot.Annotation                                                                                                                  `path:"@timer-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv2_Global_Timers_Spf_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3 represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3 struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Areas     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas  `path:"areas" module:"openconfig-network-instance"`
	ΛAreas    []ygot.Annotation                                                                            `path:"@areas" ygotAnnotation:"true"`
	Global    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global `path:"global" module:"openconfig-network-instance"`
	ΛGlobal   []ygot.Annotation                                                                            `path:"@global" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) IsYANGGoStruct() {
}

// GetOrCreateAreas retrieves the value of the Areas field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) GetOrCreateAreas() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas {
	if t.Areas != nil {
		return t.Areas
	}
	t.Areas = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas{}
	return t.Areas
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) GetOrCreateGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global{}
	return t.Global
}

// GetAreas returns the value of the Areas struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3. If the receiver or the field Areas is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) GetAreas() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas {
	if t != nil && t.Areas != nil {
		return t.Areas
	}
	return nil
}

// GetGlobal returns the value of the Global struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) GetGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Area      map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area `path:"area" module:"openconfig-network-instance"`
	ΛArea     []ygot.Annotation                                                                                                                                                                                                            `path:"@area" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) IsYANGGoStruct() {
}

// NewArea creates a new entry in the Area list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) NewArea(Identifier OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area)
	}

	key := Identifier

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area{
		Identifier: Identifier,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) RenameArea(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.Identifier = newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateAreaMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) GetOrCreateAreaMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area {
	if t.Area == nil {
		t.Area = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area)
	}
	return t.Area
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) GetOrCreateArea(Identifier OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area {

	key := Identifier

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(Identifier)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) GetArea(Identifier OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area {

	if t == nil {
		return nil
	}

	key := Identifier

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) DeleteArea(Identifier OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) {
	key := Identifier

	delete(t.Area, key)
}

// AppendArea appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area struct to the
// list Area of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) AppendArea(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) error {
	key := v.Identifier

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area struct {
	ΛMetadata      []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	AddressRanges  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges          `path:"address-ranges" module:"openconfig-network-instance"`
	ΛAddressRanges []ygot.Annotation                                                                                                       `path:"@address-ranges" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config                 `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                                                                       `path:"@config" ygotAnnotation:"true"`
	Identifier     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier    []ygot.Annotation                                                                                                       `path:"@identifier" ygotAnnotation:"true"`
	Interfaces     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces             `path:"interfaces" module:"openconfig-network-instance"`
	ΛInterfaces    []ygot.Annotation                                                                                                       `path:"@interfaces" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State                  `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                       `path:"@state" ygotAnnotation:"true"`
	VirtualLinks   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks           `path:"virtual-links" module:"openconfig-network-instance"`
	ΛVirtualLinks  []ygot.Annotation                                                                                                       `path:"@virtual-links" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) IsYANGGoStruct() {
}

// GetOrCreateAddressRanges retrieves the value of the AddressRanges field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetOrCreateAddressRanges() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges {
	if t.AddressRanges != nil {
		return t.AddressRanges
	}
	t.AddressRanges = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges{}
	return t.AddressRanges
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config{}
	return t.Config
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetOrCreateInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces{}
	return t.Interfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State{}
	return t.State
}

// GetOrCreateVirtualLinks retrieves the value of the VirtualLinks field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetOrCreateVirtualLinks() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks {
	if t.VirtualLinks != nil {
		return t.VirtualLinks
	}
	t.VirtualLinks = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks{}
	return t.VirtualLinks
}

// GetAddressRanges returns the value of the AddressRanges struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area. If the receiver or the field AddressRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetAddressRanges() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges {
	if t != nil && t.AddressRanges != nil {
		return t.AddressRanges
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVirtualLinks returns the value of the VirtualLinks struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area. If the receiver or the field VirtualLinks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) GetVirtualLinks() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks {
	if t != nil && t.VirtualLinks != nil {
		return t.VirtualLinks
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"identifier": t.Identifier,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/address-ranges YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges struct {
	ΛMetadata     []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	AddressRange  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange `path:"address-range" module:"openconfig-network-instance"`
	ΛAddressRange []ygot.Annotation                                                                                                                      `path:"@address-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) IsYANGGoStruct() {
}

// NewAddressRange creates a new entry in the AddressRange list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) NewAddressRange(Prefix string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange{
		Prefix: &Prefix,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) RenameAddressRange(oldK, newK string) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Prefix = &newK

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRangeMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) GetOrCreateAddressRangeMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange {
	if t.AddressRange == nil {
		t.AddressRange = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange)
	}
	return t.AddressRange
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) GetOrCreateAddressRange(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange {

	key := Prefix

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) GetAddressRange(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) DeleteAddressRange(Prefix string) {
	key := Prefix

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange struct to the
// list AddressRange of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) AppendAddressRange(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/address-ranges/address-range YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange struct {
	ΛMetadata []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                  `path:"@config" ygotAnnotation:"true"`
	Prefix    *string                                                                                                                            `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                                                                  `path:"@prefix" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/address-ranges/address-range/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config struct {
	ΛMetadata []ygot.Annotation                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Prefix    *string                                                                                                                                    `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                                                                          `path:"@prefix" ygotAnnotation:"true"`
	Status    E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config_Status `path:"status" module:"openconfig-network-instance"`
	ΛStatus   []ygot.Annotation                                                                                                                          `path:"@status" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/address-ranges/address-range/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Prefix    *string                                                                                                                                    `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                                                                          `path:"@prefix" ygotAnnotation:"true"`
	Status    E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_Config_Status `path:"status" module:"openconfig-network-instance"`
	ΛStatus   []ygot.Annotation                                                                                                                          `path:"@status" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_AddressRanges_AddressRange_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config struct {
	ΛMetadata        []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Identifier       OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier      []ygot.Annotation                                                                                                       `path:"@identifier" ygotAnnotation:"true"`
	ImportSummaries  *bool                                                                                                                   `path:"import-summaries" module:"openconfig-network-instance"`
	ΛImportSummaries []ygot.Annotation                                                                                                       `path:"@import-summaries" ygotAnnotation:"true"`
	StubDefaultCost  *uint32                                                                                                                 `path:"stub-default-cost" module:"openconfig-network-instance"`
	ΛStubDefaultCost []ygot.Annotation                                                                                                       `path:"@stub-default-cost" ygotAnnotation:"true"`
	Type             E_OpenconfigOspfTypes_OSPF_AREA_TYPE                                                                                    `path:"type" module:"openconfig-network-instance"`
	ΛType            []ygot.Annotation                                                                                                       `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                                                                `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) NewInterface(Id string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) GetOrCreateInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) GetInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface struct {
	ΛMetadata        []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Config           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config          `path:"config" module:"openconfig-network-instance"`
	ΛConfig          []ygot.Annotation                                                                                                                     `path:"@config" ygotAnnotation:"true"`
	EnableBfd        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd       `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd       []ygot.Annotation                                                                                                                     `path:"@enable-bfd" ygotAnnotation:"true"`
	Id               *string                                                                                                                               `path:"id" module:"openconfig-network-instance"`
	ΛId              []ygot.Annotation                                                                                                                     `path:"@id" ygotAnnotation:"true"`
	InterfaceRef     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef    `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef    []ygot.Annotation                                                                                                                     `path:"@interface-ref" ygotAnnotation:"true"`
	LsaFilter        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter       `path:"lsa-filter" module:"openconfig-network-instance"`
	ΛLsaFilter       []ygot.Annotation                                                                                                                     `path:"@lsa-filter" ygotAnnotation:"true"`
	Neighbors        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors       `path:"neighbors" module:"openconfig-network-instance"`
	ΛNeighbors       []ygot.Annotation                                                                                                                     `path:"@neighbors" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                                     `path:"@state" ygotAnnotation:"true"`
	StaticNeighbors  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors `path:"static-neighbors" module:"openconfig-network-instance"`
	ΛStaticNeighbors []ygot.Annotation                                                                                                                     `path:"@static-neighbors" ygotAnnotation:"true"`
	Timers           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers          `path:"timers" module:"openconfig-network-instance"`
	ΛTimers          []ygot.Annotation                                                                                                                     `path:"@timers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateLsaFilter retrieves the value of the LsaFilter field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateLsaFilter() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter {
	if t.LsaFilter != nil {
		return t.LsaFilter
	}
	t.LsaFilter = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter{}
	return t.LsaFilter
}

// GetOrCreateNeighbors retrieves the value of the Neighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors {
	if t.Neighbors != nil {
		return t.Neighbors
	}
	t.Neighbors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors{}
	return t.Neighbors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State{}
	return t.State
}

// GetOrCreateStaticNeighbors retrieves the value of the StaticNeighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateStaticNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors {
	if t.StaticNeighbors != nil {
		return t.StaticNeighbors
	}
	t.StaticNeighbors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors{}
	return t.StaticNeighbors
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetOrCreateTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers{}
	return t.Timers
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetLsaFilter returns the value of the LsaFilter struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field LsaFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetLsaFilter() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter {
	if t != nil && t.LsaFilter != nil {
		return t.LsaFilter
	}
	return nil
}

// GetNeighbors returns the value of the Neighbors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field Neighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors {
	if t != nil && t.Neighbors != nil {
		return t.Neighbors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStaticNeighbors returns the value of the StaticNeighbors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field StaticNeighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetStaticNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors {
	if t != nil && t.StaticNeighbors != nil {
		return t.StaticNeighbors
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) GetTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config struct {
	ΛMetadata                  []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	AuthenticationType         *string                                 `path:"authentication-type" module:"openconfig-network-instance"`
	ΛAuthenticationType        []ygot.Annotation                       `path:"@authentication-type" ygotAnnotation:"true"`
	HideNetwork                *bool                                   `path:"hide-network" module:"openconfig-network-instance"`
	ΛHideNetwork               []ygot.Annotation                       `path:"@hide-network" ygotAnnotation:"true"`
	Id                         *string                                 `path:"id" module:"openconfig-network-instance"`
	ΛId                        []ygot.Annotation                       `path:"@id" ygotAnnotation:"true"`
	Metric                     *uint16                                 `path:"metric" module:"openconfig-network-instance"`
	ΛMetric                    []ygot.Annotation                       `path:"@metric" ygotAnnotation:"true"`
	MultiAreaAdjacencyPrimary  *bool                                   `path:"multi-area-adjacency-primary" module:"openconfig-network-instance"`
	ΛMultiAreaAdjacencyPrimary []ygot.Annotation                       `path:"@multi-area-adjacency-primary" ygotAnnotation:"true"`
	NetworkType                E_OpenconfigOspfTypes_OSPF_NETWORK_TYPE `path:"network-type" module:"openconfig-network-instance"`
	ΛNetworkType               []ygot.Annotation                       `path:"@network-type" ygotAnnotation:"true"`
	Passive                    *bool                                   `path:"passive" module:"openconfig-network-instance"`
	ΛPassive                   []ygot.Annotation                       `path:"@passive" ygotAnnotation:"true"`
	Priority                   *uint8                                  `path:"priority" module:"openconfig-network-instance"`
	ΛPriority                  []ygot.Annotation                       `path:"@priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/enable-bfd YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd struct {
	ΛMetadata []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/enable-bfd/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/enable-bfd/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_EnableBfd_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/lsa-filter YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter struct {
	ΛMetadata []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/lsa-filter/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	All       *bool             `path:"all" module:"openconfig-network-instance"`
	ΛAll      []ygot.Annotation `path:"@all" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/lsa-filter/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	All       *bool             `path:"all" module:"openconfig-network-instance"`
	ΛAll      []ygot.Annotation `path:"@all" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_LsaFilter_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/neighbors YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors struct {
	ΛMetadata []ygot.Annotation                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Neighbor  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor `path:"neighbor" module:"openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                                                                                                   `path:"@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) IsYANGGoStruct() {
}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) NewNeighbor(RouterId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor)
	}

	key := RouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor{
		RouterId: &RouterId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.RouterId = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) GetOrCreateNeighborMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) GetOrCreateNeighbor(RouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor {

	key := RouterId

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(RouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) GetNeighbor(RouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor {

	if t == nil {
		return nil
	}

	key := RouterId

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) DeleteNeighbor(RouterId string) {
	key := RouterId

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor struct to the
// list Neighbor of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) AppendNeighbor(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) error {
	if v.RouterId == nil {
		return fmt.Errorf("invalid nil key received for RouterId")
	}

	key := *v.RouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/neighbors/neighbor YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor struct {
	ΛMetadata []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	RouterId  *string                                                                                                                                        `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId []ygot.Annotation                                                                                                                              `path:"@router-id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	return map[string]interface{}{
		"router-id": *t.RouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/neighbors/neighbor/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State struct {
	ΛMetadata                  []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	AdjacencyState             E_OpenconfigOspfTypes_OSPF_NEIGHBOR_STATE `path:"adjacency-state" module:"openconfig-network-instance"`
	ΛAdjacencyState            []ygot.Annotation                         `path:"@adjacency-state" ygotAnnotation:"true"`
	BdrIpAddress               *string                                   `path:"bdr-ip-address" module:"openconfig-network-instance"`
	ΛBdrIpAddress              []ygot.Annotation                         `path:"@bdr-ip-address" ygotAnnotation:"true"`
	BdrRouterId                *string                                   `path:"bdr-router-id" module:"openconfig-network-instance"`
	ΛBdrRouterId               []ygot.Annotation                         `path:"@bdr-router-id" ygotAnnotation:"true"`
	DeadTime                   *uint64                                   `path:"dead-time" module:"openconfig-network-instance"`
	ΛDeadTime                  []ygot.Annotation                         `path:"@dead-time" ygotAnnotation:"true"`
	DrIpAddress                *string                                   `path:"dr-ip-address" module:"openconfig-network-instance"`
	ΛDrIpAddress               []ygot.Annotation                         `path:"@dr-ip-address" ygotAnnotation:"true"`
	DrRouterId                 *string                                   `path:"dr-router-id" module:"openconfig-network-instance"`
	ΛDrRouterId                []ygot.Annotation                         `path:"@dr-router-id" ygotAnnotation:"true"`
	LastEstablishedTime        *uint64                                   `path:"last-established-time" module:"openconfig-network-instance"`
	ΛLastEstablishedTime       []ygot.Annotation                         `path:"@last-established-time" ygotAnnotation:"true"`
	NeighborIpAddress          *string                                   `path:"neighbor-ip-address" module:"openconfig-network-instance"`
	ΛNeighborIpAddress         []ygot.Annotation                         `path:"@neighbor-ip-address" ygotAnnotation:"true"`
	OptionalCapabilities       *string                                   `path:"optional-capabilities" module:"openconfig-network-instance"`
	ΛOptionalCapabilities      []ygot.Annotation                         `path:"@optional-capabilities" ygotAnnotation:"true"`
	Priority                   *uint8                                    `path:"priority" module:"openconfig-network-instance"`
	ΛPriority                  []ygot.Annotation                         `path:"@priority" ygotAnnotation:"true"`
	RetransmissionQueueLength  *uint32                                   `path:"retransmission-queue-length" module:"openconfig-network-instance"`
	ΛRetransmissionQueueLength []ygot.Annotation                         `path:"@retransmission-queue-length" ygotAnnotation:"true"`
	RouterId                   *string                                   `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                  []ygot.Annotation                         `path:"@router-id" ygotAnnotation:"true"`
	StateChanges               *uint32                                   `path:"state-changes" module:"openconfig-network-instance"`
	ΛStateChanges              []ygot.Annotation                         `path:"@state-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Neighbors_Neighbor_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State struct {
	ΛMetadata                  []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	AuthenticationType         *string                                 `path:"authentication-type" module:"openconfig-network-instance"`
	ΛAuthenticationType        []ygot.Annotation                       `path:"@authentication-type" ygotAnnotation:"true"`
	BdrIpAddress               *string                                 `path:"bdr-ip-address" module:"openconfig-network-instance"`
	ΛBdrIpAddress              []ygot.Annotation                       `path:"@bdr-ip-address" ygotAnnotation:"true"`
	BdrRouterId                *string                                 `path:"bdr-router-id" module:"openconfig-network-instance"`
	ΛBdrRouterId               []ygot.Annotation                       `path:"@bdr-router-id" ygotAnnotation:"true"`
	DrIpAddress                *string                                 `path:"dr-ip-address" module:"openconfig-network-instance"`
	ΛDrIpAddress               []ygot.Annotation                       `path:"@dr-ip-address" ygotAnnotation:"true"`
	DrRouterId                 *string                                 `path:"dr-router-id" module:"openconfig-network-instance"`
	ΛDrRouterId                []ygot.Annotation                       `path:"@dr-router-id" ygotAnnotation:"true"`
	HideNetwork                *bool                                   `path:"hide-network" module:"openconfig-network-instance"`
	ΛHideNetwork               []ygot.Annotation                       `path:"@hide-network" ygotAnnotation:"true"`
	Id                         *string                                 `path:"id" module:"openconfig-network-instance"`
	ΛId                        []ygot.Annotation                       `path:"@id" ygotAnnotation:"true"`
	Metric                     *uint16                                 `path:"metric" module:"openconfig-network-instance"`
	ΛMetric                    []ygot.Annotation                       `path:"@metric" ygotAnnotation:"true"`
	MultiAreaAdjacencyPrimary  *bool                                   `path:"multi-area-adjacency-primary" module:"openconfig-network-instance"`
	ΛMultiAreaAdjacencyPrimary []ygot.Annotation                       `path:"@multi-area-adjacency-primary" ygotAnnotation:"true"`
	NetworkType                E_OpenconfigOspfTypes_OSPF_NETWORK_TYPE `path:"network-type" module:"openconfig-network-instance"`
	ΛNetworkType               []ygot.Annotation                       `path:"@network-type" ygotAnnotation:"true"`
	Passive                    *bool                                   `path:"passive" module:"openconfig-network-instance"`
	ΛPassive                   []ygot.Annotation                       `path:"@passive" ygotAnnotation:"true"`
	Priority                   *uint8                                  `path:"priority" module:"openconfig-network-instance"`
	ΛPriority                  []ygot.Annotation                       `path:"@priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/static-neighbors YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                               `path:"@" ygotAnnotation:"true"`
	StaticNeighbor  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor `path:"static-neighbor" module:"openconfig-network-instance"`
	ΛStaticNeighbor []ygot.Annotation                                                                                                                                               `path:"@static-neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) IsYANGGoStruct() {
}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) NewStaticNeighbor(NeighborIpAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor)
	}

	key := NeighborIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor{
		NeighborIpAddress: &NeighborIpAddress,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.NeighborIpAddress = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighborMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) GetOrCreateStaticNeighborMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor {
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor)
	}
	return t.StaticNeighbor
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) GetOrCreateStaticNeighbor(NeighborIpAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor {

	key := NeighborIpAddress

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(NeighborIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) GetStaticNeighbor(NeighborIpAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := NeighborIpAddress

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) DeleteStaticNeighbor(NeighborIpAddress string) {
	key := NeighborIpAddress

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor struct to the
// list StaticNeighbor of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) AppendStaticNeighbor(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) error {
	if v.NeighborIpAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborIpAddress")
	}

	key := *v.NeighborIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/static-neighbors/static-neighbor YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor struct {
	ΛMetadata          []ygot.Annotation                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	Config             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig            []ygot.Annotation                                                                                                                                           `path:"@config" ygotAnnotation:"true"`
	NeighborIpAddress  *string                                                                                                                                                     `path:"neighbor-ip-address" module:"openconfig-network-instance"`
	ΛNeighborIpAddress []ygot.Annotation                                                                                                                                           `path:"@neighbor-ip-address" ygotAnnotation:"true"`
	State              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State  `path:"state" module:"openconfig-network-instance"`
	ΛState             []ygot.Annotation                                                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborIpAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborIpAddress")
	}

	return map[string]interface{}{
		"neighbor-ip-address": *t.NeighborIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/static-neighbors/static-neighbor/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Metric             *uint16           `path:"metric" module:"openconfig-network-instance"`
	ΛMetric            []ygot.Annotation `path:"@metric" ygotAnnotation:"true"`
	NeighborIpAddress  *string           `path:"neighbor-ip-address" module:"openconfig-network-instance"`
	ΛNeighborIpAddress []ygot.Annotation `path:"@neighbor-ip-address" ygotAnnotation:"true"`
	PollInterval       *uint16           `path:"poll-interval" module:"openconfig-network-instance"`
	ΛPollInterval      []ygot.Annotation `path:"@poll-interval" ygotAnnotation:"true"`
	Priority           *uint8            `path:"priority" module:"openconfig-network-instance"`
	ΛPriority          []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/static-neighbors/static-neighbor/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Metric             *uint16           `path:"metric" module:"openconfig-network-instance"`
	ΛMetric            []ygot.Annotation `path:"@metric" ygotAnnotation:"true"`
	NeighborIpAddress  *string           `path:"neighbor-ip-address" module:"openconfig-network-instance"`
	ΛNeighborIpAddress []ygot.Annotation `path:"@neighbor-ip-address" ygotAnnotation:"true"`
	PollInterval       *uint16           `path:"poll-interval" module:"openconfig-network-instance"`
	ΛPollInterval      []ygot.Annotation `path:"@poll-interval" ygotAnnotation:"true"`
	Priority           *uint8            `path:"priority" module:"openconfig-network-instance"`
	ΛPriority          []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_StaticNeighbors_StaticNeighbor_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/timers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers struct {
	ΛMetadata []ygot.Annotation                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/timers/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DeadInterval                *uint32           `path:"dead-interval" module:"openconfig-network-instance"`
	ΛDeadInterval               []ygot.Annotation `path:"@dead-interval" ygotAnnotation:"true"`
	HelloInterval               *uint32           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval              []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceTransmissionDelay  *uint32           `path:"interface-transmission-delay" module:"openconfig-network-instance"`
	ΛInterfaceTransmissionDelay []ygot.Annotation `path:"@interface-transmission-delay" ygotAnnotation:"true"`
	RetransmissionInterval      *uint32           `path:"retransmission-interval" module:"openconfig-network-instance"`
	ΛRetransmissionInterval     []ygot.Annotation `path:"@retransmission-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/interfaces/interface/timers/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DeadInterval                *uint32           `path:"dead-interval" module:"openconfig-network-instance"`
	ΛDeadInterval               []ygot.Annotation `path:"@dead-interval" ygotAnnotation:"true"`
	HelloInterval               *uint32           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval              []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceTransmissionDelay  *uint32           `path:"interface-transmission-delay" module:"openconfig-network-instance"`
	ΛInterfaceTransmissionDelay []ygot.Annotation `path:"@interface-transmission-delay" ygotAnnotation:"true"`
	RetransmissionInterval      *uint32           `path:"retransmission-interval" module:"openconfig-network-instance"`
	ΛRetransmissionInterval     []ygot.Annotation `path:"@retransmission-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Interfaces_Interface_Timers_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State struct {
	ΛMetadata        []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	Identifier       OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State_Identifier_Union `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier      []ygot.Annotation                                                                                                      `path:"@identifier" ygotAnnotation:"true"`
	ImportSummaries  *bool                                                                                                                  `path:"import-summaries" module:"openconfig-network-instance"`
	ΛImportSummaries []ygot.Annotation                                                                                                      `path:"@import-summaries" ygotAnnotation:"true"`
	StubDefaultCost  *uint32                                                                                                                `path:"stub-default-cost" module:"openconfig-network-instance"`
	ΛStubDefaultCost []ygot.Annotation                                                                                                      `path:"@stub-default-cost" ygotAnnotation:"true"`
	Type             E_OpenconfigOspfTypes_OSPF_AREA_TYPE                                                                                   `path:"type" module:"openconfig-network-instance"`
	ΛType            []ygot.Annotation                                                                                                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/virtual-links YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks struct {
	ΛMetadata    []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	VirtualLink  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink `path:"virtual-link" module:"openconfig-network-instance"`
	ΛVirtualLink []ygot.Annotation                                                                                                                    `path:"@virtual-link" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) IsYANGGoStruct() {
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) NewVirtualLink(RemoteRouterId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink)
	}

	key := RemoteRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink{
		RemoteRouterId: &RemoteRouterId,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) RenameVirtualLink(oldK, newK string) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RemoteRouterId = &newK

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLinkMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) GetOrCreateVirtualLinkMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink {
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink)
	}
	return t.VirtualLink
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) GetOrCreateVirtualLink(RemoteRouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink {

	key := RemoteRouterId

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RemoteRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) GetVirtualLink(RemoteRouterId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink {

	if t == nil {
		return nil
	}

	key := RemoteRouterId

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) DeleteVirtualLink(RemoteRouterId string) {
	key := RemoteRouterId

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink struct to the
// list VirtualLink of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) AppendVirtualLink(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) error {
	if v.RemoteRouterId == nil {
		return fmt.Errorf("invalid nil key received for RemoteRouterId")
	}

	key := *v.RemoteRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/virtual-links/virtual-link YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink struct {
	ΛMetadata       []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig         []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	RemoteRouterId  *string                                                                                                                          `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId []ygot.Annotation                                                                                                                `path:"@remote-router-id" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State  `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteRouterId == nil {
		return nil, fmt.Errorf("nil value for key RemoteRouterId")
	}

	return map[string]interface{}{
		"remote-router-id": *t.RemoteRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/virtual-links/virtual-link/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RemoteRouterId  *string           `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId []ygot.Annotation `path:"@remote-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/areas/area/virtual-links/virtual-link/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State struct {
	ΛMetadata                  []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	AdjacencyState             E_OpenconfigOspfTypes_OSPF_NEIGHBOR_STATE `path:"adjacency-state" module:"openconfig-network-instance"`
	ΛAdjacencyState            []ygot.Annotation                         `path:"@adjacency-state" ygotAnnotation:"true"`
	BdrIpAddress               *string                                   `path:"bdr-ip-address" module:"openconfig-network-instance"`
	ΛBdrIpAddress              []ygot.Annotation                         `path:"@bdr-ip-address" ygotAnnotation:"true"`
	BdrRouterId                *string                                   `path:"bdr-router-id" module:"openconfig-network-instance"`
	ΛBdrRouterId               []ygot.Annotation                         `path:"@bdr-router-id" ygotAnnotation:"true"`
	DeadTime                   *uint64                                   `path:"dead-time" module:"openconfig-network-instance"`
	ΛDeadTime                  []ygot.Annotation                         `path:"@dead-time" ygotAnnotation:"true"`
	DrIpAddress                *string                                   `path:"dr-ip-address" module:"openconfig-network-instance"`
	ΛDrIpAddress               []ygot.Annotation                         `path:"@dr-ip-address" ygotAnnotation:"true"`
	DrRouterId                 *string                                   `path:"dr-router-id" module:"openconfig-network-instance"`
	ΛDrRouterId                []ygot.Annotation                         `path:"@dr-router-id" ygotAnnotation:"true"`
	LastEstablishedTime        *uint64                                   `path:"last-established-time" module:"openconfig-network-instance"`
	ΛLastEstablishedTime       []ygot.Annotation                         `path:"@last-established-time" ygotAnnotation:"true"`
	NeighborIpAddress          *string                                   `path:"neighbor-ip-address" module:"openconfig-network-instance"`
	ΛNeighborIpAddress         []ygot.Annotation                         `path:"@neighbor-ip-address" ygotAnnotation:"true"`
	OptionalCapabilities       *string                                   `path:"optional-capabilities" module:"openconfig-network-instance"`
	ΛOptionalCapabilities      []ygot.Annotation                         `path:"@optional-capabilities" ygotAnnotation:"true"`
	Priority                   *uint8                                    `path:"priority" module:"openconfig-network-instance"`
	ΛPriority                  []ygot.Annotation                         `path:"@priority" ygotAnnotation:"true"`
	RemoteRouterId             *string                                   `path:"remote-router-id" module:"openconfig-network-instance"`
	ΛRemoteRouterId            []ygot.Annotation                         `path:"@remote-router-id" ygotAnnotation:"true"`
	RetransmissionQueueLength  *uint32                                   `path:"retransmission-queue-length" module:"openconfig-network-instance"`
	ΛRetransmissionQueueLength []ygot.Annotation                         `path:"@retransmission-queue-length" ygotAnnotation:"true"`
	RouterId                   *string                                   `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                  []ygot.Annotation                         `path:"@router-id" ygotAnnotation:"true"`
	StateChanges               *uint32                                   `path:"state-changes" module:"openconfig-network-instance"`
	ΛStateChanges              []ygot.Annotation                         `path:"@state-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_VirtualLinks_VirtualLink_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global struct {
	ΛMetadata                     []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config                        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config                       `path:"config" module:"openconfig-network-instance"`
	ΛConfig                       []ygot.Annotation                                                                                                         `path:"@config" ygotAnnotation:"true"`
	GracefulRestart               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart              `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart              []ygot.Annotation                                                                                                         `path:"@graceful-restart" ygotAnnotation:"true"`
	InterAreaPropagationPolicies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies `path:"inter-area-propagation-policies" module:"openconfig-network-instance"`
	ΛInterAreaPropagationPolicies []ygot.Annotation                                                                                                         `path:"@inter-area-propagation-policies" ygotAnnotation:"true"`
	State                         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State                        `path:"state" module:"openconfig-network-instance"`
	ΛState                        []ygot.Annotation                                                                                                         `path:"@state" ygotAnnotation:"true"`
	Timers                        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers                       `path:"timers" module:"openconfig-network-instance"`
	ΛTimers                       []ygot.Annotation                                                                                                         `path:"@timers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config{}
	return t.Config
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetOrCreateGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateInterAreaPropagationPolicies retrieves the value of the InterAreaPropagationPolicies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetOrCreateInterAreaPropagationPolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies {
	if t.InterAreaPropagationPolicies != nil {
		return t.InterAreaPropagationPolicies
	}
	t.InterAreaPropagationPolicies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies{}
	return t.InterAreaPropagationPolicies
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State{}
	return t.State
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetOrCreateTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers{}
	return t.Timers
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetInterAreaPropagationPolicies returns the value of the InterAreaPropagationPolicies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global. If the receiver or the field InterAreaPropagationPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetInterAreaPropagationPolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies {
	if t != nil && t.InterAreaPropagationPolicies != nil {
		return t.InterAreaPropagationPolicies
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) GetTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config struct {
	ΛMetadata                []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	AbrCapability            E_OpenconfigOspfTypes_OSPF_ABR_TYPE `path:"abr-capability" module:"openconfig-network-instance"`
	ΛAbrCapability           []ygot.Annotation                   `path:"@abr-capability" ygotAnnotation:"true"`
	HideTransitOnlyNetworks  *bool                               `path:"hide-transit-only-networks" module:"openconfig-network-instance"`
	ΛHideTransitOnlyNetworks []ygot.Annotation                   `path:"@hide-transit-only-networks" ygotAnnotation:"true"`
	LogAdjacencyChanges      *bool                               `path:"log-adjacency-changes" module:"openconfig-network-instance"`
	ΛLogAdjacencyChanges     []ygot.Annotation                   `path:"@log-adjacency-changes" ygotAnnotation:"true"`
	RouterId                 *string                             `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                   `path:"@router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/graceful-restart YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart struct {
	ΛMetadata []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/graceful-restart/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled     *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled    []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelperOnly  *bool             `path:"helper-only" module:"openconfig-network-instance"`
	ΛHelperOnly []ygot.Annotation `path:"@helper-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/graceful-restart/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled     *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled    []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelperOnly  *bool             `path:"helper-only" module:"openconfig-network-instance"`
	ΛHelperOnly []ygot.Annotation `path:"@helper-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_GracefulRestart_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/inter-area-propagation-policies YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies struct {
	ΛMetadata                   []ygot.Annotation                                                                                                                                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	InterAreaPropagationPolicy  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy `path:"inter-area-propagation-policy" module:"openconfig-network-instance"`
	ΛInterAreaPropagationPolicy []ygot.Annotation                                                                                                                                                                                                                                                                                                `path:"@inter-area-propagation-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key represents the key for list InterAreaPropagationPolicy of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/inter-area-propagation-policies.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key struct {
	SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"src-area"`
	DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"dst-area"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"src-area": t.SrcArea,
		"dst-area": t.DstArea,
	}, nil
}

// NewInterAreaPropagationPolicy creates a new entry in the InterAreaPropagationPolicy list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) NewInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterAreaPropagationPolicy", key)
	}

	t.InterAreaPropagationPolicy[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	return t.InterAreaPropagationPolicy[key], nil
}

// RenameInterAreaPropagationPolicy renames an entry in the list InterAreaPropagationPolicy within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) RenameInterAreaPropagationPolicy(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key) error {
	if _, ok := t.InterAreaPropagationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in InterAreaPropagationPolicy", newK)
	}

	e, ok := t.InterAreaPropagationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterAreaPropagationPolicy", oldK)
	}
	e.SrcArea = newK.SrcArea
	e.DstArea = newK.DstArea

	t.InterAreaPropagationPolicy[newK] = e
	delete(t.InterAreaPropagationPolicy, oldK)
	return nil
}

// GetOrCreateInterAreaPropagationPolicyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) GetOrCreateInterAreaPropagationPolicyMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}
	return t.InterAreaPropagationPolicy
}

// GetOrCreateInterAreaPropagationPolicy retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) GetOrCreateInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if v, ok := t.InterAreaPropagationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterAreaPropagationPolicy(SrcArea, DstArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterAreaPropagationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetInterAreaPropagationPolicy retrieves the value with the specified key from
// the InterAreaPropagationPolicy map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) GetInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if lm, ok := t.InterAreaPropagationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterAreaPropagationPolicy deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) DeleteInterAreaPropagationPolicy(SrcArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union, DstArea OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	delete(t.InterAreaPropagationPolicy, key)
}

// AppendInterAreaPropagationPolicy appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct to the
// list InterAreaPropagationPolicy of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) AppendInterAreaPropagationPolicy(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) error {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key{
		SrcArea: v.SrcArea,
		DstArea: v.DstArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy)
	}

	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list InterAreaPropagationPolicy %v", key)
	}

	t.InterAreaPropagationPolicy[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/inter-area-propagation-policies/inter-area-propagation-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct {
	ΛMetadata []ygot.Annotation                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                           `path:"@config" ygotAnnotation:"true"`
	DstArea   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union                                     `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea  []ygot.Annotation                                                                                                                                           `path:"@dst-area" ygotAnnotation:"true"`
	SrcArea   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union                                     `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea  []ygot.Annotation                                                                                                                                           `path:"@src-area" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dst-area": t.DstArea,
		"src-area": t.SrcArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/inter-area-propagation-policies/inter-area-propagation-policy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config struct {
	ΛMetadata            []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType                                                                             `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                                                                                                       `path:"@default-import-policy" ygotAnnotation:"true"`
	DstArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea             []ygot.Annotation                                                                                                       `path:"@dst-area" ygotAnnotation:"true"`
	ImportPolicy         []string                                                                                                                `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                                                                                                       `path:"@import-policy" ygotAnnotation:"true"`
	SrcArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea             []ygot.Annotation                                                                                                       `path:"@src-area" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/inter-area-propagation-policies/inter-area-propagation-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State struct {
	ΛMetadata            []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType                                                                             `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                                                                                                       `path:"@default-import-policy" ygotAnnotation:"true"`
	DstArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"dst-area" module:"openconfig-network-instance"`
	ΛDstArea             []ygot.Annotation                                                                                                       `path:"@dst-area" ygotAnnotation:"true"`
	ImportPolicy         []string                                                                                                                `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                                                                                                       `path:"@import-policy" ygotAnnotation:"true"`
	SrcArea              OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Areas_Area_Config_Identifier_Union `path:"src-area" module:"openconfig-network-instance"`
	ΛSrcArea             []ygot.Annotation                                                                                                       `path:"@src-area" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_InterAreaPropagationPolicies_InterAreaPropagationPolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State struct {
	ΛMetadata                []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	AbrCapability            E_OpenconfigOspfTypes_OSPF_ABR_TYPE `path:"abr-capability" module:"openconfig-network-instance"`
	ΛAbrCapability           []ygot.Annotation                   `path:"@abr-capability" ygotAnnotation:"true"`
	HideTransitOnlyNetworks  *bool                               `path:"hide-transit-only-networks" module:"openconfig-network-instance"`
	ΛHideTransitOnlyNetworks []ygot.Annotation                   `path:"@hide-transit-only-networks" ygotAnnotation:"true"`
	LogAdjacencyChanges      *bool                               `path:"log-adjacency-changes" module:"openconfig-network-instance"`
	ΛLogAdjacencyChanges     []ygot.Annotation                   `path:"@log-adjacency-changes" ygotAnnotation:"true"`
	RouterId                 *string                             `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                   `path:"@router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers struct {
	ΛMetadata      []ygot.Annotation                                                                                                 `path:"@" ygotAnnotation:"true"`
	LsaGeneration  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration `path:"lsa-generation" module:"openconfig-network-instance"`
	ΛLsaGeneration []ygot.Annotation                                                                                                 `path:"@lsa-generation" ygotAnnotation:"true"`
	MaxMetric      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric     `path:"max-metric" module:"openconfig-network-instance"`
	ΛMaxMetric     []ygot.Annotation                                                                                                 `path:"@max-metric" ygotAnnotation:"true"`
	Spf            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf           `path:"spf" module:"openconfig-network-instance"`
	ΛSpf           []ygot.Annotation                                                                                                 `path:"@spf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) IsYANGGoStruct() {
}

// GetOrCreateLsaGeneration retrieves the value of the LsaGeneration field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetOrCreateLsaGeneration() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration {
	if t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	t.LsaGeneration = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration{}
	return t.LsaGeneration
}

// GetOrCreateMaxMetric retrieves the value of the MaxMetric field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetOrCreateMaxMetric() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric {
	if t.MaxMetric != nil {
		return t.MaxMetric
	}
	t.MaxMetric = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric{}
	return t.MaxMetric
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetOrCreateSpf() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf{}
	return t.Spf
}

// GetLsaGeneration returns the value of the LsaGeneration struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers. If the receiver or the field LsaGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetLsaGeneration() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration {
	if t != nil && t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	return nil
}

// GetMaxMetric returns the value of the MaxMetric struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers. If the receiver or the field MaxMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetMaxMetric() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric {
	if t != nil && t.MaxMetric != nil {
		return t.MaxMetric
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) GetSpf() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/lsa-generation YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration struct {
	ΛMetadata []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/lsa-generation/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32           `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32           `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation `path:"@maximum-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/lsa-generation/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32                                                                                                                            `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation                                                                                                                  `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32                                                                                                                            `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation                                                                                                                  `path:"@maximum-delay" ygotAnnotation:"true"`
	TimerType     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State_TimerType `path:"timer-type" module:"openconfig-network-instance"`
	ΛTimerType    []ygot.Annotation                                                                                                                  `path:"@timer-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/max-metric YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/max-metric/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Include   []E_OpenconfigOspfTypes_MAX_METRIC_INCLUDE `path:"include" module:"openconfig-network-instance"`
	ΛInclude  []ygot.Annotation                          `path:"@include" ygotAnnotation:"true"`
	Set       *bool                                      `path:"set" module:"openconfig-network-instance"`
	ΛSet      []ygot.Annotation                          `path:"@set" ygotAnnotation:"true"`
	Timeout   *uint64                                    `path:"timeout" module:"openconfig-network-instance"`
	ΛTimeout  []ygot.Annotation                          `path:"@timeout" ygotAnnotation:"true"`
	Trigger   []E_OpenconfigOspfTypes_MAX_METRIC_TRIGGER `path:"trigger" module:"openconfig-network-instance"`
	ΛTrigger  []ygot.Annotation                          `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/max-metric/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Include   []E_OpenconfigOspfTypes_MAX_METRIC_INCLUDE `path:"include" module:"openconfig-network-instance"`
	ΛInclude  []ygot.Annotation                          `path:"@include" ygotAnnotation:"true"`
	Set       *bool                                      `path:"set" module:"openconfig-network-instance"`
	ΛSet      []ygot.Annotation                          `path:"@set" ygotAnnotation:"true"`
	Timeout   *uint64                                    `path:"timeout" module:"openconfig-network-instance"`
	ΛTimeout  []ygot.Annotation                          `path:"@timeout" ygotAnnotation:"true"`
	Trigger   []E_OpenconfigOspfTypes_MAX_METRIC_TRIGGER `path:"trigger" module:"openconfig-network-instance"`
	ΛTrigger  []ygot.Annotation                          `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_MaxMetric_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/spf YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf struct {
	ΛMetadata []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/spf/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32           `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32           `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation `path:"@maximum-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv3/global/timers/spf/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	InitialDelay  *uint32                                                                                                                            `path:"initial-delay" module:"openconfig-network-instance"`
	ΛInitialDelay []ygot.Annotation                                                                                                                  `path:"@initial-delay" ygotAnnotation:"true"`
	MaximumDelay  *uint32                                                                                                                            `path:"maximum-delay" module:"openconfig-network-instance"`
	ΛMaximumDelay []ygot.Annotation                                                                                                                  `path:"@maximum-delay" ygotAnnotation:"true"`
	TimerType     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_LsaGeneration_State_TimerType `path:"timer-type" module:"openconfig-network-instance"`
	ΛTimerType    []ygot.Annotation                                                                                                                  `path:"@timer-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Ospfv3_Global_Timers_Spf_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep struct {
	ΛMetadata               []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	PathComputationServers  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers `path:"path-computation-servers" module:"openconfig-network-instance"`
	ΛPathComputationServers []ygot.Annotation                                                                                          `path:"@path-computation-servers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) IsYANGGoStruct() {
}

// GetOrCreatePathComputationServers retrieves the value of the PathComputationServers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) GetOrCreatePathComputationServers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers {
	if t.PathComputationServers != nil {
		return t.PathComputationServers
	}
	t.PathComputationServers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers{}
	return t.PathComputationServers
}

// GetPathComputationServers returns the value of the PathComputationServers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep. If the receiver or the field PathComputationServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) GetPathComputationServers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers {
	if t != nil && t.PathComputationServers != nil {
		return t.PathComputationServers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers struct {
	ΛMetadata              []ygot.Annotation                                                                                                                           `path:"@" ygotAnnotation:"true"`
	PathComputationServer  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer `path:"path-computation-server" module:"openconfig-network-instance"`
	ΛPathComputationServer []ygot.Annotation                                                                                                                           `path:"@path-computation-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) IsYANGGoStruct() {
}

// NewPathComputationServer creates a new entry in the PathComputationServer list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) NewPathComputationServer(PceServerAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathComputationServer == nil {
		t.PathComputationServer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer)
	}

	key := PceServerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathComputationServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathComputationServer", key)
	}

	t.PathComputationServer[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer{
		PceServerAddress: &PceServerAddress,
	}

	return t.PathComputationServer[key], nil
}

// RenamePathComputationServer renames an entry in the list PathComputationServer within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) RenamePathComputationServer(oldK, newK string) error {
	if _, ok := t.PathComputationServer[newK]; ok {
		return fmt.Errorf("key %v already exists in PathComputationServer", newK)
	}

	e, ok := t.PathComputationServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathComputationServer", oldK)
	}
	e.PceServerAddress = &newK

	t.PathComputationServer[newK] = e
	delete(t.PathComputationServer, oldK)
	return nil
}

// GetOrCreatePathComputationServerMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) GetOrCreatePathComputationServerMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer {
	if t.PathComputationServer == nil {
		t.PathComputationServer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer)
	}
	return t.PathComputationServer
}

// GetOrCreatePathComputationServer retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) GetOrCreatePathComputationServer(PceServerAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer {

	key := PceServerAddress

	if v, ok := t.PathComputationServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathComputationServer(PceServerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathComputationServer got unexpected error: %v", err))
	}
	return v
}

// GetPathComputationServer retrieves the value with the specified key from
// the PathComputationServer map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) GetPathComputationServer(PceServerAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer {

	if t == nil {
		return nil
	}

	key := PceServerAddress

	if lm, ok := t.PathComputationServer[key]; ok {
		return lm
	}
	return nil
}

// DeletePathComputationServer deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) DeletePathComputationServer(PceServerAddress string) {
	key := PceServerAddress

	delete(t.PathComputationServer, key)
}

// AppendPathComputationServer appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer struct to the
// list PathComputationServer of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) AppendPathComputationServer(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) error {
	if v.PceServerAddress == nil {
		return fmt.Errorf("invalid nil key received for PceServerAddress")
	}

	key := *v.PceServerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathComputationServer == nil {
		t.PathComputationServer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer)
	}

	if _, ok := t.PathComputationServer[key]; ok {
		return fmt.Errorf("duplicate key for list PathComputationServer %v", key)
	}

	t.PathComputationServer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer struct {
	ΛMetadata         []ygot.Annotation                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Authentication    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication   []ygot.Annotation                                                                                                                               `path:"@authentication" ygotAnnotation:"true"`
	Config            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config         `path:"config" module:"openconfig-network-instance"`
	ΛConfig           []ygot.Annotation                                                                                                                               `path:"@config" ygotAnnotation:"true"`
	PceServerAddress  *string                                                                                                                                         `path:"pce-server-address" module:"openconfig-network-instance"`
	ΛPceServerAddress []ygot.Annotation                                                                                                                               `path:"@pce-server-address" ygotAnnotation:"true"`
	State             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State          `path:"state" module:"openconfig-network-instance"`
	ΛState            []ygot.Annotation                                                                                                                               `path:"@state" ygotAnnotation:"true"`
	Timers            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers         `path:"timers" module:"openconfig-network-instance"`
	ΛTimers           []ygot.Annotation                                                                                                                               `path:"@timers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetOrCreateAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication{}
	return t.Authentication
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State{}
	return t.State
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetOrCreateTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers{}
	return t.Timers
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) GetTimers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PceServerAddress == nil {
		return nil, fmt.Errorf("nil value for key PceServerAddress")
	}

	return map[string]interface{}{
		"pce-server-address": *t.PceServerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/authentication YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication struct {
	ΛMetadata []ygot.Annotation                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/authentication/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	Keychain           *string           `path:"keychain" module:"openconfig-network-instance"`
	ΛKeychain          []ygot.Annotation `path:"@keychain" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/authentication/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	Keychain           *string           `path:"keychain" module:"openconfig-network-instance"`
	ΛKeychain          []ygot.Annotation `path:"@keychain" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Authentication_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config struct {
	ΛMetadata               []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Id                      *string                      `path:"id" module:"openconfig-network-instance"`
	ΛId                     []ygot.Annotation            `path:"@id" ygotAnnotation:"true"`
	PceInitiatedCapability  *bool                        `path:"pce-initiated-capability" module:"openconfig-network-instance"`
	ΛPceInitiatedCapability []ygot.Annotation            `path:"@pce-initiated-capability" ygotAnnotation:"true"`
	PceServerAddress        *string                      `path:"pce-server-address" module:"openconfig-network-instance"`
	ΛPceServerAddress       []ygot.Annotation            `path:"@pce-server-address" ygotAnnotation:"true"`
	PceType                 E_OpenconfigPcep_PceModeType `path:"pce-type" module:"openconfig-network-instance"`
	ΛPceType                []ygot.Annotation            `path:"@pce-type" ygotAnnotation:"true"`
	Port                    *uint16                      `path:"port" module:"openconfig-network-instance"`
	ΛPort                   []ygot.Annotation            `path:"@port" ygotAnnotation:"true"`
	Preference              *uint8                       `path:"preference" module:"openconfig-network-instance"`
	ΛPreference             []ygot.Annotation            `path:"@preference" ygotAnnotation:"true"`
	ReportLocalLsp          *bool                        `path:"report-local-lsp" module:"openconfig-network-instance"`
	ΛReportLocalLsp         []ygot.Annotation            `path:"@report-local-lsp" ygotAnnotation:"true"`
	SourceAddress           *string                      `path:"source-address" module:"openconfig-network-instance"`
	ΛSourceAddress          []ygot.Annotation            `path:"@source-address" ygotAnnotation:"true"`
	SrSupport               *bool                        `path:"sr-support" module:"openconfig-network-instance"`
	ΛSrSupport              []ygot.Annotation            `path:"@sr-support" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State struct {
	ΛMetadata               []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Id                      *string                      `path:"id" module:"openconfig-network-instance"`
	ΛId                     []ygot.Annotation            `path:"@id" ygotAnnotation:"true"`
	PceInitiatedCapability  *bool                        `path:"pce-initiated-capability" module:"openconfig-network-instance"`
	ΛPceInitiatedCapability []ygot.Annotation            `path:"@pce-initiated-capability" ygotAnnotation:"true"`
	PceServerAddress        *string                      `path:"pce-server-address" module:"openconfig-network-instance"`
	ΛPceServerAddress       []ygot.Annotation            `path:"@pce-server-address" ygotAnnotation:"true"`
	PceType                 E_OpenconfigPcep_PceModeType `path:"pce-type" module:"openconfig-network-instance"`
	ΛPceType                []ygot.Annotation            `path:"@pce-type" ygotAnnotation:"true"`
	Port                    *uint16                      `path:"port" module:"openconfig-network-instance"`
	ΛPort                   []ygot.Annotation            `path:"@port" ygotAnnotation:"true"`
	Preference              *uint8                       `path:"preference" module:"openconfig-network-instance"`
	ΛPreference             []ygot.Annotation            `path:"@preference" ygotAnnotation:"true"`
	ReportLocalLsp          *bool                        `path:"report-local-lsp" module:"openconfig-network-instance"`
	ΛReportLocalLsp         []ygot.Annotation            `path:"@report-local-lsp" ygotAnnotation:"true"`
	SourceAddress           *string                      `path:"source-address" module:"openconfig-network-instance"`
	ΛSourceAddress          []ygot.Annotation            `path:"@source-address" ygotAnnotation:"true"`
	SrSupport               *bool                        `path:"sr-support" module:"openconfig-network-instance"`
	ΛSrSupport              []ygot.Annotation            `path:"@sr-support" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers struct {
	ΛMetadata []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config struct {
	ΛMetadata                    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DeadTimer                    *uint8            `path:"dead-timer" module:"openconfig-network-instance"`
	ΛDeadTimer                   []ygot.Annotation `path:"@dead-timer" ygotAnnotation:"true"`
	Keepalive                    *uint8            `path:"keepalive" module:"openconfig-network-instance"`
	ΛKeepalive                   []ygot.Annotation `path:"@keepalive" ygotAnnotation:"true"`
	RedelegationTimeoutInterval  *uint16           `path:"redelegation-timeout-interval" module:"openconfig-network-instance"`
	ΛRedelegationTimeoutInterval []ygot.Annotation `path:"@redelegation-timeout-interval" ygotAnnotation:"true"`
	StateTimeoutInterval         *uint16           `path:"state-timeout-interval" module:"openconfig-network-instance"`
	ΛStateTimeoutInterval        []ygot.Annotation `path:"@state-timeout-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State struct {
	ΛMetadata                    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DeadTimer                    *uint8            `path:"dead-timer" module:"openconfig-network-instance"`
	ΛDeadTimer                   []ygot.Annotation `path:"@dead-timer" ygotAnnotation:"true"`
	Keepalive                    *uint8            `path:"keepalive" module:"openconfig-network-instance"`
	ΛKeepalive                   []ygot.Annotation `path:"@keepalive" ygotAnnotation:"true"`
	RedelegationTimeoutInterval  *uint16           `path:"redelegation-timeout-interval" module:"openconfig-network-instance"`
	ΛRedelegationTimeoutInterval []ygot.Annotation `path:"@redelegation-timeout-interval" ygotAnnotation:"true"`
	StateTimeoutInterval         *uint16           `path:"state-timeout-interval" module:"openconfig-network-instance"`
	ΛStateTimeoutInterval        []ygot.Annotation `path:"@state-timeout-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pcep_PathComputationServers_PathComputationServer_Timers_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim struct {
	ΛMetadata   []ygot.Annotation                                                                             `path:"@" ygotAnnotation:"true"`
	Global      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global     `path:"global" module:"openconfig-network-instance"`
	ΛGlobal     []ygot.Annotation                                                                             `path:"@global" ygotAnnotation:"true"`
	Interfaces  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces `path:"interfaces" module:"openconfig-network-instance"`
	ΛInterfaces []ygot.Annotation                                                                             `path:"@interfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) IsYANGGoStruct() {
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) GetOrCreateGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global{}
	return t.Global
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) GetOrCreateInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces{}
	return t.Interfaces
}

// GetGlobal returns the value of the Global struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) GetGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) GetInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global struct {
	ΛMetadata         []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config           `path:"config" module:"openconfig-network-instance"`
	ΛConfig           []ygot.Annotation                                                                                          `path:"@config" ygotAnnotation:"true"`
	RendezvousPoints  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints `path:"rendezvous-points" module:"openconfig-network-instance"`
	ΛRendezvousPoints []ygot.Annotation                                                                                          `path:"@rendezvous-points" ygotAnnotation:"true"`
	SourcesJoined     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined    `path:"sources-joined" module:"openconfig-network-instance"`
	ΛSourcesJoined    []ygot.Annotation                                                                                          `path:"@sources-joined" ygotAnnotation:"true"`
	Ssm               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm              `path:"ssm" module:"openconfig-network-instance"`
	ΛSsm              []ygot.Annotation                                                                                          `path:"@ssm" ygotAnnotation:"true"`
	State             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State            `path:"state" module:"openconfig-network-instance"`
	ΛState            []ygot.Annotation                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config{}
	return t.Config
}

// GetOrCreateRendezvousPoints retrieves the value of the RendezvousPoints field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetOrCreateRendezvousPoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints {
	if t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	t.RendezvousPoints = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints{}
	return t.RendezvousPoints
}

// GetOrCreateSourcesJoined retrieves the value of the SourcesJoined field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetOrCreateSourcesJoined() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined {
	if t.SourcesJoined != nil {
		return t.SourcesJoined
	}
	t.SourcesJoined = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined{}
	return t.SourcesJoined
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetOrCreateSsm() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm{}
	return t.Ssm
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetRendezvousPoints returns the value of the RendezvousPoints struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global. If the receiver or the field RendezvousPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetRendezvousPoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints {
	if t != nil && t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	return nil
}

// GetSourcesJoined returns the value of the SourcesJoined struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global. If the receiver or the field SourcesJoined is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetSourcesJoined() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined {
	if t != nil && t.SourcesJoined != nil {
		return t.SourcesJoined
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetSsm() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MaximumGroups  *uint32           `path:"maximum-groups" module:"openconfig-network-instance"`
	ΛMaximumGroups []ygot.Annotation `path:"@maximum-groups" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints struct {
	ΛMetadata        []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	RendezvousPoint  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint `path:"rendezvous-point" module:"openconfig-network-instance"`
	ΛRendezvousPoint []ygot.Annotation                                                                                                                     `path:"@rendezvous-point" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) IsYANGGoStruct() {
}

// NewRendezvousPoint creates a new entry in the RendezvousPoint list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) NewRendezvousPoint(Address string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RendezvousPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RendezvousPoint", key)
	}

	t.RendezvousPoint[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint{
		Address: &Address,
	}

	return t.RendezvousPoint[key], nil
}

// RenameRendezvousPoint renames an entry in the list RendezvousPoint within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) RenameRendezvousPoint(oldK, newK string) error {
	if _, ok := t.RendezvousPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RendezvousPoint", newK)
	}

	e, ok := t.RendezvousPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RendezvousPoint", oldK)
	}
	e.Address = &newK

	t.RendezvousPoint[newK] = e
	delete(t.RendezvousPoint, oldK)
	return nil
}

// GetOrCreateRendezvousPointMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) GetOrCreateRendezvousPointMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint {
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint)
	}
	return t.RendezvousPoint
}

// GetOrCreateRendezvousPoint retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) GetOrCreateRendezvousPoint(Address string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint {

	key := Address

	if v, ok := t.RendezvousPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRendezvousPoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRendezvousPoint got unexpected error: %v", err))
	}
	return v
}

// GetRendezvousPoint retrieves the value with the specified key from
// the RendezvousPoint map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) GetRendezvousPoint(Address string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.RendezvousPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRendezvousPoint deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) DeleteRendezvousPoint(Address string) {
	key := Address

	delete(t.RendezvousPoint, key)
}

// AppendRendezvousPoint appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint struct to the
// list RendezvousPoint of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) AppendRendezvousPoint(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint)
	}

	if _, ok := t.RendezvousPoint[key]; ok {
		return fmt.Errorf("duplicate key for list RendezvousPoint %v", key)
	}

	t.RendezvousPoint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint struct {
	ΛMetadata []ygot.Annotation                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Address   *string                                                                                                                           `path:"address" module:"openconfig-network-instance"`
	ΛAddress  []ygot.Annotation                                                                                                                 `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address          *string           `path:"address" module:"openconfig-network-instance"`
	ΛAddress         []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	MulticastGroups  *string           `path:"multicast-groups" module:"openconfig-network-instance"`
	ΛMulticastGroups []ygot.Annotation `path:"@multicast-groups" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address          *string           `path:"address" module:"openconfig-network-instance"`
	ΛAddress         []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	MulticastGroups  *string           `path:"multicast-groups" module:"openconfig-network-instance"`
	ΛMulticastGroups []ygot.Annotation `path:"@multicast-groups" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_RendezvousPoints_RendezvousPoint_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined struct {
	ΛMetadata []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	Source    map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source `path:"source" module:"openconfig-network-instance"`
	ΛSource   []ygot.Annotation                                                                                                         `path:"@source" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) NewSource(Address string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source{
		Address: &Address,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Address = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSourceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) GetOrCreateSourceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source {
	if t.Source == nil {
		t.Source = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source)
	}
	return t.Source
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) GetOrCreateSource(Address string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source {

	key := Address

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) GetSource(Address string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) DeleteSource(Address string) {
	key := Address

	delete(t.Source, key)
}

// AppendSource appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source struct to the
// list Source of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) AppendSource(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Address   *string                                                                                                              `path:"address" module:"openconfig-network-instance"`
	ΛAddress  []ygot.Annotation                                                                                                    `path:"@address" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address              *string           `path:"address" module:"openconfig-network-instance"`
	ΛAddress             []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Group                *string           `path:"group" module:"openconfig-network-instance"`
	ΛGroup               []ygot.Annotation `path:"@group" ygotAnnotation:"true"`
	UpstreamInterfaceId  *string           `path:"upstream-interface-id" module:"openconfig-network-instance"`
	ΛUpstreamInterfaceId []ygot.Annotation `path:"@upstream-interface-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_SourcesJoined_Source_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SsmRanges  *string           `path:"ssm-ranges" module:"openconfig-network-instance"`
	ΛSsmRanges []ygot.Annotation `path:"@ssm-ranges" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SsmRanges  *string           `path:"ssm-ranges" module:"openconfig-network-instance"`
	ΛSsmRanges []ygot.Annotation `path:"@ssm-ranges" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_Ssm_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State struct {
	ΛMetadata      []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	Counters       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                        `path:"@counters" ygotAnnotation:"true"`
	MaximumGroups  *uint32                                                                                                  `path:"maximum-groups" module:"openconfig-network-instance"`
	ΛMaximumGroups []ygot.Annotation                                                                                        `path:"@maximum-groups" ygotAnnotation:"true"`
	NeighborCount  *uint8                                                                                                   `path:"neighbor-count" module:"openconfig-network-instance"`
	ΛNeighborCount []ygot.Annotation                                                                                        `path:"@neighbor-count" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootstrapMessages  *uint32           `path:"bootstrap-messages" module:"openconfig-network-instance"`
	ΛBootstrapMessages []ygot.Annotation `path:"@bootstrap-messages" ygotAnnotation:"true"`
	HelloMessages      *uint32           `path:"hello-messages" module:"openconfig-network-instance"`
	ΛHelloMessages     []ygot.Annotation `path:"@hello-messages" ygotAnnotation:"true"`
	JoinPruneMessages  *uint32           `path:"join-prune-messages" module:"openconfig-network-instance"`
	ΛJoinPruneMessages []ygot.Annotation `path:"@join-prune-messages" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Global_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                                                  `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) NewInterface(InterfaceId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) GetOrCreateInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) GetInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface struct {
	ΛMetadata     []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config       `path:"config" module:"openconfig-network-instance"`
	ΛConfig       []ygot.Annotation                                                                                                    `path:"@config" ygotAnnotation:"true"`
	EnableBfd     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd    `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd    []ygot.Annotation                                                                                                    `path:"@enable-bfd" ygotAnnotation:"true"`
	InterfaceId   *string                                                                                                              `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId  []ygot.Annotation                                                                                                    `path:"@interface-id" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                                    `path:"@interface-ref" ygotAnnotation:"true"`
	Neighbors     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors    `path:"neighbors" module:"openconfig-network-instance"`
	ΛNeighbors    []ygot.Annotation                                                                                                    `path:"@neighbors" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetOrCreateEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateNeighbors retrieves the value of the Neighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetOrCreateNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors {
	if t.Neighbors != nil {
		return t.Neighbors
	}
	t.Neighbors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors{}
	return t.Neighbors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetNeighbors returns the value of the Neighbors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface. If the receiver or the field Neighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors {
	if t != nil && t.Neighbors != nil {
		return t.Neighbors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config struct {
	ΛMetadata          []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	BorderRouter       *bool                         `path:"border-router" module:"openconfig-network-instance"`
	ΛBorderRouter      []ygot.Annotation             `path:"@border-router" ygotAnnotation:"true"`
	BsrBorder          *bool                         `path:"bsr-border" module:"openconfig-network-instance"`
	ΛBsrBorder         []ygot.Annotation             `path:"@bsr-border" ygotAnnotation:"true"`
	DeadTimer          *uint16                       `path:"dead-timer" module:"openconfig-network-instance"`
	ΛDeadTimer         []ygot.Annotation             `path:"@dead-timer" ygotAnnotation:"true"`
	DrPriority         *uint32                       `path:"dr-priority" module:"openconfig-network-instance"`
	ΛDrPriority        []ygot.Annotation             `path:"@dr-priority" ygotAnnotation:"true"`
	Enabled            *bool                         `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled           []ygot.Annotation             `path:"@enabled" ygotAnnotation:"true"`
	HelloInterval      *uint8                        `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval     []ygot.Annotation             `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceId        *string                       `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId       []ygot.Annotation             `path:"@interface-id" ygotAnnotation:"true"`
	JoinPruneInterval  *uint8                        `path:"join-prune-interval" module:"openconfig-network-instance"`
	ΛJoinPruneInterval []ygot.Annotation             `path:"@join-prune-interval" ygotAnnotation:"true"`
	MaximumGroups      *uint32                       `path:"maximum-groups" module:"openconfig-network-instance"`
	ΛMaximumGroups     []ygot.Annotation             `path:"@maximum-groups" ygotAnnotation:"true"`
	Mode               E_OpenconfigPimTypes_PIM_MODE `path:"mode" module:"openconfig-network-instance"`
	ΛMode              []ygot.Annotation             `path:"@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd struct {
	ΛMetadata []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_EnableBfd_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors struct {
	ΛMetadata []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Neighbor  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor `path:"neighbor" module:"openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                                                                                     `path:"@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) IsYANGGoStruct() {
}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) NewNeighbor(NeighborAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) GetOrCreateNeighborMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) GetOrCreateNeighbor(NeighborAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) GetNeighbor(NeighborAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor struct to the
// list Neighbor of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) AppendNeighbor(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor struct {
	ΛMetadata        []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	NeighborAddress  *string                                                                                                                          `path:"neighbor-address" module:"openconfig-network-instance"`
	ΛNeighborAddress []ygot.Annotation                                                                                                                `path:"@neighbor-address" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State struct {
	ΛMetadata            []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	DrAddress            *string                       `path:"dr-address" module:"openconfig-network-instance"`
	ΛDrAddress           []ygot.Annotation             `path:"@dr-address" ygotAnnotation:"true"`
	Mode                 E_OpenconfigPimTypes_PIM_MODE `path:"mode" module:"openconfig-network-instance"`
	ΛMode                []ygot.Annotation             `path:"@mode" ygotAnnotation:"true"`
	NeighborAddress      *string                       `path:"neighbor-address" module:"openconfig-network-instance"`
	ΛNeighborAddress     []ygot.Annotation             `path:"@neighbor-address" ygotAnnotation:"true"`
	NeighborEstablished  *uint64                       `path:"neighbor-established" module:"openconfig-network-instance"`
	ΛNeighborEstablished []ygot.Annotation             `path:"@neighbor-established" ygotAnnotation:"true"`
	NeighborExpires      *uint64                       `path:"neighbor-expires" module:"openconfig-network-instance"`
	ΛNeighborExpires     []ygot.Annotation             `path:"@neighbor-expires" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_Neighbors_Neighbor_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State struct {
	ΛMetadata          []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	BorderRouter       *bool                                                                                                                  `path:"border-router" module:"openconfig-network-instance"`
	ΛBorderRouter      []ygot.Annotation                                                                                                      `path:"@border-router" ygotAnnotation:"true"`
	BsrBorder          *bool                                                                                                                  `path:"bsr-border" module:"openconfig-network-instance"`
	ΛBsrBorder         []ygot.Annotation                                                                                                      `path:"@bsr-border" ygotAnnotation:"true"`
	Counters           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                                                                                      `path:"@counters" ygotAnnotation:"true"`
	DeadTimer          *uint16                                                                                                                `path:"dead-timer" module:"openconfig-network-instance"`
	ΛDeadTimer         []ygot.Annotation                                                                                                      `path:"@dead-timer" ygotAnnotation:"true"`
	DrPriority         *uint32                                                                                                                `path:"dr-priority" module:"openconfig-network-instance"`
	ΛDrPriority        []ygot.Annotation                                                                                                      `path:"@dr-priority" ygotAnnotation:"true"`
	Enabled            *bool                                                                                                                  `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled           []ygot.Annotation                                                                                                      `path:"@enabled" ygotAnnotation:"true"`
	HelloInterval      *uint8                                                                                                                 `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval     []ygot.Annotation                                                                                                      `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceId        *string                                                                                                                `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId       []ygot.Annotation                                                                                                      `path:"@interface-id" ygotAnnotation:"true"`
	JoinPruneInterval  *uint8                                                                                                                 `path:"join-prune-interval" module:"openconfig-network-instance"`
	ΛJoinPruneInterval []ygot.Annotation                                                                                                      `path:"@join-prune-interval" ygotAnnotation:"true"`
	MaximumGroups      *uint32                                                                                                                `path:"maximum-groups" module:"openconfig-network-instance"`
	ΛMaximumGroups     []ygot.Annotation                                                                                                      `path:"@maximum-groups" ygotAnnotation:"true"`
	Mode               E_OpenconfigPimTypes_PIM_MODE                                                                                          `path:"mode" module:"openconfig-network-instance"`
	ΛMode              []ygot.Annotation                                                                                                      `path:"@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootstrapMessages  *uint32           `path:"bootstrap-messages" module:"openconfig-network-instance"`
	ΛBootstrapMessages []ygot.Annotation `path:"@bootstrap-messages" ygotAnnotation:"true"`
	HelloMessages      *uint32           `path:"hello-messages" module:"openconfig-network-instance"`
	ΛHelloMessages     []ygot.Annotation `path:"@hello-messages" ygotAnnotation:"true"`
	JoinPruneMessages  *uint32           `path:"join-prune-messages" module:"openconfig-network-instance"`
	ΛJoinPruneMessages []ygot.Annotation `path:"@join-prune-messages" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_Pim_Interfaces_Interface_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State struct {
	ΛMetadata      []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	DefaultMetric  *uint32                                       `path:"default-metric" module:"openconfig-network-instance"`
	ΛDefaultMetric []ygot.Annotation                             `path:"@default-metric" ygotAnnotation:"true"`
	Enabled        *bool                                         `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation                             `path:"@enabled" ygotAnnotation:"true"`
	Identifier     E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"identifier" module:"openconfig-network-instance"`
	ΛIdentifier    []ygot.Annotation                             `path:"@identifier" ygotAnnotation:"true"`
	Name           *string                                       `path:"name" module:"openconfig-network-instance"`
	ΛName          []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Static    map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static `path:"static" module:"openconfig-network-instance"`
	ΛStatic   []ygot.Annotation                                                                                             `path:"@static" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) IsYANGGoStruct() {
}

// NewStatic creates a new entry in the Static list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) NewStatic(Prefix string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Static[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Static", key)
	}

	t.Static[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static{
		Prefix: &Prefix,
	}

	return t.Static[key], nil
}

// RenameStatic renames an entry in the list Static within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) RenameStatic(oldK, newK string) error {
	if _, ok := t.Static[newK]; ok {
		return fmt.Errorf("key %v already exists in Static", newK)
	}

	e, ok := t.Static[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Static", oldK)
	}
	e.Prefix = &newK

	t.Static[newK] = e
	delete(t.Static, oldK)
	return nil
}

// GetOrCreateStaticMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) GetOrCreateStaticMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static {
	if t.Static == nil {
		t.Static = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static)
	}
	return t.Static
}

// GetOrCreateStatic retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) GetOrCreateStatic(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static {

	key := Prefix

	if v, ok := t.Static[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatic(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatic got unexpected error: %v", err))
	}
	return v
}

// GetStatic retrieves the value with the specified key from
// the Static map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) GetStatic(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Static[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatic deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) DeleteStatic(Prefix string) {
	key := Prefix

	delete(t.Static, key)
}

// AppendStatic appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static struct to the
// list Static of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) AppendStatic(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static)
	}

	if _, ok := t.Static[key]; ok {
		return fmt.Errorf("duplicate key for list Static %v", key)
	}

	t.Static[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static struct {
	ΛMetadata []ygot.Annotation                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config   `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                           `path:"@config" ygotAnnotation:"true"`
	NextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops []ygot.Annotation                                                                                           `path:"@next-hops" ygotAnnotation:"true"`
	Prefix    *string                                                                                                     `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                                           `path:"@prefix" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State    `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config{}
	return t.Config
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops{}
	return t.NextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config struct {
	ΛMetadata    []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Description  *string                                                                                                               `path:"description" module:"openconfig-network-instance"`
	ΛDescription []ygot.Annotation                                                                                                     `path:"@description" ygotAnnotation:"true"`
	Prefix       *string                                                                                                               `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix      []ygot.Annotation                                                                                                     `path:"@prefix" ygotAnnotation:"true"`
	SetTag       OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config_SetTag_Union `path:"set-tag" module:"openconfig-network-instance"`
	ΛSetTag      []ygot.Annotation                                                                                                     `path:"@set-tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	NextHop   map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                              `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) NewNextHop(Index string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) GetOrCreateNextHopMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) GetOrCreateNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) GetNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop struct {
	ΛMetadata     []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config       `path:"config" module:"openconfig-network-instance"`
	ΛConfig       []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	EnableBfd     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd    `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd    []ygot.Annotation                                                                                                                `path:"@enable-bfd" ygotAnnotation:"true"`
	Index         *string                                                                                                                          `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                `path:"@index" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                                                `path:"@interface-ref" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config{}
	return t.Config
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetOrCreateEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetEnableBfd() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config struct {
	ΛMetadata   []ygot.Annotation                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Index       *string                                                                                                                                 `path:"index" module:"openconfig-network-instance"`
	ΛIndex      []ygot.Annotation                                                                                                                       `path:"@index" ygotAnnotation:"true"`
	Metric      *uint32                                                                                                                                 `path:"metric" module:"openconfig-network-instance"`
	ΛMetric     []ygot.Annotation                                                                                                                       `path:"@metric" ygotAnnotation:"true"`
	NextHop     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config_NextHop_Union `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop    []ygot.Annotation                                                                                                                       `path:"@next-hop" ygotAnnotation:"true"`
	Preference  *uint32                                                                                                                                 `path:"preference" module:"openconfig-network-instance"`
	ΛPreference []ygot.Annotation                                                                                                                       `path:"@preference" ygotAnnotation:"true"`
	Recurse     *bool                                                                                                                                   `path:"recurse" module:"openconfig-network-instance"`
	ΛRecurse    []ygot.Annotation                                                                                                                       `path:"@recurse" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd struct {
	ΛMetadata []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-network-instance"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-network-instance"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-network-instance"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_EnableBfd_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State struct {
	ΛMetadata   []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Index       *string                                                                                                                                `path:"index" module:"openconfig-network-instance"`
	ΛIndex      []ygot.Annotation                                                                                                                      `path:"@index" ygotAnnotation:"true"`
	Metric      *uint32                                                                                                                                `path:"metric" module:"openconfig-network-instance"`
	ΛMetric     []ygot.Annotation                                                                                                                      `path:"@metric" ygotAnnotation:"true"`
	NextHop     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State_NextHop_Union `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop    []ygot.Annotation                                                                                                                      `path:"@next-hop" ygotAnnotation:"true"`
	Preference  *uint32                                                                                                                                `path:"preference" module:"openconfig-network-instance"`
	ΛPreference []ygot.Annotation                                                                                                                      `path:"@preference" ygotAnnotation:"true"`
	Recurse     *bool                                                                                                                                  `path:"recurse" module:"openconfig-network-instance"`
	ΛRecurse    []ygot.Annotation                                                                                                                      `path:"@recurse" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State struct {
	ΛMetadata    []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Description  *string                                                                                                              `path:"description" module:"openconfig-network-instance"`
	ΛDescription []ygot.Annotation                                                                                                    `path:"@description" ygotAnnotation:"true"`
	Prefix       *string                                                                                                              `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix      []ygot.Annotation                                                                                                    `path:"@prefix" ygotAnnotation:"true"`
	SetTag       OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State_SetTag_Union `path:"set-tag" module:"openconfig-network-instance"`
	ΛSetTag      []ygot.Annotation                                                                                                    `path:"@set-tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols_Protocol_StaticRoutes_Static_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits represents the /openconfig-network-instance/network-instances/network-instance/route-limits YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits struct {
	ΛMetadata   []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	RouteLimit  map[E_OpenconfigTypes_ADDRESS_FAMILY]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit `path:"route-limit" module:"openconfig-network-instance"`
	ΛRouteLimit []ygot.Annotation                                                                                                       `path:"@route-limit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) IsYANGGoStruct() {}

// NewRouteLimit creates a new entry in the RouteLimit list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) NewRouteLimit(Afi E_OpenconfigTypes_ADDRESS_FAMILY) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteLimit == nil {
		t.RouteLimit = make(map[E_OpenconfigTypes_ADDRESS_FAMILY]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit)
	}

	key := Afi

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteLimit", key)
	}

	t.RouteLimit[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit{
		Afi: Afi,
	}

	return t.RouteLimit[key], nil
}

// RenameRouteLimit renames an entry in the list RouteLimit within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) RenameRouteLimit(oldK, newK E_OpenconfigTypes_ADDRESS_FAMILY) error {
	if _, ok := t.RouteLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteLimit", newK)
	}

	e, ok := t.RouteLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteLimit", oldK)
	}
	e.Afi = newK

	t.RouteLimit[newK] = e
	delete(t.RouteLimit, oldK)
	return nil
}

// GetOrCreateRouteLimitMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) GetOrCreateRouteLimitMap() map[E_OpenconfigTypes_ADDRESS_FAMILY]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit {
	if t.RouteLimit == nil {
		t.RouteLimit = make(map[E_OpenconfigTypes_ADDRESS_FAMILY]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit)
	}
	return t.RouteLimit
}

// GetOrCreateRouteLimit retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) GetOrCreateRouteLimit(Afi E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit {

	key := Afi

	if v, ok := t.RouteLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteLimit(Afi)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteLimit got unexpected error: %v", err))
	}
	return v
}

// GetRouteLimit retrieves the value with the specified key from
// the RouteLimit map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) GetRouteLimit(Afi E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit {

	if t == nil {
		return nil
	}

	key := Afi

	if lm, ok := t.RouteLimit[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteLimit deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) DeleteRouteLimit(Afi E_OpenconfigTypes_ADDRESS_FAMILY) {
	key := Afi

	delete(t.RouteLimit, key)
}

// AppendRouteLimit appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit struct to the
// list RouteLimit of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) AppendRouteLimit(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) error {
	key := v.Afi

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteLimit == nil {
		t.RouteLimit = make(map[E_OpenconfigTypes_ADDRESS_FAMILY]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit)
	}

	if _, ok := t.RouteLimit[key]; ok {
		return fmt.Errorf("duplicate key for list RouteLimit %v", key)
	}

	t.RouteLimit[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit struct {
	ΛMetadata []ygot.Annotation                                                                         `path:"@" ygotAnnotation:"true"`
	Afi       E_OpenconfigTypes_ADDRESS_FAMILY                                                          `path:"afi" module:"openconfig-network-instance"`
	ΛAfi      []ygot.Annotation                                                                         `path:"@afi" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi": t.Afi,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config struct {
	ΛMetadata       []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Afi             E_OpenconfigTypes_ADDRESS_FAMILY `path:"afi" module:"openconfig-network-instance"`
	ΛAfi            []ygot.Annotation                `path:"@afi" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                          `path:"alarm-threshold" module:"openconfig-network-instance"`
	ΛAlarmThreshold []ygot.Annotation                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Maximum         *uint32                          `path:"maximum" module:"openconfig-network-instance"`
	ΛMaximum        []ygot.Annotation                `path:"@maximum" ygotAnnotation:"true"`
	WarningOnly     *bool                            `path:"warning-only" module:"openconfig-network-instance"`
	ΛWarningOnly    []ygot.Annotation                `path:"@warning-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State struct {
	ΛMetadata          []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Afi                E_OpenconfigTypes_ADDRESS_FAMILY `path:"afi" module:"openconfig-network-instance"`
	ΛAfi               []ygot.Annotation                `path:"@afi" ygotAnnotation:"true"`
	AlarmThreshold     *uint32                          `path:"alarm-threshold" module:"openconfig-network-instance"`
	ΛAlarmThreshold    []ygot.Annotation                `path:"@alarm-threshold" ygotAnnotation:"true"`
	InstalledRoutes    *uint32                          `path:"installed-routes" module:"openconfig-network-instance"`
	ΛInstalledRoutes   []ygot.Annotation                `path:"@installed-routes" ygotAnnotation:"true"`
	Maximum            *uint32                          `path:"maximum" module:"openconfig-network-instance"`
	ΛMaximum           []ygot.Annotation                `path:"@maximum" ygotAnnotation:"true"`
	ThresholdExceeded  *bool                            `path:"threshold-exceeded" module:"openconfig-network-instance"`
	ΛThresholdExceeded []ygot.Annotation                `path:"@threshold-exceeded" ygotAnnotation:"true"`
	WarningOnly        *bool                            `path:"warning-only" module:"openconfig-network-instance"`
	ΛWarningOnly       []ygot.Annotation                `path:"@warning-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits_RouteLimit_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting represents the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting struct {
	ΛMetadata   []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Srgbs       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs      `path:"srgbs" module:"openconfig-network-instance"`
	ΛSrgbs      []ygot.Annotation                                                                     `path:"@srgbs" ygotAnnotation:"true"`
	Srlbs       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs      `path:"srlbs" module:"openconfig-network-instance"`
	ΛSrlbs      []ygot.Annotation                                                                     `path:"@srlbs" ygotAnnotation:"true"`
	TePolicies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies `path:"te-policies" module:"openconfig-network-instance"`
	ΛTePolicies []ygot.Annotation                                                                     `path:"@te-policies" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) IsYANGGoStruct() {}

// GetOrCreateSrgbs retrieves the value of the Srgbs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetOrCreateSrgbs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs {
	if t.Srgbs != nil {
		return t.Srgbs
	}
	t.Srgbs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs{}
	return t.Srgbs
}

// GetOrCreateSrlbs retrieves the value of the Srlbs field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetOrCreateSrlbs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs {
	if t.Srlbs != nil {
		return t.Srlbs
	}
	t.Srlbs = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs{}
	return t.Srlbs
}

// GetOrCreateTePolicies retrieves the value of the TePolicies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetOrCreateTePolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies {
	if t.TePolicies != nil {
		return t.TePolicies
	}
	t.TePolicies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies{}
	return t.TePolicies
}

// GetSrgbs returns the value of the Srgbs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting. If the receiver or the field Srgbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetSrgbs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs {
	if t != nil && t.Srgbs != nil {
		return t.Srgbs
	}
	return nil
}

// GetSrlbs returns the value of the Srlbs struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting. If the receiver or the field Srlbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetSrlbs() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs {
	if t != nil && t.Srlbs != nil {
		return t.Srlbs
	}
	return nil
}

// GetTePolicies returns the value of the TePolicies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting. If the receiver or the field TePolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) GetTePolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies {
	if t != nil && t.TePolicies != nil {
		return t.TePolicies
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs struct {
	ΛMetadata []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Srgb      map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb `path:"srgb" module:"openconfig-network-instance"`
	ΛSrgb     []ygot.Annotation                                                                                `path:"@srgb" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) IsYANGGoStruct() {
}

// NewSrgb creates a new entry in the Srgb list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) NewSrgb(LocalId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srgb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srgb", key)
	}

	t.Srgb[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb{
		LocalId: &LocalId,
	}

	return t.Srgb[key], nil
}

// RenameSrgb renames an entry in the list Srgb within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) RenameSrgb(oldK, newK string) error {
	if _, ok := t.Srgb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srgb", newK)
	}

	e, ok := t.Srgb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srgb", oldK)
	}
	e.LocalId = &newK

	t.Srgb[newK] = e
	delete(t.Srgb, oldK)
	return nil
}

// GetOrCreateSrgbMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) GetOrCreateSrgbMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb {
	if t.Srgb == nil {
		t.Srgb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb)
	}
	return t.Srgb
}

// GetOrCreateSrgb retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) GetOrCreateSrgb(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb {

	key := LocalId

	if v, ok := t.Srgb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrgb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrgb got unexpected error: %v", err))
	}
	return v
}

// GetSrgb retrieves the value with the specified key from
// the Srgb map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) GetSrgb(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srgb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrgb deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) DeleteSrgb(LocalId string) {
	key := LocalId

	delete(t.Srgb, key)
}

// AppendSrgb appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb struct to the
// list Srgb of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) AppendSrgb(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb)
	}

	if _, ok := t.Srgb[key]; ok {
		return fmt.Errorf("duplicate key for list Srgb %v", key)
	}

	t.Srgb[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                            `path:"@config" ygotAnnotation:"true"`
	LocalId   *string                                                                                      `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId  []ygot.Annotation                                                                            `path:"@local-id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config struct {
	ΛMetadata        []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	DataplaneType    E_OpenconfigSegmentRoutingTypes_SrDataplaneType `path:"dataplane-type" module:"openconfig-network-instance"`
	ΛDataplaneType   []ygot.Annotation                               `path:"@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefixes     []string                                        `path:"ipv6-prefixes" module:"openconfig-network-instance"`
	ΛIpv6Prefixes    []ygot.Annotation                               `path:"@ipv6-prefixes" ygotAnnotation:"true"`
	LocalId          *string                                         `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId         []ygot.Annotation                               `path:"@local-id" ygotAnnotation:"true"`
	MplsLabelBlocks  []string                                        `path:"mpls-label-blocks" module:"openconfig-network-instance"`
	ΛMplsLabelBlocks []ygot.Annotation                               `path:"@mpls-label-blocks" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State struct {
	ΛMetadata        []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	DataplaneType    E_OpenconfigSegmentRoutingTypes_SrDataplaneType `path:"dataplane-type" module:"openconfig-network-instance"`
	ΛDataplaneType   []ygot.Annotation                               `path:"@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefixes     []string                                        `path:"ipv6-prefixes" module:"openconfig-network-instance"`
	ΛIpv6Prefixes    []ygot.Annotation                               `path:"@ipv6-prefixes" ygotAnnotation:"true"`
	LocalId          *string                                         `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId         []ygot.Annotation                               `path:"@local-id" ygotAnnotation:"true"`
	MplsLabelBlocks  []string                                        `path:"mpls-label-blocks" module:"openconfig-network-instance"`
	ΛMplsLabelBlocks []ygot.Annotation                               `path:"@mpls-label-blocks" ygotAnnotation:"true"`
	Size             *uint32                                         `path:"size" module:"openconfig-network-instance"`
	ΛSize            []ygot.Annotation                               `path:"@size" ygotAnnotation:"true"`
	Used             *uint32                                         `path:"used" module:"openconfig-network-instance"`
	ΛUsed            []ygot.Annotation                               `path:"@used" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srgbs_Srgb_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs struct {
	ΛMetadata []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Srlb      map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb `path:"srlb" module:"openconfig-network-instance"`
	ΛSrlb     []ygot.Annotation                                                                                `path:"@srlb" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) IsYANGGoStruct() {
}

// NewSrlb creates a new entry in the Srlb list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) NewSrlb(LocalId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlb", key)
	}

	t.Srlb[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb{
		LocalId: &LocalId,
	}

	return t.Srlb[key], nil
}

// RenameSrlb renames an entry in the list Srlb within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) RenameSrlb(oldK, newK string) error {
	if _, ok := t.Srlb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srlb", newK)
	}

	e, ok := t.Srlb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srlb", oldK)
	}
	e.LocalId = &newK

	t.Srlb[newK] = e
	delete(t.Srlb, oldK)
	return nil
}

// GetOrCreateSrlbMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) GetOrCreateSrlbMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb {
	if t.Srlb == nil {
		t.Srlb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb)
	}
	return t.Srlb
}

// GetOrCreateSrlb retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) GetOrCreateSrlb(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb {

	key := LocalId

	if v, ok := t.Srlb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlb got unexpected error: %v", err))
	}
	return v
}

// GetSrlb retrieves the value with the specified key from
// the Srlb map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) GetSrlb(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srlb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlb deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) DeleteSrlb(LocalId string) {
	key := LocalId

	delete(t.Srlb, key)
}

// AppendSrlb appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb struct to the
// list Srlb of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) AppendSrlb(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb)
	}

	if _, ok := t.Srlb[key]; ok {
		return fmt.Errorf("duplicate key for list Srlb %v", key)
	}

	t.Srlb[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                            `path:"@config" ygotAnnotation:"true"`
	LocalId   *string                                                                                      `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId  []ygot.Annotation                                                                            `path:"@local-id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config struct {
	ΛMetadata       []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	DataplaneType   E_OpenconfigSegmentRoutingTypes_SrDataplaneType `path:"dataplane-type" module:"openconfig-network-instance"`
	ΛDataplaneType  []ygot.Annotation                               `path:"@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefix      *string                                         `path:"ipv6-prefix" module:"openconfig-network-instance"`
	ΛIpv6Prefix     []ygot.Annotation                               `path:"@ipv6-prefix" ygotAnnotation:"true"`
	LocalId         *string                                         `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId        []ygot.Annotation                               `path:"@local-id" ygotAnnotation:"true"`
	MplsLabelBlock  *string                                         `path:"mpls-label-block" module:"openconfig-network-instance"`
	ΛMplsLabelBlock []ygot.Annotation                               `path:"@mpls-label-block" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State struct {
	ΛMetadata       []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	DataplaneType   E_OpenconfigSegmentRoutingTypes_SrDataplaneType `path:"dataplane-type" module:"openconfig-network-instance"`
	ΛDataplaneType  []ygot.Annotation                               `path:"@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefix      *string                                         `path:"ipv6-prefix" module:"openconfig-network-instance"`
	ΛIpv6Prefix     []ygot.Annotation                               `path:"@ipv6-prefix" ygotAnnotation:"true"`
	LocalId         *string                                         `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId        []ygot.Annotation                               `path:"@local-id" ygotAnnotation:"true"`
	MplsLabelBlock  *string                                         `path:"mpls-label-block" module:"openconfig-network-instance"`
	ΛMplsLabelBlock []ygot.Annotation                               `path:"@mpls-label-block" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_Srlbs_Srlb_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	TePolicy  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy `path:"te-policy" module:"openconfig-network-instance"`
	ΛTePolicy []ygot.Annotation                                                                                                                                                                                    `path:"@te-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key represents the key for list TePolicy of element /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key struct {
	Color    uint32 `path:"color"`
	Endpoint string `path:"endpoint"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"color":    t.Color,
		"endpoint": t.Endpoint,
	}, nil
}

// NewTePolicy creates a new entry in the TePolicy list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) NewTePolicy(Color uint32, Endpoint string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TePolicy", key)
	}

	t.TePolicy[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy{
		Color:    &Color,
		Endpoint: &Endpoint,
	}

	return t.TePolicy[key], nil
}

// RenameTePolicy renames an entry in the list TePolicy within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) RenameTePolicy(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key) error {
	if _, ok := t.TePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TePolicy", newK)
	}

	e, ok := t.TePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TePolicy", oldK)
	}
	e.Color = &newK.Color
	e.Endpoint = &newK.Endpoint

	t.TePolicy[newK] = e
	delete(t.TePolicy, oldK)
	return nil
}

// GetOrCreateTePolicyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) GetOrCreateTePolicyMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy {
	if t.TePolicy == nil {
		t.TePolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy)
	}
	return t.TePolicy
}

// GetOrCreateTePolicy retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) GetOrCreateTePolicy(Color uint32, Endpoint string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if v, ok := t.TePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTePolicy(Color, Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTePolicy got unexpected error: %v", err))
	}
	return v
}

// GetTePolicy retrieves the value with the specified key from
// the TePolicy map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) GetTePolicy(Color uint32, Endpoint string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if lm, ok := t.TePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTePolicy deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) DeleteTePolicy(Color uint32, Endpoint string) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	delete(t.TePolicy, key)
}

// AppendTePolicy appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy struct to the
// list TePolicy of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) AppendTePolicy(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) error {
	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key{
		Color:    *v.Color,
		Endpoint: *v.Endpoint,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy)
	}

	if _, ok := t.TePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TePolicy %v", key)
	}

	t.TePolicy[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy struct {
	ΛMetadata       []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	CandidatePaths  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths `path:"candidate-paths" module:"openconfig-network-instance"`
	ΛCandidatePaths []ygot.Annotation                                                                                             `path:"@candidate-paths" ygotAnnotation:"true"`
	Color           *uint32                                                                                                       `path:"color" module:"openconfig-network-instance"`
	ΛColor          []ygot.Annotation                                                                                             `path:"@color" ygotAnnotation:"true"`
	Endpoint        *string                                                                                                       `path:"endpoint" module:"openconfig-network-instance"`
	ΛEndpoint       []ygot.Annotation                                                                                             `path:"@endpoint" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State          `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) IsYANGGoStruct() {
}

// GetOrCreateCandidatePaths retrieves the value of the CandidatePaths field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) GetOrCreateCandidatePaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths {
	if t.CandidatePaths != nil {
		return t.CandidatePaths
	}
	t.CandidatePaths = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths{}
	return t.CandidatePaths
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State{}
	return t.State
}

// GetCandidatePaths returns the value of the CandidatePaths struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy. If the receiver or the field CandidatePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) GetCandidatePaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths {
	if t != nil && t.CandidatePaths != nil {
		return t.CandidatePaths
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	CandidatePath  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath `path:"candidate-path" module:"openconfig-network-instance"`
	ΛCandidatePath []ygot.Annotation                                                                                                                                                                                                                                              `path:"@candidate-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key represents the key for list CandidatePath of element /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key struct {
	ProtocolOrigin E_OpenconfigSegmentRoutingTypes_SrteProtocolType `path:"protocol-origin"`
	OriginatorAsn  uint32                                           `path:"originator-asn"`
	OriginatorAddr string                                           `path:"originator-addr"`
	Discriminator  uint32                                           `path:"discriminator"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"protocol-origin": t.ProtocolOrigin,
		"originator-asn":  t.OriginatorAsn,
		"originator-addr": t.OriginatorAddr,
		"discriminator":   t.Discriminator,
	}, nil
}

// NewCandidatePath creates a new entry in the CandidatePath list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) NewCandidatePath(ProtocolOrigin E_OpenconfigSegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidatePath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidatePath", key)
	}

	t.CandidatePath[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  &OriginatorAsn,
		OriginatorAddr: &OriginatorAddr,
		Discriminator:  &Discriminator,
	}

	return t.CandidatePath[key], nil
}

// RenameCandidatePath renames an entry in the list CandidatePath within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) RenameCandidatePath(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key) error {
	if _, ok := t.CandidatePath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidatePath", newK)
	}

	e, ok := t.CandidatePath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidatePath", oldK)
	}
	e.ProtocolOrigin = newK.ProtocolOrigin
	e.OriginatorAsn = &newK.OriginatorAsn
	e.OriginatorAddr = &newK.OriginatorAddr
	e.Discriminator = &newK.Discriminator

	t.CandidatePath[newK] = e
	delete(t.CandidatePath, oldK)
	return nil
}

// GetOrCreateCandidatePathMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) GetOrCreateCandidatePathMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath {
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath)
	}
	return t.CandidatePath
}

// GetOrCreateCandidatePath retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) GetOrCreateCandidatePath(ProtocolOrigin E_OpenconfigSegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if v, ok := t.CandidatePath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidatePath(ProtocolOrigin, OriginatorAsn, OriginatorAddr, Discriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidatePath got unexpected error: %v", err))
	}
	return v
}

// GetCandidatePath retrieves the value with the specified key from
// the CandidatePath map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) GetCandidatePath(ProtocolOrigin E_OpenconfigSegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if lm, ok := t.CandidatePath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidatePath deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) DeleteCandidatePath(ProtocolOrigin E_OpenconfigSegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	delete(t.CandidatePath, key)
}

// AppendCandidatePath appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath struct to the
// list CandidatePath of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) AppendCandidatePath(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) error {
	if v.OriginatorAsn == nil {
		return fmt.Errorf("invalid nil key for OriginatorAsn")
	}

	if v.OriginatorAddr == nil {
		return fmt.Errorf("invalid nil key for OriginatorAddr")
	}

	if v.Discriminator == nil {
		return fmt.Errorf("invalid nil key for Discriminator")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key{
		ProtocolOrigin: v.ProtocolOrigin,
		OriginatorAsn:  *v.OriginatorAsn,
		OriginatorAddr: *v.OriginatorAddr,
		Discriminator:  *v.Discriminator,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath)
	}

	if _, ok := t.CandidatePath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidatePath %v", key)
	}

	t.CandidatePath[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath struct {
	ΛMetadata       []ygot.Annotation                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Discriminator   *uint32                                                                                                                                  `path:"discriminator" module:"openconfig-network-instance"`
	ΛDiscriminator  []ygot.Annotation                                                                                                                        `path:"@discriminator" ygotAnnotation:"true"`
	OriginatorAddr  *string                                                                                                                                  `path:"originator-addr" module:"openconfig-network-instance"`
	ΛOriginatorAddr []ygot.Annotation                                                                                                                        `path:"@originator-addr" ygotAnnotation:"true"`
	OriginatorAsn   *uint32                                                                                                                                  `path:"originator-asn" module:"openconfig-network-instance"`
	ΛOriginatorAsn  []ygot.Annotation                                                                                                                        `path:"@originator-asn" ygotAnnotation:"true"`
	ProtocolOrigin  E_OpenconfigSegmentRoutingTypes_SrteProtocolType                                                                                         `path:"protocol-origin" module:"openconfig-network-instance"`
	ΛProtocolOrigin []ygot.Annotation                                                                                                                        `path:"@protocol-origin" ygotAnnotation:"true"`
	SegmentLists    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists `path:"segment-lists" module:"openconfig-network-instance"`
	ΛSegmentLists   []ygot.Annotation                                                                                                                        `path:"@segment-lists" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State        `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) IsYANGGoStruct() {
}

// GetOrCreateSegmentLists retrieves the value of the SegmentLists field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) GetOrCreateSegmentLists() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists {
	if t.SegmentLists != nil {
		return t.SegmentLists
	}
	t.SegmentLists = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists{}
	return t.SegmentLists
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State{}
	return t.State
}

// GetSegmentLists returns the value of the SegmentLists struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath. If the receiver or the field SegmentLists is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) GetSegmentLists() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists {
	if t != nil && t.SegmentLists != nil {
		return t.SegmentLists
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Discriminator == nil {
		return nil, fmt.Errorf("nil value for key Discriminator")
	}

	if t.OriginatorAddr == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAddr")
	}

	if t.OriginatorAsn == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAsn")
	}

	return map[string]interface{}{
		"discriminator":   *t.Discriminator,
		"originator-addr": *t.OriginatorAddr,
		"originator-asn":  *t.OriginatorAsn,
		"protocol-origin": t.ProtocolOrigin,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists struct {
	ΛMetadata    []ygot.Annotation                                                                                                                                               `path:"@" ygotAnnotation:"true"`
	SegmentList  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList `path:"segment-list" module:"openconfig-network-instance"`
	ΛSegmentList []ygot.Annotation                                                                                                                                               `path:"@segment-list" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) IsYANGGoStruct() {
}

// NewSegmentList creates a new entry in the SegmentList list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) NewSegmentList(Id uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList{
		Id: &Id,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) RenameSegmentList(oldK, newK uint32) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.Id = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentListMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) GetOrCreateSegmentListMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList {
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList)
	}
	return t.SegmentList
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) GetOrCreateSegmentList(Id uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList {

	key := Id

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) GetSegmentList(Id uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) DeleteSegmentList(Id uint32) {
	key := Id

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList struct to the
// list SegmentList of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) AppendSegmentList(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList struct {
	ΛMetadata []ygot.Annotation                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	Id        *uint32                                                                                                                                                       `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                                                             `path:"@id" ygotAnnotation:"true"`
	NextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops []ygot.Annotation                                                                                                                                             `path:"@next-hops" ygotAnnotation:"true"`
	Sids      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids     `path:"sids" module:"openconfig-network-instance"`
	ΛSids     []ygot.Annotation                                                                                                                                             `path:"@sids" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State    `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) IsYANGGoStruct() {
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops{}
	return t.NextHops
}

// GetOrCreateSids retrieves the value of the Sids field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetOrCreateSids() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids {
	if t.Sids != nil {
		return t.Sids
	}
	t.Sids = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids{}
	return t.Sids
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State{}
	return t.State
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetSids returns the value of the Sids struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList. If the receiver or the field Sids is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetSids() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids {
	if t != nil && t.Sids != nil {
		return t.Sids
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                                                                                `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Index         *uint64                                                                                                                                                                            `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                                                                  `path:"@index" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                                                                                                  `path:"@interface-ref" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State{}
	return t.State
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State struct {
	ΛMetadata             []ygot.Annotation                                                                                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Counters              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters                    `path:"counters" module:"openconfig-network-instance"`
	ΛCounters             []ygot.Annotation                                                                                                                                                                                       `path:"@counters" ygotAnnotation:"true"`
	DecapsulateHeader     E_OpenconfigAftTypes_EncapsulationHeaderType                                                                                                                                                            `path:"decapsulate-header" module:"openconfig-network-instance"`
	ΛDecapsulateHeader    []ygot.Annotation                                                                                                                                                                                       `path:"@decapsulate-header" ygotAnnotation:"true"`
	EncapsulateHeader     E_OpenconfigAftTypes_EncapsulationHeaderType                                                                                                                                                            `path:"encapsulate-header" module:"openconfig-network-instance"`
	ΛEncapsulateHeader    []ygot.Annotation                                                                                                                                                                                       `path:"@encapsulate-header" ygotAnnotation:"true"`
	Index                 *uint64                                                                                                                                                                                                 `path:"index" module:"openconfig-network-instance"`
	ΛIndex                []ygot.Annotation                                                                                                                                                                                       `path:"@index" ygotAnnotation:"true"`
	IpAddress             *string                                                                                                                                                                                                 `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress            []ygot.Annotation                                                                                                                                                                                       `path:"@ip-address" ygotAnnotation:"true"`
	MacAddress            *string                                                                                                                                                                                                 `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress           []ygot.Annotation                                                                                                                                                                                       `path:"@mac-address" ygotAnnotation:"true"`
	OriginProtocol        E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                                                                                                                           `path:"origin-protocol" module:"openconfig-network-instance"`
	ΛOriginProtocol       []ygot.Annotation                                                                                                                                                                                       `path:"@origin-protocol" ygotAnnotation:"true"`
	PopTopLabel           *bool                                                                                                                                                                                                   `path:"pop-top-label" module:"openconfig-network-instance"`
	ΛPopTopLabel          []ygot.Annotation                                                                                                                                                                                       `path:"@pop-top-label" ygotAnnotation:"true"`
	ProgrammedIndex       *uint64                                                                                                                                                                                                 `path:"programmed-index" module:"openconfig-network-instance"`
	ΛProgrammedIndex      []ygot.Annotation                                                                                                                                                                                       `path:"@programmed-index" ygotAnnotation:"true"`
	PushedMplsLabelStack  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_PushedMplsLabelStack_Union `path:"pushed-mpls-label-stack" module:"openconfig-network-instance"`
	ΛPushedMplsLabelStack []ygot.Annotation                                                                                                                                                                                       `path:"@pushed-mpls-label-stack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_NextHops_NextHop_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Sid       map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid `path:"sid" module:"openconfig-network-instance"`
	ΛSid      []ygot.Annotation                                                                                                                                                        `path:"@sid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) IsYANGGoStruct() {
}

// NewSid creates a new entry in the Sid list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) NewSid(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sid", key)
	}

	t.Sid[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid{
		Index: &Index,
	}

	return t.Sid[key], nil
}

// RenameSid renames an entry in the list Sid within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) RenameSid(oldK, newK uint64) error {
	if _, ok := t.Sid[newK]; ok {
		return fmt.Errorf("key %v already exists in Sid", newK)
	}

	e, ok := t.Sid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sid", oldK)
	}
	e.Index = &newK

	t.Sid[newK] = e
	delete(t.Sid, oldK)
	return nil
}

// GetOrCreateSidMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) GetOrCreateSidMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid {
	if t.Sid == nil {
		t.Sid = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid)
	}
	return t.Sid
}

// GetOrCreateSid retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) GetOrCreateSid(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid {

	key := Index

	if v, ok := t.Sid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSid(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSid got unexpected error: %v", err))
	}
	return v
}

// GetSid retrieves the value with the specified key from
// the Sid map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) GetSid(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Sid[key]; ok {
		return lm
	}
	return nil
}

// DeleteSid deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) DeleteSid(Index uint64) {
	key := Index

	delete(t.Sid, key)
}

// AppendSid appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid struct to the
// list Sid of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) AppendSid(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid)
	}

	if _, ok := t.Sid[key]; ok {
		return fmt.Errorf("duplicate key for list Sid %v", key)
	}

	t.Sid[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                                                                             `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                                                   `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                                                                                        `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                                                              `path:"@index" ygotAnnotation:"true"`
	MplsTc    *uint8                                                                                                                                                                         `path:"mpls-tc" module:"openconfig-network-instance"`
	ΛMplsTc   []ygot.Annotation                                                                                                                                                              `path:"@mpls-tc" ygotAnnotation:"true"`
	MplsTtl   *uint8                                                                                                                                                                         `path:"mpls-ttl" module:"openconfig-network-instance"`
	ΛMplsTtl  []ygot.Annotation                                                                                                                                                              `path:"@mpls-ttl" ygotAnnotation:"true"`
	Value     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State_Value_Union `path:"value" module:"openconfig-network-instance"`
	ΛValue    []ygot.Annotation                                                                                                                                                              `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_Sids_Sid_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Counters       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                                                                                   `path:"@counters" ygotAnnotation:"true"`
	Id             *uint32                                                                                                                                                             `path:"id" module:"openconfig-network-instance"`
	ΛId            []ygot.Annotation                                                                                                                                                   `path:"@id" ygotAnnotation:"true"`
	InvalidReason  E_OpenconfigSegmentRoutingTypes_SrteInvalidSlReason                                                                                                                 `path:"invalid-reason" module:"openconfig-network-instance"`
	ΛInvalidReason []ygot.Annotation                                                                                                                                                   `path:"@invalid-reason" ygotAnnotation:"true"`
	Valid          *bool                                                                                                                                                               `path:"valid" module:"openconfig-network-instance"`
	ΛValid         []ygot.Annotation                                                                                                                                                   `path:"@valid" ygotAnnotation:"true"`
	Weight         *uint32                                                                                                                                                             `path:"weight" module:"openconfig-network-instance"`
	ΛWeight        []ygot.Annotation                                                                                                                                                   `path:"@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_SegmentLists_SegmentList_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State struct {
	ΛMetadata          []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Active             *bool                                            `path:"active" module:"openconfig-network-instance"`
	ΛActive            []ygot.Annotation                                `path:"@active" ygotAnnotation:"true"`
	ActiveSince        *uint64                                          `path:"active-since" module:"openconfig-network-instance"`
	ΛActiveSince       []ygot.Annotation                                `path:"@active-since" ygotAnnotation:"true"`
	ActiveTransitions  *uint64                                          `path:"active-transitions" module:"openconfig-network-instance"`
	ΛActiveTransitions []ygot.Annotation                                `path:"@active-transitions" ygotAnnotation:"true"`
	Discriminator      *uint32                                          `path:"discriminator" module:"openconfig-network-instance"`
	ΛDiscriminator     []ygot.Annotation                                `path:"@discriminator" ygotAnnotation:"true"`
	Enlp               E_OpenconfigSegmentRoutingTypes_EnlpType         `path:"enlp" module:"openconfig-network-instance"`
	ΛEnlp              []ygot.Annotation                                `path:"@enlp" ygotAnnotation:"true"`
	Name               *string                                          `path:"name" module:"openconfig-network-instance"`
	ΛName              []ygot.Annotation                                `path:"@name" ygotAnnotation:"true"`
	OriginatorAddr     *string                                          `path:"originator-addr" module:"openconfig-network-instance"`
	ΛOriginatorAddr    []ygot.Annotation                                `path:"@originator-addr" ygotAnnotation:"true"`
	OriginatorAsn      *uint32                                          `path:"originator-asn" module:"openconfig-network-instance"`
	ΛOriginatorAsn     []ygot.Annotation                                `path:"@originator-asn" ygotAnnotation:"true"`
	Preference         *uint32                                          `path:"preference" module:"openconfig-network-instance"`
	ΛPreference        []ygot.Annotation                                `path:"@preference" ygotAnnotation:"true"`
	ProtocolOrigin     E_OpenconfigSegmentRoutingTypes_SrteProtocolType `path:"protocol-origin" module:"openconfig-network-instance"`
	ΛProtocolOrigin    []ygot.Annotation                                `path:"@protocol-origin" ygotAnnotation:"true"`
	Valid              *bool                                            `path:"valid" module:"openconfig-network-instance"`
	ΛValid             []ygot.Annotation                                `path:"@valid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_CandidatePaths_CandidatePath_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State struct {
	ΛMetadata          []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Active             *bool                                                                                                          `path:"active" module:"openconfig-network-instance"`
	ΛActive            []ygot.Annotation                                                                                              `path:"@active" ygotAnnotation:"true"`
	ActiveSince        *uint64                                                                                                        `path:"active-since" module:"openconfig-network-instance"`
	ΛActiveSince       []ygot.Annotation                                                                                              `path:"@active-since" ygotAnnotation:"true"`
	ActiveTransitions  *uint64                                                                                                        `path:"active-transitions" module:"openconfig-network-instance"`
	ΛActiveTransitions []ygot.Annotation                                                                                              `path:"@active-transitions" ygotAnnotation:"true"`
	Bsid               OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Bsid_Union `path:"bsid" module:"openconfig-network-instance"`
	ΛBsid              []ygot.Annotation                                                                                              `path:"@bsid" ygotAnnotation:"true"`
	Color              *uint32                                                                                                        `path:"color" module:"openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                              `path:"@color" ygotAnnotation:"true"`
	Counters           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters  `path:"counters" module:"openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                                                                              `path:"@counters" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                        `path:"endpoint" module:"openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                              `path:"@endpoint" ygotAnnotation:"true"`
	Name               *string                                                                                                        `path:"name" module:"openconfig-network-instance"`
	ΛName              []ygot.Annotation                                                                                              `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InLabeledOctets   *uint64           `path:"in-labeled-octets" module:"openconfig-network-instance"`
	ΛInLabeledOctets  []ygot.Annotation `path:"@in-labeled-octets" ygotAnnotation:"true"`
	InLabeledPkts     *uint64           `path:"in-labeled-pkts" module:"openconfig-network-instance"`
	ΛInLabeledPkts    []ygot.Annotation `path:"@in-labeled-pkts" ygotAnnotation:"true"`
	InOctets          *uint64           `path:"in-octets" module:"openconfig-network-instance"`
	ΛInOctets         []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts            *uint64           `path:"in-pkts" module:"openconfig-network-instance"`
	ΛInPkts           []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting_TePolicies_TePolicy_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State represents the /openconfig-network-instance/network-instances/network-instance/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State struct {
	ΛMetadata                []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Description              *string                                                `path:"description" module:"openconfig-network-instance"`
	ΛDescription             []ygot.Annotation                                      `path:"@description" ygotAnnotation:"true"`
	FallbackNetworkInstance  *string                                                `path:"fallback-network-instance" module:"openconfig-network-instance"`
	ΛFallbackNetworkInstance []ygot.Annotation                                      `path:"@fallback-network-instance" ygotAnnotation:"true"`
	Name                     *string                                                `path:"name" module:"openconfig-network-instance"`
	ΛName                    []ygot.Annotation                                      `path:"@name" ygotAnnotation:"true"`
	RouteDistinguisher       *string                                                `path:"route-distinguisher" module:"openconfig-network-instance"`
	ΛRouteDistinguisher      []ygot.Annotation                                      `path:"@route-distinguisher" ygotAnnotation:"true"`
	RouterId                 *string                                                `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                                      `path:"@router-id" ygotAnnotation:"true"`
	Type                     E_OpenconfigNetworkInstanceTypes_NETWORK_INSTANCE_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType                    []ygot.Annotation                                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static represents the /openconfig-network-instance/network-instances/network-instance/static YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static struct {
	ΛMetadata      []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	NextHopGroups  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups `path:"next-hop-groups" module:"openconfig-network-instance"`
	ΛNextHopGroups []ygot.Annotation                                                                `path:"@next-hop-groups" ygotAnnotation:"true"`
	NextHops       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops      `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops      []ygot.Annotation                                                                `path:"@next-hops" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) IsYANGGoStruct() {}

// GetOrCreateNextHopGroups retrieves the value of the NextHopGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) GetOrCreateNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups {
	if t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	t.NextHopGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups{}
	return t.NextHopGroups
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops{}
	return t.NextHops
}

// GetNextHopGroups returns the value of the NextHopGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static. If the receiver or the field NextHopGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) GetNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups {
	if t != nil && t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups struct {
	ΛMetadata     []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	NextHopGroup  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup []ygot.Annotation                                                                                        `path:"@next-hop-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) IsYANGGoStruct() {
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) NewNextHopGroup(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup{
		Name: &Name,
	}

	return t.NextHopGroup[key], nil
}

// RenameNextHopGroup renames an entry in the list NextHopGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) RenameNextHopGroup(oldK, newK string) error {
	if _, ok := t.NextHopGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHopGroup", newK)
	}

	e, ok := t.NextHopGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHopGroup", oldK)
	}
	e.Name = &newK

	t.NextHopGroup[newK] = e
	delete(t.NextHopGroup, oldK)
	return nil
}

// GetOrCreateNextHopGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) GetOrCreateNextHopGroupMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup {
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup)
	}
	return t.NextHopGroup
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) GetOrCreateNextHopGroup(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup {

	key := Name

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) GetNextHopGroup(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) DeleteNextHopGroup(Name string) {
	key := Name

	delete(t.NextHopGroup, key)
}

// AppendNextHopGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup struct to the
// list NextHopGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) AppendNextHopGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup)
	}

	if _, ok := t.NextHopGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NextHopGroup %v", key)
	}

	t.NextHopGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup struct {
	ΛMetadata []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config   `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                      `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                                                `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation                                                                                      `path:"@name" ygotAnnotation:"true"`
	NextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops []ygot.Annotation                                                                                      `path:"@next-hops" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State    `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config{}
	return t.Config
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops{}
	return t.NextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	NextHop   map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                         `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) NewNextHop(Index string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHopMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) GetNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                     `path:"@config" ygotAnnotation:"true"`
	Index     *string                                                                                                               `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                     `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/next-hops/next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Index     *string           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Index     *string           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State represents the /openconfig-network-instance/network-instances/network-instance/static/next-hop-groups/next-hop-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHopGroups_NextHopGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	NextHop   map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                              `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) NewNextHop(Index string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) GetOrCreateNextHopMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) GetOrCreateNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) GetNextHop(Index string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop struct {
	ΛMetadata     []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config       `path:"config" module:"openconfig-network-instance"`
	ΛConfig       []ygot.Annotation                                                                                `path:"@config" ygotAnnotation:"true"`
	EncapHeaders  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders `path:"encap-headers" module:"openconfig-network-instance"`
	ΛEncapHeaders []ygot.Annotation                                                                                `path:"@encap-headers" ygotAnnotation:"true"`
	Index         *string                                                                                          `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                `path:"@index" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config{}
	return t.Config
}

// GetOrCreateEncapHeaders retrieves the value of the EncapHeaders field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetOrCreateEncapHeaders() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders {
	if t.EncapHeaders != nil {
		return t.EncapHeaders
	}
	t.EncapHeaders = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders{}
	return t.EncapHeaders
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEncapHeaders returns the value of the EncapHeaders struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop. If the receiver or the field EncapHeaders is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetEncapHeaders() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders {
	if t != nil && t.EncapHeaders != nil {
		return t.EncapHeaders
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config struct {
	ΛMetadata   []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Index       *string                                                                                                 `path:"index" module:"openconfig-network-instance"`
	ΛIndex      []ygot.Annotation                                                                                       `path:"@index" ygotAnnotation:"true"`
	Metric      *uint32                                                                                                 `path:"metric" module:"openconfig-network-instance"`
	ΛMetric     []ygot.Annotation                                                                                       `path:"@metric" ygotAnnotation:"true"`
	NextHop     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config_NextHop_Union `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop    []ygot.Annotation                                                                                       `path:"@next-hop" ygotAnnotation:"true"`
	Preference  *uint32                                                                                                 `path:"preference" module:"openconfig-network-instance"`
	ΛPreference []ygot.Annotation                                                                                       `path:"@preference" ygotAnnotation:"true"`
	Recurse     *bool                                                                                                   `path:"recurse" module:"openconfig-network-instance"`
	ΛRecurse    []ygot.Annotation                                                                                       `path:"@recurse" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders struct {
	ΛMetadata    []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	EncapHeader  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader `path:"encap-header" module:"openconfig-network-instance"`
	ΛEncapHeader []ygot.Annotation                                                                                                      `path:"@encap-header" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) IsYANGGoStruct() {
}

// NewEncapHeader creates a new entry in the EncapHeader list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) NewEncapHeader(Index uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncapHeader[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncapHeader", key)
	}

	t.EncapHeader[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader{
		Index: &Index,
	}

	return t.EncapHeader[key], nil
}

// RenameEncapHeader renames an entry in the list EncapHeader within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) RenameEncapHeader(oldK, newK uint8) error {
	if _, ok := t.EncapHeader[newK]; ok {
		return fmt.Errorf("key %v already exists in EncapHeader", newK)
	}

	e, ok := t.EncapHeader[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EncapHeader", oldK)
	}
	e.Index = &newK

	t.EncapHeader[newK] = e
	delete(t.EncapHeader, oldK)
	return nil
}

// GetOrCreateEncapHeaderMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) GetOrCreateEncapHeaderMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader {
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader)
	}
	return t.EncapHeader
}

// GetOrCreateEncapHeader retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) GetOrCreateEncapHeader(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader {

	key := Index

	if v, ok := t.EncapHeader[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEncapHeader(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEncapHeader got unexpected error: %v", err))
	}
	return v
}

// GetEncapHeader retrieves the value with the specified key from
// the EncapHeader map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) GetEncapHeader(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.EncapHeader[key]; ok {
		return lm
	}
	return nil
}

// DeleteEncapHeader deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) DeleteEncapHeader(Index uint8) {
	key := Index

	delete(t.EncapHeader, key)
}

// AppendEncapHeader appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader struct to the
// list EncapHeader of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) AppendEncapHeader(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader)
	}

	if _, ok := t.EncapHeader[key]; ok {
		return fmt.Errorf("duplicate key for list EncapHeader %v", key)
	}

	t.EncapHeader[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader struct {
	ΛMetadata []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                   `path:"@config" ygotAnnotation:"true"`
	Index     *uint8                                                                                                              `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                   `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                   `path:"@state" ygotAnnotation:"true"`
	UdpV4     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4  `path:"udp-v4" module:"openconfig-network-instance"`
	ΛUdpV4    []ygot.Annotation                                                                                                   `path:"@udp-v4" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State{}
	return t.State
}

// GetOrCreateUdpV4 retrieves the value of the UdpV4 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateUdpV4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 {
	if t.UdpV4 != nil {
		return t.UdpV4
	}
	t.UdpV4 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4{}
	return t.UdpV4
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUdpV4 returns the value of the UdpV4 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field UdpV4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) GetUdpV4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 {
	if t != nil && t.UdpV4 != nil {
		return t.UdpV4
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Index     *uint8                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                            `path:"@index" ygotAnnotation:"true"`
	Type      E_OpenconfigAftTypes_EncapsulationHeaderType `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Index     *uint8                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                            `path:"@index" ygotAnnotation:"true"`
	Type      E_OpenconfigAftTypes_EncapsulationHeaderType `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header/udp-v4 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 struct {
	ΛMetadata []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header/udp-v4/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dscp        *uint8            `path:"dscp" module:"openconfig-network-instance"`
	ΛDscp       []ygot.Annotation `path:"@dscp" ygotAnnotation:"true"`
	DstIp       *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp      []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	DstUdpPort  *uint16           `path:"dst-udp-port" module:"openconfig-network-instance"`
	ΛDstUdpPort []ygot.Annotation `path:"@dst-udp-port" ygotAnnotation:"true"`
	IpTtl       *uint8            `path:"ip-ttl" module:"openconfig-network-instance"`
	ΛIpTtl      []ygot.Annotation `path:"@ip-ttl" ygotAnnotation:"true"`
	SrcIp       *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp      []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	SrcUdpPort  *uint16           `path:"src-udp-port" module:"openconfig-network-instance"`
	ΛSrcUdpPort []ygot.Annotation `path:"@src-udp-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/encap-headers/encap-header/udp-v4/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dscp        *uint8            `path:"dscp" module:"openconfig-network-instance"`
	ΛDscp       []ygot.Annotation `path:"@dscp" ygotAnnotation:"true"`
	DstIp       *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp      []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	DstUdpPort  *uint16           `path:"dst-udp-port" module:"openconfig-network-instance"`
	ΛDstUdpPort []ygot.Annotation `path:"@dst-udp-port" ygotAnnotation:"true"`
	IpTtl       *uint8            `path:"ip-ttl" module:"openconfig-network-instance"`
	ΛIpTtl      []ygot.Annotation `path:"@ip-ttl" ygotAnnotation:"true"`
	SrcIp       *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp      []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	SrcUdpPort  *uint16           `path:"src-udp-port" module:"openconfig-network-instance"`
	ΛSrcUdpPort []ygot.Annotation `path:"@src-udp-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/static/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State struct {
	ΛMetadata   []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	Index       *string                                                                                                `path:"index" module:"openconfig-network-instance"`
	ΛIndex      []ygot.Annotation                                                                                      `path:"@index" ygotAnnotation:"true"`
	Metric      *uint32                                                                                                `path:"metric" module:"openconfig-network-instance"`
	ΛMetric     []ygot.Annotation                                                                                      `path:"@metric" ygotAnnotation:"true"`
	NextHop     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State_NextHop_Union `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop    []ygot.Annotation                                                                                      `path:"@next-hop" ygotAnnotation:"true"`
	Preference  *uint32                                                                                                `path:"preference" module:"openconfig-network-instance"`
	ΛPreference []ygot.Annotation                                                                                      `path:"@preference" ygotAnnotation:"true"`
	Recurse     *bool                                                                                                  `path:"recurse" module:"openconfig-network-instance"`
	ΛRecurse    []ygot.Annotation                                                                                      `path:"@recurse" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections represents the /openconfig-network-instance/network-instances/network-instance/table-connections YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections struct {
	ΛMetadata        []ygot.Annotation                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	TableConnection  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection `path:"table-connection" module:"openconfig-network-instance"`
	ΛTableConnection []ygot.Annotation                                                                                                                                                                                `path:"@table-connection" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key represents the key for list TableConnection of element /openconfig-network-instance/network-instances/network-instance/table-connections.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key struct {
	SrcProtocol   E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"src-protocol"`
	DstProtocol   E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"dst-protocol"`
	AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"src-protocol":   t.SrcProtocol,
		"dst-protocol":   t.DstProtocol,
		"address-family": t.AddressFamily,
	}, nil
}

// NewTableConnection creates a new entry in the TableConnection list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) NewTableConnection(SrcProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TableConnection == nil {
		t.TableConnection = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key{
		SrcProtocol:   SrcProtocol,
		DstProtocol:   DstProtocol,
		AddressFamily: AddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TableConnection[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TableConnection", key)
	}

	t.TableConnection[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection{
		SrcProtocol:   SrcProtocol,
		DstProtocol:   DstProtocol,
		AddressFamily: AddressFamily,
	}

	return t.TableConnection[key], nil
}

// RenameTableConnection renames an entry in the list TableConnection within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) RenameTableConnection(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key) error {
	if _, ok := t.TableConnection[newK]; ok {
		return fmt.Errorf("key %v already exists in TableConnection", newK)
	}

	e, ok := t.TableConnection[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TableConnection", oldK)
	}
	e.SrcProtocol = newK.SrcProtocol
	e.DstProtocol = newK.DstProtocol
	e.AddressFamily = newK.AddressFamily

	t.TableConnection[newK] = e
	delete(t.TableConnection, oldK)
	return nil
}

// GetOrCreateTableConnectionMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) GetOrCreateTableConnectionMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection {
	if t.TableConnection == nil {
		t.TableConnection = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection)
	}
	return t.TableConnection
}

// GetOrCreateTableConnection retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) GetOrCreateTableConnection(SrcProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key{
		SrcProtocol:   SrcProtocol,
		DstProtocol:   DstProtocol,
		AddressFamily: AddressFamily,
	}

	if v, ok := t.TableConnection[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTableConnection(SrcProtocol, DstProtocol, AddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTableConnection got unexpected error: %v", err))
	}
	return v
}

// GetTableConnection retrieves the value with the specified key from
// the TableConnection map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) GetTableConnection(SrcProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key{
		SrcProtocol:   SrcProtocol,
		DstProtocol:   DstProtocol,
		AddressFamily: AddressFamily,
	}

	if lm, ok := t.TableConnection[key]; ok {
		return lm
	}
	return nil
}

// DeleteTableConnection deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) DeleteTableConnection(SrcProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key{
		SrcProtocol:   SrcProtocol,
		DstProtocol:   DstProtocol,
		AddressFamily: AddressFamily,
	}

	delete(t.TableConnection, key)
}

// AppendTableConnection appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection struct to the
// list TableConnection of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) AppendTableConnection(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) error {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key{
		SrcProtocol:   v.SrcProtocol,
		DstProtocol:   v.DstProtocol,
		AddressFamily: v.AddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TableConnection == nil {
		t.TableConnection = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection)
	}

	if _, ok := t.TableConnection[key]; ok {
		return fmt.Errorf("duplicate key for list TableConnection %v", key)
	}

	t.TableConnection[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection struct {
	ΛMetadata      []ygot.Annotation                                                                                   `path:"@" ygotAnnotation:"true"`
	AddressFamily  E_OpenconfigTypes_ADDRESS_FAMILY                                                                    `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                                                   `path:"@address-family" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                                                   `path:"@config" ygotAnnotation:"true"`
	DstProtocol    E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                       `path:"dst-protocol" module:"openconfig-network-instance"`
	ΛDstProtocol   []ygot.Annotation                                                                                   `path:"@dst-protocol" ygotAnnotation:"true"`
	SrcProtocol    E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                       `path:"src-protocol" module:"openconfig-network-instance"`
	ΛSrcProtocol   []ygot.Annotation                                                                                   `path:"@src-protocol" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State  `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"dst-protocol":   t.DstProtocol,
		"src-protocol":   t.SrcProtocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config struct {
	ΛMetadata                 []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AddressFamily             E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily            []ygot.Annotation                             `path:"@address-family" ygotAnnotation:"true"`
	DefaultImportPolicy       E_OpenconfigRoutingPolicy_DefaultPolicyType   `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy      []ygot.Annotation                             `path:"@default-import-policy" ygotAnnotation:"true"`
	DisableMetricPropagation  *bool                                         `path:"disable-metric-propagation" module:"openconfig-network-instance"`
	ΛDisableMetricPropagation []ygot.Annotation                             `path:"@disable-metric-propagation" ygotAnnotation:"true"`
	DstProtocol               E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"dst-protocol" module:"openconfig-network-instance"`
	ΛDstProtocol              []ygot.Annotation                             `path:"@dst-protocol" ygotAnnotation:"true"`
	ImportPolicy              []string                                      `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy             []ygot.Annotation                             `path:"@import-policy" ygotAnnotation:"true"`
	SrcProtocol               E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"src-protocol" module:"openconfig-network-instance"`
	ΛSrcProtocol              []ygot.Annotation                             `path:"@src-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State struct {
	ΛMetadata                 []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AddressFamily             E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily            []ygot.Annotation                             `path:"@address-family" ygotAnnotation:"true"`
	DefaultImportPolicy       E_OpenconfigRoutingPolicy_DefaultPolicyType   `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy      []ygot.Annotation                             `path:"@default-import-policy" ygotAnnotation:"true"`
	DisableMetricPropagation  *bool                                         `path:"disable-metric-propagation" module:"openconfig-network-instance"`
	ΛDisableMetricPropagation []ygot.Annotation                             `path:"@disable-metric-propagation" ygotAnnotation:"true"`
	DstProtocol               E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"dst-protocol" module:"openconfig-network-instance"`
	ΛDstProtocol              []ygot.Annotation                             `path:"@dst-protocol" ygotAnnotation:"true"`
	ImportPolicy              []string                                      `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy             []ygot.Annotation                             `path:"@import-policy" ygotAnnotation:"true"`
	SrcProtocol               E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"src-protocol" module:"openconfig-network-instance"`
	ΛSrcProtocol              []ygot.Annotation                             `path:"@src-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections_TableConnection_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables represents the /openconfig-network-instance/network-instances/network-instance/tables YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables struct {
	ΛMetadata []ygot.Annotation                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Table     map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table `path:"table" module:"openconfig-network-instance"`
	ΛTable    []ygot.Annotation                                                                                                                                        `path:"@table" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) IsYANGGoStruct() {}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key represents the key for list Table of element /openconfig-network-instance/network-instances/network-instance/tables.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key struct {
	Protocol      E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"protocol"`
	AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"protocol":       t.Protocol,
		"address-family": t.AddressFamily,
	}, nil
}

// NewTable creates a new entry in the Table list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) NewTable(Protocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Table == nil {
		t.Table = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key{
		Protocol:      Protocol,
		AddressFamily: AddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Table[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Table", key)
	}

	t.Table[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table{
		Protocol:      Protocol,
		AddressFamily: AddressFamily,
	}

	return t.Table[key], nil
}

// RenameTable renames an entry in the list Table within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) RenameTable(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key) error {
	if _, ok := t.Table[newK]; ok {
		return fmt.Errorf("key %v already exists in Table", newK)
	}

	e, ok := t.Table[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Table", oldK)
	}
	e.Protocol = newK.Protocol
	e.AddressFamily = newK.AddressFamily

	t.Table[newK] = e
	delete(t.Table, oldK)
	return nil
}

// GetOrCreateTableMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) GetOrCreateTableMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table {
	if t.Table == nil {
		t.Table = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table)
	}
	return t.Table
}

// GetOrCreateTable retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) GetOrCreateTable(Protocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key{
		Protocol:      Protocol,
		AddressFamily: AddressFamily,
	}

	if v, ok := t.Table[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTable(Protocol, AddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTable got unexpected error: %v", err))
	}
	return v
}

// GetTable retrieves the value with the specified key from
// the Table map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) GetTable(Protocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key{
		Protocol:      Protocol,
		AddressFamily: AddressFamily,
	}

	if lm, ok := t.Table[key]; ok {
		return lm
	}
	return nil
}

// DeleteTable deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) DeleteTable(Protocol E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_OpenconfigTypes_ADDRESS_FAMILY) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key{
		Protocol:      Protocol,
		AddressFamily: AddressFamily,
	}

	delete(t.Table, key)
}

// AppendTable appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table struct to the
// list Table of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) AppendTable(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) error {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key{
		Protocol:      v.Protocol,
		AddressFamily: v.AddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Table == nil {
		t.Table = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table)
	}

	if _, ok := t.Table[key]; ok {
		return fmt.Errorf("duplicate key for list Table %v", key)
	}

	t.Table[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table struct {
	ΛMetadata      []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AddressFamily  E_OpenconfigTypes_ADDRESS_FAMILY                                                `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                               `path:"@address-family" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                               `path:"@config" ygotAnnotation:"true"`
	Protocol       E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"protocol" module:"openconfig-network-instance"`
	ΛProtocol      []ygot.Annotation                                                               `path:"@protocol" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State  `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"protocol":       t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config represents the /openconfig-network-instance/network-instances/network-instance/tables/table/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config struct {
	ΛMetadata      []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AddressFamily  E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                             `path:"@address-family" ygotAnnotation:"true"`
	Protocol       E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"protocol" module:"openconfig-network-instance"`
	ΛProtocol      []ygot.Annotation                             `path:"@protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State represents the /openconfig-network-instance/network-instances/network-instance/tables/table/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State struct {
	ΛMetadata      []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AddressFamily  E_OpenconfigTypes_ADDRESS_FAMILY              `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                             `path:"@address-family" ygotAnnotation:"true"`
	Protocol       E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"protocol" module:"openconfig-network-instance"`
	ΛProtocol      []ygot.Annotation                             `path:"@protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables_Table_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans represents the /openconfig-network-instance/network-instances/network-instance/vlans YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans struct {
	ΛMetadata []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	Vlan      map[uint16]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan     []ygot.Annotation                                                                 `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) IsYANGGoStruct() {}

// NewVlan creates a new entry in the Vlan list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) NewVlan(VlanId uint16) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan{
		VlanId: &VlanId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) RenameVlan(oldK, newK uint16) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.VlanId = &newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlanMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) GetOrCreateVlanMap() map[uint16]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan {
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan)
	}
	return t.Vlan
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) GetOrCreateVlan(VlanId uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan {

	key := VlanId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) GetVlan(VlanId uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlan deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) DeleteVlan(VlanId uint16) {
	key := VlanId

	delete(t.Vlan, key)
}

// AppendVlan appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan struct to the
// list Vlan of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) AppendVlan(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config  `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                              `path:"@config" ygotAnnotation:"true"`
	Members   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members `path:"members" module:"openconfig-network-instance"`
	ΛMembers  []ygot.Annotation                                                              `path:"@members" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State   `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                              `path:"@state" ygotAnnotation:"true"`
	VlanId    *uint16                                                                        `path:"vlan-id" module:"openconfig-network-instance"`
	ΛVlanId   []ygot.Annotation                                                              `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config{}
	return t.Config
}

// GetOrCreateMembers retrieves the value of the Members field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetOrCreateMembers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members {
	if t.Members != nil {
		return t.Members
	}
	t.Members = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members{}
	return t.Members
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetMembers returns the value of the Members struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan. If the receiver or the field Members is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetMembers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members {
	if t != nil && t.Members != nil {
		return t.Members
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                               `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation                                                                     `path:"@name" ygotAnnotation:"true"`
	Status    E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status `path:"status" module:"openconfig-network-instance"`
	ΛStatus   []ygot.Annotation                                                                     `path:"@status" ygotAnnotation:"true"`
	VlanId    *uint16                                                                               `path:"vlan-id" module:"openconfig-network-instance"`
	ΛVlanId   []ygot.Annotation                                                                     `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members struct {
	ΛMetadata []ygot.Annotation                                                                       `path:"@" ygotAnnotation:"true"`
	Member    []*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member `path:"member" module:"openconfig-network-instance"`
	ΛMember   []ygot.Annotation                                                                       `path:"@member" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member struct {
	ΛMetadata []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface  *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Members_Member_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                               `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation                                                                     `path:"@name" ygotAnnotation:"true"`
	Status    E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_Config_Status `path:"status" module:"openconfig-network-instance"`
	ΛStatus   []ygot.Annotation                                                                     `path:"@status" ygotAnnotation:"true"`
	VlanId    *uint16                                                                               `path:"vlan-id" module:"openconfig-network-instance"`
	ΛVlanId   []ygot.Annotation                                                                     `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans_Vlan_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Component  map[string]*OpenconfigPlatform_Components_Component `path:"component" module:"openconfig-platform"`
	ΛComponent []ygot.Annotation                                   `path:"@component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the OpenconfigPlatform_Components struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponentMap returns the list (map) from OpenconfigPlatform_Components.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components) GetOrCreateComponentMap() map[string]*OpenconfigPlatform_Components_Component {
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}
	return t.Component
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components) GetOrCreateComponent(Name string) *OpenconfigPlatform_Components_Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of OpenconfigPlatform_Components. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components) GetComponent(Name string) *OpenconfigPlatform_Components_Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components) DeleteComponent(Name string) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied OpenconfigPlatform_Components_Component struct to the
// list Component of OpenconfigPlatform_Components. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components) AppendComponent(v *OpenconfigPlatform_Components_Component) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components.
func (*OpenconfigPlatform_Components) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Backplane          *OpenconfigPlatform_Components_Component_Backplane         `path:"backplane" module:"openconfig-platform"`
	ΛBackplane         []ygot.Annotation                                          `path:"@backplane" ygotAnnotation:"true"`
	Chassis            *OpenconfigPlatform_Components_Component_Chassis           `path:"chassis" module:"openconfig-platform"`
	ΛChassis           []ygot.Annotation                                          `path:"@chassis" ygotAnnotation:"true"`
	Config             *OpenconfigPlatform_Components_Component_Config            `path:"config" module:"openconfig-platform"`
	ΛConfig            []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	ControllerCard     *OpenconfigPlatform_Components_Component_ControllerCard    `path:"controller-card" module:"openconfig-platform"`
	ΛControllerCard    []ygot.Annotation                                          `path:"@controller-card" ygotAnnotation:"true"`
	Cpu                *OpenconfigPlatform_Components_Component_Cpu               `path:"cpu" module:"openconfig-platform"`
	ΛCpu               []ygot.Annotation                                          `path:"@cpu" ygotAnnotation:"true"`
	Fabric             *OpenconfigPlatform_Components_Component_Fabric            `path:"fabric" module:"openconfig-platform"`
	ΛFabric            []ygot.Annotation                                          `path:"@fabric" ygotAnnotation:"true"`
	Fan                *OpenconfigPlatform_Components_Component_Fan               `path:"fan" module:"openconfig-platform"`
	ΛFan               []ygot.Annotation                                          `path:"@fan" ygotAnnotation:"true"`
	IntegratedCircuit  *OpenconfigPlatform_Components_Component_IntegratedCircuit `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit []ygot.Annotation                                          `path:"@integrated-circuit" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	Port               *OpenconfigPlatform_Components_Component_Port              `path:"port" module:"openconfig-platform"`
	ΛPort              []ygot.Annotation                                          `path:"@port" ygotAnnotation:"true"`
	PowerSupply        *OpenconfigPlatform_Components_Component_PowerSupply       `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply       []ygot.Annotation                                          `path:"@power-supply" ygotAnnotation:"true"`
	Properties         *OpenconfigPlatform_Components_Component_Properties        `path:"properties" module:"openconfig-platform"`
	ΛProperties        []ygot.Annotation                                          `path:"@properties" ygotAnnotation:"true"`
	SoftwareModule     *OpenconfigPlatform_Components_Component_SoftwareModule    `path:"software-module" module:"openconfig-platform"`
	ΛSoftwareModule    []ygot.Annotation                                          `path:"@software-module" ygotAnnotation:"true"`
	State              *OpenconfigPlatform_Components_Component_State             `path:"state" module:"openconfig-platform"`
	ΛState             []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
	Storage            *OpenconfigPlatform_Components_Component_Storage           `path:"storage" module:"openconfig-platform"`
	ΛStorage           []ygot.Annotation                                          `path:"@storage" ygotAnnotation:"true"`
	Subcomponents      *OpenconfigPlatform_Components_Component_Subcomponents     `path:"subcomponents" module:"openconfig-platform"`
	ΛSubcomponents     []ygot.Annotation                                          `path:"@subcomponents" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &OpenconfigPlatform_Components_Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &OpenconfigPlatform_Components_Component_Chassis{}
	return t.Chassis
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Config{}
	return t.Config
}

// GetOrCreateControllerCard retrieves the value of the ControllerCard field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateControllerCard() *OpenconfigPlatform_Components_Component_ControllerCard {
	if t.ControllerCard != nil {
		return t.ControllerCard
	}
	t.ControllerCard = &OpenconfigPlatform_Components_Component_ControllerCard{}
	return t.ControllerCard
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &OpenconfigPlatform_Components_Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &OpenconfigPlatform_Components_Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFan() *OpenconfigPlatform_Components_Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &OpenconfigPlatform_Components_Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &OpenconfigPlatform_Components_Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePort() *OpenconfigPlatform_Components_Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &OpenconfigPlatform_Components_Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &OpenconfigPlatform_Components_Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateProperties retrieves the value of the Properties field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t.Properties != nil {
		return t.Properties
	}
	t.Properties = &OpenconfigPlatform_Components_Component_Properties{}
	return t.Properties
}

// GetOrCreateSoftwareModule retrieves the value of the SoftwareModule field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSoftwareModule() *OpenconfigPlatform_Components_Component_SoftwareModule {
	if t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	t.SoftwareModule = &OpenconfigPlatform_Components_Component_SoftwareModule{}
	return t.SoftwareModule
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateState() *OpenconfigPlatform_Components_Component_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_State{}
	return t.State
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &OpenconfigPlatform_Components_Component_Storage{}
	return t.Storage
}

// GetOrCreateSubcomponents retrieves the value of the Subcomponents field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t.Subcomponents != nil {
		return t.Subcomponents
	}
	t.Subcomponents = &OpenconfigPlatform_Components_Component_Subcomponents{}
	return t.Subcomponents
}

// GetBackplane returns the value of the Backplane struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetConfig() *OpenconfigPlatform_Components_Component_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetControllerCard returns the value of the ControllerCard struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field ControllerCard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetControllerCard() *OpenconfigPlatform_Components_Component_ControllerCard {
	if t != nil && t.ControllerCard != nil {
		return t.ControllerCard
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFan() *OpenconfigPlatform_Components_Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPort() *OpenconfigPlatform_Components_Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetProperties returns the value of the Properties struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Properties is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t != nil && t.Properties != nil {
		return t.Properties
	}
	return nil
}

// GetSoftwareModule returns the value of the SoftwareModule struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field SoftwareModule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSoftwareModule() *OpenconfigPlatform_Components_Component_SoftwareModule {
	if t != nil && t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetState() *OpenconfigPlatform_Components_Component_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetSubcomponents returns the value of the Subcomponents struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Subcomponents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t != nil && t.Subcomponents != nil {
		return t.Subcomponents
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component.
func (*OpenconfigPlatform_Components_Component) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Backplane_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Backplane_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Backplane_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Backplane_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Backplane.
func (*OpenconfigPlatform_Components_Component_Backplane) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Backplane_Config represents the /openconfig-platform/components/component/backplane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Backplane_Config.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Backplane_State represents the /openconfig-platform/components/component/backplane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Backplane_State.
func (*OpenconfigPlatform_Components_Component_Backplane_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis struct {
	ΛMetadata    []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigPlatform_Components_Component_Chassis_Config      `path:"config" module:"openconfig-platform"`
	ΛConfig      []ygot.Annotation                                            `path:"@config" ygotAnnotation:"true"`
	State        *OpenconfigPlatform_Components_Component_Chassis_State       `path:"state" module:"openconfig-platform"`
	ΛState       []ygot.Annotation                                            `path:"@state" ygotAnnotation:"true"`
	Utilization  *OpenconfigPlatform_Components_Component_Chassis_Utilization `path:"utilization" module:"openconfig-platform"`
	ΛUtilization []ygot.Annotation                                            `path:"@utilization" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Chassis_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Chassis_State{}
	return t.State
}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateUtilization() *OpenconfigPlatform_Components_Component_Chassis_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &OpenconfigPlatform_Components_Component_Chassis_Utilization{}
	return t.Utilization
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUtilization returns the value of the Utilization struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetUtilization() *OpenconfigPlatform_Components_Component_Chassis_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis.
func (*OpenconfigPlatform_Components_Component_Chassis) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Config represents the /openconfig-platform/components/component/chassis/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Config.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_State represents the /openconfig-platform/components/component/chassis/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_State.
func (*OpenconfigPlatform_Components_Component_Chassis_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Utilization represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization struct {
	ΛMetadata  []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Resources  *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources `path:"resources" module:"openconfig-platform"`
	ΛResources []ygot.Annotation                                                      `path:"@resources" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization) IsYANGGoStruct() {}

// GetOrCreateResources retrieves the value of the Resources field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization) GetOrCreateResources() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources {
	if t.Resources != nil {
		return t.Resources
	}
	t.Resources = &OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources{}
	return t.Resources
}

// GetResources returns the value of the Resources struct pointer
// from OpenconfigPlatform_Components_Component_Chassis_Utilization. If the receiver or the field Resources is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization) GetResources() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources {
	if t != nil && t.Resources != nil {
		return t.Resources
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources represents the /openconfig-platform/components/component/chassis/utilization/resources YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources struct {
	ΛMetadata []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	Resource  map[string]*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource `path:"resource" module:"openconfig-platform"`
	ΛResource []ygot.Annotation                                                                          `path:"@resource" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) NewResource(Name string) (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) GetOrCreateResourceMap() map[string]*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) GetOrCreateResource(Name string) *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) GetResource(Name string) *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource struct to the
// list Resource of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) AppendResource(v *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource struct {
	ΛMetadata []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                                      `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                                `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                                      `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) GetOrCreateState() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) GetConfig() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) GetState() *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config struct {
	ΛMetadata                []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name                     *string           `path:"name" module:"openconfig-platform"`
	ΛName                    []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	UsedThresholdUpper       *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper      []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear  *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"committed" module:"openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"free" module:"openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"high-watermark" module:"openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"last-high-watermark" module:"openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"max-limit" module:"openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"name" module:"openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"used" module:"openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"used-threshold-upper-exceeded" module:"openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State.
func (*OpenconfigPlatform_Components_Component_Chassis_Utilization_Resources_Resource_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Config.
func (*OpenconfigPlatform_Components_Component_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard represents the /openconfig-platform/components/component/controller-card YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_ControllerCard_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_ControllerCard_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_ControllerCard_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_ControllerCard_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetOrCreateState() *OpenconfigPlatform_Components_Component_ControllerCard_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_ControllerCard_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_ControllerCard. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetConfig() *OpenconfigPlatform_Components_Component_ControllerCard_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_ControllerCard. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) GetState() *OpenconfigPlatform_Components_Component_ControllerCard_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard.
func (*OpenconfigPlatform_Components_Component_ControllerCard) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard_Config represents the /openconfig-platform/components/component/controller-card/config YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard_Config.
func (*OpenconfigPlatform_Components_Component_ControllerCard_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_ControllerCard_State represents the /openconfig-platform/components/component/controller-card/state YANG schema element.
type OpenconfigPlatform_Components_Component_ControllerCard_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_ControllerCard_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_ControllerCard_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_ControllerCard_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_ControllerCard_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_ControllerCard_State.
func (*OpenconfigPlatform_Components_Component_ControllerCard_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Cpu_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Cpu_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Cpu_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Cpu_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu.
func (*OpenconfigPlatform_Components_Component_Cpu) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu_Config.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Cpu_State.
func (*OpenconfigPlatform_Components_Component_Cpu_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fabric_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fabric_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fabric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fabric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric.
func (*OpenconfigPlatform_Components_Component_Fabric) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric_Config.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fabric_State.
func (*OpenconfigPlatform_Components_Component_Fabric_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fan_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fan_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan.
func (*OpenconfigPlatform_Components_Component_Fan) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan_Config.
func (*OpenconfigPlatform_Components_Component_Fan_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Fan_State.
func (*OpenconfigPlatform_Components_Component_Fan_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	ΛMetadata    []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config      `path:"config" module:"openconfig-platform"`
	ΛConfig      []ygot.Annotation                                                      `path:"@config" ygotAnnotation:"true"`
	State        *OpenconfigPlatform_Components_Component_IntegratedCircuit_State       `path:"state" module:"openconfig-platform"`
	ΛState       []ygot.Annotation                                                      `path:"@state" ygotAnnotation:"true"`
	Utilization  *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization `path:"utilization" module:"openconfig-platform"`
	ΛUtilization []ygot.Annotation                                                      `path:"@utilization" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_State{}
	return t.State
}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateUtilization() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization{}
	return t.Utilization
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUtilization returns the value of the Utilization struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetUtilization() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Config.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization struct {
	ΛMetadata  []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Resources  *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources `path:"resources" module:"openconfig-platform"`
	ΛResources []ygot.Annotation                                                                `path:"@resources" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) IsYANGGoStruct() {}

// GetOrCreateResources retrieves the value of the Resources field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) GetOrCreateResources() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources {
	if t.Resources != nil {
		return t.Resources
	}
	t.Resources = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources{}
	return t.Resources
}

// GetResources returns the value of the Resources struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization. If the receiver or the field Resources is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) GetResources() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources {
	if t != nil && t.Resources != nil {
		return t.Resources
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Resource  map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource `path:"resource" module:"openconfig-platform"`
	ΛResource []ygot.Annotation                                                                                    `path:"@resource" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) IsYANGGoStruct() {
}

// NewResource creates a new entry in the Resource list of the
// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) NewResource(Name string) (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResourceMap returns the list (map) from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetOrCreateResourceMap() map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}
	return t.Resource
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetOrCreateResource(Name string) *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) GetResource(Name string) *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct to the
// list Resource of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) AppendResource(v *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct {
	ΛMetadata []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                                                `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                                          `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                                                `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config struct {
	ΛMetadata                []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name                     *string           `path:"name" module:"openconfig-platform"`
	ΛName                    []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	UsedThresholdUpper       *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper      []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear  *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"committed" module:"openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"free" module:"openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"high-watermark" module:"openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"last-high-watermark" module:"openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"max-limit" module:"openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"name" module:"openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"used" module:"openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"used-threshold-upper" module:"openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"used-threshold-upper-clear" module:"openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"used-threshold-upper-exceeded" module:"openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Utilization_Resources_Resource_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	ΛMetadata []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Port_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Port_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Port_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateState() *OpenconfigPlatform_Components_Component_Port_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Port_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetState() *OpenconfigPlatform_Components_Component_Port_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port.
func (*OpenconfigPlatform_Components_Component_Port) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port_Config.
func (*OpenconfigPlatform_Components_Component_Port_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Port_State.
func (*OpenconfigPlatform_Components_Component_Port_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply struct {
	ΛMetadata []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_PowerSupply_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_PowerSupply_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_PowerSupply_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_PowerSupply_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_PowerSupply.
func (*OpenconfigPlatform_Components_Component_PowerSupply) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_PowerSupply_Config represents the /openconfig-platform/components/component/power-supply/config YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_PowerSupply_Config.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_PowerSupply_State represents the /openconfig-platform/components/component/power-supply/state YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_PowerSupply_State.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Properties represents the /openconfig-platform/components/component/properties YANG schema element.
type OpenconfigPlatform_Components_Component_Properties struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Property  map[string]*OpenconfigPlatform_Components_Component_Properties_Property `path:"property" module:"openconfig-platform"`
	ΛProperty []ygot.Annotation                                                       `path:"@property" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// OpenconfigPlatform_Components_Component_Properties struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Properties) NewProperty(Name string) (*OpenconfigPlatform_Components_Component_Properties_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &OpenconfigPlatform_Components_Component_Properties_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the OpenconfigPlatform_Components_Component_Properties struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Properties) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreatePropertyMap returns the list (map) from OpenconfigPlatform_Components_Component_Properties.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Properties) GetOrCreatePropertyMap() map[string]*OpenconfigPlatform_Components_Component_Properties_Property {
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}
	return t.Property
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Properties. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Properties) GetOrCreateProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of OpenconfigPlatform_Components_Component_Properties. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties) GetProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// DeleteProperty deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Properties. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Properties) DeleteProperty(Name string) {
	key := Name

	delete(t.Property, key)
}

// AppendProperty appends the supplied OpenconfigPlatform_Components_Component_Properties_Property struct to the
// list Property of OpenconfigPlatform_Components_Component_Properties. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Properties_Property already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Properties) AppendProperty(v *OpenconfigPlatform_Components_Component_Properties_Property) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties.
func (*OpenconfigPlatform_Components_Component_Properties) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Properties_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property struct {
	ΛMetadata []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Properties_Property_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                   `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                             `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                   `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Properties_Property_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Properties_Property_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Properties_Property_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Properties_Property struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties_Property.
func (*OpenconfigPlatform_Components_Component_Properties_Property) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                        `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                              `path:"@name" ygotAnnotation:"true"`
	Value     OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue    []ygot.Annotation                                                              `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties_Property_Config.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	ΛMetadata     []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                                                                         `path:"configurable" module:"openconfig-platform"`
	ΛConfigurable []ygot.Annotation                                                             `path:"@configurable" ygotAnnotation:"true"`
	Name          *string                                                                       `path:"name" module:"openconfig-platform"`
	ΛName         []ygot.Annotation                                                             `path:"@name" ygotAnnotation:"true"`
	Value         OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue        []ygot.Annotation                                                             `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Properties_Property_State.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule represents the /openconfig-platform/components/component/software-module YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_SoftwareModule_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_SoftwareModule_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_SoftwareModule_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_SoftwareModule_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetOrCreateState() *OpenconfigPlatform_Components_Component_SoftwareModule_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_SoftwareModule_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_SoftwareModule. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetConfig() *OpenconfigPlatform_Components_Component_SoftwareModule_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_SoftwareModule. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) GetState() *OpenconfigPlatform_Components_Component_SoftwareModule_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule.
func (*OpenconfigPlatform_Components_Component_SoftwareModule) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule_Config represents the /openconfig-platform/components/component/software-module/config YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule_Config.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_SoftwareModule_State represents the /openconfig-platform/components/component/software-module/state YANG schema element.
type OpenconfigPlatform_Components_Component_SoftwareModule_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_SoftwareModule_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_SoftwareModule_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_SoftwareModule_State.
func (*OpenconfigPlatform_Components_Component_SoftwareModule_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	ΛMetadata             []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	AllocatedPower        *uint32                                                             `path:"allocated-power" module:"openconfig-platform"`
	ΛAllocatedPower       []ygot.Annotation                                                   `path:"@allocated-power" ygotAnnotation:"true"`
	BaseMacAddress        *string                                                             `path:"base-mac-address" module:"openconfig-platform"`
	ΛBaseMacAddress       []ygot.Annotation                                                   `path:"@base-mac-address" ygotAnnotation:"true"`
	BootTime              *uint64                                                             `path:"boot-time" module:"openconfig-platform"`
	ΛBootTime             []ygot.Annotation                                                   `path:"@boot-time" ygotAnnotation:"true"`
	CleiCode              *string                                                             `path:"clei-code" module:"openconfig-platform"`
	ΛCleiCode             []ygot.Annotation                                                   `path:"@clei-code" ygotAnnotation:"true"`
	Description           *string                                                             `path:"description" module:"openconfig-platform"`
	ΛDescription          []ygot.Annotation                                                   `path:"@description" ygotAnnotation:"true"`
	Empty                 *bool                                                               `path:"empty" module:"openconfig-platform"`
	ΛEmpty                []ygot.Annotation                                                   `path:"@empty" ygotAnnotation:"true"`
	EquipmentFailure      *bool                                                               `path:"equipment-failure" module:"openconfig-alarms"`
	ΛEquipmentFailure     []ygot.Annotation                                                   `path:"@equipment-failure" ygotAnnotation:"true"`
	EquipmentMismatch     *bool                                                               `path:"equipment-mismatch" module:"openconfig-alarms"`
	ΛEquipmentMismatch    []ygot.Annotation                                                   `path:"@equipment-mismatch" ygotAnnotation:"true"`
	FirmwareVersion       *string                                                             `path:"firmware-version" module:"openconfig-platform"`
	ΛFirmwareVersion      []ygot.Annotation                                                   `path:"@firmware-version" ygotAnnotation:"true"`
	HardwareVersion       *string                                                             `path:"hardware-version" module:"openconfig-platform"`
	ΛHardwareVersion      []ygot.Annotation                                                   `path:"@hardware-version" ygotAnnotation:"true"`
	Id                    *string                                                             `path:"id" module:"openconfig-platform"`
	ΛId                   []ygot.Annotation                                                   `path:"@id" ygotAnnotation:"true"`
	InstallComponent      *string                                                             `path:"install-component" module:"openconfig-platform"`
	ΛInstallComponent     []ygot.Annotation                                                   `path:"@install-component" ygotAnnotation:"true"`
	InstallPosition       *string                                                             `path:"install-position" module:"openconfig-platform"`
	ΛInstallPosition      []ygot.Annotation                                                   `path:"@install-position" ygotAnnotation:"true"`
	LastPoweroffReason    *OpenconfigPlatform_Components_Component_State_LastPoweroffReason   `path:"last-poweroff-reason" module:"openconfig-platform"`
	ΛLastPoweroffReason   []ygot.Annotation                                                   `path:"@last-poweroff-reason" ygotAnnotation:"true"`
	LastPoweroffTime      *uint64                                                             `path:"last-poweroff-time" module:"openconfig-platform"`
	ΛLastPoweroffTime     []ygot.Annotation                                                   `path:"@last-poweroff-time" ygotAnnotation:"true"`
	LastRebootReason      E_OpenconfigPlatformTypes_COMPONENT_REBOOT_REASON                   `path:"last-reboot-reason" module:"openconfig-platform"`
	ΛLastRebootReason     []ygot.Annotation                                                   `path:"@last-reboot-reason" ygotAnnotation:"true"`
	LastRebootTime        *uint64                                                             `path:"last-reboot-time" module:"openconfig-platform"`
	ΛLastRebootTime       []ygot.Annotation                                                   `path:"@last-reboot-time" ygotAnnotation:"true"`
	LastSwitchoverReason  *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason `path:"last-switchover-reason" module:"openconfig-platform"`
	ΛLastSwitchoverReason []ygot.Annotation                                                   `path:"@last-switchover-reason" ygotAnnotation:"true"`
	LastSwitchoverTime    *uint64                                                             `path:"last-switchover-time" module:"openconfig-platform"`
	ΛLastSwitchoverTime   []ygot.Annotation                                                   `path:"@last-switchover-time" ygotAnnotation:"true"`
	Location              *string                                                             `path:"location" module:"openconfig-platform"`
	ΛLocation             []ygot.Annotation                                                   `path:"@location" ygotAnnotation:"true"`
	Memory                *OpenconfigPlatform_Components_Component_State_Memory               `path:"memory" module:"openconfig-platform"`
	ΛMemory               []ygot.Annotation                                                   `path:"@memory" ygotAnnotation:"true"`
	MfgDate               *string                                                             `path:"mfg-date" module:"openconfig-platform"`
	ΛMfgDate              []ygot.Annotation                                                   `path:"@mfg-date" ygotAnnotation:"true"`
	MfgName               *string                                                             `path:"mfg-name" module:"openconfig-platform"`
	ΛMfgName              []ygot.Annotation                                                   `path:"@mfg-name" ygotAnnotation:"true"`
	ModelName             *string                                                             `path:"model-name" module:"openconfig-platform"`
	ΛModelName            []ygot.Annotation                                                   `path:"@model-name" ygotAnnotation:"true"`
	Name                  *string                                                             `path:"name" module:"openconfig-platform"`
	ΛName                 []ygot.Annotation                                                   `path:"@name" ygotAnnotation:"true"`
	OperStatus            E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS                     `path:"oper-status" module:"openconfig-platform"`
	ΛOperStatus           []ygot.Annotation                                                   `path:"@oper-status" ygotAnnotation:"true"`
	Parent                *string                                                             `path:"parent" module:"openconfig-platform"`
	ΛParent               []ygot.Annotation                                                   `path:"@parent" ygotAnnotation:"true"`
	PartNo                *string                                                             `path:"part-no" module:"openconfig-platform"`
	ΛPartNo               []ygot.Annotation                                                   `path:"@part-no" ygotAnnotation:"true"`
	Pcie                  *OpenconfigPlatform_Components_Component_State_Pcie                 `path:"pcie" module:"openconfig-platform"`
	ΛPcie                 []ygot.Annotation                                                   `path:"@pcie" ygotAnnotation:"true"`
	RedundantRole         E_OpenconfigPlatformTypes_ComponentRedundantRole                    `path:"redundant-role" module:"openconfig-platform"`
	ΛRedundantRole        []ygot.Annotation                                                   `path:"@redundant-role" ygotAnnotation:"true"`
	Removable             *bool                                                               `path:"removable" module:"openconfig-platform"`
	ΛRemovable            []ygot.Annotation                                                   `path:"@removable" ygotAnnotation:"true"`
	SerialNo              *string                                                             `path:"serial-no" module:"openconfig-platform"`
	ΛSerialNo             []ygot.Annotation                                                   `path:"@serial-no" ygotAnnotation:"true"`
	SoftwareVersion       *string                                                             `path:"software-version" module:"openconfig-platform"`
	ΛSoftwareVersion      []ygot.Annotation                                                   `path:"@software-version" ygotAnnotation:"true"`
	SwitchoverReady       *bool                                                               `path:"switchover-ready" module:"openconfig-platform"`
	ΛSwitchoverReady      []ygot.Annotation                                                   `path:"@switchover-ready" ygotAnnotation:"true"`
	Temperature           *OpenconfigPlatform_Components_Component_State_Temperature          `path:"temperature" module:"openconfig-platform"`
	ΛTemperature          []ygot.Annotation                                                   `path:"@temperature" ygotAnnotation:"true"`
	Type                  OpenconfigPlatform_Components_Component_State_Type_Union            `path:"type" module:"openconfig-platform"`
	ΛType                 []ygot.Annotation                                                   `path:"@type" ygotAnnotation:"true"`
	UsedPower             *uint32                                                             `path:"used-power" module:"openconfig-platform"`
	ΛUsedPower            []ygot.Annotation                                                   `path:"@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// GetOrCreateLastPoweroffReason retrieves the value of the LastPoweroffReason field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateLastPoweroffReason() *OpenconfigPlatform_Components_Component_State_LastPoweroffReason {
	if t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	t.LastPoweroffReason = &OpenconfigPlatform_Components_Component_State_LastPoweroffReason{}
	return t.LastPoweroffReason
}

// GetOrCreateLastSwitchoverReason retrieves the value of the LastSwitchoverReason field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateLastSwitchoverReason() *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason {
	if t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	t.LastSwitchoverReason = &OpenconfigPlatform_Components_Component_State_LastSwitchoverReason{}
	return t.LastSwitchoverReason
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigPlatform_Components_Component_State_Memory{}
	return t.Memory
}

// GetOrCreatePcie retrieves the value of the Pcie field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreatePcie() *OpenconfigPlatform_Components_Component_State_Pcie {
	if t.Pcie != nil {
		return t.Pcie
	}
	t.Pcie = &OpenconfigPlatform_Components_Component_State_Pcie{}
	return t.Pcie
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &OpenconfigPlatform_Components_Component_State_Temperature{}
	return t.Temperature
}

// GetLastPoweroffReason returns the value of the LastPoweroffReason struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field LastPoweroffReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetLastPoweroffReason() *OpenconfigPlatform_Components_Component_State_LastPoweroffReason {
	if t != nil && t.LastPoweroffReason != nil {
		return t.LastPoweroffReason
	}
	return nil
}

// GetLastSwitchoverReason returns the value of the LastSwitchoverReason struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field LastSwitchoverReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetLastSwitchoverReason() *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason {
	if t != nil && t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPcie returns the value of the Pcie struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Pcie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetPcie() *OpenconfigPlatform_Components_Component_State_Pcie {
	if t != nil && t.Pcie != nil {
		return t.Pcie
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State.
func (*OpenconfigPlatform_Components_Component_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_LastPoweroffReason represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type OpenconfigPlatform_Components_Component_State_LastPoweroffReason struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Details   *string                                                      `path:"details" module:"openconfig-platform"`
	ΛDetails  []ygot.Annotation                                            `path:"@details" ygotAnnotation:"true"`
	Trigger   E_OpenconfigPlatformTypes_ComponentLastPoweroffReasonTrigger `path:"trigger" module:"openconfig-platform"`
	ΛTrigger  []ygot.Annotation                                            `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_LastPoweroffReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_LastPoweroffReason) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_LastPoweroffReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_LastPoweroffReason.
func (*OpenconfigPlatform_Components_Component_State_LastPoweroffReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_LastSwitchoverReason represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type OpenconfigPlatform_Components_Component_State_LastSwitchoverReason struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Details   *string                                                                 `path:"details" module:"openconfig-platform"`
	ΛDetails  []ygot.Annotation                                                       `path:"@details" ygotAnnotation:"true"`
	Trigger   E_OpenconfigPlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger `path:"trigger" module:"openconfig-platform"`
	ΛTrigger  []ygot.Annotation                                                       `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_LastSwitchoverReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_LastSwitchoverReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_LastSwitchoverReason.
func (*OpenconfigPlatform_Components_Component_State_LastSwitchoverReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Memory.
func (*OpenconfigPlatform_Components_Component_State_Memory) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie struct {
	ΛMetadata          []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	CorrectableErrors  *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors `path:"correctable-errors" module:"openconfig-platform"`
	ΛCorrectableErrors []ygot.Annotation                                                     `path:"@correctable-errors" ygotAnnotation:"true"`
	FatalErrors        *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors       `path:"fatal-errors" module:"openconfig-platform"`
	ΛFatalErrors       []ygot.Annotation                                                     `path:"@fatal-errors" ygotAnnotation:"true"`
	NonFatalErrors     *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors    `path:"non-fatal-errors" module:"openconfig-platform"`
	ΛNonFatalErrors    []ygot.Annotation                                                     `path:"@non-fatal-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie) IsYANGGoStruct() {}

// GetOrCreateCorrectableErrors retrieves the value of the CorrectableErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateCorrectableErrors() *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors {
	if t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	t.CorrectableErrors = &OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors{}
	return t.CorrectableErrors
}

// GetOrCreateFatalErrors retrieves the value of the FatalErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors {
	if t.FatalErrors != nil {
		return t.FatalErrors
	}
	t.FatalErrors = &OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors{}
	return t.FatalErrors
}

// GetOrCreateNonFatalErrors retrieves the value of the NonFatalErrors field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetOrCreateNonFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors {
	if t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	t.NonFatalErrors = &OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors{}
	return t.NonFatalErrors
}

// GetCorrectableErrors returns the value of the CorrectableErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field CorrectableErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetCorrectableErrors() *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors {
	if t != nil && t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	return nil
}

// GetFatalErrors returns the value of the FatalErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field FatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors {
	if t != nil && t.FatalErrors != nil {
		return t.FatalErrors
	}
	return nil
}

// GetNonFatalErrors returns the value of the NonFatalErrors struct pointer
// from OpenconfigPlatform_Components_Component_State_Pcie. If the receiver or the field NonFatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) GetNonFatalErrors() *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors {
	if t != nil && t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie.
func (*OpenconfigPlatform_Components_Component_State_Pcie) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdvisoryNonFatalErrors  *uint64           `path:"advisory-non-fatal-errors" module:"openconfig-platform"`
	ΛAdvisoryNonFatalErrors []ygot.Annotation `path:"@advisory-non-fatal-errors" ygotAnnotation:"true"`
	BadDllpErrors           *uint64           `path:"bad-dllp-errors" module:"openconfig-platform"`
	ΛBadDllpErrors          []ygot.Annotation `path:"@bad-dllp-errors" ygotAnnotation:"true"`
	BadTlpErrors            *uint64           `path:"bad-tlp-errors" module:"openconfig-platform"`
	ΛBadTlpErrors           []ygot.Annotation `path:"@bad-tlp-errors" ygotAnnotation:"true"`
	HdrLogOverflowErrors    *uint64           `path:"hdr-log-overflow-errors" module:"openconfig-platform"`
	ΛHdrLogOverflowErrors   []ygot.Annotation `path:"@hdr-log-overflow-errors" ygotAnnotation:"true"`
	InternalErrors          *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors         []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	ReceiverErrors          *uint64           `path:"receiver-errors" module:"openconfig-platform"`
	ΛReceiverErrors         []ygot.Annotation `path:"@receiver-errors" ygotAnnotation:"true"`
	RelayRolloverErrors     *uint64           `path:"relay-rollover-errors" module:"openconfig-platform"`
	ΛRelayRolloverErrors    []ygot.Annotation `path:"@relay-rollover-errors" ygotAnnotation:"true"`
	ReplayTimeoutErrors     *uint64           `path:"replay-timeout-errors" module:"openconfig-platform"`
	ΛReplayTimeoutErrors    []ygot.Annotation `path:"@replay-timeout-errors" ygotAnnotation:"true"`
	TotalErrors             *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors            []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_CorrectableErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_FatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors.
func (*OpenconfigPlatform_Components_Component_State_Pcie_NonFatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	ΛMetadata       []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                                `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                                `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                                         `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                                `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                                         `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                                `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                          `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                                `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                                         `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                                `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                          `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                                `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                                         `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                                `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                          `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                                `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_State_Temperature.
func (*OpenconfigPlatform_Components_Component_State_Temperature) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Storage_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Storage_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Storage_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Storage_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage.
func (*OpenconfigPlatform_Components_Component_Storage) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage_Config.
func (*OpenconfigPlatform_Components_Component_Storage_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Storage_State.
func (*OpenconfigPlatform_Components_Component_Storage_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	ΛMetadata     []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Subcomponent  map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent `path:"subcomponent" module:"openconfig-platform"`
	ΛSubcomponent []ygot.Annotation                                                              `path:"@subcomponent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the OpenconfigPlatform_Components_Component_Subcomponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponentMap returns the list (map) from OpenconfigPlatform_Components_Component_Subcomponents.
//
// It initializes the field if not already initialized.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponentMap() map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}
	return t.Subcomponent
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of OpenconfigPlatform_Components_Component_Subcomponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubcomponent deletes the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If there is no such element, the function
// is a no-op.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) DeleteSubcomponent(Name string) {
	key := Name

	delete(t.Subcomponent, key)
}

// AppendSubcomponent appends the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct to the
// list Subcomponent of OpenconfigPlatform_Components_Component_Subcomponents. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) AppendSubcomponent(v *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents.
func (*OpenconfigPlatform_Components_Component_Subcomponents) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                    `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛBelongingModule() string {
	return "openconfig-platform"
}

// OpenconfigRoutingPolicy_RoutingPolicy represents the /openconfig-routing-policy/routing-policy YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy struct {
	ΛMetadata          []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	DefinedSets        *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets       `path:"defined-sets" module:"openconfig-routing-policy"`
	ΛDefinedSets       []ygot.Annotation                                        `path:"@defined-sets" ygotAnnotation:"true"`
	PolicyDefinitions  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions `path:"policy-definitions" module:"openconfig-routing-policy"`
	ΛPolicyDefinitions []ygot.Annotation                                        `path:"@policy-definitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy) IsYANGGoStruct() {}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) GetOrCreateDefinedSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets{}
	return t.DefinedSets
}

// GetOrCreatePolicyDefinitions retrieves the value of the PolicyDefinitions field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) GetOrCreatePolicyDefinitions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions {
	if t.PolicyDefinitions != nil {
		return t.PolicyDefinitions
	}
	t.PolicyDefinitions = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions{}
	return t.PolicyDefinitions
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) GetDefinedSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// GetPolicyDefinitions returns the value of the PolicyDefinitions struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy. If the receiver or the field PolicyDefinitions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) GetPolicyDefinitions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions {
	if t != nil && t.PolicyDefinitions != nil {
		return t.PolicyDefinitions
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy.
func (*OpenconfigRoutingPolicy_RoutingPolicy) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets struct {
	ΛMetadata     []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	NeighborSets  *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets `path:"neighbor-sets" module:"openconfig-routing-policy"`
	ΛNeighborSets []ygot.Annotation                                               `path:"@neighbor-sets" ygotAnnotation:"true"`
	PrefixSets    *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets   `path:"prefix-sets" module:"openconfig-routing-policy"`
	ΛPrefixSets   []ygot.Annotation                                               `path:"@prefix-sets" ygotAnnotation:"true"`
	TagSets       *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets      `path:"tag-sets" module:"openconfig-routing-policy"`
	ΛTagSets      []ygot.Annotation                                               `path:"@tag-sets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) IsYANGGoStruct() {}

// GetOrCreateNeighborSets retrieves the value of the NeighborSets field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetOrCreateNeighborSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets {
	if t.NeighborSets != nil {
		return t.NeighborSets
	}
	t.NeighborSets = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets{}
	return t.NeighborSets
}

// GetOrCreatePrefixSets retrieves the value of the PrefixSets field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetOrCreatePrefixSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets {
	if t.PrefixSets != nil {
		return t.PrefixSets
	}
	t.PrefixSets = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets{}
	return t.PrefixSets
}

// GetOrCreateTagSets retrieves the value of the TagSets field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetOrCreateTagSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets {
	if t.TagSets != nil {
		return t.TagSets
	}
	t.TagSets = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets{}
	return t.TagSets
}

// GetNeighborSets returns the value of the NeighborSets struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets. If the receiver or the field NeighborSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetNeighborSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets {
	if t != nil && t.NeighborSets != nil {
		return t.NeighborSets
	}
	return nil
}

// GetPrefixSets returns the value of the PrefixSets struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets. If the receiver or the field PrefixSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetPrefixSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets {
	if t != nil && t.PrefixSets != nil {
		return t.PrefixSets
	}
	return nil
}

// GetTagSets returns the value of the TagSets struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets. If the receiver or the field TagSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) GetTagSets() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets {
	if t != nil && t.TagSets != nil {
		return t.TagSets
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets struct {
	ΛMetadata    []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	NeighborSet  map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet `path:"neighbor-set" module:"openconfig-routing-policy"`
	ΛNeighborSet []ygot.Annotation                                                                      `path:"@neighbor-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) IsYANGGoStruct() {}

// NewNeighborSet creates a new entry in the NeighborSet list of the
// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) NewNeighborSet(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NeighborSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NeighborSet", key)
	}

	t.NeighborSet[key] = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet{
		Name: &Name,
	}

	return t.NeighborSet[key], nil
}

// RenameNeighborSet renames an entry in the list NeighborSet within
// the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) RenameNeighborSet(oldK, newK string) error {
	if _, ok := t.NeighborSet[newK]; ok {
		return fmt.Errorf("key %v already exists in NeighborSet", newK)
	}

	e, ok := t.NeighborSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NeighborSet", oldK)
	}
	e.Name = &newK

	t.NeighborSet[newK] = e
	delete(t.NeighborSet, oldK)
	return nil
}

// GetOrCreateNeighborSetMap returns the list (map) from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) GetOrCreateNeighborSetMap() map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet {
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet)
	}
	return t.NeighborSet
}

// GetOrCreateNeighborSet retrieves the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) GetOrCreateNeighborSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet {

	key := Name

	if v, ok := t.NeighborSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighborSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighborSet got unexpected error: %v", err))
	}
	return v
}

// GetNeighborSet retrieves the value with the specified key from
// the NeighborSet map field of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) GetNeighborSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NeighborSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighborSet deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) DeleteNeighborSet(Name string) {
	key := Name

	delete(t.NeighborSet, key)
}

// AppendNeighborSet appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet struct to the
// list NeighborSet of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets. If the key value(s) specified in
// the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet already exist in the list, an error is
// returned.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) AppendNeighborSet(v *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet)
	}

	if _, ok := t.NeighborSet[key]; ok {
		return fmt.Errorf("duplicate key for list NeighborSet %v", key)
	}

	t.NeighborSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                            `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                  `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   []string          `path:"address" module:"openconfig-routing-policy"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   []string          `path:"address" module:"openconfig-routing-policy"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_NeighborSets_NeighborSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets struct {
	ΛMetadata  []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	PrefixSet  map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet `path:"prefix-set" module:"openconfig-routing-policy"`
	ΛPrefixSet []ygot.Annotation                                                                  `path:"@prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) IsYANGGoStruct() {}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) NewPrefixSet(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// RenamePrefixSet renames an entry in the list PrefixSet within
// the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) RenamePrefixSet(oldK, newK string) error {
	if _, ok := t.PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSet", newK)
	}

	e, ok := t.PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSet", oldK)
	}
	e.Name = &newK

	t.PrefixSet[newK] = e
	delete(t.PrefixSet, oldK)
	return nil
}

// GetOrCreatePrefixSetMap returns the list (map) from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) GetOrCreatePrefixSetMap() map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet {
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet)
	}
	return t.PrefixSet
}

// GetOrCreatePrefixSet retrieves the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) GetOrCreatePrefixSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet {

	key := Name

	if v, ok := t.PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSet retrieves the value with the specified key from
// the PrefixSet map field of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) GetPrefixSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSet deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) DeletePrefixSet(Name string) {
	key := Name

	delete(t.PrefixSet, key)
}

// AppendPrefixSet appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet struct to the
// list PrefixSet of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets. If the key value(s) specified in
// the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet already exist in the list, an error is
// returned.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) AppendPrefixSet(v *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet)
	}

	if _, ok := t.PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSet %v", key)
	}

	t.PrefixSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet struct {
	ΛMetadata []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config   `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                          `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                `path:"@name" ygotAnnotation:"true"`
	Prefixes  *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes `path:"prefixes" module:"openconfig-routing-policy"`
	ΛPrefixes []ygot.Annotation                                                                `path:"@prefixes" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State    `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config{}
	return t.Config
}

// GetOrCreatePrefixes retrieves the value of the Prefixes field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetOrCreatePrefixes() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes {
	if t.Prefixes != nil {
		return t.Prefixes
	}
	t.Prefixes = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes{}
	return t.Prefixes
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetPrefixes returns the value of the Prefixes struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet. If the receiver or the field Prefixes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetPrefixes() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes {
	if t != nil && t.Prefixes != nil {
		return t.Prefixes
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config struct {
	ΛMetadata []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode `path:"mode" module:"openconfig-routing-policy"`
	ΛMode     []ygot.Annotation                                                                    `path:"@mode" ygotAnnotation:"true"`
	Name      *string                                                                              `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Prefix    map[OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix `path:"prefix" module:"openconfig-routing-policy"`
	ΛPrefix   []ygot.Annotation                                                                                                                                                                      `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) IsYANGGoStruct() {
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// IsYANGGoKeyStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key key struct.
func (t OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-prefix":        t.IpPrefix,
		"masklength-range": t.MasklengthRange,
	}, nil
}

// NewPrefix creates a new entry in the Prefix list of the
// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) NewPrefix(IpPrefix string, MasklengthRange string) (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix)
	}

	key := OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) RenamePrefix(oldK, newK OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefixMap returns the list (map) from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) GetOrCreatePrefixMap() map[OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix {
	if t.Prefix == nil {
		t.Prefix = make(map[OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix)
	}
	return t.Prefix
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix {

	key := OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) GetPrefix(IpPrefix string, MasklengthRange string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix {

	if t == nil {
		return nil
	}

	key := OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix struct to the
// list Prefix of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes. If the key value(s) specified in
// the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix already exist in the list, an error is
// returned.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) AppendPrefix(v *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Key]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix struct {
	ΛMetadata        []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	Config           *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig          []ygot.Annotation                                                                              `path:"@config" ygotAnnotation:"true"`
	IpPrefix         *string                                                                                        `path:"ip-prefix" module:"openconfig-routing-policy"`
	ΛIpPrefix        []ygot.Annotation                                                                              `path:"@ip-prefix" ygotAnnotation:"true"`
	MasklengthRange  *string                                                                                        `path:"masklength-range" module:"openconfig-routing-policy"`
	ΛMasklengthRange []ygot.Annotation                                                                              `path:"@masklength-range" ygotAnnotation:"true"`
	State            *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState           []ygot.Annotation                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	IpPrefix         *string           `path:"ip-prefix" module:"openconfig-routing-policy"`
	ΛIpPrefix        []ygot.Annotation `path:"@ip-prefix" ygotAnnotation:"true"`
	MasklengthRange  *string           `path:"masklength-range" module:"openconfig-routing-policy"`
	ΛMasklengthRange []ygot.Annotation `path:"@masklength-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	IpPrefix         *string           `path:"ip-prefix" module:"openconfig-routing-policy"`
	ΛIpPrefix        []ygot.Annotation `path:"@ip-prefix" ygotAnnotation:"true"`
	MasklengthRange  *string           `path:"masklength-range" module:"openconfig-routing-policy"`
	ΛMasklengthRange []ygot.Annotation `path:"@masklength-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Prefixes_Prefix_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State struct {
	ΛMetadata []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_Config_Mode `path:"mode" module:"openconfig-routing-policy"`
	ΛMode     []ygot.Annotation                                                                    `path:"@mode" ygotAnnotation:"true"`
	Name      *string                                                                              `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_PrefixSets_PrefixSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets struct {
	ΛMetadata []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	TagSet    map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet `path:"tag-set" module:"openconfig-routing-policy"`
	ΛTagSet   []ygot.Annotation                                                            `path:"@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) IsYANGGoStruct() {}

// NewTagSet creates a new entry in the TagSet list of the
// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) NewTagSet(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TagSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TagSet", key)
	}

	t.TagSet[key] = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet{
		Name: &Name,
	}

	return t.TagSet[key], nil
}

// RenameTagSet renames an entry in the list TagSet within
// the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) RenameTagSet(oldK, newK string) error {
	if _, ok := t.TagSet[newK]; ok {
		return fmt.Errorf("key %v already exists in TagSet", newK)
	}

	e, ok := t.TagSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TagSet", oldK)
	}
	e.Name = &newK

	t.TagSet[newK] = e
	delete(t.TagSet, oldK)
	return nil
}

// GetOrCreateTagSetMap returns the list (map) from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) GetOrCreateTagSetMap() map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet {
	if t.TagSet == nil {
		t.TagSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet)
	}
	return t.TagSet
}

// GetOrCreateTagSet retrieves the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) GetOrCreateTagSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet {

	key := Name

	if v, ok := t.TagSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTagSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTagSet got unexpected error: %v", err))
	}
	return v
}

// GetTagSet retrieves the value with the specified key from
// the TagSet map field of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) GetTagSet(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TagSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteTagSet deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) DeleteTagSet(Name string) {
	key := Name

	delete(t.TagSet, key)
}

// AppendTagSet appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet struct to the
// list TagSet of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets. If the key value(s) specified in
// the supplied OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet already exist in the list, an error is
// returned.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) AppendTagSet(v *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet)
	}

	if _, ok := t.TagSet[key]; ok {
		return fmt.Errorf("duplicate key for list TagSet %v", key)
	}

	t.TagSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet struct {
	ΛMetadata []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                        `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                  `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                        `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                                  `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                        `path:"@name" ygotAnnotation:"true"`
	TagValue  []OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config_TagValue_Union `path:"tag-value" module:"openconfig-routing-policy"`
	ΛTagValue []ygot.Annotation                                                                        `path:"@tag-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State struct {
	ΛMetadata []ygot.Annotation                                                                       `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                                 `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                       `path:"@name" ygotAnnotation:"true"`
	TagValue  []OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State_TagValue_Union `path:"tag-value" module:"openconfig-routing-policy"`
	ΛTagValue []ygot.Annotation                                                                       `path:"@tag-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_DefinedSets_TagSets_TagSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions represents the /openconfig-routing-policy/routing-policy/policy-definitions YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions struct {
	ΛMetadata         []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	PolicyDefinition  map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition `path:"policy-definition" module:"openconfig-routing-policy"`
	ΛPolicyDefinition []ygot.Annotation                                                                    `path:"@policy-definition" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) IsYANGGoStruct() {}

// NewPolicyDefinition creates a new entry in the PolicyDefinition list of the
// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) NewPolicyDefinition(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyDefinition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyDefinition", key)
	}

	t.PolicyDefinition[key] = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition{
		Name: &Name,
	}

	return t.PolicyDefinition[key], nil
}

// RenamePolicyDefinition renames an entry in the list PolicyDefinition within
// the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) RenamePolicyDefinition(oldK, newK string) error {
	if _, ok := t.PolicyDefinition[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyDefinition", newK)
	}

	e, ok := t.PolicyDefinition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyDefinition", oldK)
	}
	e.Name = &newK

	t.PolicyDefinition[newK] = e
	delete(t.PolicyDefinition, oldK)
	return nil
}

// GetOrCreatePolicyDefinitionMap returns the list (map) from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions.
//
// It initializes the field if not already initialized.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) GetOrCreatePolicyDefinitionMap() map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition {
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition)
	}
	return t.PolicyDefinition
}

// GetOrCreatePolicyDefinition retrieves the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) GetOrCreatePolicyDefinition(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition {

	key := Name

	if v, ok := t.PolicyDefinition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyDefinition(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyDefinition got unexpected error: %v", err))
	}
	return v
}

// GetPolicyDefinition retrieves the value with the specified key from
// the PolicyDefinition map field of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) GetPolicyDefinition(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyDefinition[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyDefinition deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions. If there is no such element, the function
// is a no-op.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) DeletePolicyDefinition(Name string) {
	key := Name

	delete(t.PolicyDefinition, key)
}

// AppendPolicyDefinition appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition struct to the
// list PolicyDefinition of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions. If the key value(s) specified in
// the supplied OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition already exist in the list, an error is
// returned.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) AppendPolicyDefinition(v *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition)
	}

	if _, ok := t.PolicyDefinition[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyDefinition %v", key)
	}

	t.PolicyDefinition[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition struct {
	ΛMetadata   []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config     `path:"config" module:"openconfig-routing-policy"`
	ΛConfig     []ygot.Annotation                                                                    `path:"@config" ygotAnnotation:"true"`
	Name        *string                                                                              `path:"name" module:"openconfig-routing-policy"`
	ΛName       []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
	State       *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State      `path:"state" module:"openconfig-routing-policy"`
	ΛState      []ygot.Annotation                                                                    `path:"@state" ygotAnnotation:"true"`
	Statements  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements `path:"statements" module:"openconfig-routing-policy"`
	ΛStatements []ygot.Annotation                                                                    `path:"@statements" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State{}
	return t.State
}

// GetOrCreateStatements retrieves the value of the Statements field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetOrCreateStatements() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements {
	if t.Statements != nil {
		return t.Statements
	}
	t.Statements = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements{}
	return t.Statements
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStatements returns the value of the Statements struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition. If the receiver or the field Statements is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) GetStatements() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements {
	if t != nil && t.Statements != nil {
		return t.Statements
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements struct {
	ΛMetadata  []ygot.Annotation                                                                                         `path:"@" ygotAnnotation:"true"`
	Statement  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap `path:"statement" module:"openconfig-routing-policy"`
	ΛStatement []ygot.Annotation                                                                                         `path:"@statement" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) IsYANGGoStruct() {
}

// GetOrCreateStatementMap returns the ordered map field
// Statement from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements.
//
// It initializes the field if not already initialized.
func (s *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) GetOrCreateStatementMap() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap {
	if s.Statement == nil {
		s.Statement = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap{}
	}
	return s.Statement
}

// AppendNewStatement creates a new entry in the Statement
// ordered map of the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements struct. The keys of the list are
// populated from the input arguments.
func (s *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) AppendNewStatement(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement, error) {
	if s.Statement == nil {
		s.Statement = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap{}
	}
	return s.Statement.AppendNew(Name)
}

// AppendStatement appends the supplied OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement struct
// to the list Statement of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements. If the key value(s)
// specified in the supplied OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement already exist in the list, an
// error is returned.
func (s *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) AppendStatement(v *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) error {
	if s.Statement == nil {
		s.Statement = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap{}
	}
	return s.Statement.Append(v)
}

// GetStatement retrieves the value with the specified key from the
// Statement map field of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) GetStatement(Name string) *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement {
	if s == nil {
		return nil
	}
	key := Name
	return s.Statement.Get(key)
}

// DeleteStatement deletes the value with the specified keys from
// the receiver OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements. If there is no such element, the
// function is a no-op.
func (s *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) DeleteStatement(Name string) bool {
	key := Name
	return s.Statement.Delete(key)
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap struct {
	keys     []string
	valueMap map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement
}

// IsYANGOrderedList ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) IsYANGOrderedList() {
}

// init initializes any uninitialized values.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Values() []*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement {
	if o == nil {
		return nil
	}
	var values []*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Get(key string) *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) Append(v *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement")
	}
	if v == nil {
		return fmt.Errorf("nil OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_OrderedMap) AppendNew(Name string) (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement struct {
	ΛMetadata   []ygot.Annotation                                                                                         `path:"@" ygotAnnotation:"true"`
	Actions     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	ΛActions    []ygot.Annotation                                                                                         `path:"@actions" ygotAnnotation:"true"`
	Conditions  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	ΛConditions []ygot.Annotation                                                                                         `path:"@conditions" ygotAnnotation:"true"`
	Config      *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config     `path:"config" module:"openconfig-routing-policy"`
	ΛConfig     []ygot.Annotation                                                                                         `path:"@config" ygotAnnotation:"true"`
	Name        *string                                                                                                   `path:"name" module:"openconfig-routing-policy"`
	ΛName       []ygot.Annotation                                                                                         `path:"@name" ygotAnnotation:"true"`
	State       *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State      `path:"state" module:"openconfig-routing-policy"`
	ΛState      []ygot.Annotation                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) IsYANGGoStruct() {
}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetOrCreateActions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetOrCreateConditions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions{}
	return t.Conditions
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State{}
	return t.State
}

// GetActions returns the value of the Actions struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetActions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetConditions() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement struct, which is a YANG list entry.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                             `path:"@config" ygotAnnotation:"true"`
	SetTag    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag `path:"set-tag" module:"openconfig-routing-policy"`
	ΛSetTag   []ygot.Annotation                                                                                             `path:"@set-tag" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config{}
	return t.Config
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetOrCreateSetTag() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetSetTag() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config struct {
	ΛMetadata     []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	PolicyResult  E_OpenconfigRoutingPolicy_PolicyResultType `path:"policy-result" module:"openconfig-routing-policy"`
	ΛPolicyResult []ygot.Annotation                          `path:"@policy-result" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag struct {
	ΛMetadata  []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config    `path:"config" module:"openconfig-routing-policy"`
	ΛConfig    []ygot.Annotation                                                                                                       `path:"@config" ygotAnnotation:"true"`
	Inline     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	ΛInline    []ygot.Annotation                                                                                                       `path:"@inline" ygotAnnotation:"true"`
	Reference  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
	ΛReference []ygot.Annotation                                                                                                       `path:"@reference" ygotAnnotation:"true"`
	State      *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State     `path:"state" module:"openconfig-routing-policy"`
	ΛState     []ygot.Annotation                                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config{}
	return t.Config
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetOrCreateInline() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetOrCreateReference() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInline returns the value of the Inline struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetInline() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetReference() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config struct {
	ΛMetadata []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config_Mode `path:"mode" module:"openconfig-routing-policy"`
	ΛMode     []ygot.Annotation                                                                                                          `path:"@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline struct {
	ΛMetadata []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config struct {
	ΛMetadata []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Tag       []OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config_Tag_Union `path:"tag" module:"openconfig-routing-policy"`
	ΛTag      []ygot.Annotation                                                                                                                      `path:"@tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Tag       []OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State_Tag_Union `path:"tag" module:"openconfig-routing-policy"`
	ΛTag      []ygot.Annotation                                                                                                                     `path:"@tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Inline_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TagSet    *string           `path:"tag-set" module:"openconfig-routing-policy"`
	ΛTagSet   []ygot.Annotation `path:"@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TagSet    *string           `path:"tag-set" module:"openconfig-routing-policy"`
	ΛTagSet   []ygot.Annotation `path:"@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Reference_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State struct {
	ΛMetadata []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_Config_Mode `path:"mode" module:"openconfig-routing-policy"`
	ΛMode     []ygot.Annotation                                                                                                          `path:"@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_SetTag_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State struct {
	ΛMetadata     []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	PolicyResult  E_OpenconfigRoutingPolicy_PolicyResultType `path:"policy-result" module:"openconfig-routing-policy"`
	ΛPolicyResult []ygot.Annotation                          `path:"@policy-result" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Actions_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions struct {
	ΛMetadata         []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config           `path:"config" module:"openconfig-routing-policy"`
	ΛConfig           []ygot.Annotation                                                                                                          `path:"@config" ygotAnnotation:"true"`
	MatchInterface    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	ΛMatchInterface   []ygot.Annotation                                                                                                          `path:"@match-interface" ygotAnnotation:"true"`
	MatchNeighborSet  *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	ΛMatchNeighborSet []ygot.Annotation                                                                                                          `path:"@match-neighbor-set" ygotAnnotation:"true"`
	MatchPrefixSet    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	ΛMatchPrefixSet   []ygot.Annotation                                                                                                          `path:"@match-prefix-set" ygotAnnotation:"true"`
	MatchTagSet       *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
	ΛMatchTagSet      []ygot.Annotation                                                                                                          `path:"@match-tag-set" ygotAnnotation:"true"`
	State             *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State            `path:"state" module:"openconfig-routing-policy"`
	ΛState            []ygot.Annotation                                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config{}
	return t.Config
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateMatchInterface() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateMatchNeighborSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateMatchPrefixSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateMatchTagSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchInterface() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchNeighborSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchPrefixSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetMatchTagSet() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config struct {
	ΛMetadata          []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	CallPolicy         *string                                       `path:"call-policy" module:"openconfig-routing-policy"`
	ΛCallPolicy        []ygot.Annotation                             `path:"@call-policy" ygotAnnotation:"true"`
	InstallProtocolEq  E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"install-protocol-eq" module:"openconfig-routing-policy"`
	ΛInstallProtocolEq []ygot.Annotation                             `path:"@install-protocol-eq" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface struct {
	ΛMetadata []ygot.Annotation                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-routing-policy"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-routing-policy"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-routing-policy"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-routing-policy"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchInterface_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet struct {
	ΛMetadata []ygot.Annotation                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	NeighborSet      *string                                               `path:"neighbor-set" module:"openconfig-routing-policy"`
	ΛNeighborSet     []ygot.Annotation                                     `path:"@neighbor-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	NeighborSet      *string                                               `path:"neighbor-set" module:"openconfig-routing-policy"`
	ΛNeighborSet     []ygot.Annotation                                     `path:"@neighbor-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchNeighborSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet struct {
	ΛMetadata []ygot.Annotation                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	PrefixSet        *string                                               `path:"prefix-set" module:"openconfig-routing-policy"`
	ΛPrefixSet       []ygot.Annotation                                     `path:"@prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	PrefixSet        *string                                               `path:"prefix-set" module:"openconfig-routing-policy"`
	ΛPrefixSet       []ygot.Annotation                                     `path:"@prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchPrefixSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet struct {
	ΛMetadata []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config `path:"config" module:"openconfig-routing-policy"`
	ΛConfig   []ygot.Annotation                                                                                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State  `path:"state" module:"openconfig-routing-policy"`
	ΛState    []ygot.Annotation                                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetOrCreateConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetOrCreateState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetConfig() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) GetState() *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	TagSet           *string                                               `path:"tag-set" module:"openconfig-routing-policy"`
	ΛTagSet          []ygot.Annotation                                     `path:"@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State struct {
	ΛMetadata        []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_OpenconfigPolicyTypes_MatchSetOptionsRestrictedType `path:"match-set-options" module:"openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                                     `path:"@match-set-options" ygotAnnotation:"true"`
	TagSet           *string                                               `path:"tag-set" module:"openconfig-routing-policy"`
	ΛTagSet          []ygot.Annotation                                     `path:"@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_MatchTagSet_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State struct {
	ΛMetadata          []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	CallPolicy         *string                                       `path:"call-policy" module:"openconfig-routing-policy"`
	ΛCallPolicy        []ygot.Annotation                             `path:"@call-policy" ygotAnnotation:"true"`
	InstallProtocolEq  E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE `path:"install-protocol-eq" module:"openconfig-routing-policy"`
	ΛInstallProtocolEq []ygot.Annotation                             `path:"@install-protocol-eq" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Conditions_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/config YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_Config) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/state YANG schema element.
type OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State.
func (*OpenconfigRoutingPolicy_RoutingPolicy_PolicyDefinitions_PolicyDefinition_Statements_Statement_State) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// OpenconfigSystem_System represents the /openconfig-system/system YANG schema element.
type OpenconfigSystem_System struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Aaa           *OpenconfigSystem_System_Aaa          `path:"aaa" module:"openconfig-system"`
	ΛAaa          []ygot.Annotation                     `path:"@aaa" ygotAnnotation:"true"`
	Alarms        *OpenconfigSystem_System_Alarms       `path:"alarms" module:"openconfig-system"`
	ΛAlarms       []ygot.Annotation                     `path:"@alarms" ygotAnnotation:"true"`
	Clock         *OpenconfigSystem_System_Clock        `path:"clock" module:"openconfig-system"`
	ΛClock        []ygot.Annotation                     `path:"@clock" ygotAnnotation:"true"`
	Config        *OpenconfigSystem_System_Config       `path:"config" module:"openconfig-system"`
	ΛConfig       []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	Cpus          *OpenconfigSystem_System_Cpus         `path:"cpus" module:"openconfig-system"`
	ΛCpus         []ygot.Annotation                     `path:"@cpus" ygotAnnotation:"true"`
	Dns           *OpenconfigSystem_System_Dns          `path:"dns" module:"openconfig-system"`
	ΛDns          []ygot.Annotation                     `path:"@dns" ygotAnnotation:"true"`
	License       *OpenconfigSystem_System_License      `path:"license" module:"openconfig-system"`
	ΛLicense      []ygot.Annotation                     `path:"@license" ygotAnnotation:"true"`
	Logging       *OpenconfigSystem_System_Logging      `path:"logging" module:"openconfig-system"`
	ΛLogging      []ygot.Annotation                     `path:"@logging" ygotAnnotation:"true"`
	MacAddress    *OpenconfigSystem_System_MacAddress   `path:"mac-address" module:"openconfig-system"`
	ΛMacAddress   []ygot.Annotation                     `path:"@mac-address" ygotAnnotation:"true"`
	Memory        *OpenconfigSystem_System_Memory       `path:"memory" module:"openconfig-system"`
	ΛMemory       []ygot.Annotation                     `path:"@memory" ygotAnnotation:"true"`
	Messages      *OpenconfigSystem_System_Messages     `path:"messages" module:"openconfig-system"`
	ΛMessages     []ygot.Annotation                     `path:"@messages" ygotAnnotation:"true"`
	MountPoints   *OpenconfigSystem_System_MountPoints  `path:"mount-points" module:"openconfig-system"`
	ΛMountPoints  []ygot.Annotation                     `path:"@mount-points" ygotAnnotation:"true"`
	Ntp           *OpenconfigSystem_System_Ntp          `path:"ntp" module:"openconfig-system"`
	ΛNtp          []ygot.Annotation                     `path:"@ntp" ygotAnnotation:"true"`
	Processes     *OpenconfigSystem_System_Processes    `path:"processes" module:"openconfig-system"`
	ΛProcesses    []ygot.Annotation                     `path:"@processes" ygotAnnotation:"true"`
	SshServer     *OpenconfigSystem_System_SshServer    `path:"ssh-server" module:"openconfig-system"`
	ΛSshServer    []ygot.Annotation                     `path:"@ssh-server" ygotAnnotation:"true"`
	State         *OpenconfigSystem_System_State        `path:"state" module:"openconfig-system"`
	ΛState        []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
	TelnetServer  *OpenconfigSystem_System_TelnetServer `path:"telnet-server" module:"openconfig-system"`
	ΛTelnetServer []ygot.Annotation                     `path:"@telnet-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System) IsYANGGoStruct() {}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAaa() *OpenconfigSystem_System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &OpenconfigSystem_System_Aaa{}
	return t.Aaa
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAlarms() *OpenconfigSystem_System_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &OpenconfigSystem_System_Alarms{}
	return t.Alarms
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateClock() *OpenconfigSystem_System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &OpenconfigSystem_System_Clock{}
	return t.Clock
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateConfig() *OpenconfigSystem_System_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Config{}
	return t.Config
}

// GetOrCreateCpus retrieves the value of the Cpus field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateCpus() *OpenconfigSystem_System_Cpus {
	if t.Cpus != nil {
		return t.Cpus
	}
	t.Cpus = &OpenconfigSystem_System_Cpus{}
	return t.Cpus
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateDns() *OpenconfigSystem_System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &OpenconfigSystem_System_Dns{}
	return t.Dns
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateLicense() *OpenconfigSystem_System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &OpenconfigSystem_System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateLogging() *OpenconfigSystem_System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &OpenconfigSystem_System_Logging{}
	return t.Logging
}

// GetOrCreateMacAddress retrieves the value of the MacAddress field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMacAddress() *OpenconfigSystem_System_MacAddress {
	if t.MacAddress != nil {
		return t.MacAddress
	}
	t.MacAddress = &OpenconfigSystem_System_MacAddress{}
	return t.MacAddress
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMemory() *OpenconfigSystem_System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigSystem_System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMessages() *OpenconfigSystem_System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &OpenconfigSystem_System_Messages{}
	return t.Messages
}

// GetOrCreateMountPoints retrieves the value of the MountPoints field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMountPoints() *OpenconfigSystem_System_MountPoints {
	if t.MountPoints != nil {
		return t.MountPoints
	}
	t.MountPoints = &OpenconfigSystem_System_MountPoints{}
	return t.MountPoints
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateNtp() *OpenconfigSystem_System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &OpenconfigSystem_System_Ntp{}
	return t.Ntp
}

// GetOrCreateProcesses retrieves the value of the Processes field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateProcesses() *OpenconfigSystem_System_Processes {
	if t.Processes != nil {
		return t.Processes
	}
	t.Processes = &OpenconfigSystem_System_Processes{}
	return t.Processes
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateSshServer() *OpenconfigSystem_System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &OpenconfigSystem_System_SshServer{}
	return t.SshServer
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateState() *OpenconfigSystem_System_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_State{}
	return t.State
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &OpenconfigSystem_System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from OpenconfigSystem_System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAaa() *OpenconfigSystem_System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetAlarms returns the value of the Alarms struct pointer
// from OpenconfigSystem_System. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAlarms() *OpenconfigSystem_System_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from OpenconfigSystem_System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetClock() *OpenconfigSystem_System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetConfig() *OpenconfigSystem_System_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCpus returns the value of the Cpus struct pointer
// from OpenconfigSystem_System. If the receiver or the field Cpus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetCpus() *OpenconfigSystem_System_Cpus {
	if t != nil && t.Cpus != nil {
		return t.Cpus
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from OpenconfigSystem_System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetDns() *OpenconfigSystem_System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from OpenconfigSystem_System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetLicense() *OpenconfigSystem_System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from OpenconfigSystem_System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetLogging() *OpenconfigSystem_System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMacAddress returns the value of the MacAddress struct pointer
// from OpenconfigSystem_System. If the receiver or the field MacAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMacAddress() *OpenconfigSystem_System_MacAddress {
	if t != nil && t.MacAddress != nil {
		return t.MacAddress
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigSystem_System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMemory() *OpenconfigSystem_System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from OpenconfigSystem_System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMessages() *OpenconfigSystem_System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetMountPoints returns the value of the MountPoints struct pointer
// from OpenconfigSystem_System. If the receiver or the field MountPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMountPoints() *OpenconfigSystem_System_MountPoints {
	if t != nil && t.MountPoints != nil {
		return t.MountPoints
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from OpenconfigSystem_System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetNtp() *OpenconfigSystem_System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetProcesses returns the value of the Processes struct pointer
// from OpenconfigSystem_System. If the receiver or the field Processes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetProcesses() *OpenconfigSystem_System_Processes {
	if t != nil && t.Processes != nil {
		return t.Processes
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetSshServer() *OpenconfigSystem_System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetState() *OpenconfigSystem_System_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System.
func (*OpenconfigSystem_System) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type OpenconfigSystem_System_Aaa struct {
	ΛMetadata       []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Accounting      *OpenconfigSystem_System_Aaa_Accounting     `path:"accounting" module:"openconfig-system"`
	ΛAccounting     []ygot.Annotation                           `path:"@accounting" ygotAnnotation:"true"`
	Authentication  *OpenconfigSystem_System_Aaa_Authentication `path:"authentication" module:"openconfig-system"`
	ΛAuthentication []ygot.Annotation                           `path:"@authentication" ygotAnnotation:"true"`
	Authorization   *OpenconfigSystem_System_Aaa_Authorization  `path:"authorization" module:"openconfig-system"`
	ΛAuthorization  []ygot.Annotation                           `path:"@authorization" ygotAnnotation:"true"`
	Config          *OpenconfigSystem_System_Aaa_Config         `path:"config" module:"openconfig-system"`
	ΛConfig         []ygot.Annotation                           `path:"@config" ygotAnnotation:"true"`
	ServerGroups    *OpenconfigSystem_System_Aaa_ServerGroups   `path:"server-groups" module:"openconfig-system"`
	ΛServerGroups   []ygot.Annotation                           `path:"@server-groups" ygotAnnotation:"true"`
	State           *OpenconfigSystem_System_Aaa_State          `path:"state" module:"openconfig-system"`
	ΛState          []ygot.Annotation                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &OpenconfigSystem_System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigSystem_System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &OpenconfigSystem_System_Aaa_Authorization{}
	return t.Authorization
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Config{}
	return t.Config
}

// GetOrCreateServerGroups retrieves the value of the ServerGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t.ServerGroups != nil {
		return t.ServerGroups
	}
	t.ServerGroups = &OpenconfigSystem_System_Aaa_ServerGroups{}
	return t.ServerGroups
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateState() *OpenconfigSystem_System_Aaa_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_State{}
	return t.State
}

// GetAccounting returns the value of the Accounting struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetConfig() *OpenconfigSystem_System_Aaa_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServerGroups returns the value of the ServerGroups struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field ServerGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t != nil && t.ServerGroups != nil {
		return t.ServerGroups
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetState() *OpenconfigSystem_System_Aaa_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa.
func (*OpenconfigSystem_System_Aaa) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting struct {
	ΛMetadata []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Accounting_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                              `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Accounting_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                              `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Accounting_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Accounting_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting.
func (*OpenconfigSystem_System_Aaa_Accounting) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_Config represents the /openconfig-system/system/aaa/accounting/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Config struct {
	ΛMetadata         []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                      `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_Config.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_Events represents the /openconfig-system/system/aaa/accounting/events YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events struct {
	ΛMetadata []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                       `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Accounting_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Accounting_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from OpenconfigSystem_System_Aaa_Accounting_Events.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetOrCreateEventMap() map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event {
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Accounting_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Accounting_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Accounting_Events. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) DeleteEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Accounting_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Accounting_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_Events.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                           `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_Events_Event.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-system/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_State represents the /openconfig-system/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_Events_Event_State.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Accounting_State represents the /openconfig-system/system/aaa/accounting/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_State struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                     `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Accounting_State.
func (*OpenconfigSystem_System_Aaa_Accounting_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	AdminUser  *OpenconfigSystem_System_Aaa_Authentication_AdminUser `path:"admin-user" module:"openconfig-system"`
	ΛAdminUser []ygot.Annotation                                     `path:"@admin-user" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authentication_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                     `path:"@config" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authentication_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                     `path:"@state" ygotAnnotation:"true"`
	Users      *OpenconfigSystem_System_Aaa_Authentication_Users     `path:"users" module:"openconfig-system"`
	ΛUsers     []ygot.Annotation                                     `path:"@users" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &OpenconfigSystem_System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_State{}
	return t.State
}

// GetOrCreateUsers retrieves the value of the Users field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t.Users != nil {
		return t.Users
	}
	t.Users = &OpenconfigSystem_System_Aaa_Authentication_Users{}
	return t.Users
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUsers returns the value of the Users struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Users is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t != nil && t.Users != nil {
		return t.Users
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication.
func (*OpenconfigSystem_System_Aaa_Authentication) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_AdminUser.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-system/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_State represents the /openconfig-system/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_State struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
	AdminUsername        *string           `path:"admin-username" module:"openconfig-system"`
	ΛAdminUsername       []ygot.Annotation `path:"@admin-username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_AdminUser_State.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_Config represents the /openconfig-system/system/aaa/authentication/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Config struct {
	ΛMetadata             []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                              `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_Config.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_State represents the /openconfig-system/system/aaa/authentication/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_State struct {
	ΛMetadata             []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                             `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_State.
func (*OpenconfigSystem_System_Aaa_Authentication_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_Users represents the /openconfig-system/system/aaa/authentication/users YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	User      map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User `path:"user" module:"openconfig-system"`
	ΛUser     []ygot.Annotation                                                 `path:"@user" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigSystem_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigSystem_System_Aaa_Authentication_Users_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigSystem_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the OpenconfigSystem_System_Aaa_Authentication_Users struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUserMap returns the list (map) from OpenconfigSystem_System_Aaa_Authentication_Users.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetOrCreateUserMap() map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User {
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}
	return t.User
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authentication_Users. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetOrCreateUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of OpenconfigSystem_System_Aaa_Authentication_Users. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authentication_Users. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User struct to the
// list User of OpenconfigSystem_System_Aaa_Authentication_Users. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) AppendUser(v *OpenconfigSystem_System_Aaa_Authentication_Users_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_Users.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_Users_User_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
	Username  *string                                                       `path:"username" module:"openconfig-system"`
	ΛUsername []ygot.Annotation                                             `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_Users_User_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_Users_User.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config represents the /openconfig-system/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config struct {
	ΛMetadata       []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                 `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                       `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                 `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                       `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                       `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                 `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                       `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                 `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                       `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_Users_User_Config.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State represents the /openconfig-system/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State struct {
	ΛMetadata       []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                      `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                      `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                      `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                      `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                      `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authentication_Users_User_State.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authorization_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                 `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Authorization_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                                 `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authorization_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Authorization_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization.
func (*OpenconfigSystem_System_Aaa_Authorization) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_Config represents the /openconfig-system/system/aaa/authorization/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Config struct {
	ΛMetadata            []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                            `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_Config.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_Events represents the /openconfig-system/system/aaa/authorization/events YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                             `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Authorization_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Authorization_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEventMap returns the list (map) from OpenconfigSystem_System_Aaa_Authorization_Events.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetOrCreateEventMap() map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event {
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}
	return t.Event
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authorization_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Authorization_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authorization_Events. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) DeleteEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Authorization_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Authorization_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_Events.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                              `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_Events_Event.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-system/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_State represents the /openconfig-system/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_Events_Event_State.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Authorization_State represents the /openconfig-system/system/aaa/authorization/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_State struct {
	ΛMetadata            []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                           `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Authorization_State.
func (*OpenconfigSystem_System_Aaa_Authorization_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_Config represents the /openconfig-system/system/aaa/config YANG schema element.
type OpenconfigSystem_System_Aaa_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_Config.
func (*OpenconfigSystem_System_Aaa_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups represents the /openconfig-system/system/aaa/server-groups YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups struct {
	ΛMetadata    []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	ServerGroup  map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup `path:"server-group" module:"openconfig-system"`
	ΛServerGroup []ygot.Annotation                                                `path:"@server-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigSystem_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the OpenconfigSystem_System_Aaa_ServerGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroupMap returns the list (map) from OpenconfigSystem_System_Aaa_ServerGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetOrCreateServerGroupMap() map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}
	return t.ServerGroup
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetOrCreateServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of OpenconfigSystem_System_Aaa_ServerGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct to the
// list ServerGroup of OpenconfigSystem_System_Aaa_ServerGroups. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) AppendServerGroup(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups.
func (*OpenconfigSystem_System_Aaa_ServerGroups) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                       `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                                             `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config{}
	return t.Config
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-system/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-system/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                                               `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetOrCreateServerMap() map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) AppendServer(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Address   *string                                                                     `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                                           `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                           `path:"@config" ygotAnnotation:"true"`
	Radius    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `path:"radius" module:"openconfig-system"`
	ΛRadius   []ygot.Annotation                                                           `path:"@radius" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                           `path:"@state" ygotAnnotation:"true"`
	Tacacs    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	ΛTacacs   []ygot.Annotation                                                           `path:"@tacacs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius{}
	return t.Radius
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State{}
	return t.State
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs{}
	return t.Tacacs
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout   *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout  []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16           `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16           `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation `path:"@auth-port" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8            `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed     *string           `path:"secret-key-hashed" module:"openconfig-system"`
	ΛSecretKeyHashed    []ygot.Annotation `path:"@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress       *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	ΛMetadata           []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16                                                                                    `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation                                                                          `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16                                                                                    `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation                                                                          `path:"@auth-port" ygotAnnotation:"true"`
	Counters            *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `path:"counters" module:"openconfig-system"`
	ΛCounters           []ygot.Annotation                                                                          `path:"@counters" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8                                                                                     `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation                                                                          `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string                                                                                    `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation                                                                          `path:"@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed     *string                                                                                    `path:"secret-key-hashed" module:"openconfig-system"`
	ΛSecretKeyHashed    []ygot.Annotation                                                                          `path:"@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress       *string                                                                                    `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation                                                                          `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetOrCreateCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AccessAccepts          *uint64           `path:"access-accepts" module:"openconfig-system"`
	ΛAccessAccepts         []ygot.Annotation `path:"@access-accepts" ygotAnnotation:"true"`
	AccessRejects          *uint64           `path:"access-rejects" module:"openconfig-system"`
	ΛAccessRejects         []ygot.Annotation `path:"@access-rejects" ygotAnnotation:"true"`
	RetriedAccessRequests  *uint64           `path:"retried-access-requests" module:"openconfig-system"`
	ΛRetriedAccessRequests []ygot.Annotation `path:"@retried-access-requests" ygotAnnotation:"true"`
	TimeoutAccessRequests  *uint64           `path:"timeout-access-requests" module:"openconfig-system"`
	ΛTimeoutAccessRequests []ygot.Annotation `path:"@timeout-access-requests" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address             *string           `path:"address" module:"openconfig-system"`
	ΛAddress            []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	ConnectionAborts    *uint64           `path:"connection-aborts" module:"openconfig-system"`
	ΛConnectionAborts   []ygot.Annotation `path:"@connection-aborts" ygotAnnotation:"true"`
	ConnectionCloses    *uint64           `path:"connection-closes" module:"openconfig-system"`
	ΛConnectionCloses   []ygot.Annotation `path:"@connection-closes" ygotAnnotation:"true"`
	ConnectionFailures  *uint64           `path:"connection-failures" module:"openconfig-system"`
	ΛConnectionFailures []ygot.Annotation `path:"@connection-failures" ygotAnnotation:"true"`
	ConnectionOpens     *uint64           `path:"connection-opens" module:"openconfig-system"`
	ΛConnectionOpens    []ygot.Annotation `path:"@connection-opens" ygotAnnotation:"true"`
	ConnectionTimeouts  *uint64           `path:"connection-timeouts" module:"openconfig-system"`
	ΛConnectionTimeouts []ygot.Annotation `path:"@connection-timeouts" ygotAnnotation:"true"`
	ErrorsReceived      *uint64           `path:"errors-received" module:"openconfig-system"`
	ΛErrorsReceived     []ygot.Annotation `path:"@errors-received" ygotAnnotation:"true"`
	MessagesReceived    *uint64           `path:"messages-received" module:"openconfig-system"`
	ΛMessagesReceived   []ygot.Annotation `path:"@messages-received" ygotAnnotation:"true"`
	MessagesSent        *uint64           `path:"messages-sent" module:"openconfig-system"`
	ΛMessagesSent       []ygot.Annotation `path:"@messages-sent" ygotAnnotation:"true"`
	Name                *string           `path:"name" module:"openconfig-system"`
	ΛName               []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout             *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout            []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port             *uint16           `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey        *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey       []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed  *string           `path:"secret-key-hashed" module:"openconfig-system"`
	ΛSecretKeyHashed []ygot.Annotation `path:"@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress    *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress   []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port             *uint16           `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey        *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey       []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed  *string           `path:"secret-key-hashed" module:"openconfig-system"`
	ΛSecretKeyHashed []ygot.Annotation `path:"@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress    *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress   []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-system/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Aaa_State represents the /openconfig-system/system/aaa/state YANG schema element.
type OpenconfigSystem_System_Aaa_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Aaa_State.
func (*OpenconfigSystem_System_Aaa_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Alarms represents the /openconfig-system/system/alarms YANG schema element.
type OpenconfigSystem_System_Alarms struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Alarm     map[string]*OpenconfigSystem_System_Alarms_Alarm `path:"alarm" module:"openconfig-system"`
	ΛAlarm    []ygot.Annotation                                `path:"@alarm" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigSystem_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Alarms) NewAlarm(Id string) (*OpenconfigSystem_System_Alarms_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigSystem_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the OpenconfigSystem_System_Alarms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Alarms) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarmMap returns the list (map) from OpenconfigSystem_System_Alarms.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Alarms) GetOrCreateAlarmMap() map[string]*OpenconfigSystem_System_Alarms_Alarm {
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}
	return t.Alarm
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Alarms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Alarms) GetOrCreateAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of OpenconfigSystem_System_Alarms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Alarms) GetAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Alarms. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Alarms) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied OpenconfigSystem_System_Alarms_Alarm struct to the
// list Alarm of OpenconfigSystem_System_Alarms. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Alarms_Alarm already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Alarms) AppendAlarm(v *OpenconfigSystem_System_Alarms_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Alarms.
func (*OpenconfigSystem_System_Alarms) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Alarms_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Alarms_Alarm_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	Id        *string                                      `path:"id" module:"openconfig-system"`
	ΛId       []ygot.Annotation                            `path:"@id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Alarms_Alarm_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Alarms_Alarm_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Alarms_Alarm_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Alarms_Alarm.
func (*OpenconfigSystem_System_Alarms_Alarm) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Alarms_Alarm_Config represents the /openconfig-system/system/alarms/alarm/config YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Alarms_Alarm_Config.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Alarms_Alarm_State represents the /openconfig-system/system/alarms/alarm/state YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_State struct {
	ΛMetadata    []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Id           *string                                                 `path:"id" module:"openconfig-system"`
	ΛId          []ygot.Annotation                                       `path:"@id" ygotAnnotation:"true"`
	Resource     *string                                                 `path:"resource" module:"openconfig-system"`
	ΛResource    []ygot.Annotation                                       `path:"@resource" ygotAnnotation:"true"`
	Severity     E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY        `path:"severity" module:"openconfig-system"`
	ΛSeverity    []ygot.Annotation                                       `path:"@severity" ygotAnnotation:"true"`
	Text         *string                                                 `path:"text" module:"openconfig-system"`
	ΛText        []ygot.Annotation                                       `path:"@text" ygotAnnotation:"true"`
	TimeCreated  *uint64                                                 `path:"time-created" module:"openconfig-system"`
	ΛTimeCreated []ygot.Annotation                                       `path:"@time-created" ygotAnnotation:"true"`
	TypeId       OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union `path:"type-id" module:"openconfig-system"`
	ΛTypeId      []ygot.Annotation                                       `path:"@type-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Alarms_Alarm_State.
func (*OpenconfigSystem_System_Alarms_Alarm_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Clock represents the /openconfig-system/system/clock YANG schema element.
type OpenconfigSystem_System_Clock struct {
	ΛMetadata []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Clock_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Clock_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateConfig() *OpenconfigSystem_System_Clock_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Clock_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateState() *OpenconfigSystem_System_Clock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Clock_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetConfig() *OpenconfigSystem_System_Clock_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetState() *OpenconfigSystem_System_Clock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Clock.
func (*OpenconfigSystem_System_Clock) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Clock_Config represents the /openconfig-system/system/clock/config YANG schema element.
type OpenconfigSystem_System_Clock_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Clock_Config.
func (*OpenconfigSystem_System_Clock_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Clock_State represents the /openconfig-system/system/clock/state YANG schema element.
type OpenconfigSystem_System_Clock_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Clock_State.
func (*OpenconfigSystem_System_Clock_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Config represents the /openconfig-system/system/config YANG schema element.
type OpenconfigSystem_System_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DomainName   *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName  []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LoginBanner  *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner   *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner  []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Config.
func (*OpenconfigSystem_System_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus represents the /openconfig-system/system/cpus YANG schema element.
type OpenconfigSystem_System_Cpus struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Cpu       map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu `path:"cpu" module:"openconfig-system"`
	ΛCpu      []ygot.Annotation                                                                        `path:"@cpu" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigSystem_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Cpus) NewCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) (*OpenconfigSystem_System_Cpus_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigSystem_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the OpenconfigSystem_System_Cpus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Cpus) RenameCpu(oldK, newK OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpuMap returns the list (map) from OpenconfigSystem_System_Cpus.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Cpus) GetOrCreateCpuMap() map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu {
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}
	return t.Cpu
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Cpus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Cpus) GetOrCreateCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of OpenconfigSystem_System_Cpus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Cpus) GetCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Cpus. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Cpus) DeleteCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied OpenconfigSystem_System_Cpus_Cpu struct to the
// list Cpu of OpenconfigSystem_System_Cpus. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Cpus_Cpu already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Cpus) AppendCpu(v *OpenconfigSystem_System_Cpus_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus.
func (*OpenconfigSystem_System_Cpus) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Index     OpenconfigSystem_System_Cpus_Cpu_State_Index_Union `path:"index" module:"openconfig-system"`
	ΛIndex    []ygot.Annotation                                  `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Cpus_Cpu_State            `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetOrCreateState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Cpus_Cpu_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Cpus_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu.
func (*OpenconfigSystem_System_Cpus_Cpu) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State represents the /openconfig-system/system/cpus/cpu/state YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State struct {
	ΛMetadata          []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	HardwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt `path:"hardware-interrupt" module:"openconfig-system"`
	ΛHardwareInterrupt []ygot.Annotation                                         `path:"@hardware-interrupt" ygotAnnotation:"true"`
	Idle               *OpenconfigSystem_System_Cpus_Cpu_State_Idle              `path:"idle" module:"openconfig-system"`
	ΛIdle              []ygot.Annotation                                         `path:"@idle" ygotAnnotation:"true"`
	Index              OpenconfigSystem_System_Cpus_Cpu_State_Index_Union        `path:"index" module:"openconfig-system"`
	ΛIndex             []ygot.Annotation                                         `path:"@index" ygotAnnotation:"true"`
	Kernel             *OpenconfigSystem_System_Cpus_Cpu_State_Kernel            `path:"kernel" module:"openconfig-system"`
	ΛKernel            []ygot.Annotation                                         `path:"@kernel" ygotAnnotation:"true"`
	Nice               *OpenconfigSystem_System_Cpus_Cpu_State_Nice              `path:"nice" module:"openconfig-system"`
	ΛNice              []ygot.Annotation                                         `path:"@nice" ygotAnnotation:"true"`
	SoftwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt `path:"software-interrupt" module:"openconfig-system"`
	ΛSoftwareInterrupt []ygot.Annotation                                         `path:"@software-interrupt" ygotAnnotation:"true"`
	Total              *OpenconfigSystem_System_Cpus_Cpu_State_Total             `path:"total" module:"openconfig-system"`
	ΛTotal             []ygot.Annotation                                         `path:"@total" ygotAnnotation:"true"`
	User               *OpenconfigSystem_System_Cpus_Cpu_State_User              `path:"user" module:"openconfig-system"`
	ΛUser              []ygot.Annotation                                         `path:"@user" ygotAnnotation:"true"`
	Wait               *OpenconfigSystem_System_Cpus_Cpu_State_Wait              `path:"wait" module:"openconfig-system"`
	ΛWait              []ygot.Annotation                                         `path:"@wait" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &OpenconfigSystem_System_Cpus_Cpu_State_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &OpenconfigSystem_System_Cpus_Cpu_State_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &OpenconfigSystem_System_Cpus_Cpu_State_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &OpenconfigSystem_System_Cpus_Cpu_State_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t.User != nil {
		return t.User
	}
	t.User = &OpenconfigSystem_System_Cpus_Cpu_State_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &OpenconfigSystem_System_Cpus_Cpu_State_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State.
func (*OpenconfigSystem_System_Cpus_Cpu_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Idle struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_Idle.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Kernel struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_Kernel.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Nice struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_Nice.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Total struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_Total.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_User struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_User.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Cpus_Cpu_State_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Wait struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Cpus_Cpu_State_Wait.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns represents the /openconfig-system/system/dns YANG schema element.
type OpenconfigSystem_System_Dns struct {
	ΛMetadata    []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigSystem_System_Dns_Config      `path:"config" module:"openconfig-system"`
	ΛConfig      []ygot.Annotation                        `path:"@config" ygotAnnotation:"true"`
	HostEntries  *OpenconfigSystem_System_Dns_HostEntries `path:"host-entries" module:"openconfig-system"`
	ΛHostEntries []ygot.Annotation                        `path:"@host-entries" ygotAnnotation:"true"`
	Servers      *OpenconfigSystem_System_Dns_Servers     `path:"servers" module:"openconfig-system"`
	ΛServers     []ygot.Annotation                        `path:"@servers" ygotAnnotation:"true"`
	State        *OpenconfigSystem_System_Dns_State       `path:"state" module:"openconfig-system"`
	ΛState       []ygot.Annotation                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Config{}
	return t.Config
}

// GetOrCreateHostEntries retrieves the value of the HostEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t.HostEntries != nil {
		return t.HostEntries
	}
	t.HostEntries = &OpenconfigSystem_System_Dns_HostEntries{}
	return t.HostEntries
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateServers() *OpenconfigSystem_System_Dns_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Dns_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateState() *OpenconfigSystem_System_Dns_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetConfig() *OpenconfigSystem_System_Dns_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHostEntries returns the value of the HostEntries struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field HostEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t != nil && t.HostEntries != nil {
		return t.HostEntries
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetServers() *OpenconfigSystem_System_Dns_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetState() *OpenconfigSystem_System_Dns_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns.
func (*OpenconfigSystem_System_Dns) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_Config represents the /openconfig-system/system/dns/config YANG schema element.
type OpenconfigSystem_System_Dns_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_Config.
func (*OpenconfigSystem_System_Dns_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_HostEntries represents the /openconfig-system/system/dns/host-entries YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries struct {
	ΛMetadata  []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	HostEntry  map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry `path:"host-entry" module:"openconfig-system"`
	ΛHostEntry []ygot.Annotation                                             `path:"@host-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigSystem_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigSystem_System_Dns_HostEntries_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigSystem_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the OpenconfigSystem_System_Dns_HostEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Dns_HostEntries) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntryMap returns the list (map) from OpenconfigSystem_System_Dns_HostEntries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetOrCreateHostEntryMap() map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry {
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}
	return t.HostEntry
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_HostEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetOrCreateHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of OpenconfigSystem_System_Dns_HostEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_HostEntries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Dns_HostEntries) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry struct to the
// list HostEntry of OpenconfigSystem_System_Dns_HostEntries. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Dns_HostEntries) AppendHostEntry(v *OpenconfigSystem_System_Dns_HostEntries_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_HostEntries.
func (*OpenconfigSystem_System_Dns_HostEntries) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	Hostname  *string                                                   `path:"hostname" module:"openconfig-system"`
	ΛHostname []ygot.Annotation                                         `path:"@hostname" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_HostEntries_HostEntry.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-system/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_State represents the /openconfig-system/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_HostEntries_HostEntry_State.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_Servers represents the /openconfig-system/system/dns/servers YANG schema element.
type OpenconfigSystem_System_Dns_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers) IsYANGGoStruct() {}

// GetOrCreateServerMap returns the ordered map field
// Server from OpenconfigSystem_System_Dns_Servers.
//
// It initializes the field if not already initialized.
func (s *OpenconfigSystem_System_Dns_Servers) GetOrCreateServerMap() *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap {
	if s.Server == nil {
		s.Server = &OpenconfigSystem_System_Dns_Servers_Server_OrderedMap{}
	}
	return s.Server
}

// AppendNewServer creates a new entry in the Server
// ordered map of the OpenconfigSystem_System_Dns_Servers struct. The keys of the list are
// populated from the input arguments.
func (s *OpenconfigSystem_System_Dns_Servers) AppendNewServer(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error) {
	if s.Server == nil {
		s.Server = &OpenconfigSystem_System_Dns_Servers_Server_OrderedMap{}
	}
	return s.Server.AppendNew(Address)
}

// AppendServer appends the supplied OpenconfigSystem_System_Dns_Servers_Server struct
// to the list Server of OpenconfigSystem_System_Dns_Servers. If the key value(s)
// specified in the supplied OpenconfigSystem_System_Dns_Servers_Server already exist in the list, an
// error is returned.
func (s *OpenconfigSystem_System_Dns_Servers) AppendServer(v *OpenconfigSystem_System_Dns_Servers_Server) error {
	if s.Server == nil {
		s.Server = &OpenconfigSystem_System_Dns_Servers_Server_OrderedMap{}
	}
	return s.Server.Append(v)
}

// GetServer retrieves the value with the specified key from the
// Server map field of OpenconfigSystem_System_Dns_Servers. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *OpenconfigSystem_System_Dns_Servers) GetServer(Address string) *OpenconfigSystem_System_Dns_Servers_Server {
	if s == nil {
		return nil
	}
	key := Address
	return s.Server.Get(key)
}

// DeleteServer deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_Servers. If there is no such element, the
// function is a no-op.
func (s *OpenconfigSystem_System_Dns_Servers) DeleteServer(Address string) bool {
	key := Address
	return s.Server.Delete(key)
}

// OpenconfigSystem_System_Dns_Servers_Server_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-system/system/dns/servers/server.
type OpenconfigSystem_System_Dns_Servers_Server_OrderedMap struct {
	keys     []string
	valueMap map[string]*OpenconfigSystem_System_Dns_Servers_Server
}

// IsYANGOrderedList ensures that OpenconfigSystem_System_Dns_Servers_Server_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*OpenconfigSystem_System_Dns_Servers_Server{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Values() []*OpenconfigSystem_System_Dns_Servers_Server {
	if o == nil {
		return nil
	}
	var values []*OpenconfigSystem_System_Dns_Servers_Server
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OpenconfigSystem_System_Dns_Servers_Server_OrderedMap
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Get(key string) *OpenconfigSystem_System_Dns_Servers_Server {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OpenconfigSystem_System_Dns_Servers_Server, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) Append(v *OpenconfigSystem_System_Dns_Servers_Server) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OpenconfigSystem_System_Dns_Servers_Server")
	}
	if v == nil {
		return fmt.Errorf("nil OpenconfigSystem_System_Dns_Servers_Server")
	}
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OpenconfigSystem_System_Dns_Servers_Server, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OpenconfigSystem_System_Dns_Servers_Server_OrderedMap) AppendNew(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OpenconfigSystem_System_Dns_Servers_Server")
	}
	key := Address

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OpenconfigSystem_System_Dns_Servers_Server{
		Address: &Address,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_Servers.
func (*OpenconfigSystem_System_Dns_Servers) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_Servers_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_Servers_Server.
func (*OpenconfigSystem_System_Dns_Servers_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_Servers_Server_Config represents the /openconfig-system/system/dns/servers/server/config YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_Servers_Server_Config.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_Servers_Server_State represents the /openconfig-system/system/dns/servers/server/state YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_Servers_Server_State.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Dns_State represents the /openconfig-system/system/dns/state YANG schema element.
type OpenconfigSystem_System_Dns_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Dns_State.
func (*OpenconfigSystem_System_Dns_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_License represents the /openconfig-system/system/license YANG schema element.
type OpenconfigSystem_System_License struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Licenses  *OpenconfigSystem_System_License_Licenses `path:"licenses" module:"openconfig-system"`
	ΛLicenses []ygot.Annotation                         `path:"@licenses" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License) IsYANGGoStruct() {}

// GetOrCreateLicenses retrieves the value of the Licenses field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_License) GetOrCreateLicenses() *OpenconfigSystem_System_License_Licenses {
	if t.Licenses != nil {
		return t.Licenses
	}
	t.Licenses = &OpenconfigSystem_System_License_Licenses{}
	return t.Licenses
}

// GetLicenses returns the value of the Licenses struct pointer
// from OpenconfigSystem_System_License. If the receiver or the field Licenses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_License) GetLicenses() *OpenconfigSystem_System_License_Licenses {
	if t != nil && t.Licenses != nil {
		return t.Licenses
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_License.
func (*OpenconfigSystem_System_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_License_Licenses represents the /openconfig-system/system/license/licenses YANG schema element.
type OpenconfigSystem_System_License_Licenses struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	License   map[string]*OpenconfigSystem_System_License_Licenses_License `path:"license" module:"openconfig-system"`
	ΛLicense  []ygot.Annotation                                            `path:"@license" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// OpenconfigSystem_System_License_Licenses struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_License_Licenses) NewLicense(LicenseId string) (*OpenconfigSystem_System_License_Licenses_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*OpenconfigSystem_System_License_Licenses_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &OpenconfigSystem_System_License_Licenses_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the OpenconfigSystem_System_License_Licenses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_License_Licenses) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicenseMap returns the list (map) from OpenconfigSystem_System_License_Licenses.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_License_Licenses) GetOrCreateLicenseMap() map[string]*OpenconfigSystem_System_License_Licenses_License {
	if t.License == nil {
		t.License = make(map[string]*OpenconfigSystem_System_License_Licenses_License)
	}
	return t.License
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_License_Licenses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_License_Licenses) GetOrCreateLicense(LicenseId string) *OpenconfigSystem_System_License_Licenses_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of OpenconfigSystem_System_License_Licenses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_License_Licenses) GetLicense(LicenseId string) *OpenconfigSystem_System_License_Licenses_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_License_Licenses. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_License_Licenses) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied OpenconfigSystem_System_License_Licenses_License struct to the
// list License of OpenconfigSystem_System_License_Licenses. If the key value(s) specified in
// the supplied OpenconfigSystem_System_License_Licenses_License already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_License_Licenses) AppendLicense(v *OpenconfigSystem_System_License_Licenses_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*OpenconfigSystem_System_License_Licenses_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_License_Licenses.
func (*OpenconfigSystem_System_License_Licenses) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_License_Licenses_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type OpenconfigSystem_System_License_Licenses_License struct {
	ΛMetadata  []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_License_Licenses_License_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                        `path:"@config" ygotAnnotation:"true"`
	LicenseId  *string                                                  `path:"license-id" module:"openconfig-system"`
	ΛLicenseId []ygot.Annotation                                        `path:"@license-id" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_License_Licenses_License_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_License_Licenses_License) GetOrCreateConfig() *OpenconfigSystem_System_License_Licenses_License_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_License_Licenses_License_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_License_Licenses_License) GetOrCreateState() *OpenconfigSystem_System_License_Licenses_License_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_License_Licenses_License_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_License_Licenses_License. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_License_Licenses_License) GetConfig() *OpenconfigSystem_System_License_Licenses_License_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_License_Licenses_License. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_License_Licenses_License) GetState() *OpenconfigSystem_System_License_Licenses_License_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_License_Licenses_License struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_License_Licenses_License.
func (*OpenconfigSystem_System_License_Licenses_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_License_Licenses_License_Config represents the /openconfig-system/system/license/licenses/license/config YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_Config struct {
	ΛMetadata    []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	Active       *bool                                                                     `path:"active" module:"openconfig-system"`
	ΛActive      []ygot.Annotation                                                         `path:"@active" ygotAnnotation:"true"`
	LicenseData  OpenconfigSystem_System_License_Licenses_License_Config_LicenseData_Union `path:"license-data" module:"openconfig-system"`
	ΛLicenseData []ygot.Annotation                                                         `path:"@license-data" ygotAnnotation:"true"`
	LicenseId    *string                                                                   `path:"license-id" module:"openconfig-system"`
	ΛLicenseId   []ygot.Annotation                                                         `path:"@license-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_License_Licenses_License_Config.
func (*OpenconfigSystem_System_License_Licenses_License_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_License_Licenses_License_State represents the /openconfig-system/system/license/licenses/license/state YANG schema element.
type OpenconfigSystem_System_License_Licenses_License_State struct {
	ΛMetadata       []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	Active          *bool                                                                    `path:"active" module:"openconfig-system"`
	ΛActive         []ygot.Annotation                                                        `path:"@active" ygotAnnotation:"true"`
	Description     *string                                                                  `path:"description" module:"openconfig-system"`
	ΛDescription    []ygot.Annotation                                                        `path:"@description" ygotAnnotation:"true"`
	ExpirationDate  *uint64                                                                  `path:"expiration-date" module:"openconfig-system"`
	ΛExpirationDate []ygot.Annotation                                                        `path:"@expiration-date" ygotAnnotation:"true"`
	Expired         *bool                                                                    `path:"expired" module:"openconfig-system"`
	ΛExpired        []ygot.Annotation                                                        `path:"@expired" ygotAnnotation:"true"`
	InUse           *bool                                                                    `path:"in-use" module:"openconfig-system"`
	ΛInUse          []ygot.Annotation                                                        `path:"@in-use" ygotAnnotation:"true"`
	IssueDate       *uint64                                                                  `path:"issue-date" module:"openconfig-system"`
	ΛIssueDate      []ygot.Annotation                                                        `path:"@issue-date" ygotAnnotation:"true"`
	LicenseData     OpenconfigSystem_System_License_Licenses_License_State_LicenseData_Union `path:"license-data" module:"openconfig-system"`
	ΛLicenseData    []ygot.Annotation                                                        `path:"@license-data" ygotAnnotation:"true"`
	LicenseId       *string                                                                  `path:"license-id" module:"openconfig-system"`
	ΛLicenseId      []ygot.Annotation                                                        `path:"@license-id" ygotAnnotation:"true"`
	Valid           *bool                                                                    `path:"valid" module:"openconfig-system"`
	ΛValid          []ygot.Annotation                                                        `path:"@valid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_License_Licenses_License_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_License_Licenses_License_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_License_Licenses_License_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_License_Licenses_License_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_License_Licenses_License_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_License_Licenses_License_State.
func (*OpenconfigSystem_System_License_Licenses_License_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging represents the /openconfig-system/system/logging YANG schema element.
type OpenconfigSystem_System_Logging struct {
	ΛMetadata      []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Console        *OpenconfigSystem_System_Logging_Console       `path:"console" module:"openconfig-system"`
	ΛConsole       []ygot.Annotation                              `path:"@console" ygotAnnotation:"true"`
	Files          *OpenconfigSystem_System_Logging_Files         `path:"files" module:"openconfig-system"`
	ΛFiles         []ygot.Annotation                              `path:"@files" ygotAnnotation:"true"`
	RemoteServers  *OpenconfigSystem_System_Logging_RemoteServers `path:"remote-servers" module:"openconfig-system"`
	ΛRemoteServers []ygot.Annotation                              `path:"@remote-servers" ygotAnnotation:"true"`
	Vty            *OpenconfigSystem_System_Logging_Vty           `path:"vty" module:"openconfig-system"`
	ΛVty           []ygot.Annotation                              `path:"@vty" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging) IsYANGGoStruct() {}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateConsole() *OpenconfigSystem_System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &OpenconfigSystem_System_Logging_Console{}
	return t.Console
}

// GetOrCreateFiles retrieves the value of the Files field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateFiles() *OpenconfigSystem_System_Logging_Files {
	if t.Files != nil {
		return t.Files
	}
	t.Files = &OpenconfigSystem_System_Logging_Files{}
	return t.Files
}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &OpenconfigSystem_System_Logging_RemoteServers{}
	return t.RemoteServers
}

// GetOrCreateVty retrieves the value of the Vty field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateVty() *OpenconfigSystem_System_Logging_Vty {
	if t.Vty != nil {
		return t.Vty
	}
	t.Vty = &OpenconfigSystem_System_Logging_Vty{}
	return t.Vty
}

// GetConsole returns the value of the Console struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetConsole() *OpenconfigSystem_System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetFiles returns the value of the Files struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field Files is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetFiles() *OpenconfigSystem_System_Logging_Files {
	if t != nil && t.Files != nil {
		return t.Files
	}
	return nil
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// GetVty returns the value of the Vty struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field Vty is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetVty() *OpenconfigSystem_System_Logging_Vty {
	if t != nil && t.Vty != nil {
		return t.Vty
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging.
func (*OpenconfigSystem_System_Logging) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type OpenconfigSystem_System_Logging_Console struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_Console_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_Console_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                  `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_Console_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_Console_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetState() *OpenconfigSystem_System_Logging_Console_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console.
func (*OpenconfigSystem_System_Logging_Console) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_Config represents the /openconfig-system/system/logging/console/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_Config.
func (*OpenconfigSystem_System_Logging_Console_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_Selectors represents the /openconfig-system/system/logging/console/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                              `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console/selectors.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key key struct.
func (t OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Console_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_Console_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from OpenconfigSystem_System_Logging_Console_Selectors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetOrCreateSelectorMap() map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector {
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Console_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_Console_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Console_Selectors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) DeleteSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) {
	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_Console_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_Console_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_Selectors.
func (*OpenconfigSystem_System_Logging_Console_Selectors) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                          `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                  `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                           `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                  `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_Selectors_Selector.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-system/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_State represents the /openconfig-system/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_Selectors_Selector_State.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Console_State represents the /openconfig-system/system/logging/console/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Console_State.
func (*OpenconfigSystem_System_Logging_Console_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files represents the /openconfig-system/system/logging/files YANG schema element.
type OpenconfigSystem_System_Logging_Files struct {
	ΛMetadata []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	File      map[OpenconfigSystem_System_Logging_Files_File_Key]*OpenconfigSystem_System_Logging_Files_File `path:"file" module:"openconfig-system"`
	ΛFile     []ygot.Annotation                                                                              `path:"@file" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Files_File_Key represents the key for list File of element /openconfig-system/system/logging/files.
type OpenconfigSystem_System_Logging_Files_File_Key struct {
	Path           string `path:"path"`
	FilenamePrefix string `path:"filename-prefix"`
}

// IsYANGGoKeyStruct ensures that OpenconfigSystem_System_Logging_Files_File_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigSystem_System_Logging_Files_File_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigSystem_System_Logging_Files_File_Key key struct.
func (t OpenconfigSystem_System_Logging_Files_File_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path":            t.Path,
		"filename-prefix": t.FilenamePrefix,
	}, nil
}

// NewFile creates a new entry in the File list of the
// OpenconfigSystem_System_Logging_Files struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Files) NewFile(Path string, FilenamePrefix string) (*OpenconfigSystem_System_Logging_Files_File, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[OpenconfigSystem_System_Logging_Files_File_Key]*OpenconfigSystem_System_Logging_Files_File)
	}

	key := OpenconfigSystem_System_Logging_Files_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.File[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list File", key)
	}

	t.File[key] = &OpenconfigSystem_System_Logging_Files_File{
		Path:           &Path,
		FilenamePrefix: &FilenamePrefix,
	}

	return t.File[key], nil
}

// RenameFile renames an entry in the list File within
// the OpenconfigSystem_System_Logging_Files struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Files) RenameFile(oldK, newK OpenconfigSystem_System_Logging_Files_File_Key) error {
	if _, ok := t.File[newK]; ok {
		return fmt.Errorf("key %v already exists in File", newK)
	}

	e, ok := t.File[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in File", oldK)
	}
	e.Path = &newK.Path
	e.FilenamePrefix = &newK.FilenamePrefix

	t.File[newK] = e
	delete(t.File, oldK)
	return nil
}

// GetOrCreateFileMap returns the list (map) from OpenconfigSystem_System_Logging_Files.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_Files) GetOrCreateFileMap() map[OpenconfigSystem_System_Logging_Files_File_Key]*OpenconfigSystem_System_Logging_Files_File {
	if t.File == nil {
		t.File = make(map[OpenconfigSystem_System_Logging_Files_File_Key]*OpenconfigSystem_System_Logging_Files_File)
	}
	return t.File
}

// GetOrCreateFile retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Files. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Files) GetOrCreateFile(Path string, FilenamePrefix string) *OpenconfigSystem_System_Logging_Files_File {

	key := OpenconfigSystem_System_Logging_Files_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if v, ok := t.File[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFile(Path, FilenamePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFile got unexpected error: %v", err))
	}
	return v
}

// GetFile retrieves the value with the specified key from
// the File map field of OpenconfigSystem_System_Logging_Files. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Files) GetFile(Path string, FilenamePrefix string) *OpenconfigSystem_System_Logging_Files_File {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Files_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if lm, ok := t.File[key]; ok {
		return lm
	}
	return nil
}

// DeleteFile deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Files. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_Files) DeleteFile(Path string, FilenamePrefix string) {
	key := OpenconfigSystem_System_Logging_Files_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	delete(t.File, key)
}

// AppendFile appends the supplied OpenconfigSystem_System_Logging_Files_File struct to the
// list File of OpenconfigSystem_System_Logging_Files. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Files_File already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Files) AppendFile(v *OpenconfigSystem_System_Logging_Files_File) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key for Path")
	}

	if v.FilenamePrefix == nil {
		return fmt.Errorf("invalid nil key for FilenamePrefix")
	}

	key := OpenconfigSystem_System_Logging_Files_File_Key{
		Path:           *v.Path,
		FilenamePrefix: *v.FilenamePrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[OpenconfigSystem_System_Logging_Files_File_Key]*OpenconfigSystem_System_Logging_Files_File)
	}

	if _, ok := t.File[key]; ok {
		return fmt.Errorf("duplicate key for list File %v", key)
	}

	t.File[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files.
func (*OpenconfigSystem_System_Logging_Files) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File represents the /openconfig-system/system/logging/files/file YANG schema element.
type OpenconfigSystem_System_Logging_Files_File struct {
	ΛMetadata       []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Config          *OpenconfigSystem_System_Logging_Files_File_Config    `path:"config" module:"openconfig-system"`
	ΛConfig         []ygot.Annotation                                     `path:"@config" ygotAnnotation:"true"`
	FilenamePrefix  *string                                               `path:"filename-prefix" module:"openconfig-system"`
	ΛFilenamePrefix []ygot.Annotation                                     `path:"@filename-prefix" ygotAnnotation:"true"`
	Path            *string                                               `path:"path" module:"openconfig-system"`
	ΛPath           []ygot.Annotation                                     `path:"@path" ygotAnnotation:"true"`
	Selectors       *OpenconfigSystem_System_Logging_Files_File_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors      []ygot.Annotation                                     `path:"@selectors" ygotAnnotation:"true"`
	State           *OpenconfigSystem_System_Logging_Files_File_State     `path:"state" module:"openconfig-system"`
	ΛState          []ygot.Annotation                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Files_File) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Files_File_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Files_File_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Files_File) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_Files_File_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_Files_File_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Files_File) GetOrCreateState() *OpenconfigSystem_System_Logging_Files_File_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Files_File_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Files_File. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File) GetConfig() *OpenconfigSystem_System_Logging_Files_File_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_Files_File. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File) GetSelectors() *OpenconfigSystem_System_Logging_Files_File_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Files_File. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File) GetState() *OpenconfigSystem_System_Logging_Files_File_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Files_File struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Files_File) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilenamePrefix == nil {
		return nil, fmt.Errorf("nil value for key FilenamePrefix")
	}

	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"filename-prefix": *t.FilenamePrefix,
		"path":            *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File.
func (*OpenconfigSystem_System_Logging_Files_File) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_Config represents the /openconfig-system/system/logging/files/file/config YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_Config struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FilenamePrefix  *string           `path:"filename-prefix" module:"openconfig-system"`
	ΛFilenamePrefix []ygot.Annotation `path:"@filename-prefix" ygotAnnotation:"true"`
	MaxOpenTime     *uint32           `path:"max-open-time" module:"openconfig-system"`
	ΛMaxOpenTime    []ygot.Annotation `path:"@max-open-time" ygotAnnotation:"true"`
	MaxSize         *uint32           `path:"max-size" module:"openconfig-system"`
	ΛMaxSize        []ygot.Annotation `path:"@max-size" ygotAnnotation:"true"`
	Path            *string           `path:"path" module:"openconfig-system"`
	ΛPath           []ygot.Annotation `path:"@path" ygotAnnotation:"true"`
	Rotate          *uint32           `path:"rotate" module:"openconfig-system"`
	ΛRotate         []ygot.Annotation `path:"@rotate" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_Config.
func (*OpenconfigSystem_System_Logging_Files_File_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_Selectors represents the /openconfig-system/system/logging/files/file/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                                    `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/files/file/selectors.
type OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key key struct.
func (t OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Files_File_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Files_File_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_Files_File_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from OpenconfigSystem_System_Logging_Files_File_Selectors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) GetOrCreateSelectorMap() map[OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector {
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Files_File_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_Files_File_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Files_File_Selectors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) DeleteSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) {
	key := OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_Files_File_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_Files_File_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Files_File_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_Selectors.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_Selectors_Selector represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                             `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                     `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                              `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                     `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Files_File_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Files_File_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Files_File_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_Selectors_Selector.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config represents the /openconfig-system/system/logging/files/file/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State represents the /openconfig-system/system/logging/files/file/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State.
func (*OpenconfigSystem_System_Logging_Files_File_Selectors_Selector_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Files_File_State represents the /openconfig-system/system/logging/files/file/state YANG schema element.
type OpenconfigSystem_System_Logging_Files_File_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FilenamePrefix  *string           `path:"filename-prefix" module:"openconfig-system"`
	ΛFilenamePrefix []ygot.Annotation `path:"@filename-prefix" ygotAnnotation:"true"`
	MaxOpenTime     *uint32           `path:"max-open-time" module:"openconfig-system"`
	ΛMaxOpenTime    []ygot.Annotation `path:"@max-open-time" ygotAnnotation:"true"`
	MaxSize         *uint32           `path:"max-size" module:"openconfig-system"`
	ΛMaxSize        []ygot.Annotation `path:"@max-size" ygotAnnotation:"true"`
	OpenLogfile     *string           `path:"open-logfile" module:"openconfig-system"`
	ΛOpenLogfile    []ygot.Annotation `path:"@open-logfile" ygotAnnotation:"true"`
	Path            *string           `path:"path" module:"openconfig-system"`
	ΛPath           []ygot.Annotation `path:"@path" ygotAnnotation:"true"`
	Rotate          *uint32           `path:"rotate" module:"openconfig-system"`
	ΛRotate         []ygot.Annotation `path:"@rotate" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Files_File_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Files_File_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Files_File_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Files_File_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Files_File_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Files_File_State.
func (*OpenconfigSystem_System_Logging_Files_File_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers represents the /openconfig-system/system/logging/remote-servers YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers struct {
	ΛMetadata     []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	RemoteServer  map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer `path:"remote-server" module:"openconfig-system"`
	ΛRemoteServer []ygot.Annotation                                                      `path:"@remote-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigSystem_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the OpenconfigSystem_System_Logging_RemoteServers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServerMap returns the list (map) from OpenconfigSystem_System_Logging_RemoteServers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetOrCreateRemoteServerMap() map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}
	return t.RemoteServer
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetOrCreateRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of OpenconfigSystem_System_Logging_RemoteServers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_RemoteServers) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct to the
// list RemoteServer of OpenconfigSystem_System_Logging_RemoteServers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers) AppendRemoteServer(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers.
func (*OpenconfigSystem_System_Logging_RemoteServers) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct {
	ΛMetadata  []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	Host       *string                                                               `path:"host" module:"openconfig-system"`
	ΛHost      []ygot.Annotation                                                     `path:"@host" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                                     `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host               *string           `path:"host" module:"openconfig-system"`
	ΛHost              []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	NetworkInstance    *string           `path:"network-instance" module:"openconfig-system"`
	ΛNetworkInstance   []ygot.Annotation `path:"@network-instance" ygotAnnotation:"true"`
	RemotePort         *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort        []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress      *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress     []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
	TlsProfileId       *string           `path:"tls-profile-id" module:"openconfig-system"`
	ΛTlsProfileId      []ygot.Annotation `path:"@tls-profile-id" ygotAnnotation:"true"`
	TransportSecurity  *bool             `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                                                                    `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server/selectors.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key key struct.
func (t OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetOrCreateSelectorMap() map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) DeleteSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) {
	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                     `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                                             `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                                     `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                                              `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                                     `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-system/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host               *string           `path:"host" module:"openconfig-system"`
	ΛHost              []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	NetworkInstance    *string           `path:"network-instance" module:"openconfig-system"`
	ΛNetworkInstance   []ygot.Annotation `path:"@network-instance" ygotAnnotation:"true"`
	RemotePort         *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort        []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress      *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress     []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
	TlsProfileId       *string           `path:"tls-profile-id" module:"openconfig-system"`
	ΛTlsProfileId      []ygot.Annotation `path:"@tls-profile-id" ygotAnnotation:"true"`
	TransportSecurity  *bool             `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty represents the /openconfig-system/system/logging/vty YANG schema element.
type OpenconfigSystem_System_Logging_Vty struct {
	ΛMetadata  []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_Vty_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                              `path:"@config" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_Vty_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                              `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_Vty_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Vty) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Vty_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Vty_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Vty) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_Vty_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_Vty_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Vty) GetOrCreateState() *OpenconfigSystem_System_Logging_Vty_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Vty_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Vty. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty) GetConfig() *OpenconfigSystem_System_Logging_Vty_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_Vty. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty) GetSelectors() *OpenconfigSystem_System_Logging_Vty_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Vty. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty) GetState() *OpenconfigSystem_System_Logging_Vty_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty.
func (*OpenconfigSystem_System_Logging_Vty) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_Config represents the /openconfig-system/system/logging/vty/config YANG schema element.
type OpenconfigSystem_System_Logging_Vty_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_Config.
func (*OpenconfigSystem_System_Logging_Vty_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_Selectors represents the /openconfig-system/system/logging/vty/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Vty_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Vty_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                      `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/vty/selectors.
type OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key key struct.
func (t OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Vty_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Vty_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Vty_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_Vty_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelectorMap returns the list (map) from OpenconfigSystem_System_Logging_Vty_Selectors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) GetOrCreateSelectorMap() map[OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Vty_Selectors_Selector {
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Vty_Selectors_Selector)
	}
	return t.Selector
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Vty_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Vty_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_Vty_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Vty_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Vty_Selectors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) DeleteSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) {
	key := OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_Vty_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_Vty_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Vty_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Vty_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_Selectors.
func (*OpenconfigSystem_System_Logging_Vty_Selectors) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_Selectors_Selector represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Vty_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                      `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                              `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                       `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                              `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Vty_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Vty_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Vty_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_Selectors_Selector.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config represents the /openconfig-system/system/logging/vty/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State represents the /openconfig-system/system/logging/vty/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State.
func (*OpenconfigSystem_System_Logging_Vty_Selectors_Selector_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Logging_Vty_State represents the /openconfig-system/system/logging/vty/state YANG schema element.
type OpenconfigSystem_System_Logging_Vty_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Vty_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Vty_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Vty_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Vty_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Vty_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Logging_Vty_State.
func (*OpenconfigSystem_System_Logging_Vty_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MacAddress represents the /openconfig-system/system/mac-address YANG schema element.
type OpenconfigSystem_System_MacAddress struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_MacAddress_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_MacAddress_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MacAddress) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_MacAddress) GetOrCreateConfig() *OpenconfigSystem_System_MacAddress_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_MacAddress_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_MacAddress) GetOrCreateState() *OpenconfigSystem_System_MacAddress_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_MacAddress_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_MacAddress. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_MacAddress) GetConfig() *OpenconfigSystem_System_MacAddress_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_MacAddress. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_MacAddress) GetState() *OpenconfigSystem_System_MacAddress_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MacAddress.
func (*OpenconfigSystem_System_MacAddress) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MacAddress_Config represents the /openconfig-system/system/mac-address/config YANG schema element.
type OpenconfigSystem_System_MacAddress_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RoutingMac  *string           `path:"routing-mac" module:"openconfig-system"`
	ΛRoutingMac []ygot.Annotation `path:"@routing-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MacAddress_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MacAddress_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MacAddress_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MacAddress_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MacAddress_Config.
func (*OpenconfigSystem_System_MacAddress_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MacAddress_State represents the /openconfig-system/system/mac-address/state YANG schema element.
type OpenconfigSystem_System_MacAddress_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RoutingMac  *string           `path:"routing-mac" module:"openconfig-system"`
	ΛRoutingMac []ygot.Annotation `path:"@routing-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MacAddress_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MacAddress_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MacAddress_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MacAddress_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MacAddress_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MacAddress_State.
func (*OpenconfigSystem_System_MacAddress_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Memory represents the /openconfig-system/system/memory YANG schema element.
type OpenconfigSystem_System_Memory struct {
	ΛMetadata []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Memory_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Memory_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateConfig() *OpenconfigSystem_System_Memory_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Memory_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateState() *OpenconfigSystem_System_Memory_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Memory_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetConfig() *OpenconfigSystem_System_Memory_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetState() *OpenconfigSystem_System_Memory_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Memory.
func (*OpenconfigSystem_System_Memory) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Memory_Config represents the /openconfig-system/system/memory/config YANG schema element.
type OpenconfigSystem_System_Memory_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Memory_Config.
func (*OpenconfigSystem_System_Memory_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Memory_State represents the /openconfig-system/system/memory/state YANG schema element.
type OpenconfigSystem_System_Memory_State struct {
	ΛMetadata []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Counters  *OpenconfigSystem_System_Memory_State_Counters `path:"counters" module:"openconfig-system"`
	ΛCounters []ygot.Annotation                              `path:"@counters" ygotAnnotation:"true"`
	Free      *uint64                                        `path:"free" module:"openconfig-system"`
	ΛFree     []ygot.Annotation                              `path:"@free" ygotAnnotation:"true"`
	Physical  *uint64                                        `path:"physical" module:"openconfig-system"`
	ΛPhysical []ygot.Annotation                              `path:"@physical" ygotAnnotation:"true"`
	Reserved  *uint64                                        `path:"reserved" module:"openconfig-system"`
	ΛReserved []ygot.Annotation                              `path:"@reserved" ygotAnnotation:"true"`
	Used      *uint64                                        `path:"used" module:"openconfig-system"`
	ΛUsed     []ygot.Annotation                              `path:"@used" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory_State) GetOrCreateCounters() *OpenconfigSystem_System_Memory_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigSystem_System_Memory_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigSystem_System_Memory_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory_State) GetCounters() *OpenconfigSystem_System_Memory_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Memory_State.
func (*OpenconfigSystem_System_Memory_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Memory_State_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type OpenconfigSystem_System_Memory_State_Counters struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CorrectableEccErrors    *uint64           `path:"correctable-ecc-errors" module:"openconfig-system"`
	ΛCorrectableEccErrors   []ygot.Annotation `path:"@correctable-ecc-errors" ygotAnnotation:"true"`
	TotalEccErrors          *uint64           `path:"total-ecc-errors" module:"openconfig-system"`
	ΛTotalEccErrors         []ygot.Annotation `path:"@total-ecc-errors" ygotAnnotation:"true"`
	UncorrectableEccErrors  *uint64           `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
	ΛUncorrectableEccErrors []ygot.Annotation `path:"@uncorrectable-ecc-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Memory_State_Counters.
func (*OpenconfigSystem_System_Memory_State_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages represents the /openconfig-system/system/messages YANG schema element.
type OpenconfigSystem_System_Messages struct {
	ΛMetadata     []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigSystem_System_Messages_Config       `path:"config" module:"openconfig-system"`
	ΛConfig       []ygot.Annotation                              `path:"@config" ygotAnnotation:"true"`
	DebugEntries  *OpenconfigSystem_System_Messages_DebugEntries `path:"debug-entries" module:"openconfig-system"`
	ΛDebugEntries []ygot.Annotation                              `path:"@debug-entries" ygotAnnotation:"true"`
	State         *OpenconfigSystem_System_Messages_State        `path:"state" module:"openconfig-system"`
	ΛState        []ygot.Annotation                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages) GetOrCreateConfig() *OpenconfigSystem_System_Messages_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Messages_Config{}
	return t.Config
}

// GetOrCreateDebugEntries retrieves the value of the DebugEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages) GetOrCreateDebugEntries() *OpenconfigSystem_System_Messages_DebugEntries {
	if t.DebugEntries != nil {
		return t.DebugEntries
	}
	t.DebugEntries = &OpenconfigSystem_System_Messages_DebugEntries{}
	return t.DebugEntries
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages) GetOrCreateState() *OpenconfigSystem_System_Messages_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Messages_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Messages. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages) GetConfig() *OpenconfigSystem_System_Messages_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetDebugEntries returns the value of the DebugEntries struct pointer
// from OpenconfigSystem_System_Messages. If the receiver or the field DebugEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages) GetDebugEntries() *OpenconfigSystem_System_Messages_DebugEntries {
	if t != nil && t.DebugEntries != nil {
		return t.DebugEntries
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Messages. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages) GetState() *OpenconfigSystem_System_Messages_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages.
func (*OpenconfigSystem_System_Messages) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_Config represents the /openconfig-system/system/messages/config YANG schema element.
type OpenconfigSystem_System_Messages_Config struct {
	ΛMetadata []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                        `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_Config.
func (*OpenconfigSystem_System_Messages_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_DebugEntries represents the /openconfig-system/system/messages/debug-entries YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries struct {
	ΛMetadata     []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	DebugService  map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService `path:"debug-service" module:"openconfig-system"`
	ΛDebugService []ygot.Annotation                                                                                  `path:"@debug-service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// OpenconfigSystem_System_Messages_DebugEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Messages_DebugEntries) NewDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) (*OpenconfigSystem_System_Messages_DebugEntries_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &OpenconfigSystem_System_Messages_DebugEntries_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the OpenconfigSystem_System_Messages_DebugEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Messages_DebugEntries) RenameDebugService(oldK, newK E_OpenconfigMessages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugServiceMap returns the list (map) from OpenconfigSystem_System_Messages_DebugEntries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Messages_DebugEntries) GetOrCreateDebugServiceMap() map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService {
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService)
	}
	return t.DebugService
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Messages_DebugEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Messages_DebugEntries) GetOrCreateDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) *OpenconfigSystem_System_Messages_DebugEntries_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of OpenconfigSystem_System_Messages_DebugEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Messages_DebugEntries) GetDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) *OpenconfigSystem_System_Messages_DebugEntries_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Messages_DebugEntries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Messages_DebugEntries) DeleteDebugService(Service E_OpenconfigMessages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied OpenconfigSystem_System_Messages_DebugEntries_DebugService struct to the
// list DebugService of OpenconfigSystem_System_Messages_DebugEntries. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Messages_DebugEntries_DebugService already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Messages_DebugEntries) AppendDebugService(v *OpenconfigSystem_System_Messages_DebugEntries_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_OpenconfigMessages_DEBUG_SERVICE]*OpenconfigSystem_System_Messages_DebugEntries_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_DebugEntries.
func (*OpenconfigSystem_System_Messages_DebugEntries) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_DebugEntries_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	Service   E_OpenconfigMessages_DEBUG_SERVICE                                 `path:"service" module:"openconfig-system"`
	ΛService  []ygot.Annotation                                                  `path:"@service" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) GetOrCreateConfig() *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) GetOrCreateState() *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Messages_DebugEntries_DebugService_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Messages_DebugEntries_DebugService. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) GetConfig() *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Messages_DebugEntries_DebugService. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) GetState() *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Messages_DebugEntries_DebugService struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_DebugEntries_DebugService.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config represents the /openconfig-system/system/messages/debug-entries/debug-service/config YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                              `path:"enabled" module:"openconfig-system"`
	ΛEnabled  []ygot.Annotation                  `path:"@enabled" ygotAnnotation:"true"`
	Service   E_OpenconfigMessages_DEBUG_SERVICE `path:"service" module:"openconfig-system"`
	ΛService  []ygot.Annotation                  `path:"@service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_DebugEntries_DebugService_State represents the /openconfig-system/system/messages/debug-entries/debug-service/state YANG schema element.
type OpenconfigSystem_System_Messages_DebugEntries_DebugService_State struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                              `path:"enabled" module:"openconfig-system"`
	ΛEnabled  []ygot.Annotation                  `path:"@enabled" ygotAnnotation:"true"`
	Service   E_OpenconfigMessages_DEBUG_SERVICE `path:"service" module:"openconfig-system"`
	ΛService  []ygot.Annotation                  `path:"@service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_DebugEntries_DebugService_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_DebugEntries_DebugService_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_DebugEntries_DebugService_State.
func (*OpenconfigSystem_System_Messages_DebugEntries_DebugService_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_State represents the /openconfig-system/system/messages/state YANG schema element.
type OpenconfigSystem_System_Messages_State struct {
	ΛMetadata []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	Message   *OpenconfigSystem_System_Messages_State_Message `path:"message" module:"openconfig-system"`
	ΛMessage  []ygot.Annotation                               `path:"@message" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity        `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                               `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State) IsYANGGoStruct() {}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Messages_State) GetOrCreateMessage() *OpenconfigSystem_System_Messages_State_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &OpenconfigSystem_System_Messages_State_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from OpenconfigSystem_System_Messages_State. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Messages_State) GetMessage() *OpenconfigSystem_System_Messages_State_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_State.
func (*OpenconfigSystem_System_Messages_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Messages_State_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type OpenconfigSystem_System_Messages_State_Message struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AppName   *string           `path:"app-name" module:"openconfig-system"`
	ΛAppName  []ygot.Annotation `path:"@app-name" ygotAnnotation:"true"`
	Msg       *string           `path:"msg" module:"openconfig-system"`
	ΛMsg      []ygot.Annotation `path:"@msg" ygotAnnotation:"true"`
	Msgid     *string           `path:"msgid" module:"openconfig-system"`
	ΛMsgid    []ygot.Annotation `path:"@msgid" ygotAnnotation:"true"`
	Priority  *uint8            `path:"priority" module:"openconfig-system"`
	ΛPriority []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
	Procid    *string           `path:"procid" module:"openconfig-system"`
	ΛProcid   []ygot.Annotation `path:"@procid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Messages_State_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Messages_State_Message) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Messages_State_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Messages_State_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Messages_State_Message) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Messages_State_Message.
func (*OpenconfigSystem_System_Messages_State_Message) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MountPoints represents the /openconfig-system/system/mount-points YANG schema element.
type OpenconfigSystem_System_MountPoints struct {
	ΛMetadata   []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	MountPoint  map[string]*OpenconfigSystem_System_MountPoints_MountPoint `path:"mount-point" module:"openconfig-system"`
	ΛMountPoint []ygot.Annotation                                          `path:"@mount-point" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints) IsYANGGoStruct() {}

// NewMountPoint creates a new entry in the MountPoint list of the
// OpenconfigSystem_System_MountPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_MountPoints) NewMountPoint(Name string) (*OpenconfigSystem_System_MountPoints_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*OpenconfigSystem_System_MountPoints_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &OpenconfigSystem_System_MountPoints_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the OpenconfigSystem_System_MountPoints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_MountPoints) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPointMap returns the list (map) from OpenconfigSystem_System_MountPoints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_MountPoints) GetOrCreateMountPointMap() map[string]*OpenconfigSystem_System_MountPoints_MountPoint {
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*OpenconfigSystem_System_MountPoints_MountPoint)
	}
	return t.MountPoint
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_MountPoints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_MountPoints) GetOrCreateMountPoint(Name string) *OpenconfigSystem_System_MountPoints_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of OpenconfigSystem_System_MountPoints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_MountPoints) GetMountPoint(Name string) *OpenconfigSystem_System_MountPoints_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_MountPoints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_MountPoints) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied OpenconfigSystem_System_MountPoints_MountPoint struct to the
// list MountPoint of OpenconfigSystem_System_MountPoints. If the key value(s) specified in
// the supplied OpenconfigSystem_System_MountPoints_MountPoint already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_MountPoints) AppendMountPoint(v *OpenconfigSystem_System_MountPoints_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*OpenconfigSystem_System_MountPoints_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MountPoints.
func (*OpenconfigSystem_System_MountPoints) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MountPoints_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type OpenconfigSystem_System_MountPoints_MountPoint struct {
	ΛMetadata []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Name      *string                                               `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                                     `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_MountPoints_MountPoint_State `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints_MountPoint) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) GetOrCreateState() *OpenconfigSystem_System_MountPoints_MountPoint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_MountPoints_MountPoint_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_MountPoints_MountPoint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) GetState() *OpenconfigSystem_System_MountPoints_MountPoint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_MountPoints_MountPoint struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MountPoints_MountPoint.
func (*OpenconfigSystem_System_MountPoints_MountPoint) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_MountPoints_MountPoint_State represents the /openconfig-system/system/mount-points/mount-point/state YANG schema element.
type OpenconfigSystem_System_MountPoints_MountPoint_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available         *uint64           `path:"available" module:"openconfig-system"`
	ΛAvailable        []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Name              *string           `path:"name" module:"openconfig-system"`
	ΛName             []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Size              *uint64           `path:"size" module:"openconfig-system"`
	ΛSize             []ygot.Annotation `path:"@size" ygotAnnotation:"true"`
	StorageComponent  *string           `path:"storage-component" module:"openconfig-system"`
	ΛStorageComponent []ygot.Annotation `path:"@storage-component" ygotAnnotation:"true"`
	Type              *string           `path:"type" module:"openconfig-system"`
	ΛType             []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Utilized          *uint64           `path:"utilized" module:"openconfig-system"`
	ΛUtilized         []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_MountPoints_MountPoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_MountPoints_MountPoint_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_MountPoints_MountPoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_MountPoints_MountPoint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_MountPoints_MountPoint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_MountPoints_MountPoint_State.
func (*OpenconfigSystem_System_MountPoints_MountPoint_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type OpenconfigSystem_System_Ntp struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                    `path:"@config" ygotAnnotation:"true"`
	NtpKeys   *OpenconfigSystem_System_Ntp_NtpKeys `path:"ntp-keys" module:"openconfig-system"`
	ΛNtpKeys  []ygot.Annotation                    `path:"@ntp-keys" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Ntp_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                    `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Config{}
	return t.Config
}

// GetOrCreateNtpKeys retrieves the value of the NtpKeys field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t.NtpKeys != nil {
		return t.NtpKeys
	}
	t.NtpKeys = &OpenconfigSystem_System_Ntp_NtpKeys{}
	return t.NtpKeys
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateServers() *OpenconfigSystem_System_Ntp_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Ntp_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateState() *OpenconfigSystem_System_Ntp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetConfig() *OpenconfigSystem_System_Ntp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNtpKeys returns the value of the NtpKeys struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field NtpKeys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t != nil && t.NtpKeys != nil {
		return t.NtpKeys
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetServers() *OpenconfigSystem_System_Ntp_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetState() *OpenconfigSystem_System_Ntp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp.
func (*OpenconfigSystem_System_Ntp) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_Config represents the /openconfig-system/system/ntp/config YANG schema element.
type OpenconfigSystem_System_Ntp_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableNtpAuth  *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled        *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled       []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_Config.
func (*OpenconfigSystem_System_Ntp_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_NtpKeys represents the /openconfig-system/system/ntp/ntp-keys YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	NtpKey    map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey `path:"ntp-key" module:"openconfig-system"`
	ΛNtpKey   []ygot.Annotation                                      `path:"@ntp-key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigSystem_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the OpenconfigSystem_System_Ntp_NtpKeys struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKeyMap returns the list (map) from OpenconfigSystem_System_Ntp_NtpKeys.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetOrCreateNtpKeyMap() map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}
	return t.NtpKey
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_NtpKeys. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetOrCreateNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of OpenconfigSystem_System_Ntp_NtpKeys. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_NtpKeys. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct to the
// list NtpKey of OpenconfigSystem_System_Ntp_NtpKeys. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) AppendNtpKey(v *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_NtpKeys.
func (*OpenconfigSystem_System_Ntp_NtpKeys) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	KeyId     *uint16                                            `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                                  `path:"@key-id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_NtpKeys_NtpKey.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_Servers represents the /openconfig-system/system/ntp/servers YANG schema element.
type OpenconfigSystem_System_Ntp_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Ntp_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_Servers) NewServer(Address string) (*OpenconfigSystem_System_Ntp_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Ntp_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServerMap returns the list (map) from OpenconfigSystem_System_Ntp_Servers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Ntp_Servers) GetOrCreateServerMap() map[string]*OpenconfigSystem_System_Ntp_Servers_Server {
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}
	return t.Server
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Ntp_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers) GetServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_Servers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Ntp_Servers) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied OpenconfigSystem_System_Ntp_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Ntp_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_Servers) AppendServer(v *OpenconfigSystem_System_Ntp_Servers_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_Servers.
func (*OpenconfigSystem_System_Ntp_Servers) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_Servers_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_Servers_Server.
func (*OpenconfigSystem_System_Ntp_Servers_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_Servers_Server_Config represents the /openconfig-system/system/ntp/servers/server/config YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_Config struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	KeyId            *uint16                                                             `path:"key-id" module:"openconfig-system"`
	ΛKeyId           []ygot.Annotation                                                   `path:"@key-id" ygotAnnotation:"true"`
	NetworkInstance  *string                                                             `path:"network-instance" module:"openconfig-system"`
	ΛNetworkInstance []ygot.Annotation                                                   `path:"@network-instance" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	SourceAddress    *string                                                             `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress   []ygot.Annotation                                                   `path:"@source-address" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_Servers_Server_Config.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_Servers_Server_State represents the /openconfig-system/system/ntp/servers/server/state YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_State struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	KeyId            *uint16                                                             `path:"key-id" module:"openconfig-system"`
	ΛKeyId           []ygot.Annotation                                                   `path:"@key-id" ygotAnnotation:"true"`
	NetworkInstance  *string                                                             `path:"network-instance" module:"openconfig-system"`
	ΛNetworkInstance []ygot.Annotation                                                   `path:"@network-instance" ygotAnnotation:"true"`
	Offset           *int64                                                              `path:"offset" module:"openconfig-system"`
	ΛOffset          []ygot.Annotation                                                   `path:"@offset" ygotAnnotation:"true"`
	PollInterval     *uint32                                                             `path:"poll-interval" module:"openconfig-system"`
	ΛPollInterval    []ygot.Annotation                                                   `path:"@poll-interval" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	RootDelay        *int64                                                              `path:"root-delay" module:"openconfig-system"`
	ΛRootDelay       []ygot.Annotation                                                   `path:"@root-delay" ygotAnnotation:"true"`
	RootDispersion   *int64                                                              `path:"root-dispersion" module:"openconfig-system"`
	ΛRootDispersion  []ygot.Annotation                                                   `path:"@root-dispersion" ygotAnnotation:"true"`
	SourceAddress    *string                                                             `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress   []ygot.Annotation                                                   `path:"@source-address" ygotAnnotation:"true"`
	Stratum          *uint8                                                              `path:"stratum" module:"openconfig-system"`
	ΛStratum         []ygot.Annotation                                                   `path:"@stratum" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_Servers_Server_State.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Ntp_State represents the /openconfig-system/system/ntp/state YANG schema element.
type OpenconfigSystem_System_Ntp_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthMismatch   *uint64           `path:"auth-mismatch" module:"openconfig-system"`
	ΛAuthMismatch  []ygot.Annotation `path:"@auth-mismatch" ygotAnnotation:"true"`
	EnableNtpAuth  *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled        *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled       []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Ntp_State.
func (*OpenconfigSystem_System_Ntp_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Processes represents the /openconfig-system/system/processes YANG schema element.
type OpenconfigSystem_System_Processes struct {
	ΛMetadata []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Process   map[uint64]*OpenconfigSystem_System_Processes_Process `path:"process" module:"openconfig-system"`
	ΛProcess  []ygot.Annotation                                     `path:"@process" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigSystem_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Processes) NewProcess(Pid uint64) (*OpenconfigSystem_System_Processes_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigSystem_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the OpenconfigSystem_System_Processes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Processes) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcessMap returns the list (map) from OpenconfigSystem_System_Processes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigSystem_System_Processes) GetOrCreateProcessMap() map[uint64]*OpenconfigSystem_System_Processes_Process {
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}
	return t.Process
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Processes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Processes) GetOrCreateProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of OpenconfigSystem_System_Processes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Processes) GetProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver OpenconfigSystem_System_Processes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigSystem_System_Processes) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied OpenconfigSystem_System_Processes_Process struct to the
// list Process of OpenconfigSystem_System_Processes. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Processes_Process already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Processes) AppendProcess(v *OpenconfigSystem_System_Processes_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Processes.
func (*OpenconfigSystem_System_Processes) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Processes_Process represents the /openconfig-system/system/processes/process YANG schema element.
type OpenconfigSystem_System_Processes_Process struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Pid       *uint64                                          `path:"pid" module:"openconfig-system"`
	ΛPid      []ygot.Annotation                                `path:"@pid" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Processes_Process_State `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Processes_Process) GetOrCreateState() *OpenconfigSystem_System_Processes_Process_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Processes_Process_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Processes_Process. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Processes_Process) GetState() *OpenconfigSystem_System_Processes_Process_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Processes_Process.
func (*OpenconfigSystem_System_Processes_Process) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_Processes_Process_State represents the /openconfig-system/system/processes/process/state YANG schema element.
type OpenconfigSystem_System_Processes_Process_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Args               []string          `path:"args" module:"openconfig-system"`
	ΛArgs              []ygot.Annotation `path:"@args" ygotAnnotation:"true"`
	CpuUsageSystem     *uint64           `path:"cpu-usage-system" module:"openconfig-system"`
	ΛCpuUsageSystem    []ygot.Annotation `path:"@cpu-usage-system" ygotAnnotation:"true"`
	CpuUsageUser       *uint64           `path:"cpu-usage-user" module:"openconfig-system"`
	ΛCpuUsageUser      []ygot.Annotation `path:"@cpu-usage-user" ygotAnnotation:"true"`
	CpuUtilization     *uint8            `path:"cpu-utilization" module:"openconfig-system"`
	ΛCpuUtilization    []ygot.Annotation `path:"@cpu-utilization" ygotAnnotation:"true"`
	MemoryUsage        *uint64           `path:"memory-usage" module:"openconfig-system"`
	ΛMemoryUsage       []ygot.Annotation `path:"@memory-usage" ygotAnnotation:"true"`
	MemoryUtilization  *uint8            `path:"memory-utilization" module:"openconfig-system"`
	ΛMemoryUtilization []ygot.Annotation `path:"@memory-utilization" ygotAnnotation:"true"`
	Name               *string           `path:"name" module:"openconfig-system"`
	ΛName              []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Pid                *uint64           `path:"pid" module:"openconfig-system"`
	ΛPid               []ygot.Annotation `path:"@pid" ygotAnnotation:"true"`
	StartTime          *uint64           `path:"start-time" module:"openconfig-system"`
	ΛStartTime         []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_Processes_Process_State.
func (*OpenconfigSystem_System_Processes_Process_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type OpenconfigSystem_System_SshServer struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_SshServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_SshServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateConfig() *OpenconfigSystem_System_SshServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_SshServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateState() *OpenconfigSystem_System_SshServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_SshServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetConfig() *OpenconfigSystem_System_SshServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetState() *OpenconfigSystem_System_SshServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_SshServer.
func (*OpenconfigSystem_System_SshServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_SshServer_Config represents the /openconfig-system/system/ssh-server/config YANG schema element.
type OpenconfigSystem_System_SshServer_Config struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_SshServer_Config.
func (*OpenconfigSystem_System_SshServer_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_SshServer_State represents the /openconfig-system/system/ssh-server/state YANG schema element.
type OpenconfigSystem_System_SshServer_State struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_SshServer_State.
func (*OpenconfigSystem_System_SshServer_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_State represents the /openconfig-system/system/state YANG schema element.
type OpenconfigSystem_System_State struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootTime                    *uint64           `path:"boot-time" module:"openconfig-system"`
	ΛBootTime                   []ygot.Annotation `path:"@boot-time" ygotAnnotation:"true"`
	CurrentDatetime             *string           `path:"current-datetime" module:"openconfig-system"`
	ΛCurrentDatetime            []ygot.Annotation `path:"@current-datetime" ygotAnnotation:"true"`
	DomainName                  *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName                 []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname                    *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname                   []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LastConfigurationTimestamp  *uint64           `path:"last-configuration-timestamp" module:"openconfig-system"`
	ΛLastConfigurationTimestamp []ygot.Annotation `path:"@last-configuration-timestamp" ygotAnnotation:"true"`
	LoginBanner                 *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner                []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner                  *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner                 []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
	SoftwareVersion             *string           `path:"software-version" module:"openconfig-system"`
	ΛSoftwareVersion            []ygot.Annotation `path:"@software-version" ygotAnnotation:"true"`
	UpTime                      *uint64           `path:"up-time" module:"openconfig-system"`
	ΛUpTime                     []ygot.Annotation `path:"@up-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_State.
func (*OpenconfigSystem_System_State) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type OpenconfigSystem_System_TelnetServer struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_TelnetServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_TelnetServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_TelnetServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateState() *OpenconfigSystem_System_TelnetServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_TelnetServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetState() *OpenconfigSystem_System_TelnetServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_TelnetServer.
func (*OpenconfigSystem_System_TelnetServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_TelnetServer_Config represents the /openconfig-system/system/telnet-server/config YANG schema element.
type OpenconfigSystem_System_TelnetServer_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_TelnetServer_Config.
func (*OpenconfigSystem_System_TelnetServer_Config) ΛBelongingModule() string {
	return "openconfig-system"
}

// OpenconfigSystem_System_TelnetServer_State represents the /openconfig-system/system/telnet-server/state YANG schema element.
type OpenconfigSystem_System_TelnetServer_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSystem_System_TelnetServer_State.
func (*OpenconfigSystem_System_TelnetServer_State) ΛBelongingModule() string {
	return "openconfig-system"
}
