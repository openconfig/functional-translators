/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/system/openconfig-system.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata         []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Acl               *OpenconfigAcl_Acl                          `path:"acl" module:"openconfig-acl"`
	ΛAcl              []ygot.Annotation                           `path:"@acl" ygotAnnotation:"true"`
	Bfd               *OpenconfigBfd_Bfd                          `path:"bfd" module:"openconfig-bfd"`
	ΛBfd              []ygot.Annotation                           `path:"@bfd" ygotAnnotation:"true"`
	Components        *OpenconfigPlatform_Components              `path:"components" module:"openconfig-platform"`
	ΛComponents       []ygot.Annotation                           `path:"@components" ygotAnnotation:"true"`
	DefinedSets       *OpenconfigDefinedSets_DefinedSets          `path:"defined-sets" module:"openconfig-defined-sets"`
	ΛDefinedSets      []ygot.Annotation                           `path:"@defined-sets" ygotAnnotation:"true"`
	Interfaces        *OpenconfigInterfaces_Interfaces            `path:"interfaces" module:"openconfig-interfaces"`
	ΛInterfaces       []ygot.Annotation                           `path:"@interfaces" ygotAnnotation:"true"`
	Keychains         *OpenconfigKeychain_Keychains               `path:"keychains" module:"openconfig-keychain"`
	ΛKeychains        []ygot.Annotation                           `path:"@keychains" ygotAnnotation:"true"`
	NetworkInstances  *OpenconfigNetworkInstance_NetworkInstances `path:"network-instances" module:"openconfig-network-instance"`
	ΛNetworkInstances []ygot.Annotation                           `path:"@network-instances" ygotAnnotation:"true"`
	RoutingPolicy     *OpenconfigRoutingPolicy_RoutingPolicy      `path:"routing-policy" module:"openconfig-routing-policy"`
	ΛRoutingPolicy    []ygot.Annotation                           `path:"@routing-policy" ygotAnnotation:"true"`
	System            *OpenconfigSystem_System                    `path:"system" module:"openconfig-system"`
	ΛSystem           []ygot.Annotation                           `path:"@system" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateAcl() *OpenconfigAcl_Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &OpenconfigAcl_Acl{}
	return t.Acl
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateBfd() *OpenconfigBfd_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &OpenconfigBfd_Bfd{}
	return t.Bfd
}

// GetOrCreateComponents retrieves the value of the Components field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateComponents() *OpenconfigPlatform_Components {
	if t.Components != nil {
		return t.Components
	}
	t.Components = &OpenconfigPlatform_Components{}
	return t.Components
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateDefinedSets() *OpenconfigDefinedSets_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &OpenconfigDefinedSets_DefinedSets{}
	return t.DefinedSets
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateInterfaces() *OpenconfigInterfaces_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigInterfaces_Interfaces{}
	return t.Interfaces
}

// GetOrCreateKeychains retrieves the value of the Keychains field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateKeychains() *OpenconfigKeychain_Keychains {
	if t.Keychains != nil {
		return t.Keychains
	}
	t.Keychains = &OpenconfigKeychain_Keychains{}
	return t.Keychains
}

// GetOrCreateNetworkInstances retrieves the value of the NetworkInstances field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateNetworkInstances() *OpenconfigNetworkInstance_NetworkInstances {
	if t.NetworkInstances != nil {
		return t.NetworkInstances
	}
	t.NetworkInstances = &OpenconfigNetworkInstance_NetworkInstances{}
	return t.NetworkInstances
}

// GetOrCreateRoutingPolicy retrieves the value of the RoutingPolicy field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateRoutingPolicy() *OpenconfigRoutingPolicy_RoutingPolicy {
	if t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	t.RoutingPolicy = &OpenconfigRoutingPolicy_RoutingPolicy{}
	return t.RoutingPolicy
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSystem() *OpenconfigSystem_System {
	if t.System != nil {
		return t.System
	}
	t.System = &OpenconfigSystem_System{}
	return t.System
}

// GetAcl returns the value of the Acl struct pointer
// from Device. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetAcl() *OpenconfigAcl_Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from Device. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetBfd() *OpenconfigBfd_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetComponents returns the value of the Components struct pointer
// from Device. If the receiver or the field Components is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetComponents() *OpenconfigPlatform_Components {
	if t != nil && t.Components != nil {
		return t.Components
	}
	return nil
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from Device. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetDefinedSets() *OpenconfigDefinedSets_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from Device. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetInterfaces() *OpenconfigInterfaces_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetKeychains returns the value of the Keychains struct pointer
// from Device. If the receiver or the field Keychains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetKeychains() *OpenconfigKeychain_Keychains {
	if t != nil && t.Keychains != nil {
		return t.Keychains
	}
	return nil
}

// GetNetworkInstances returns the value of the NetworkInstances struct pointer
// from Device. If the receiver or the field NetworkInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetNetworkInstances() *OpenconfigNetworkInstance_NetworkInstances {
	if t != nil && t.NetworkInstances != nil {
		return t.NetworkInstances
	}
	return nil
}

// GetRoutingPolicy returns the value of the RoutingPolicy struct pointer
// from Device. If the receiver or the field RoutingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetRoutingPolicy() *OpenconfigRoutingPolicy_RoutingPolicy {
	if t != nil && t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Device. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSystem() *OpenconfigSystem_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// OpenconfigAcl_Acl represents the /openconfig-acl/acl YANG schema element.
type OpenconfigAcl_Acl struct {
	ΛMetadata   []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	AclSets     *OpenconfigAcl_Acl_AclSets    `path:"acl-sets" module:"openconfig-acl"`
	ΛAclSets    []ygot.Annotation             `path:"@acl-sets" ygotAnnotation:"true"`
	Config      *OpenconfigAcl_Acl_Config     `path:"config" module:"openconfig-acl"`
	ΛConfig     []ygot.Annotation             `path:"@config" ygotAnnotation:"true"`
	Interfaces  *OpenconfigAcl_Acl_Interfaces `path:"interfaces" module:"openconfig-acl"`
	ΛInterfaces []ygot.Annotation             `path:"@interfaces" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_State      `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl) IsYANGGoStruct() {}

// GetOrCreateAclSets retrieves the value of the AclSets field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl) GetOrCreateAclSets() *OpenconfigAcl_Acl_AclSets {
	if t.AclSets != nil {
		return t.AclSets
	}
	t.AclSets = &OpenconfigAcl_Acl_AclSets{}
	return t.AclSets
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl) GetOrCreateConfig() *OpenconfigAcl_Acl_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_Config{}
	return t.Config
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl) GetOrCreateInterfaces() *OpenconfigAcl_Acl_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigAcl_Acl_Interfaces{}
	return t.Interfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl) GetOrCreateState() *OpenconfigAcl_Acl_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_State{}
	return t.State
}

// GetAclSets returns the value of the AclSets struct pointer
// from OpenconfigAcl_Acl. If the receiver or the field AclSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl) GetAclSets() *OpenconfigAcl_Acl_AclSets {
	if t != nil && t.AclSets != nil {
		return t.AclSets
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl) GetConfig() *OpenconfigAcl_Acl_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigAcl_Acl. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl) GetInterfaces() *OpenconfigAcl_Acl_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl) GetState() *OpenconfigAcl_Acl_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl.
func (*OpenconfigAcl_Acl) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets represents the /openconfig-acl/acl/acl-sets YANG schema element.
type OpenconfigAcl_Acl_AclSets struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	AclSet    map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet `path:"acl-set" module:"openconfig-acl"`
	ΛAclSet   []ygot.Annotation                                                          `path:"@acl-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_AclSets_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl/acl-sets.
type OpenconfigAcl_Acl_AclSets_AclSet_Key struct {
	Name string                   `path:"name"`
	Type E_OpenconfigAcl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigAcl_Acl_AclSets_AclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigAcl_Acl_AclSets_AclSet_Key key struct.
func (t OpenconfigAcl_Acl_AclSets_AclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
		"type": t.Type,
	}, nil
}

// NewAclSet creates a new entry in the AclSet list of the
// OpenconfigAcl_Acl_AclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_AclSets) NewAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_AclSets_AclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet)
	}

	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &OpenconfigAcl_Acl_AclSets_AclSet{
		Name: &Name,
		Type: Type,
	}

	return t.AclSet[key], nil
}

// RenameAclSet renames an entry in the list AclSet within
// the OpenconfigAcl_Acl_AclSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_AclSets) RenameAclSet(oldK, newK OpenconfigAcl_Acl_AclSets_AclSet_Key) error {
	if _, ok := t.AclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AclSet", newK)
	}

	e, ok := t.AclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclSet", oldK)
	}
	e.Name = &newK.Name
	e.Type = newK.Type

	t.AclSet[newK] = e
	delete(t.AclSet, oldK)
	return nil
}

// GetOrCreateAclSetMap returns the list (map) from OpenconfigAcl_Acl_AclSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_AclSets) GetOrCreateAclSetMap() map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet {
	if t.AclSet == nil {
		t.AclSet = make(map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet)
	}
	return t.AclSet
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_AclSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_AclSets) GetOrCreateAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_AclSets_AclSet {

	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(Name, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of OpenconfigAcl_Acl_AclSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_AclSets) GetAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_AclSets_AclSet {

	if t == nil {
		return nil
	}

	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if lm, ok := t.AclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclSet deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_AclSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_AclSets) DeleteAclSet(Name string, Type E_OpenconfigAcl_ACL_TYPE) {
	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	delete(t.AclSet, key)
}

// AppendAclSet appends the supplied OpenconfigAcl_Acl_AclSets_AclSet struct to the
// list AclSet of OpenconfigAcl_Acl_AclSets. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_AclSets_AclSet already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_AclSets) AppendAclSet(v *OpenconfigAcl_Acl_AclSets_AclSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := OpenconfigAcl_Acl_AclSets_AclSet_Key{
		Name: *v.Name,
		Type: v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[OpenconfigAcl_Acl_AclSets_AclSet_Key]*OpenconfigAcl_Acl_AclSets_AclSet)
	}

	if _, ok := t.AclSet[key]; ok {
		return fmt.Errorf("duplicate key for list AclSet %v", key)
	}

	t.AclSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets.
func (*OpenconfigAcl_Acl_AclSets) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet struct {
	ΛMetadata   []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	AclEntries  *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries `path:"acl-entries" module:"openconfig-acl"`
	ΛAclEntries []ygot.Annotation                            `path:"@acl-entries" ygotAnnotation:"true"`
	Config      *OpenconfigAcl_Acl_AclSets_AclSet_Config     `path:"config" module:"openconfig-acl"`
	ΛConfig     []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	Name        *string                                      `path:"name" module:"openconfig-acl"`
	ΛName       []ygot.Annotation                            `path:"@name" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_AclSets_AclSet_State      `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
	Type        E_OpenconfigAcl_ACL_TYPE                     `path:"type" module:"openconfig-acl"`
	ΛType       []ygot.Annotation                            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet) IsYANGGoStruct() {}

// GetOrCreateAclEntries retrieves the value of the AclEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetOrCreateAclEntries() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries {
	if t.AclEntries != nil {
		return t.AclEntries
	}
	t.AclEntries = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries{}
	return t.AclEntries
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_State{}
	return t.State
}

// GetAclEntries returns the value of the AclEntries struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet. If the receiver or the field AclEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetAclEntries() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries {
	if t != nil && t.AclEntries != nil {
		return t.AclEntries
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_AclSets_AclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet.
func (*OpenconfigAcl_Acl_AclSets_AclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries struct {
	ΛMetadata []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	AclEntry  map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry `path:"acl-entry" module:"openconfig-acl"`
	ΛAclEntry []ygot.Annotation                                                `path:"@acl-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) GetOrCreateAclEntryMap() map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_AclSets_AclSet_AclEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) GetOrCreateAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) GetAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_AclSets_AclSet_AclEntries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry struct to the
// list AclEntry of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) AppendAclEntry(v *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry struct {
	ΛMetadata       []ygot.Annotation                                                    `path:"@" ygotAnnotation:"true"`
	Actions         *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions        `path:"actions" module:"openconfig-acl"`
	ΛActions        []ygot.Annotation                                                    `path:"@actions" ygotAnnotation:"true"`
	Config          *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config         `path:"config" module:"openconfig-acl"`
	ΛConfig         []ygot.Annotation                                                    `path:"@config" ygotAnnotation:"true"`
	InputInterface  *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface `path:"input-interface" module:"openconfig-acl"`
	ΛInputInterface []ygot.Annotation                                                    `path:"@input-interface" ygotAnnotation:"true"`
	Ipv4            *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4           `path:"ipv4" module:"openconfig-acl"`
	ΛIpv4           []ygot.Annotation                                                    `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6            *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6           `path:"ipv6" module:"openconfig-acl"`
	ΛIpv6           []ygot.Annotation                                                    `path:"@ipv6" ygotAnnotation:"true"`
	L2              *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2             `path:"l2" module:"openconfig-acl"`
	ΛL2             []ygot.Annotation                                                    `path:"@l2" ygotAnnotation:"true"`
	Mpls            *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls           `path:"mpls" module:"openconfig-acl"`
	ΛMpls           []ygot.Annotation                                                    `path:"@mpls" ygotAnnotation:"true"`
	SequenceId      *uint32                                                              `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId     []ygot.Annotation                                                    `path:"@sequence-id" ygotAnnotation:"true"`
	State           *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State          `path:"state" module:"openconfig-acl"`
	ΛState          []ygot.Annotation                                                    `path:"@state" ygotAnnotation:"true"`
	Transport       *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport      `path:"transport" module:"openconfig-acl"`
	ΛTransport      []ygot.Annotation                                                    `path:"@transport" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateActions() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions{}
	return t.Actions
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config{}
	return t.Config
}

// GetOrCreateInputInterface retrieves the value of the InputInterface field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateInputInterface() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface {
	if t.InputInterface != nil {
		return t.InputInterface
	}
	t.InputInterface = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface{}
	return t.InputInterface
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateIpv4() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateIpv6() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateL2() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateMpls() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls{}
	return t.Mpls
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State{}
	return t.State
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetOrCreateTransport() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport{}
	return t.Transport
}

// GetActions returns the value of the Actions struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetActions() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInputInterface returns the value of the InputInterface struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field InputInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetInputInterface() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface {
	if t != nil && t.InputInterface != nil {
		return t.InputInterface
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetIpv4() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetIpv6() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetL2() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetMpls() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) GetTransport() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions struct {
	ΛMetadata []ygot.Annotation                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config struct {
	ΛMetadata         []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	ForwardingAction  E_OpenconfigAcl_FORWARDING_ACTION `path:"forwarding-action" module:"openconfig-acl"`
	ΛForwardingAction []ygot.Annotation                 `path:"@forwarding-action" ygotAnnotation:"true"`
	LogAction         E_OpenconfigAcl_LOG_ACTION        `path:"log-action" module:"openconfig-acl"`
	ΛLogAction        []ygot.Annotation                 `path:"@log-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State struct {
	ΛMetadata         []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	ForwardingAction  E_OpenconfigAcl_FORWARDING_ACTION `path:"forwarding-action" module:"openconfig-acl"`
	ΛForwardingAction []ygot.Annotation                 `path:"@forwarding-action" ygotAnnotation:"true"`
	LogAction         E_OpenconfigAcl_LOG_ACTION        `path:"log-action" module:"openconfig-acl"`
	ΛLogAction        []ygot.Annotation                 `path:"@log-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Actions_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-acl"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	SequenceId   *uint32           `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId  []ygot.Annotation `path:"@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface struct {
	ΛMetadata     []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config       `path:"config" module:"openconfig-acl"`
	ΛConfig       []ygot.Annotation                                                                 `path:"@config" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef `path:"interface-ref" module:"openconfig-acl"`
	ΛInterfaceRef []ygot.Annotation                                                                 `path:"@interface-ref" ygotAnnotation:"true"`
	State         *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State        `path:"state" module:"openconfig-acl"`
	ΛState        []ygot.Annotation                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config{}
	return t.Config
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetOrCreateInterfaceRef() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetInterfaceRef() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_InputInterface_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	Icmpv4    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 `path:"icmpv4" module:"openconfig-acl"`
	ΛIcmpv4   []ygot.Annotation                                                 `path:"@icmpv4" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config{}
	return t.Config
}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetOrCreateIcmpv4() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetIcmpv4() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config struct {
	ΛMetadata                    []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                                         `path:"destination-address" module:"openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                                                               `path:"@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                                         `path:"destination-address-prefix-set" module:"openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                               `path:"@destination-address-prefix-set" ygotAnnotation:"true"`
	Dscp                         *uint8                                                                          `path:"dscp" module:"openconfig-acl"`
	ΛDscp                        []ygot.Annotation                                                               `path:"@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                                         `path:"dscp-set" module:"openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                                                               `path:"@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                                          `path:"hop-limit" module:"openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                                                               `path:"@hop-limit" ygotAnnotation:"true"`
	Length                       *uint16                                                                         `path:"length" module:"openconfig-acl"`
	ΛLength                      []ygot.Annotation                                                               `path:"@length" ygotAnnotation:"true"`
	Protocol                     OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config_Protocol_Union `path:"protocol" module:"openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                                                               `path:"@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                                         `path:"source-address" module:"openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                                                               `path:"@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                                         `path:"source-address-prefix-set" module:"openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                               `path:"@source-address-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 struct {
	ΛMetadata []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Code      E_OpenconfigIcmpv4Types_CODE `path:"code" module:"openconfig-acl"`
	ΛCode     []ygot.Annotation            `path:"@code" ygotAnnotation:"true"`
	Type      E_OpenconfigIcmpv4Types_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Code      E_OpenconfigIcmpv4Types_CODE `path:"code" module:"openconfig-acl"`
	ΛCode     []ygot.Annotation            `path:"@code" ygotAnnotation:"true"`
	Type      E_OpenconfigIcmpv4Types_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_Icmpv4_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State struct {
	ΛMetadata                    []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                                        `path:"destination-address" module:"openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                                                              `path:"@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                                        `path:"destination-address-prefix-set" module:"openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                              `path:"@destination-address-prefix-set" ygotAnnotation:"true"`
	Dscp                         *uint8                                                                         `path:"dscp" module:"openconfig-acl"`
	ΛDscp                        []ygot.Annotation                                                              `path:"@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                                        `path:"dscp-set" module:"openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                                                              `path:"@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                                         `path:"hop-limit" module:"openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                                                              `path:"@hop-limit" ygotAnnotation:"true"`
	Length                       *uint16                                                                        `path:"length" module:"openconfig-acl"`
	ΛLength                      []ygot.Annotation                                                              `path:"@length" ygotAnnotation:"true"`
	Protocol                     OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State_Protocol_Union `path:"protocol" module:"openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                                                              `path:"@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                                        `path:"source-address" module:"openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                                                              `path:"@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                                        `path:"source-address-prefix-set" module:"openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                              `path:"@source-address-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv4_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	Icmpv6    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 `path:"icmpv6" module:"openconfig-acl"`
	ΛIcmpv6   []ygot.Annotation                                                 `path:"@icmpv6" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config{}
	return t.Config
}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetOrCreateIcmpv6() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetIcmpv6() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config struct {
	ΛMetadata                    []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                                         `path:"destination-address" module:"openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                                                               `path:"@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                                         `path:"destination-address-prefix-set" module:"openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                               `path:"@destination-address-prefix-set" ygotAnnotation:"true"`
	DestinationFlowLabel         *uint32                                                                         `path:"destination-flow-label" module:"openconfig-acl"`
	ΛDestinationFlowLabel        []ygot.Annotation                                                               `path:"@destination-flow-label" ygotAnnotation:"true"`
	Dscp                         *uint8                                                                          `path:"dscp" module:"openconfig-acl"`
	ΛDscp                        []ygot.Annotation                                                               `path:"@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                                         `path:"dscp-set" module:"openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                                                               `path:"@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                                          `path:"hop-limit" module:"openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                                                               `path:"@hop-limit" ygotAnnotation:"true"`
	Length                       *uint16                                                                         `path:"length" module:"openconfig-acl"`
	ΛLength                      []ygot.Annotation                                                               `path:"@length" ygotAnnotation:"true"`
	Protocol                     OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config_Protocol_Union `path:"protocol" module:"openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                                                               `path:"@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                                         `path:"source-address" module:"openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                                                               `path:"@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                                         `path:"source-address-prefix-set" module:"openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                               `path:"@source-address-prefix-set" ygotAnnotation:"true"`
	SourceFlowLabel              *uint32                                                                         `path:"source-flow-label" module:"openconfig-acl"`
	ΛSourceFlowLabel             []ygot.Annotation                                                               `path:"@source-flow-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 struct {
	ΛMetadata []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Code      E_OpenconfigIcmpv6Types_CODE `path:"code" module:"openconfig-acl"`
	ΛCode     []ygot.Annotation            `path:"@code" ygotAnnotation:"true"`
	Type      E_OpenconfigIcmpv6Types_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Code      E_OpenconfigIcmpv6Types_CODE `path:"code" module:"openconfig-acl"`
	ΛCode     []ygot.Annotation            `path:"@code" ygotAnnotation:"true"`
	Type      E_OpenconfigIcmpv6Types_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_Icmpv6_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State struct {
	ΛMetadata                    []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                                        `path:"destination-address" module:"openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                                                              `path:"@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                                        `path:"destination-address-prefix-set" module:"openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                              `path:"@destination-address-prefix-set" ygotAnnotation:"true"`
	DestinationFlowLabel         *uint32                                                                        `path:"destination-flow-label" module:"openconfig-acl"`
	ΛDestinationFlowLabel        []ygot.Annotation                                                              `path:"@destination-flow-label" ygotAnnotation:"true"`
	Dscp                         *uint8                                                                         `path:"dscp" module:"openconfig-acl"`
	ΛDscp                        []ygot.Annotation                                                              `path:"@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                                        `path:"dscp-set" module:"openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                                                              `path:"@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                                         `path:"hop-limit" module:"openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                                                              `path:"@hop-limit" ygotAnnotation:"true"`
	Length                       *uint16                                                                        `path:"length" module:"openconfig-acl"`
	ΛLength                      []ygot.Annotation                                                              `path:"@length" ygotAnnotation:"true"`
	Protocol                     OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State_Protocol_Union `path:"protocol" module:"openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                                                              `path:"@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                                        `path:"source-address" module:"openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                                                              `path:"@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                                        `path:"source-address-prefix-set" module:"openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                              `path:"@source-address-prefix-set" ygotAnnotation:"true"`
	SourceFlowLabel              *uint32                                                                        `path:"source-flow-label" module:"openconfig-acl"`
	ΛSourceFlowLabel             []ygot.Annotation                                                              `path:"@source-flow-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Ipv6_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 struct {
	ΛMetadata []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config struct {
	ΛMetadata           []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	DestinationMac      *string                                                                        `path:"destination-mac" module:"openconfig-acl"`
	ΛDestinationMac     []ygot.Annotation                                                              `path:"@destination-mac" ygotAnnotation:"true"`
	DestinationMacMask  *string                                                                        `path:"destination-mac-mask" module:"openconfig-acl"`
	ΛDestinationMacMask []ygot.Annotation                                                              `path:"@destination-mac-mask" ygotAnnotation:"true"`
	Ethertype           OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config_Ethertype_Union `path:"ethertype" module:"openconfig-acl"`
	ΛEthertype          []ygot.Annotation                                                              `path:"@ethertype" ygotAnnotation:"true"`
	SourceMac           *string                                                                        `path:"source-mac" module:"openconfig-acl"`
	ΛSourceMac          []ygot.Annotation                                                              `path:"@source-mac" ygotAnnotation:"true"`
	SourceMacMask       *string                                                                        `path:"source-mac-mask" module:"openconfig-acl"`
	ΛSourceMacMask      []ygot.Annotation                                                              `path:"@source-mac-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State struct {
	ΛMetadata           []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	DestinationMac      *string                                                                       `path:"destination-mac" module:"openconfig-acl"`
	ΛDestinationMac     []ygot.Annotation                                                             `path:"@destination-mac" ygotAnnotation:"true"`
	DestinationMacMask  *string                                                                       `path:"destination-mac-mask" module:"openconfig-acl"`
	ΛDestinationMacMask []ygot.Annotation                                                             `path:"@destination-mac-mask" ygotAnnotation:"true"`
	Ethertype           OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State_Ethertype_Union `path:"ethertype" module:"openconfig-acl"`
	ΛEthertype          []ygot.Annotation                                                             `path:"@ethertype" ygotAnnotation:"true"`
	SourceMac           *string                                                                       `path:"source-mac" module:"openconfig-acl"`
	ΛSourceMac          []ygot.Annotation                                                             `path:"@source-mac" ygotAnnotation:"true"`
	SourceMacMask       *string                                                                       `path:"source-mac-mask" module:"openconfig-acl"`
	ΛSourceMacMask      []ygot.Annotation                                                             `path:"@source-mac-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_L2_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config struct {
	ΛMetadata        []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	EndLabelValue    OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_EndLabelValue_Union   `path:"end-label-value" module:"openconfig-acl"`
	ΛEndLabelValue   []ygot.Annotation                                                                      `path:"@end-label-value" ygotAnnotation:"true"`
	StartLabelValue  OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config_StartLabelValue_Union `path:"start-label-value" module:"openconfig-acl"`
	ΛStartLabelValue []ygot.Annotation                                                                      `path:"@start-label-value" ygotAnnotation:"true"`
	TrafficClass     *uint8                                                                                 `path:"traffic-class" module:"openconfig-acl"`
	ΛTrafficClass    []ygot.Annotation                                                                      `path:"@traffic-class" ygotAnnotation:"true"`
	TtlValue         *uint8                                                                                 `path:"ttl-value" module:"openconfig-acl"`
	ΛTtlValue        []ygot.Annotation                                                                      `path:"@ttl-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State struct {
	ΛMetadata        []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	EndLabelValue    OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_EndLabelValue_Union   `path:"end-label-value" module:"openconfig-acl"`
	ΛEndLabelValue   []ygot.Annotation                                                                     `path:"@end-label-value" ygotAnnotation:"true"`
	StartLabelValue  OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State_StartLabelValue_Union `path:"start-label-value" module:"openconfig-acl"`
	ΛStartLabelValue []ygot.Annotation                                                                     `path:"@start-label-value" ygotAnnotation:"true"`
	TrafficClass     *uint8                                                                                `path:"traffic-class" module:"openconfig-acl"`
	ΛTrafficClass    []ygot.Annotation                                                                     `path:"@traffic-class" ygotAnnotation:"true"`
	TtlValue         *uint8                                                                                `path:"ttl-value" module:"openconfig-acl"`
	ΛTtlValue        []ygot.Annotation                                                                     `path:"@ttl-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Mpls_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description     *string           `path:"description" module:"openconfig-acl"`
	ΛDescription    []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"matched-octets" module:"openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation `path:"@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"matched-packets" module:"openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation `path:"@matched-packets" ygotAnnotation:"true"`
	SequenceId      *uint32           `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId     []ygot.Annotation `path:"@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport struct {
	ΛMetadata []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetOrCreateConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetOrCreateState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetConfig() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) GetState() *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config struct {
	ΛMetadata                []ygot.Annotation                                                                               `path:"@" ygotAnnotation:"true"`
	BuiltinDetail            E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_BuiltinDetail           `path:"builtin-detail" module:"openconfig-acl"`
	ΛBuiltinDetail           []ygot.Annotation                                                                               `path:"@builtin-detail" ygotAnnotation:"true"`
	DestinationPort          OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DestinationPort_Union     `path:"destination-port" module:"openconfig-acl"`
	ΛDestinationPort         []ygot.Annotation                                                                               `path:"@destination-port" ygotAnnotation:"true"`
	DestinationPortSet       *string                                                                                         `path:"destination-port-set" module:"openconfig-acl"`
	ΛDestinationPortSet      []ygot.Annotation                                                                               `path:"@destination-port-set" ygotAnnotation:"true"`
	DetailMode               E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DetailMode              `path:"detail-mode" module:"openconfig-acl"`
	ΛDetailMode              []ygot.Annotation                                                                               `path:"@detail-mode" ygotAnnotation:"true"`
	ExplicitDetailMatchMode  E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_ExplicitDetailMatchMode `path:"explicit-detail-match-mode" module:"openconfig-acl"`
	ΛExplicitDetailMatchMode []ygot.Annotation                                                                               `path:"@explicit-detail-match-mode" ygotAnnotation:"true"`
	ExplicitTcpFlags         []E_OpenconfigPacketMatchTypes_TCP_FLAGS                                                        `path:"explicit-tcp-flags" module:"openconfig-acl"`
	ΛExplicitTcpFlags        []ygot.Annotation                                                                               `path:"@explicit-tcp-flags" ygotAnnotation:"true"`
	SourcePort               OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_SourcePort_Union          `path:"source-port" module:"openconfig-acl"`
	ΛSourcePort              []ygot.Annotation                                                                               `path:"@source-port" ygotAnnotation:"true"`
	SourcePortSet            *string                                                                                         `path:"source-port-set" module:"openconfig-acl"`
	ΛSourcePortSet           []ygot.Annotation                                                                               `path:"@source-port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State struct {
	ΛMetadata                []ygot.Annotation                                                                               `path:"@" ygotAnnotation:"true"`
	BuiltinDetail            E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_BuiltinDetail           `path:"builtin-detail" module:"openconfig-acl"`
	ΛBuiltinDetail           []ygot.Annotation                                                                               `path:"@builtin-detail" ygotAnnotation:"true"`
	DestinationPort          OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_DestinationPort_Union      `path:"destination-port" module:"openconfig-acl"`
	ΛDestinationPort         []ygot.Annotation                                                                               `path:"@destination-port" ygotAnnotation:"true"`
	DestinationPortSet       *string                                                                                         `path:"destination-port-set" module:"openconfig-acl"`
	ΛDestinationPortSet      []ygot.Annotation                                                                               `path:"@destination-port-set" ygotAnnotation:"true"`
	DetailMode               E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_DetailMode              `path:"detail-mode" module:"openconfig-acl"`
	ΛDetailMode              []ygot.Annotation                                                                               `path:"@detail-mode" ygotAnnotation:"true"`
	ExplicitDetailMatchMode  E_OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_Config_ExplicitDetailMatchMode `path:"explicit-detail-match-mode" module:"openconfig-acl"`
	ΛExplicitDetailMatchMode []ygot.Annotation                                                                               `path:"@explicit-detail-match-mode" ygotAnnotation:"true"`
	ExplicitTcpFlags         []E_OpenconfigPacketMatchTypes_TCP_FLAGS                                                        `path:"explicit-tcp-flags" module:"openconfig-acl"`
	ΛExplicitTcpFlags        []ygot.Annotation                                                                               `path:"@explicit-tcp-flags" ygotAnnotation:"true"`
	SourcePort               OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State_SourcePort_Union           `path:"source-port" module:"openconfig-acl"`
	ΛSourcePort              []ygot.Annotation                                                                               `path:"@source-port" ygotAnnotation:"true"`
	SourcePortSet            *string                                                                                         `path:"source-port-set" module:"openconfig-acl"`
	ΛSourcePortSet           []ygot.Annotation                                                                               `path:"@source-port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_AclEntries_AclEntry_Transport_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_Config represents the /openconfig-acl/acl/acl-sets/acl-set/config YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_Config struct {
	ΛMetadata    []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	Description  *string                  `path:"description" module:"openconfig-acl"`
	ΛDescription []ygot.Annotation        `path:"@description" ygotAnnotation:"true"`
	Name         *string                  `path:"name" module:"openconfig-acl"`
	ΛName        []ygot.Annotation        `path:"@name" ygotAnnotation:"true"`
	Type         E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType        []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_Config.
func (*OpenconfigAcl_Acl_AclSets_AclSet_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_AclSets_AclSet_State represents the /openconfig-acl/acl/acl-sets/acl-set/state YANG schema element.
type OpenconfigAcl_Acl_AclSets_AclSet_State struct {
	ΛMetadata    []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	Description  *string                  `path:"description" module:"openconfig-acl"`
	ΛDescription []ygot.Annotation        `path:"@description" ygotAnnotation:"true"`
	Name         *string                  `path:"name" module:"openconfig-acl"`
	ΛName        []ygot.Annotation        `path:"@name" ygotAnnotation:"true"`
	Type         E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType        []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_AclSets_AclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_AclSets_AclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_AclSets_AclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_AclSets_AclSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_AclSets_AclSet_State.
func (*OpenconfigAcl_Acl_AclSets_AclSet_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Config represents the /openconfig-acl/acl/config YANG schema element.
type OpenconfigAcl_Acl_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Config.
func (*OpenconfigAcl_Acl_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces represents the /openconfig-acl/acl/interfaces YANG schema element.
type OpenconfigAcl_Acl_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigAcl_Acl_Interfaces_Interface `path:"interface" module:"openconfig-acl"`
	ΛInterface []ygot.Annotation                                  `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigAcl_Acl_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces) NewInterface(Id string) (*OpenconfigAcl_Acl_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigAcl_Acl_Interfaces_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigAcl_Acl_Interfaces_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigAcl_Acl_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigAcl_Acl_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigAcl_Acl_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigAcl_Acl_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_Interfaces) GetOrCreateInterface(Id string) *OpenconfigAcl_Acl_Interfaces_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigAcl_Acl_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces) GetInterface(Id string) *OpenconfigAcl_Acl_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_Interfaces) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigAcl_Acl_Interfaces_Interface struct to the
// list Interface of OpenconfigAcl_Acl_Interfaces. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_Interfaces) AppendInterface(v *OpenconfigAcl_Acl_Interfaces_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigAcl_Acl_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces.
func (*OpenconfigAcl_Acl_Interfaces) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface struct {
	ΛMetadata       []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Config          *OpenconfigAcl_Acl_Interfaces_Interface_Config         `path:"config" module:"openconfig-acl"`
	ΛConfig         []ygot.Annotation                                      `path:"@config" ygotAnnotation:"true"`
	EgressAclSets   *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets  `path:"egress-acl-sets" module:"openconfig-acl"`
	ΛEgressAclSets  []ygot.Annotation                                      `path:"@egress-acl-sets" ygotAnnotation:"true"`
	Id              *string                                                `path:"id" module:"openconfig-acl"`
	ΛId             []ygot.Annotation                                      `path:"@id" ygotAnnotation:"true"`
	IngressAclSets  *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets `path:"ingress-acl-sets" module:"openconfig-acl"`
	ΛIngressAclSets []ygot.Annotation                                      `path:"@ingress-acl-sets" ygotAnnotation:"true"`
	InterfaceRef    *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef   `path:"interface-ref" module:"openconfig-acl"`
	ΛInterfaceRef   []ygot.Annotation                                      `path:"@interface-ref" ygotAnnotation:"true"`
	State           *OpenconfigAcl_Acl_Interfaces_Interface_State          `path:"state" module:"openconfig-acl"`
	ΛState          []ygot.Annotation                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetOrCreateConfig() *OpenconfigAcl_Acl_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEgressAclSets retrieves the value of the EgressAclSets field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetOrCreateEgressAclSets() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets {
	if t.EgressAclSets != nil {
		return t.EgressAclSets
	}
	t.EgressAclSets = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets{}
	return t.EgressAclSets
}

// GetOrCreateIngressAclSets retrieves the value of the IngressAclSets field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetOrCreateIngressAclSets() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets {
	if t.IngressAclSets != nil {
		return t.IngressAclSets
	}
	t.IngressAclSets = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets{}
	return t.IngressAclSets
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetOrCreateInterfaceRef() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetConfig() *OpenconfigAcl_Acl_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEgressAclSets returns the value of the EgressAclSets struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface. If the receiver or the field EgressAclSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetEgressAclSets() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets {
	if t != nil && t.EgressAclSets != nil {
		return t.EgressAclSets
	}
	return nil
}

// GetIngressAclSets returns the value of the IngressAclSets struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface. If the receiver or the field IngressAclSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetIngressAclSets() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets {
	if t != nil && t.IngressAclSets != nil {
		return t.IngressAclSets
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetInterfaceRef() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface.
func (*OpenconfigAcl_Acl_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_Config represents the /openconfig-acl/acl/interfaces/interface/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id        *string           `path:"id" module:"openconfig-acl"`
	ΛId       []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_Config.
func (*OpenconfigAcl_Acl_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets struct {
	ΛMetadata     []ygot.Annotation                                                                                                                            `path:"@" ygotAnnotation:"true"`
	EgressAclSet  map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet `path:"egress-acl-set" module:"openconfig-acl"`
	ΛEgressAclSet []ygot.Annotation                                                                                                                            `path:"@egress-acl-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface/egress-acl-sets.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key struct {
	SetName string                   `path:"set-name"`
	Type    E_OpenconfigAcl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key key struct.
func (t OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewEgressAclSet creates a new entry in the EgressAclSet list of the
// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) NewEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet)
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressAclSet", key)
	}

	t.EgressAclSet[key] = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.EgressAclSet[key], nil
}

// RenameEgressAclSet renames an entry in the list EgressAclSet within
// the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) RenameEgressAclSet(oldK, newK OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key) error {
	if _, ok := t.EgressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressAclSet", newK)
	}

	e, ok := t.EgressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.EgressAclSet[newK] = e
	delete(t.EgressAclSet, oldK)
	return nil
}

// GetOrCreateEgressAclSetMap returns the list (map) from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) GetOrCreateEgressAclSetMap() map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet {
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet)
	}
	return t.EgressAclSet
}

// GetOrCreateEgressAclSet retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) GetOrCreateEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet {

	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.EgressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetEgressAclSet retrieves the value with the specified key from
// the EgressAclSet map field of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) GetEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet {

	if t == nil {
		return nil
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.EgressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressAclSet deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) DeleteEgressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) {
	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.EgressAclSet, key)
}

// AppendEgressAclSet appends the supplied OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct to the
// list EgressAclSet of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) AppendEgressAclSet(v *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet)
	}

	if _, ok := t.EgressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list EgressAclSet %v", key)
	}

	t.EgressAclSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct {
	ΛMetadata   []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	AclEntries  *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries `path:"acl-entries" module:"openconfig-acl"`
	ΛAclEntries []ygot.Annotation                                                             `path:"@acl-entries" ygotAnnotation:"true"`
	Config      *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config     `path:"config" module:"openconfig-acl"`
	ΛConfig     []ygot.Annotation                                                             `path:"@config" ygotAnnotation:"true"`
	SetName     *string                                                                       `path:"set-name" module:"openconfig-acl"`
	ΛSetName    []ygot.Annotation                                                             `path:"@set-name" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State      `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation                                                             `path:"@state" ygotAnnotation:"true"`
	Type        E_OpenconfigAcl_ACL_TYPE                                                      `path:"type" module:"openconfig-acl"`
	ΛType       []ygot.Annotation                                                             `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) IsYANGGoStruct() {}

// GetOrCreateAclEntries retrieves the value of the AclEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetOrCreateAclEntries() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries {
	if t.AclEntries != nil {
		return t.AclEntries
	}
	t.AclEntries = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries{}
	return t.AclEntries
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetOrCreateConfig() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State{}
	return t.State
}

// GetAclEntries returns the value of the AclEntries struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet. If the receiver or the field AclEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetAclEntries() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries {
	if t != nil && t.AclEntries != nil {
		return t.AclEntries
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetConfig() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct {
	ΛMetadata []ygot.Annotation                                                                                 `path:"@" ygotAnnotation:"true"`
	AclEntry  map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry `path:"acl-entry" module:"openconfig-acl"`
	ΛAclEntry []ygot.Annotation                                                                                 `path:"@acl-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) IsYANGGoStruct() {
}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) GetOrCreateAclEntryMap() map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) GetOrCreateAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) GetAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct to the
// list AclEntry of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) AppendAclEntry(v *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct {
	ΛMetadata   []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	SequenceId  *uint32                                                                                      `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId []ygot.Annotation                                                                            `path:"@sequence-id" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"matched-octets" module:"openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation `path:"@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"matched-packets" module:"openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation `path:"@matched-packets" ygotAnnotation:"true"`
	SequenceId      *uint32           `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId     []ygot.Annotation `path:"@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_AclEntries_AclEntry_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config struct {
	ΛMetadata []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	SetName   *string                  `path:"set-name" module:"openconfig-acl"`
	ΛSetName  []ygot.Annotation        `path:"@set-name" ygotAnnotation:"true"`
	Type      E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State struct {
	ΛMetadata []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	SetName   *string                  `path:"set-name" module:"openconfig-acl"`
	ΛSetName  []ygot.Annotation        `path:"@set-name" ygotAnnotation:"true"`
	Type      E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_EgressAclSets_EgressAclSet_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                `path:"@" ygotAnnotation:"true"`
	IngressAclSet  map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet `path:"ingress-acl-set" module:"openconfig-acl"`
	ΛIngressAclSet []ygot.Annotation                                                                                                                                `path:"@ingress-acl-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) IsYANGGoStruct() {}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface/ingress-acl-sets.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key struct {
	SetName string                   `path:"set-name"`
	Type    E_OpenconfigAcl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key key struct.
func (t OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewIngressAclSet creates a new entry in the IngressAclSet list of the
// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) NewIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet)
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressAclSet", key)
	}

	t.IngressAclSet[key] = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.IngressAclSet[key], nil
}

// RenameIngressAclSet renames an entry in the list IngressAclSet within
// the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) RenameIngressAclSet(oldK, newK OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key) error {
	if _, ok := t.IngressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in IngressAclSet", newK)
	}

	e, ok := t.IngressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IngressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.IngressAclSet[newK] = e
	delete(t.IngressAclSet, oldK)
	return nil
}

// GetOrCreateIngressAclSetMap returns the list (map) from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) GetOrCreateIngressAclSetMap() map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet {
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet)
	}
	return t.IngressAclSet
}

// GetOrCreateIngressAclSet retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) GetOrCreateIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet {

	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.IngressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetIngressAclSet retrieves the value with the specified key from
// the IngressAclSet map field of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) GetIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet {

	if t == nil {
		return nil
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.IngressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngressAclSet deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) DeleteIngressAclSet(SetName string, Type E_OpenconfigAcl_ACL_TYPE) {
	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.IngressAclSet, key)
}

// AppendIngressAclSet appends the supplied OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct to the
// list IngressAclSet of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) AppendIngressAclSet(v *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Key]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet)
	}

	if _, ok := t.IngressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list IngressAclSet %v", key)
	}

	t.IngressAclSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct {
	ΛMetadata   []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AclEntries  *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries `path:"acl-entries" module:"openconfig-acl"`
	ΛAclEntries []ygot.Annotation                                                               `path:"@acl-entries" ygotAnnotation:"true"`
	Config      *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config     `path:"config" module:"openconfig-acl"`
	ΛConfig     []ygot.Annotation                                                               `path:"@config" ygotAnnotation:"true"`
	SetName     *string                                                                         `path:"set-name" module:"openconfig-acl"`
	ΛSetName    []ygot.Annotation                                                               `path:"@set-name" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State      `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
	Type        E_OpenconfigAcl_ACL_TYPE                                                        `path:"type" module:"openconfig-acl"`
	ΛType       []ygot.Annotation                                                               `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) IsYANGGoStruct() {}

// GetOrCreateAclEntries retrieves the value of the AclEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetOrCreateAclEntries() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries {
	if t.AclEntries != nil {
		return t.AclEntries
	}
	t.AclEntries = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries{}
	return t.AclEntries
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetOrCreateConfig() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State{}
	return t.State
}

// GetAclEntries returns the value of the AclEntries struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet. If the receiver or the field AclEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetAclEntries() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries {
	if t != nil && t.AclEntries != nil {
		return t.AclEntries
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetConfig() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct {
	ΛMetadata []ygot.Annotation                                                                                   `path:"@" ygotAnnotation:"true"`
	AclEntry  map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry `path:"acl-entry" module:"openconfig-acl"`
	ΛAclEntry []ygot.Annotation                                                                                   `path:"@acl-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) IsYANGGoStruct() {
}

// NewAclEntry creates a new entry in the AclEntry list of the
// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) NewAclEntry(SequenceId uint32) (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntryMap returns the list (map) from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) GetOrCreateAclEntryMap() map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry {
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry)
	}
	return t.AclEntry
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) GetOrCreateAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) GetAclEntry(SequenceId uint32) *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct to the
// list AclEntry of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries. If the key value(s) specified in
// the supplied OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry already exist in the list, an error is
// returned.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) AppendAclEntry(v *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct {
	ΛMetadata   []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	SequenceId  *uint32                                                                                        `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId []ygot.Annotation                                                                              `path:"@sequence-id" ygotAnnotation:"true"`
	State       *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State `path:"state" module:"openconfig-acl"`
	ΛState      []ygot.Annotation                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry struct, which is a YANG list entry.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"matched-octets" module:"openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation `path:"@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"matched-packets" module:"openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation `path:"@matched-packets" ygotAnnotation:"true"`
	SequenceId      *uint32           `path:"sequence-id" module:"openconfig-acl"`
	ΛSequenceId     []ygot.Annotation `path:"@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_AclEntries_AclEntry_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config struct {
	ΛMetadata []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	SetName   *string                  `path:"set-name" module:"openconfig-acl"`
	ΛSetName  []ygot.Annotation        `path:"@set-name" ygotAnnotation:"true"`
	Type      E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State struct {
	ΛMetadata []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	SetName   *string                  `path:"set-name" module:"openconfig-acl"`
	ΛSetName  []ygot.Annotation        `path:"@set-name" ygotAnnotation:"true"`
	Type      E_OpenconfigAcl_ACL_TYPE `path:"type" module:"openconfig-acl"`
	ΛType     []ygot.Annotation        `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_IngressAclSets_IngressAclSet_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config `path:"config" module:"openconfig-acl"`
	ΛConfig   []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State  `path:"state" module:"openconfig-acl"`
	ΛState    []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) GetOrCreateState() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) GetConfig() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) GetState() *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-acl/acl/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_Interfaces_Interface_State represents the /openconfig-acl/acl/interfaces/interface/state YANG schema element.
type OpenconfigAcl_Acl_Interfaces_Interface_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id        *string           `path:"id" module:"openconfig-acl"`
	ΛId       []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_Interfaces_Interface_State.
func (*OpenconfigAcl_Acl_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigAcl_Acl_State represents the /openconfig-acl/acl/state YANG schema element.
type OpenconfigAcl_Acl_State struct {
	ΛMetadata          []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	CounterCapability  E_OpenconfigAcl_ACL_COUNTER_CAPABILITY `path:"counter-capability" module:"openconfig-acl"`
	ΛCounterCapability []ygot.Annotation                      `path:"@counter-capability" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigAcl_Acl_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAcl_Acl_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAcl_Acl_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigAcl_Acl_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAcl_Acl_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigAcl_Acl_State.
func (*OpenconfigAcl_Acl_State) ΛBelongingModule() string {
	return "openconfig-acl"
}

// OpenconfigBfd_Bfd represents the /openconfig-bfd/bfd YANG schema element.
type OpenconfigBfd_Bfd struct {
	ΛMetadata   []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	Interfaces  *OpenconfigBfd_Bfd_Interfaces `path:"interfaces" module:"openconfig-bfd"`
	ΛInterfaces []ygot.Annotation             `path:"@interfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd) IsYANGGoStruct() {}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd) GetOrCreateInterfaces() *OpenconfigBfd_Bfd_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigBfd_Bfd_Interfaces{}
	return t.Interfaces
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigBfd_Bfd. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd) GetInterfaces() *OpenconfigBfd_Bfd_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd.
func (*OpenconfigBfd_Bfd) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces represents the /openconfig-bfd/bfd/interfaces YANG schema element.
type OpenconfigBfd_Bfd_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigBfd_Bfd_Interfaces_Interface `path:"interface" module:"openconfig-bfd"`
	ΛInterface []ygot.Annotation                                  `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigBfd_Bfd_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigBfd_Bfd_Interfaces) NewInterface(Id string) (*OpenconfigBfd_Bfd_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigBfd_Bfd_Interfaces_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigBfd_Bfd_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigBfd_Bfd_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigBfd_Bfd_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigBfd_Bfd_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigBfd_Bfd_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigBfd_Bfd_Interfaces) GetOrCreateInterface(Id string) *OpenconfigBfd_Bfd_Interfaces_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigBfd_Bfd_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces) GetInterface(Id string) *OpenconfigBfd_Bfd_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigBfd_Bfd_Interfaces) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigBfd_Bfd_Interfaces_Interface struct to the
// list Interface of OpenconfigBfd_Bfd_Interfaces. If the key value(s) specified in
// the supplied OpenconfigBfd_Bfd_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigBfd_Bfd_Interfaces) AppendInterface(v *OpenconfigBfd_Bfd_Interfaces_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces.
func (*OpenconfigBfd_Bfd_Interfaces) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface represents the /openconfig-bfd/bfd/interfaces/interface YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface struct {
	ΛMetadata         []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigBfd_Bfd_Interfaces_Interface_Config           `path:"config" module:"openconfig-bfd"`
	ΛConfig           []ygot.Annotation                                        `path:"@config" ygotAnnotation:"true"`
	Id                *string                                                  `path:"id" module:"openconfig-bfd"`
	ΛId               []ygot.Annotation                                        `path:"@id" ygotAnnotation:"true"`
	InterfaceRef      *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef     `path:"interface-ref" module:"openconfig-bfd"`
	ΛInterfaceRef     []ygot.Annotation                                        `path:"@interface-ref" ygotAnnotation:"true"`
	MicroBfdSessions  *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions `path:"micro-bfd-sessions" module:"openconfig-bfd"`
	ΛMicroBfdSessions []ygot.Annotation                                        `path:"@micro-bfd-sessions" ygotAnnotation:"true"`
	Peers             *OpenconfigBfd_Bfd_Interfaces_Interface_Peers            `path:"peers" module:"openconfig-bfd"`
	ΛPeers            []ygot.Annotation                                        `path:"@peers" ygotAnnotation:"true"`
	State             *OpenconfigBfd_Bfd_Interfaces_Interface_State            `path:"state" module:"openconfig-bfd"`
	ΛState            []ygot.Annotation                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetOrCreateConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigBfd_Bfd_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetOrCreateInterfaceRef() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateMicroBfdSessions retrieves the value of the MicroBfdSessions field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetOrCreateMicroBfdSessions() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions {
	if t.MicroBfdSessions != nil {
		return t.MicroBfdSessions
	}
	t.MicroBfdSessions = &OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions{}
	return t.MicroBfdSessions
}

// GetOrCreatePeers retrieves the value of the Peers field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetOrCreatePeers() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers {
	if t.Peers != nil {
		return t.Peers
	}
	t.Peers = &OpenconfigBfd_Bfd_Interfaces_Interface_Peers{}
	return t.Peers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetOrCreateState() *OpenconfigBfd_Bfd_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigBfd_Bfd_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetInterfaceRef() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetMicroBfdSessions returns the value of the MicroBfdSessions struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface. If the receiver or the field MicroBfdSessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetMicroBfdSessions() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions {
	if t != nil && t.MicroBfdSessions != nil {
		return t.MicroBfdSessions
	}
	return nil
}

// GetPeers returns the value of the Peers struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface. If the receiver or the field Peers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetPeers() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers {
	if t != nil && t.Peers != nil {
		return t.Peers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) GetState() *OpenconfigBfd_Bfd_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigBfd_Bfd_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface.
func (*OpenconfigBfd_Bfd_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Config represents the /openconfig-bfd/bfd/interfaces/interface/config YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-bfd"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-bfd"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	EnablePerMemberLink       *bool             `path:"enable-per-member-link" module:"openconfig-bfd"`
	ΛEnablePerMemberLink      []ygot.Annotation `path:"@enable-per-member-link" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-bfd"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Id                        *string           `path:"id" module:"openconfig-bfd"`
	ΛId                       []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
	LocalAddress              *string           `path:"local-address" module:"openconfig-bfd"`
	ΛLocalAddress             []ygot.Annotation `path:"@local-address" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-bfd"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Config.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef represents the /openconfig-bfd/bfd/interfaces/interface/interface-ref YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config `path:"config" module:"openconfig-bfd"`
	ΛConfig   []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State  `path:"state" module:"openconfig-bfd"`
	ΛState    []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) GetOrCreateState() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) GetConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) GetState() *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-bfd/bfd/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-bfd"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-bfd"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State represents the /openconfig-bfd/bfd/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-bfd"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-bfd"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions struct {
	ΛMetadata        []ygot.Annotation                                                                   `path:"@" ygotAnnotation:"true"`
	MicroBfdSession  map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession `path:"micro-bfd-session" module:"openconfig-bfd"`
	ΛMicroBfdSession []ygot.Annotation                                                                   `path:"@micro-bfd-session" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) IsYANGGoStruct() {}

// NewMicroBfdSession creates a new entry in the MicroBfdSession list of the
// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) NewMicroBfdSession(MemberInterface string) (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession)
	}

	key := MemberInterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MicroBfdSession[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MicroBfdSession", key)
	}

	t.MicroBfdSession[key] = &OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession{
		MemberInterface: &MemberInterface,
	}

	return t.MicroBfdSession[key], nil
}

// RenameMicroBfdSession renames an entry in the list MicroBfdSession within
// the OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) RenameMicroBfdSession(oldK, newK string) error {
	if _, ok := t.MicroBfdSession[newK]; ok {
		return fmt.Errorf("key %v already exists in MicroBfdSession", newK)
	}

	e, ok := t.MicroBfdSession[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MicroBfdSession", oldK)
	}
	e.MemberInterface = &newK

	t.MicroBfdSession[newK] = e
	delete(t.MicroBfdSession, oldK)
	return nil
}

// GetOrCreateMicroBfdSessionMap returns the list (map) from OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions.
//
// It initializes the field if not already initialized.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) GetOrCreateMicroBfdSessionMap() map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession {
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession)
	}
	return t.MicroBfdSession
}

// GetOrCreateMicroBfdSession retrieves the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) GetOrCreateMicroBfdSession(MemberInterface string) *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession {

	key := MemberInterface

	if v, ok := t.MicroBfdSession[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMicroBfdSession(MemberInterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMicroBfdSession got unexpected error: %v", err))
	}
	return v
}

// GetMicroBfdSession retrieves the value with the specified key from
// the MicroBfdSession map field of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) GetMicroBfdSession(MemberInterface string) *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession {

	if t == nil {
		return nil
	}

	key := MemberInterface

	if lm, ok := t.MicroBfdSession[key]; ok {
		return lm
	}
	return nil
}

// DeleteMicroBfdSession deletes the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions. If there is no such element, the function
// is a no-op.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) DeleteMicroBfdSession(MemberInterface string) {
	key := MemberInterface

	delete(t.MicroBfdSession, key)
}

// AppendMicroBfdSession appends the supplied OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession struct to the
// list MicroBfdSession of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions. If the key value(s) specified in
// the supplied OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession already exist in the list, an error is
// returned.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) AppendMicroBfdSession(v *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) error {
	if v.MemberInterface == nil {
		return fmt.Errorf("invalid nil key received for MemberInterface")
	}

	key := *v.MemberInterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession)
	}

	if _, ok := t.MicroBfdSession[key]; ok {
		return fmt.Errorf("duplicate key for list MicroBfdSession %v", key)
	}

	t.MicroBfdSession[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession struct {
	ΛMetadata        []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Config           *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config `path:"config" module:"openconfig-bfd"`
	ΛConfig          []ygot.Annotation                                                               `path:"@config" ygotAnnotation:"true"`
	MemberInterface  *string                                                                         `path:"member-interface" module:"openconfig-bfd"`
	ΛMemberInterface []ygot.Annotation                                                               `path:"@member-interface" ygotAnnotation:"true"`
	State            *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State  `path:"state" module:"openconfig-bfd"`
	ΛState           []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetOrCreateConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetOrCreateState() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetConfig() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) GetState() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession struct, which is a YANG list entry.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MemberInterface == nil {
		return nil, fmt.Errorf("nil value for key MemberInterface")
	}

	return map[string]interface{}{
		"member-interface": *t.MemberInterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/config YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LocalAddress     *string           `path:"local-address" module:"openconfig-bfd"`
	ΛLocalAddress    []ygot.Annotation `path:"@local-address" ygotAnnotation:"true"`
	MemberInterface  *string           `path:"member-interface" module:"openconfig-bfd"`
	ΛMemberInterface []ygot.Annotation `path:"@member-interface" ygotAnnotation:"true"`
	RemoteAddress    *string           `path:"remote-address" module:"openconfig-bfd"`
	ΛRemoteAddress   []ygot.Annotation `path:"@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_Config) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State struct {
	ΛMetadata                      []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Async                          *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async `path:"async" module:"openconfig-bfd"`
	ΛAsync                         []ygot.Annotation                                                                    `path:"@async" ygotAnnotation:"true"`
	DemandModeRequested            *bool                                                                                `path:"demand-mode-requested" module:"openconfig-bfd"`
	ΛDemandModeRequested           []ygot.Annotation                                                                    `path:"@demand-mode-requested" ygotAnnotation:"true"`
	FailureTransitions             *uint64                                                                              `path:"failure-transitions" module:"openconfig-bfd"`
	ΛFailureTransitions            []ygot.Annotation                                                                    `path:"@failure-transitions" ygotAnnotation:"true"`
	LastFailureTime                *uint64                                                                              `path:"last-failure-time" module:"openconfig-bfd"`
	ΛLastFailureTime               []ygot.Annotation                                                                    `path:"@last-failure-time" ygotAnnotation:"true"`
	LocalAddress                   *string                                                                              `path:"local-address" module:"openconfig-bfd"`
	ΛLocalAddress                  []ygot.Annotation                                                                    `path:"@local-address" ygotAnnotation:"true"`
	LocalDiagnosticCode            E_OpenconfigBfd_BfdDiagnosticCode                                                    `path:"local-diagnostic-code" module:"openconfig-bfd"`
	ΛLocalDiagnosticCode           []ygot.Annotation                                                                    `path:"@local-diagnostic-code" ygotAnnotation:"true"`
	LocalDiscriminator             *string                                                                              `path:"local-discriminator" module:"openconfig-bfd"`
	ΛLocalDiscriminator            []ygot.Annotation                                                                    `path:"@local-discriminator" ygotAnnotation:"true"`
	MemberInterface                *string                                                                              `path:"member-interface" module:"openconfig-bfd"`
	ΛMemberInterface               []ygot.Annotation                                                                    `path:"@member-interface" ygotAnnotation:"true"`
	RemoteAddress                  *string                                                                              `path:"remote-address" module:"openconfig-bfd"`
	ΛRemoteAddress                 []ygot.Annotation                                                                    `path:"@remote-address" ygotAnnotation:"true"`
	RemoteAuthenticationEnabled    *bool                                                                                `path:"remote-authentication-enabled" module:"openconfig-bfd"`
	ΛRemoteAuthenticationEnabled   []ygot.Annotation                                                                    `path:"@remote-authentication-enabled" ygotAnnotation:"true"`
	RemoteControlPlaneIndependent  *bool                                                                                `path:"remote-control-plane-independent" module:"openconfig-bfd"`
	ΛRemoteControlPlaneIndependent []ygot.Annotation                                                                    `path:"@remote-control-plane-independent" ygotAnnotation:"true"`
	RemoteDiagnosticCode           E_OpenconfigBfd_BfdDiagnosticCode                                                    `path:"remote-diagnostic-code" module:"openconfig-bfd"`
	ΛRemoteDiagnosticCode          []ygot.Annotation                                                                    `path:"@remote-diagnostic-code" ygotAnnotation:"true"`
	RemoteDiscriminator            *string                                                                              `path:"remote-discriminator" module:"openconfig-bfd"`
	ΛRemoteDiscriminator           []ygot.Annotation                                                                    `path:"@remote-discriminator" ygotAnnotation:"true"`
	RemoteMinimumReceiveInterval   *uint32                                                                              `path:"remote-minimum-receive-interval" module:"openconfig-bfd"`
	ΛRemoteMinimumReceiveInterval  []ygot.Annotation                                                                    `path:"@remote-minimum-receive-interval" ygotAnnotation:"true"`
	RemoteSessionState             E_OpenconfigBfd_BfdSessionState                                                      `path:"remote-session-state" module:"openconfig-bfd"`
	ΛRemoteSessionState            []ygot.Annotation                                                                    `path:"@remote-session-state" ygotAnnotation:"true"`
	SessionState                   E_OpenconfigBfd_BfdSessionState                                                      `path:"session-state" module:"openconfig-bfd"`
	ΛSessionState                  []ygot.Annotation                                                                    `path:"@session-state" ygotAnnotation:"true"`
	UpTransitions                  *uint64                                                                              `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions                 []ygot.Annotation                                                                    `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) IsYANGGoStruct() {
}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetOrCreateAsync() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async{}
	return t.Async
}

// GetAsync returns the value of the Async struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) GetAsync() *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/async YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_MicroBfdSessions_MicroBfdSession_State_Async) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Peers represents the /openconfig-bfd/bfd/interfaces/interface/peers YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Peers struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Peer      map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer `path:"peer" module:"openconfig-bfd"`
	ΛPeer     []ygot.Annotation                                             `path:"@peer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Peers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// OpenconfigBfd_Bfd_Interfaces_Interface_Peers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) NewPeer(LocalDiscriminator string) (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer)
	}

	key := LocalDiscriminator

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer{
		LocalDiscriminator: &LocalDiscriminator,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the OpenconfigBfd_Bfd_Interfaces_Interface_Peers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.LocalDiscriminator = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeerMap returns the list (map) from OpenconfigBfd_Bfd_Interfaces_Interface_Peers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) GetOrCreatePeerMap() map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer {
	if t.Peer == nil {
		t.Peer = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer)
	}
	return t.Peer
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces_Interface_Peers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) GetOrCreatePeer(LocalDiscriminator string) *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer {

	key := LocalDiscriminator

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(LocalDiscriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of OpenconfigBfd_Bfd_Interfaces_Interface_Peers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) GetPeer(LocalDiscriminator string) *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer {

	if t == nil {
		return nil
	}

	key := LocalDiscriminator

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver OpenconfigBfd_Bfd_Interfaces_Interface_Peers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) DeletePeer(LocalDiscriminator string) {
	key := LocalDiscriminator

	delete(t.Peer, key)
}

// AppendPeer appends the supplied OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer struct to the
// list Peer of OpenconfigBfd_Bfd_Interfaces_Interface_Peers. If the key value(s) specified in
// the supplied OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer already exist in the list, an error is
// returned.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) AppendPeer(v *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) error {
	if v.LocalDiscriminator == nil {
		return fmt.Errorf("invalid nil key received for LocalDiscriminator")
	}

	key := *v.LocalDiscriminator

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Peers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Peers.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer struct {
	ΛMetadata           []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	LocalDiscriminator  *string                                                  `path:"local-discriminator" module:"openconfig-bfd"`
	ΛLocalDiscriminator []ygot.Annotation                                        `path:"@local-discriminator" ygotAnnotation:"true"`
	State               *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State `path:"state" module:"openconfig-bfd"`
	ΛState              []ygot.Annotation                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) GetOrCreateState() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) GetState() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer struct, which is a YANG list entry.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalDiscriminator == nil {
		return nil, fmt.Errorf("nil value for key LocalDiscriminator")
	}

	return map[string]interface{}{
		"local-discriminator": *t.LocalDiscriminator,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State struct {
	ΛMetadata                      []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Async                          *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async `path:"async" module:"openconfig-bfd"`
	ΛAsync                         []ygot.Annotation                                              `path:"@async" ygotAnnotation:"true"`
	DemandModeRequested            *bool                                                          `path:"demand-mode-requested" module:"openconfig-bfd"`
	ΛDemandModeRequested           []ygot.Annotation                                              `path:"@demand-mode-requested" ygotAnnotation:"true"`
	Echo                           *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo  `path:"echo" module:"openconfig-bfd"`
	ΛEcho                          []ygot.Annotation                                              `path:"@echo" ygotAnnotation:"true"`
	FailureTransitions             *uint64                                                        `path:"failure-transitions" module:"openconfig-bfd"`
	ΛFailureTransitions            []ygot.Annotation                                              `path:"@failure-transitions" ygotAnnotation:"true"`
	LastFailureTime                *uint64                                                        `path:"last-failure-time" module:"openconfig-bfd"`
	ΛLastFailureTime               []ygot.Annotation                                              `path:"@last-failure-time" ygotAnnotation:"true"`
	LocalAddress                   *string                                                        `path:"local-address" module:"openconfig-bfd"`
	ΛLocalAddress                  []ygot.Annotation                                              `path:"@local-address" ygotAnnotation:"true"`
	LocalDiagnosticCode            E_OpenconfigBfd_BfdDiagnosticCode                              `path:"local-diagnostic-code" module:"openconfig-bfd"`
	ΛLocalDiagnosticCode           []ygot.Annotation                                              `path:"@local-diagnostic-code" ygotAnnotation:"true"`
	LocalDiscriminator             *string                                                        `path:"local-discriminator" module:"openconfig-bfd"`
	ΛLocalDiscriminator            []ygot.Annotation                                              `path:"@local-discriminator" ygotAnnotation:"true"`
	RemoteAddress                  *string                                                        `path:"remote-address" module:"openconfig-bfd"`
	ΛRemoteAddress                 []ygot.Annotation                                              `path:"@remote-address" ygotAnnotation:"true"`
	RemoteAuthenticationEnabled    *bool                                                          `path:"remote-authentication-enabled" module:"openconfig-bfd"`
	ΛRemoteAuthenticationEnabled   []ygot.Annotation                                              `path:"@remote-authentication-enabled" ygotAnnotation:"true"`
	RemoteControlPlaneIndependent  *bool                                                          `path:"remote-control-plane-independent" module:"openconfig-bfd"`
	ΛRemoteControlPlaneIndependent []ygot.Annotation                                              `path:"@remote-control-plane-independent" ygotAnnotation:"true"`
	RemoteDiagnosticCode           E_OpenconfigBfd_BfdDiagnosticCode                              `path:"remote-diagnostic-code" module:"openconfig-bfd"`
	ΛRemoteDiagnosticCode          []ygot.Annotation                                              `path:"@remote-diagnostic-code" ygotAnnotation:"true"`
	RemoteDiscriminator            *string                                                        `path:"remote-discriminator" module:"openconfig-bfd"`
	ΛRemoteDiscriminator           []ygot.Annotation                                              `path:"@remote-discriminator" ygotAnnotation:"true"`
	RemoteMinimumReceiveInterval   *uint32                                                        `path:"remote-minimum-receive-interval" module:"openconfig-bfd"`
	ΛRemoteMinimumReceiveInterval  []ygot.Annotation                                              `path:"@remote-minimum-receive-interval" ygotAnnotation:"true"`
	RemoteSessionState             E_OpenconfigBfd_BfdSessionState                                `path:"remote-session-state" module:"openconfig-bfd"`
	ΛRemoteSessionState            []ygot.Annotation                                              `path:"@remote-session-state" ygotAnnotation:"true"`
	SessionState                   E_OpenconfigBfd_BfdSessionState                                `path:"session-state" module:"openconfig-bfd"`
	ΛSessionState                  []ygot.Annotation                                              `path:"@session-state" ygotAnnotation:"true"`
	SubscribedProtocols            []E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                `path:"subscribed-protocols" module:"openconfig-bfd"`
	ΛSubscribedProtocols           []ygot.Annotation                                              `path:"@subscribed-protocols" ygotAnnotation:"true"`
	UpTransitions                  *uint64                                                        `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions                 []ygot.Annotation                                              `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) IsYANGGoStruct() {}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) GetOrCreateAsync() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async{}
	return t.Async
}

// GetOrCreateEcho retrieves the value of the Echo field
// or returns the existing field if it already exists.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) GetOrCreateEcho() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo {
	if t.Echo != nil {
		return t.Echo
	}
	t.Echo = &OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo{}
	return t.Echo
}

// GetAsync returns the value of the Async struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) GetAsync() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// GetEcho returns the value of the Echo struct pointer
// from OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State. If the receiver or the field Echo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) GetEcho() *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo {
	if t != nil && t.Echo != nil {
		return t.Echo
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/async YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Async) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/echo YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Active                 *bool             `path:"active" module:"openconfig-bfd"`
	ΛActive                []ygot.Annotation `path:"@active" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_Peers_Peer_State_Echo) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigBfd_Bfd_Interfaces_Interface_State represents the /openconfig-bfd/bfd/interfaces/interface/state YANG schema element.
type OpenconfigBfd_Bfd_Interfaces_Interface_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32           `path:"desired-minimum-tx-interval" module:"openconfig-bfd"`
	ΛDesiredMinimumTxInterval []ygot.Annotation `path:"@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8            `path:"detection-multiplier" module:"openconfig-bfd"`
	ΛDetectionMultiplier      []ygot.Annotation `path:"@detection-multiplier" ygotAnnotation:"true"`
	EnablePerMemberLink       *bool             `path:"enable-per-member-link" module:"openconfig-bfd"`
	ΛEnablePerMemberLink      []ygot.Annotation `path:"@enable-per-member-link" ygotAnnotation:"true"`
	Enabled                   *bool             `path:"enabled" module:"openconfig-bfd"`
	ΛEnabled                  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Id                        *string           `path:"id" module:"openconfig-bfd"`
	ΛId                       []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
	LocalAddress              *string           `path:"local-address" module:"openconfig-bfd"`
	ΛLocalAddress             []ygot.Annotation `path:"@local-address" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32           `path:"required-minimum-receive" module:"openconfig-bfd"`
	ΛRequiredMinimumReceive   []ygot.Annotation `path:"@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigBfd_Bfd_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigBfd_Bfd_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigBfd_Bfd_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigBfd_Bfd_Interfaces_Interface_State.
func (*OpenconfigBfd_Bfd_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// OpenconfigDefinedSets_DefinedSets represents the /openconfig-defined-sets/defined-sets YANG schema element.
type OpenconfigDefinedSets_DefinedSets struct {
	ΛMetadata       []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Ipv4PrefixSets  *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets `path:"ipv4-prefix-sets" module:"openconfig-defined-sets"`
	ΛIpv4PrefixSets []ygot.Annotation                                 `path:"@ipv4-prefix-sets" ygotAnnotation:"true"`
	Ipv6PrefixSets  *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets `path:"ipv6-prefix-sets" module:"openconfig-defined-sets"`
	ΛIpv6PrefixSets []ygot.Annotation                                 `path:"@ipv6-prefix-sets" ygotAnnotation:"true"`
	PortSets        *OpenconfigDefinedSets_DefinedSets_PortSets       `path:"port-sets" module:"openconfig-defined-sets"`
	ΛPortSets       []ygot.Annotation                                 `path:"@port-sets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets) IsYANGGoStruct() {}

// GetOrCreateIpv4PrefixSets retrieves the value of the Ipv4PrefixSets field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets) GetOrCreateIpv4PrefixSets() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets {
	if t.Ipv4PrefixSets != nil {
		return t.Ipv4PrefixSets
	}
	t.Ipv4PrefixSets = &OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets{}
	return t.Ipv4PrefixSets
}

// GetOrCreateIpv6PrefixSets retrieves the value of the Ipv6PrefixSets field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets) GetOrCreateIpv6PrefixSets() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets {
	if t.Ipv6PrefixSets != nil {
		return t.Ipv6PrefixSets
	}
	t.Ipv6PrefixSets = &OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets{}
	return t.Ipv6PrefixSets
}

// GetOrCreatePortSets retrieves the value of the PortSets field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets) GetOrCreatePortSets() *OpenconfigDefinedSets_DefinedSets_PortSets {
	if t.PortSets != nil {
		return t.PortSets
	}
	t.PortSets = &OpenconfigDefinedSets_DefinedSets_PortSets{}
	return t.PortSets
}

// GetIpv4PrefixSets returns the value of the Ipv4PrefixSets struct pointer
// from OpenconfigDefinedSets_DefinedSets. If the receiver or the field Ipv4PrefixSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets) GetIpv4PrefixSets() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets {
	if t != nil && t.Ipv4PrefixSets != nil {
		return t.Ipv4PrefixSets
	}
	return nil
}

// GetIpv6PrefixSets returns the value of the Ipv6PrefixSets struct pointer
// from OpenconfigDefinedSets_DefinedSets. If the receiver or the field Ipv6PrefixSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets) GetIpv6PrefixSets() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets {
	if t != nil && t.Ipv6PrefixSets != nil {
		return t.Ipv6PrefixSets
	}
	return nil
}

// GetPortSets returns the value of the PortSets struct pointer
// from OpenconfigDefinedSets_DefinedSets. If the receiver or the field PortSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets) GetPortSets() *OpenconfigDefinedSets_DefinedSets_PortSets {
	if t != nil && t.PortSets != nil {
		return t.PortSets
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets.
func (*OpenconfigDefinedSets_DefinedSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets struct {
	ΛMetadata      []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Ipv4PrefixSet  map[string]*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet `path:"ipv4-prefix-set" module:"openconfig-defined-sets"`
	ΛIpv4PrefixSet []ygot.Annotation                                                          `path:"@ipv4-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) IsYANGGoStruct() {}

// NewIpv4PrefixSet creates a new entry in the Ipv4PrefixSet list of the
// OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) NewIpv4PrefixSet(Name string) (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4PrefixSet", key)
	}

	t.Ipv4PrefixSet[key] = &OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet{
		Name: &Name,
	}

	return t.Ipv4PrefixSet[key], nil
}

// RenameIpv4PrefixSet renames an entry in the list Ipv4PrefixSet within
// the OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) RenameIpv4PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv4PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4PrefixSet", newK)
	}

	e, ok := t.Ipv4PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv4PrefixSet[newK] = e
	delete(t.Ipv4PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv4PrefixSetMap returns the list (map) from OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) GetOrCreateIpv4PrefixSetMap() map[string]*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet {
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet)
	}
	return t.Ipv4PrefixSet
}

// GetOrCreateIpv4PrefixSet retrieves the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) GetOrCreateIpv4PrefixSet(Name string) *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet {

	key := Name

	if v, ok := t.Ipv4PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv4PrefixSet retrieves the value with the specified key from
// the Ipv4PrefixSet map field of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) GetIpv4PrefixSet(Name string) *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv4PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4PrefixSet deletes the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) DeleteIpv4PrefixSet(Name string) {
	key := Name

	delete(t.Ipv4PrefixSet, key)
}

// AppendIpv4PrefixSet appends the supplied OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet struct to the
// list Ipv4PrefixSet of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets. If the key value(s) specified in
// the supplied OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet already exist in the list, an error is
// returned.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) AppendIpv4PrefixSet(v *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet)
	}

	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4PrefixSet %v", key)
	}

	t.Ipv4PrefixSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet struct {
	ΛMetadata []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config `path:"config" module:"openconfig-defined-sets"`
	ΛConfig   []ygot.Annotation                                                      `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                `path:"name" module:"openconfig-defined-sets"`
	ΛName     []ygot.Annotation                                                      `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State  `path:"state" module:"openconfig-defined-sets"`
	ΛState    []ygot.Annotation                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) GetOrCreateConfig() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) GetOrCreateState() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) GetConfig() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) GetState() *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet struct, which is a YANG list entry.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/config YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Name         *string           `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"prefix" module:"openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_Config) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set/state YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Name         *string           `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"prefix" module:"openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State.
func (*OpenconfigDefinedSets_DefinedSets_Ipv4PrefixSets_Ipv4PrefixSet_State) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets struct {
	ΛMetadata      []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Ipv6PrefixSet  map[string]*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet `path:"ipv6-prefix-set" module:"openconfig-defined-sets"`
	ΛIpv6PrefixSet []ygot.Annotation                                                          `path:"@ipv6-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) IsYANGGoStruct() {}

// NewIpv6PrefixSet creates a new entry in the Ipv6PrefixSet list of the
// OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) NewIpv6PrefixSet(Name string) (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixSet", key)
	}

	t.Ipv6PrefixSet[key] = &OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet{
		Name: &Name,
	}

	return t.Ipv6PrefixSet[key], nil
}

// RenameIpv6PrefixSet renames an entry in the list Ipv6PrefixSet within
// the OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) RenameIpv6PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixSet", newK)
	}

	e, ok := t.Ipv6PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv6PrefixSet[newK] = e
	delete(t.Ipv6PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv6PrefixSetMap returns the list (map) from OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) GetOrCreateIpv6PrefixSetMap() map[string]*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet {
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet)
	}
	return t.Ipv6PrefixSet
}

// GetOrCreateIpv6PrefixSet retrieves the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) GetOrCreateIpv6PrefixSet(Name string) *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet {

	key := Name

	if v, ok := t.Ipv6PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixSet retrieves the value with the specified key from
// the Ipv6PrefixSet map field of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) GetIpv6PrefixSet(Name string) *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv6PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixSet deletes the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) DeleteIpv6PrefixSet(Name string) {
	key := Name

	delete(t.Ipv6PrefixSet, key)
}

// AppendIpv6PrefixSet appends the supplied OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet struct to the
// list Ipv6PrefixSet of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets. If the key value(s) specified in
// the supplied OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet already exist in the list, an error is
// returned.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) AppendIpv6PrefixSet(v *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet)
	}

	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixSet %v", key)
	}

	t.Ipv6PrefixSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet struct {
	ΛMetadata []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config `path:"config" module:"openconfig-defined-sets"`
	ΛConfig   []ygot.Annotation                                                      `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                `path:"name" module:"openconfig-defined-sets"`
	ΛName     []ygot.Annotation                                                      `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State  `path:"state" module:"openconfig-defined-sets"`
	ΛState    []ygot.Annotation                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) GetOrCreateConfig() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) GetOrCreateState() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) GetConfig() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) GetState() *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet struct, which is a YANG list entry.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/config YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Name         *string           `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"prefix" module:"openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_Config) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set/state YANG schema element.
type OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Name         *string           `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"prefix" module:"openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State.
func (*OpenconfigDefinedSets_DefinedSets_Ipv6PrefixSets_Ipv6PrefixSet_State) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_PortSets represents the /openconfig-defined-sets/defined-sets/port-sets YANG schema element.
type OpenconfigDefinedSets_DefinedSets_PortSets struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	PortSet   map[string]*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet `path:"port-set" module:"openconfig-defined-sets"`
	ΛPortSet  []ygot.Annotation                                              `path:"@port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_PortSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_PortSets) IsYANGGoStruct() {}

// NewPortSet creates a new entry in the PortSet list of the
// OpenconfigDefinedSets_DefinedSets_PortSets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) NewPortSet(Name string) (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortSet", key)
	}

	t.PortSet[key] = &OpenconfigDefinedSets_DefinedSets_PortSets_PortSet{
		Name: &Name,
	}

	return t.PortSet[key], nil
}

// RenamePortSet renames an entry in the list PortSet within
// the OpenconfigDefinedSets_DefinedSets_PortSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) RenamePortSet(oldK, newK string) error {
	if _, ok := t.PortSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PortSet", newK)
	}

	e, ok := t.PortSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortSet", oldK)
	}
	e.Name = &newK

	t.PortSet[newK] = e
	delete(t.PortSet, oldK)
	return nil
}

// GetOrCreatePortSetMap returns the list (map) from OpenconfigDefinedSets_DefinedSets_PortSets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) GetOrCreatePortSetMap() map[string]*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet {
	if t.PortSet == nil {
		t.PortSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet)
	}
	return t.PortSet
}

// GetOrCreatePortSet retrieves the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_PortSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) GetOrCreatePortSet(Name string) *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet {

	key := Name

	if v, ok := t.PortSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortSet got unexpected error: %v", err))
	}
	return v
}

// GetPortSet retrieves the value with the specified key from
// the PortSet map field of OpenconfigDefinedSets_DefinedSets_PortSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) GetPortSet(Name string) *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePortSet deletes the value with the specified keys from
// the receiver OpenconfigDefinedSets_DefinedSets_PortSets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) DeletePortSet(Name string) {
	key := Name

	delete(t.PortSet, key)
}

// AppendPortSet appends the supplied OpenconfigDefinedSets_DefinedSets_PortSets_PortSet struct to the
// list PortSet of OpenconfigDefinedSets_DefinedSets_PortSets. If the key value(s) specified in
// the supplied OpenconfigDefinedSets_DefinedSets_PortSets_PortSet already exist in the list, an error is
// returned.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) AppendPortSet(v *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet)
	}

	if _, ok := t.PortSet[key]; ok {
		return fmt.Errorf("duplicate key for list PortSet %v", key)
	}

	t.PortSet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_PortSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_PortSets.
func (*OpenconfigDefinedSets_DefinedSets_PortSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_PortSets_PortSet represents the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type OpenconfigDefinedSets_DefinedSets_PortSets_PortSet struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config `path:"config" module:"openconfig-defined-sets"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                    `path:"name" module:"openconfig-defined-sets"`
	ΛName     []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State  `path:"state" module:"openconfig-defined-sets"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_PortSets_PortSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) GetOrCreateConfig() *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) GetOrCreateState() *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigDefinedSets_DefinedSets_PortSets_PortSet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) GetConfig() *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigDefinedSets_DefinedSets_PortSets_PortSet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) GetState() *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigDefinedSets_DefinedSets_PortSets_PortSet struct, which is a YANG list entry.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_PortSets_PortSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_PortSets_PortSet.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config represents the /openconfig-defined-sets/defined-sets/port-sets/port-set/config YANG schema element.
type OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config struct {
	ΛMetadata    []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Description  *string                                                                `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation                                                      `path:"@description" ygotAnnotation:"true"`
	Name         *string                                                                `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation                                                      `path:"@name" ygotAnnotation:"true"`
	Port         []OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config_Port_Union `path:"port" module:"openconfig-defined-sets"`
	ΛPort        []ygot.Annotation                                                      `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_Config) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State represents the /openconfig-defined-sets/defined-sets/port-sets/port-set/state YANG schema element.
type OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State struct {
	ΛMetadata    []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Description  *string                                                               `path:"description" module:"openconfig-defined-sets"`
	ΛDescription []ygot.Annotation                                                     `path:"@description" ygotAnnotation:"true"`
	Name         *string                                                               `path:"name" module:"openconfig-defined-sets"`
	ΛName        []ygot.Annotation                                                     `path:"@name" ygotAnnotation:"true"`
	Port         []OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State_Port_Union `path:"port" module:"openconfig-defined-sets"`
	ΛPort        []ygot.Annotation                                                     `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State.
func (*OpenconfigDefinedSets_DefinedSets_PortSets_PortSet_State) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// OpenconfigInterfaces_Interfaces represents the /openconfig-interfaces/interfaces YANG schema element.
type OpenconfigInterfaces_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigInterfaces_Interfaces_Interface `path:"interface" module:"openconfig-interfaces"`
	ΛInterface []ygot.Annotation                                     `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces) NewInterface(Name string) (*OpenconfigInterfaces_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigInterfaces_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigInterfaces_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigInterfaces_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigInterfaces_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces) GetOrCreateInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigInterfaces_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces) GetInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigInterfaces_Interfaces) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigInterfaces_Interfaces_Interface struct to the
// list Interface of OpenconfigInterfaces_Interfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces) AppendInterface(v *OpenconfigInterfaces_Interfaces_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces.
func (*OpenconfigInterfaces_Interfaces) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface struct {
	ΛMetadata         []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Aggregation       *OpenconfigInterfaces_Interfaces_Interface_Aggregation      `path:"aggregation" module:"openconfig-if-aggregate"`
	ΛAggregation      []ygot.Annotation                                           `path:"@aggregation" ygotAnnotation:"true"`
	Config            *OpenconfigInterfaces_Interfaces_Interface_Config           `path:"config" module:"openconfig-interfaces"`
	ΛConfig           []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	Ethernet          *OpenconfigInterfaces_Interfaces_Interface_Ethernet         `path:"ethernet" module:"openconfig-if-ethernet"`
	ΛEthernet         []ygot.Annotation                                           `path:"@ethernet" ygotAnnotation:"true"`
	HoldTime          *OpenconfigInterfaces_Interfaces_Interface_HoldTime         `path:"hold-time" module:"openconfig-interfaces"`
	ΛHoldTime         []ygot.Annotation                                           `path:"@hold-time" ygotAnnotation:"true"`
	Name              *string                                                     `path:"name" module:"openconfig-interfaces"`
	ΛName             []ygot.Annotation                                           `path:"@name" ygotAnnotation:"true"`
	PenaltyBasedAied  *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied `path:"penalty-based-aied" module:"openconfig-interfaces"`
	ΛPenaltyBasedAied []ygot.Annotation                                           `path:"@penalty-based-aied" ygotAnnotation:"true"`
	RoutedVlan        *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan       `path:"routed-vlan" module:"openconfig-vlan"`
	ΛRoutedVlan       []ygot.Annotation                                           `path:"@routed-vlan" ygotAnnotation:"true"`
	State             *OpenconfigInterfaces_Interfaces_Interface_State            `path:"state" module:"openconfig-interfaces"`
	ΛState            []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
	Subinterfaces     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces    `path:"subinterfaces" module:"openconfig-interfaces"`
	ΛSubinterfaces    []ygot.Annotation                                           `path:"@subinterfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateAggregation() *OpenconfigInterfaces_Interfaces_Interface_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &OpenconfigInterfaces_Interfaces_Interface_Aggregation{}
	return t.Aggregation
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &OpenconfigInterfaces_Interfaces_Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &OpenconfigInterfaces_Interfaces_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreatePenaltyBasedAied retrieves the value of the PenaltyBasedAied field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreatePenaltyBasedAied() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied {
	if t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	t.PenaltyBasedAied = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied{}
	return t.PenaltyBasedAied
}

// GetOrCreateRoutedVlan retrieves the value of the RoutedVlan field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateRoutedVlan() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan {
	if t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	t.RoutedVlan = &OpenconfigInterfaces_Interfaces_Interface_RoutedVlan{}
	return t.RoutedVlan
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_State{}
	return t.State
}

// GetOrCreateSubinterfaces retrieves the value of the Subinterfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	t.Subinterfaces = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces{}
	return t.Subinterfaces
}

// GetAggregation returns the value of the Aggregation struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetAggregation() *OpenconfigInterfaces_Interfaces_Interface_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetPenaltyBasedAied returns the value of the PenaltyBasedAied struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field PenaltyBasedAied is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetPenaltyBasedAied() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied {
	if t != nil && t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	return nil
}

// GetRoutedVlan returns the value of the RoutedVlan struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field RoutedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetRoutedVlan() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan {
	if t != nil && t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSubinterfaces returns the value of the Subinterfaces struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Subinterfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t != nil && t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface.
func (*OpenconfigInterfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation struct {
	ΛMetadata     []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config       `path:"config" module:"openconfig-if-aggregate"`
	ΛConfig       []ygot.Annotation                                                   `path:"@config" ygotAnnotation:"true"`
	State         *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State        `path:"state" module:"openconfig-if-aggregate"`
	ΛState        []ygot.Annotation                                                   `path:"@state" ygotAnnotation:"true"`
	SwitchedVlan  *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan []ygot.Annotation                                                   `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Aggregation_State{}
	return t.State
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetOrCreateSwitchedVlan() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Aggregation. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Aggregation. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetState() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Aggregation. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) GetSwitchedVlan() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation) ΛBelongingModule() string {
	return "openconfig-if-aggregate"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config represents the /openconfig-interfaces/interfaces/interface/aggregation/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config struct {
	ΛMetadata []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	LagType   E_OpenconfigIfAggregate_AggregationType `path:"lag-type" module:"openconfig-if-aggregate"`
	ΛLagType  []ygot.Annotation                       `path:"@lag-type" ygotAnnotation:"true"`
	MinLinks  *uint16                                 `path:"min-links" module:"openconfig-if-aggregate"`
	ΛMinLinks []ygot.Annotation                       `path:"@min-links" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_Config) ΛBelongingModule() string {
	return "openconfig-if-aggregate"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_State represents the /openconfig-interfaces/interfaces/interface/aggregation/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_State struct {
	ΛMetadata []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	LagSpeed  *uint32                                 `path:"lag-speed" module:"openconfig-if-aggregate"`
	ΛLagSpeed []ygot.Annotation                       `path:"@lag-speed" ygotAnnotation:"true"`
	LagType   E_OpenconfigIfAggregate_AggregationType `path:"lag-type" module:"openconfig-if-aggregate"`
	ΛLagType  []ygot.Annotation                       `path:"@lag-type" ygotAnnotation:"true"`
	Member    []string                                `path:"member" module:"openconfig-if-aggregate"`
	ΛMember   []ygot.Annotation                       `path:"@member" ygotAnnotation:"true"`
	MinLinks  *uint16                                 `path:"min-links" module:"openconfig-if-aggregate"`
	ΛMinLinks []ygot.Annotation                       `path:"@min-links" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_State) ΛBelongingModule() string {
	return "openconfig-if-aggregate"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) GetState() *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config struct {
	ΛMetadata      []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                                                                      `path:"access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                                                            `path:"@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlanTypes_VlanModeType                                                           `path:"interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                                                            `path:"@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                                                                      `path:"native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                                                            `path:"@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config_TrunkVlans_Union `path:"trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                                                            `path:"@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State struct {
	ΛMetadata      []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                                                                     `path:"access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                                                           `path:"@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlanTypes_VlanModeType                                                          `path:"interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                                                           `path:"@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                                                                     `path:"native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                                                           `path:"@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State_TrunkVlans_Union `path:"trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                                                           `path:"@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Aggregation_SwitchedVlan_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Config represents the /openconfig-interfaces/interfaces/interface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Config struct {
	ΛMetadata     []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Description   *string                                     `path:"description" module:"openconfig-interfaces"`
	ΛDescription  []ygot.Annotation                           `path:"@description" ygotAnnotation:"true"`
	Enabled       *bool                                       `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled      []ygot.Annotation                           `path:"@enabled" ygotAnnotation:"true"`
	LoopbackMode  E_OpenconfigTransportTypes_LoopbackModeType `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode []ygot.Annotation                           `path:"@loopback-mode" ygotAnnotation:"true"`
	Mtu           *uint16                                     `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu          []ygot.Annotation                           `path:"@mtu" ygotAnnotation:"true"`
	Name          *string                                     `path:"name" module:"openconfig-interfaces"`
	ΛName         []ygot.Annotation                           `path:"@name" ygotAnnotation:"true"`
	Tpid          E_OpenconfigVlanTypes_TPID_TYPES            `path:"tpid" module:"openconfig-vlan"`
	ΛTpid         []ygot.Annotation                           `path:"@tpid" ygotAnnotation:"true"`
	Type          E_IETFInterfaces_InterfaceType              `path:"type" module:"openconfig-interfaces"`
	ΛType         []ygot.Annotation                           `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet struct {
	ΛMetadata     []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config       `path:"config" module:"openconfig-if-ethernet"`
	ΛConfig       []ygot.Annotation                                                `path:"@config" ygotAnnotation:"true"`
	State         *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State        `path:"state" module:"openconfig-if-ethernet"`
	ΛState        []ygot.Annotation                                                `path:"@state" ygotAnnotation:"true"`
	SwitchedVlan  *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan []ygot.Annotation                                                `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State{}
	return t.State
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateSwitchedVlan() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetSwitchedVlan() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config represents the /openconfig-interfaces/interfaces/interface/ethernet/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config struct {
	ΛMetadata               []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AggregateId             *string                                                                `path:"aggregate-id" module:"openconfig-if-aggregate"`
	ΛAggregateId            []ygot.Annotation                                                      `path:"@aggregate-id" ygotAnnotation:"true"`
	AutoNegotiate           *bool                                                                  `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate          []ygot.Annotation                                                      `path:"@auto-negotiate" ygotAnnotation:"true"`
	DuplexMode              E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode             []ygot.Annotation                                                      `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl       *bool                                                                  `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl      []ygot.Annotation                                                      `path:"@enable-flow-control" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigIfEthernet_INTERFACE_FEC                                   `path:"fec-mode" module:"openconfig-if-ethernet"`
	ΛFecMode                []ygot.Annotation                                                      `path:"@fec-mode" ygotAnnotation:"true"`
	MacAddress              *string                                                                `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress             []ygot.Annotation                                                      `path:"@mac-address" ygotAnnotation:"true"`
	PortSpeed               E_OpenconfigIfEthernet_ETHERNET_SPEED                                  `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed              []ygot.Annotation                                                      `path:"@port-speed" ygotAnnotation:"true"`
	StandaloneLinkTraining  *bool                                                                  `path:"standalone-link-training" module:"openconfig-if-ethernet"`
	ΛStandaloneLinkTraining []ygot.Annotation                                                      `path:"@standalone-link-training" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State represents the /openconfig-interfaces/interfaces/interface/ethernet/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State struct {
	ΛMetadata               []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AggregateId             *string                                                                         `path:"aggregate-id" module:"openconfig-if-aggregate"`
	ΛAggregateId            []ygot.Annotation                                                               `path:"@aggregate-id" ygotAnnotation:"true"`
	AutoNegotiate           *bool                                                                           `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate          []ygot.Annotation                                                               `path:"@auto-negotiate" ygotAnnotation:"true"`
	Counters                *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters              `path:"counters" module:"openconfig-if-ethernet"`
	ΛCounters               []ygot.Annotation                                                               `path:"@counters" ygotAnnotation:"true"`
	DuplexMode              E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode          `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode             []ygot.Annotation                                                               `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl       *bool                                                                           `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl      []ygot.Annotation                                                               `path:"@enable-flow-control" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigIfEthernet_INTERFACE_FEC                                            `path:"fec-mode" module:"openconfig-if-ethernet"`
	ΛFecMode                []ygot.Annotation                                                               `path:"@fec-mode" ygotAnnotation:"true"`
	HwMacAddress            *string                                                                         `path:"hw-mac-address" module:"openconfig-if-ethernet"`
	ΛHwMacAddress           []ygot.Annotation                                                               `path:"@hw-mac-address" ygotAnnotation:"true"`
	MacAddress              *string                                                                         `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress             []ygot.Annotation                                                               `path:"@mac-address" ygotAnnotation:"true"`
	NegotiatedDuplexMode    E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode `path:"negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	ΛNegotiatedDuplexMode   []ygot.Annotation                                                               `path:"@negotiated-duplex-mode" ygotAnnotation:"true"`
	NegotiatedPortSpeed     E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"negotiated-port-speed" module:"openconfig-if-ethernet"`
	ΛNegotiatedPortSpeed    []ygot.Annotation                                                               `path:"@negotiated-port-speed" ygotAnnotation:"true"`
	PortSpeed               E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed              []ygot.Annotation                                                               `path:"@port-speed" ygotAnnotation:"true"`
	StandaloneLinkTraining  *bool                                                                           `path:"standalone-link-training" module:"openconfig-if-ethernet"`
	ΛStandaloneLinkTraining []ygot.Annotation                                                               `path:"@standalone-link-training" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	In_8021QFrames       *uint64           `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	ΛIn_8021QFrames      []ygot.Annotation `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors        *uint64           `path:"in-block-errors" module:"openconfig-if-ethernet"`
	ΛInBlockErrors       []ygot.Annotation `path:"@in-block-errors" ygotAnnotation:"true"`
	InCarrierErrors      *uint64           `path:"in-carrier-errors" module:"openconfig-if-ethernet"`
	ΛInCarrierErrors     []ygot.Annotation `path:"@in-carrier-errors" ygotAnnotation:"true"`
	InCrcErrors          *uint64           `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	ΛInCrcErrors         []ygot.Annotation `path:"@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames     *uint64           `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	ΛInFragmentFrames    []ygot.Annotation `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InInterruptedTx      *uint64           `path:"in-interrupted-tx" module:"openconfig-if-ethernet"`
	ΛInInterruptedTx     []ygot.Annotation `path:"@in-interrupted-tx" ygotAnnotation:"true"`
	InJabberFrames       *uint64           `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	ΛInJabberFrames      []ygot.Annotation `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InLateCollision      *uint64           `path:"in-late-collision" module:"openconfig-if-ethernet"`
	ΛInLateCollision     []ygot.Annotation `path:"@in-late-collision" ygotAnnotation:"true"`
	InMacControlFrames   *uint64           `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛInMacControlFrames  []ygot.Annotation `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacErrorsRx        *uint64           `path:"in-mac-errors-rx" module:"openconfig-if-ethernet"`
	ΛInMacErrorsRx       []ygot.Annotation `path:"@in-mac-errors-rx" ygotAnnotation:"true"`
	InMacPauseFrames     *uint64           `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛInMacPauseFrames    []ygot.Annotation `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InMaxsizeExceeded    *uint64           `path:"in-maxsize-exceeded" module:"openconfig-if-ethernet"`
	ΛInMaxsizeExceeded   []ygot.Annotation `path:"@in-maxsize-exceeded" ygotAnnotation:"true"`
	InOversizeFrames     *uint64           `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	ΛInOversizeFrames    []ygot.Annotation `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InSingleCollision    *uint64           `path:"in-single-collision" module:"openconfig-if-ethernet"`
	ΛInSingleCollision   []ygot.Annotation `path:"@in-single-collision" ygotAnnotation:"true"`
	InSymbolError        *uint64           `path:"in-symbol-error" module:"openconfig-if-ethernet"`
	ΛInSymbolError       []ygot.Annotation `path:"@in-symbol-error" ygotAnnotation:"true"`
	InUndersizeFrames    *uint64           `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	ΛInUndersizeFrames   []ygot.Annotation `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames      *uint64           `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	ΛOut_8021QFrames     []ygot.Annotation `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutMacControlFrames  *uint64           `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛOutMacControlFrames []ygot.Annotation `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacErrorsTx       *uint64           `path:"out-mac-errors-tx" module:"openconfig-if-ethernet"`
	ΛOutMacErrorsTx      []ygot.Annotation `path:"@out-mac-errors-tx" ygotAnnotation:"true"`
	OutMacPauseFrames    *uint64           `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛOutMacPauseFrames   []ygot.Annotation `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) GetState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config struct {
	ΛMetadata      []ygot.Annotation                                                                         `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                                                                   `path:"access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                                                         `path:"@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlanTypes_VlanModeType                                                        `path:"interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                                                         `path:"@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                                                                   `path:"native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                                                         `path:"@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config_TrunkVlans_Union `path:"trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                                                         `path:"@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State struct {
	ΛMetadata      []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                                                                  `path:"access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                                                        `path:"@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlanTypes_VlanModeType                                                       `path:"interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                                                        `path:"@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                                                                  `path:"native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                                                        `path:"@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State_TrunkVlans_Union `path:"trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                                                        `path:"@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_SwitchedVlan_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config represents the /openconfig-interfaces/interfaces/interface/hold-time/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_State represents the /openconfig-interfaces/interfaces/interface/hold-time/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_HoldTime_State.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) GetState() *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DecayHalfLife      *uint32           `path:"decay-half-life" module:"openconfig-interfaces"`
	ΛDecayHalfLife     []ygot.Annotation `path:"@decay-half-life" ygotAnnotation:"true"`
	FlapPenalty        *uint32           `path:"flap-penalty" module:"openconfig-interfaces"`
	ΛFlapPenalty       []ygot.Annotation `path:"@flap-penalty" ygotAnnotation:"true"`
	MaxSuppressTime    *uint32           `path:"max-suppress-time" module:"openconfig-interfaces"`
	ΛMaxSuppressTime   []ygot.Annotation `path:"@max-suppress-time" ygotAnnotation:"true"`
	ReuseThreshold     *uint32           `path:"reuse-threshold" module:"openconfig-interfaces"`
	ΛReuseThreshold    []ygot.Annotation `path:"@reuse-threshold" ygotAnnotation:"true"`
	SuppressThreshold  *uint32           `path:"suppress-threshold" module:"openconfig-interfaces"`
	ΛSuppressThreshold []ygot.Annotation `path:"@suppress-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DecayHalfLife      *uint32           `path:"decay-half-life" module:"openconfig-interfaces"`
	ΛDecayHalfLife     []ygot.Annotation `path:"@decay-half-life" ygotAnnotation:"true"`
	FlapPenalty        *uint32           `path:"flap-penalty" module:"openconfig-interfaces"`
	ΛFlapPenalty       []ygot.Annotation `path:"@flap-penalty" ygotAnnotation:"true"`
	MaxSuppressTime    *uint32           `path:"max-suppress-time" module:"openconfig-interfaces"`
	ΛMaxSuppressTime   []ygot.Annotation `path:"@max-suppress-time" ygotAnnotation:"true"`
	ReuseThreshold     *uint32           `path:"reuse-threshold" module:"openconfig-interfaces"`
	ΛReuseThreshold    []ygot.Annotation `path:"@reuse-threshold" ygotAnnotation:"true"`
	SuppressThreshold  *uint32           `path:"suppress-threshold" module:"openconfig-interfaces"`
	ΛSuppressThreshold []ygot.Annotation `path:"@suppress-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State.
func (*OpenconfigInterfaces_Interfaces_Interface_PenaltyBasedAied_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_RoutedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_RoutedVlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_RoutedVlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) GetState() *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_RoutedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_RoutedVlan.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config represents the /openconfig-interfaces/interfaces/interface/routed-vlan/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config struct {
	ΛMetadata []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Vlan      OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config_Vlan_Union `path:"vlan" module:"openconfig-vlan"`
	ΛVlan     []ygot.Annotation                                                      `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State represents the /openconfig-interfaces/interfaces/interface/routed-vlan/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State struct {
	ΛMetadata []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Vlan      OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State_Vlan_Union `path:"vlan" module:"openconfig-vlan"`
	ΛVlan     []ygot.Annotation                                                     `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State.
func (*OpenconfigInterfaces_Interfaces_Interface_RoutedVlan_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_State represents the /openconfig-interfaces/interfaces/interface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State struct {
	ΛMetadata     []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	AdminStatus   E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus  []ygot.Annotation                                             `path:"@admin-status" ygotAnnotation:"true"`
	Counters      *OpenconfigInterfaces_Interfaces_Interface_State_Counters     `path:"counters" module:"openconfig-interfaces"`
	ΛCounters     []ygot.Annotation                                             `path:"@counters" ygotAnnotation:"true"`
	Cpu           *bool                                                         `path:"cpu" module:"openconfig-interfaces"`
	ΛCpu          []ygot.Annotation                                             `path:"@cpu" ygotAnnotation:"true"`
	Description   *string                                                       `path:"description" module:"openconfig-interfaces"`
	ΛDescription  []ygot.Annotation                                             `path:"@description" ygotAnnotation:"true"`
	Enabled       *bool                                                         `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled      []ygot.Annotation                                             `path:"@enabled" ygotAnnotation:"true"`
	Ifindex       *uint32                                                       `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex      []ygot.Annotation                                             `path:"@ifindex" ygotAnnotation:"true"`
	LastChange    *uint64                                                       `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange   []ygot.Annotation                                             `path:"@last-change" ygotAnnotation:"true"`
	Logical       *bool                                                         `path:"logical" module:"openconfig-interfaces"`
	ΛLogical      []ygot.Annotation                                             `path:"@logical" ygotAnnotation:"true"`
	LoopbackMode  E_OpenconfigTransportTypes_LoopbackModeType                   `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode []ygot.Annotation                                             `path:"@loopback-mode" ygotAnnotation:"true"`
	Management    *bool                                                         `path:"management" module:"openconfig-interfaces"`
	ΛManagement   []ygot.Annotation                                             `path:"@management" ygotAnnotation:"true"`
	Mtu           *uint16                                                       `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu          []ygot.Annotation                                             `path:"@mtu" ygotAnnotation:"true"`
	Name          *string                                                       `path:"name" module:"openconfig-interfaces"`
	ΛName         []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	OperStatus    E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus  `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus   []ygot.Annotation                                             `path:"@oper-status" ygotAnnotation:"true"`
	Tpid          E_OpenconfigVlanTypes_TPID_TYPES                              `path:"tpid" module:"openconfig-vlan"`
	ΛTpid         []ygot.Annotation                                             `path:"@tpid" ygotAnnotation:"true"`
	Type          E_IETFInterfaces_InterfaceType                                `path:"type" module:"openconfig-interfaces"`
	ΛType         []ygot.Annotation                                             `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_State.
func (*OpenconfigInterfaces_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_State_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State_Counters struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions    *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions   []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts       *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts      []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards            *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards           []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors              *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors             []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors           *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors          []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts       *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts      []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets              *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets             []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts                *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts               []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts         *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts        []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos       *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos      []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	InterfaceTransitions  *uint64           `path:"interface-transitions" module:"openconfig-interfaces"`
	ΛInterfaceTransitions []ygot.Annotation `path:"@interface-transitions" ygotAnnotation:"true"`
	LastClear             *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear            []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	LinkTransitions       *uint64           `path:"link-transitions" module:"openconfig-interfaces"`
	ΛLinkTransitions      []ygot.Annotation `path:"@link-transitions" ygotAnnotation:"true"`
	OutBroadcastPkts      *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts     []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards           *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards          []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors             *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors            []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts      *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts     []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets             *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets            []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts               *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts              []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts        *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts       []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
	Resets                *uint64           `path:"resets" module:"openconfig-interfaces"`
	ΛResets               []ygot.Annotation `path:"@resets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces represents the /openconfig-interfaces/interfaces/interface/subinterfaces YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct {
	ΛMetadata     []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Subinterface  map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface `path:"subinterface" module:"openconfig-interfaces"`
	ΛSubinterface []ygot.Annotation                                                                `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) NewSubinterface(Index uint32) (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterfaceMap returns the list (map) from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetOrCreateSubinterfaceMap() map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}
	return t.Subinterface
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetOrCreateSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct to the
// list Subinterface of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) AppendSubinterface(v *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct {
	ΛMetadata []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                                            `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                      `path:"index" module:"openconfig-interfaces"`
	ΛIndex    []ygot.Annotation                                                            `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                                            `path:"@state" ygotAnnotation:"true"`
	Vlan      *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan   `path:"vlan" module:"openconfig-vlan"`
	ΛVlan     []ygot.Annotation                                                            `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State{}
	return t.State
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateVlan() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan{}
	return t.Vlan
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetVlan() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool             `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Index        *uint32           `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	ΛMetadata    []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	AdminStatus  E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus                        `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus []ygot.Annotation                                                                    `path:"@admin-status" ygotAnnotation:"true"`
	Counters     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters `path:"counters" module:"openconfig-interfaces"`
	ΛCounters    []ygot.Annotation                                                                    `path:"@counters" ygotAnnotation:"true"`
	Cpu          *bool                                                                                `path:"cpu" module:"openconfig-interfaces"`
	ΛCpu         []ygot.Annotation                                                                    `path:"@cpu" ygotAnnotation:"true"`
	Description  *string                                                                              `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation                                                                    `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool                                                                                `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation                                                                    `path:"@enabled" ygotAnnotation:"true"`
	Ifindex      *uint32                                                                              `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex     []ygot.Annotation                                                                    `path:"@ifindex" ygotAnnotation:"true"`
	Index        *uint32                                                                              `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation                                                                    `path:"@index" ygotAnnotation:"true"`
	LastChange   *uint64                                                                              `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange  []ygot.Annotation                                                                    `path:"@last-change" ygotAnnotation:"true"`
	Logical      *bool                                                                                `path:"logical" module:"openconfig-interfaces"`
	ΛLogical     []ygot.Annotation                                                                    `path:"@logical" ygotAnnotation:"true"`
	Management   *bool                                                                                `path:"management" module:"openconfig-interfaces"`
	ΛManagement  []ygot.Annotation                                                                    `path:"@management" ygotAnnotation:"true"`
	Name         *string                                                                              `path:"name" module:"openconfig-interfaces"`
	ΛName        []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
	OperStatus   E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus                         `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus  []ygot.Annotation                                                                    `path:"@oper-status" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan struct {
	ΛMetadata       []ygot.Annotation                                                                         `path:"@" ygotAnnotation:"true"`
	Config          *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config         `path:"config" module:"openconfig-vlan"`
	ΛConfig         []ygot.Annotation                                                                         `path:"@config" ygotAnnotation:"true"`
	EgressMapping   *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping  `path:"egress-mapping" module:"openconfig-vlan"`
	ΛEgressMapping  []ygot.Annotation                                                                         `path:"@egress-mapping" ygotAnnotation:"true"`
	IngressMapping  *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping `path:"ingress-mapping" module:"openconfig-vlan"`
	ΛIngressMapping []ygot.Annotation                                                                         `path:"@ingress-mapping" ygotAnnotation:"true"`
	Match           *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match          `path:"match" module:"openconfig-vlan"`
	ΛMatch          []ygot.Annotation                                                                         `path:"@match" ygotAnnotation:"true"`
	State           *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State          `path:"state" module:"openconfig-vlan"`
	ΛState          []ygot.Annotation                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config{}
	return t.Config
}

// GetOrCreateEgressMapping retrieves the value of the EgressMapping field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetOrCreateEgressMapping() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping {
	if t.EgressMapping != nil {
		return t.EgressMapping
	}
	t.EgressMapping = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping{}
	return t.EgressMapping
}

// GetOrCreateIngressMapping retrieves the value of the IngressMapping field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetOrCreateIngressMapping() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping {
	if t.IngressMapping != nil {
		return t.IngressMapping
	}
	t.IngressMapping = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping{}
	return t.IngressMapping
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetOrCreateMatch() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match{}
	return t.Match
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEgressMapping returns the value of the EgressMapping struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan. If the receiver or the field EgressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetEgressMapping() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping {
	if t != nil && t.EgressMapping != nil {
		return t.EgressMapping
	}
	return nil
}

// GetIngressMapping returns the value of the IngressMapping struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan. If the receiver or the field IngressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetIngressMapping() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping {
	if t != nil && t.IngressMapping != nil {
		return t.IngressMapping
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetMatch() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config struct {
	ΛMetadata []ygot.Annotation                                                                             `path:"@" ygotAnnotation:"true"`
	VlanId    OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config_VlanId_Union `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId   []ygot.Annotation                                                                             `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping struct {
	ΛMetadata []ygot.Annotation                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config struct {
	ΛMetadata        []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES      `path:"tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                     `path:"@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                               `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                     `path:"@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlanTypes_VlanStackAction `path:"vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                     `path:"@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State struct {
	ΛMetadata        []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES      `path:"tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                     `path:"@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                               `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                     `path:"@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlanTypes_VlanStackAction `path:"vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                     `path:"@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_EgressMapping_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping struct {
	ΛMetadata []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config struct {
	ΛMetadata        []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES      `path:"tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                     `path:"@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                               `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                     `path:"@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlanTypes_VlanStackAction `path:"vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                     `path:"@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State struct {
	ΛMetadata        []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES      `path:"tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                     `path:"@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                               `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                     `path:"@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlanTypes_VlanStackAction `path:"vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                     `path:"@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_IngressMapping_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match struct {
	ΛMetadata                    []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	DoubleTagged                 *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged                `path:"double-tagged" module:"openconfig-vlan"`
	ΛDoubleTagged                []ygot.Annotation                                                                                            `path:"@double-tagged" ygotAnnotation:"true"`
	DoubleTaggedInnerList        *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList       `path:"double-tagged-inner-list" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerList       []ygot.Annotation                                                                                            `path:"@double-tagged-inner-list" ygotAnnotation:"true"`
	DoubleTaggedInnerOuterRange  *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange `path:"double-tagged-inner-outer-range" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerOuterRange []ygot.Annotation                                                                                            `path:"@double-tagged-inner-outer-range" ygotAnnotation:"true"`
	DoubleTaggedInnerRange       *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange      `path:"double-tagged-inner-range" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerRange      []ygot.Annotation                                                                                            `path:"@double-tagged-inner-range" ygotAnnotation:"true"`
	DoubleTaggedOuterList        *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList       `path:"double-tagged-outer-list" module:"openconfig-vlan"`
	ΛDoubleTaggedOuterList       []ygot.Annotation                                                                                            `path:"@double-tagged-outer-list" ygotAnnotation:"true"`
	DoubleTaggedOuterRange       *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange      `path:"double-tagged-outer-range" module:"openconfig-vlan"`
	ΛDoubleTaggedOuterRange      []ygot.Annotation                                                                                            `path:"@double-tagged-outer-range" ygotAnnotation:"true"`
	SingleTagged                 *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged                `path:"single-tagged" module:"openconfig-vlan"`
	ΛSingleTagged                []ygot.Annotation                                                                                            `path:"@single-tagged" ygotAnnotation:"true"`
	SingleTaggedList             *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList            `path:"single-tagged-list" module:"openconfig-vlan"`
	ΛSingleTaggedList            []ygot.Annotation                                                                                            `path:"@single-tagged-list" ygotAnnotation:"true"`
	SingleTaggedRange            *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange           `path:"single-tagged-range" module:"openconfig-vlan"`
	ΛSingleTaggedRange           []ygot.Annotation                                                                                            `path:"@single-tagged-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) IsYANGGoStruct() {
}

// GetOrCreateDoubleTagged retrieves the value of the DoubleTagged field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTagged() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged {
	if t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	t.DoubleTagged = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged{}
	return t.DoubleTagged
}

// GetOrCreateDoubleTaggedInnerList retrieves the value of the DoubleTaggedInnerList field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	t.DoubleTaggedInnerList = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList{}
	return t.DoubleTaggedInnerList
}

// GetOrCreateDoubleTaggedInnerOuterRange retrieves the value of the DoubleTaggedInnerOuterRange field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerOuterRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	t.DoubleTaggedInnerOuterRange = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange{}
	return t.DoubleTaggedInnerOuterRange
}

// GetOrCreateDoubleTaggedInnerRange retrieves the value of the DoubleTaggedInnerRange field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	t.DoubleTaggedInnerRange = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange{}
	return t.DoubleTaggedInnerRange
}

// GetOrCreateDoubleTaggedOuterList retrieves the value of the DoubleTaggedOuterList field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	t.DoubleTaggedOuterList = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList{}
	return t.DoubleTaggedOuterList
}

// GetOrCreateDoubleTaggedOuterRange retrieves the value of the DoubleTaggedOuterRange field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	t.DoubleTaggedOuterRange = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange{}
	return t.DoubleTaggedOuterRange
}

// GetOrCreateSingleTagged retrieves the value of the SingleTagged field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateSingleTagged() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged {
	if t.SingleTagged != nil {
		return t.SingleTagged
	}
	t.SingleTagged = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged{}
	return t.SingleTagged
}

// GetOrCreateSingleTaggedList retrieves the value of the SingleTaggedList field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateSingleTaggedList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList {
	if t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	t.SingleTaggedList = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList{}
	return t.SingleTaggedList
}

// GetOrCreateSingleTaggedRange retrieves the value of the SingleTaggedRange field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetOrCreateSingleTaggedRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange {
	if t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	t.SingleTaggedRange = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange{}
	return t.SingleTaggedRange
}

// GetDoubleTagged returns the value of the DoubleTagged struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTagged() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged {
	if t != nil && t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	return nil
}

// GetDoubleTaggedInnerList returns the value of the DoubleTaggedInnerList struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t != nil && t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	return nil
}

// GetDoubleTaggedInnerOuterRange returns the value of the DoubleTaggedInnerOuterRange struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerOuterRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t != nil && t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	return nil
}

// GetDoubleTaggedInnerRange returns the value of the DoubleTaggedInnerRange struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedInnerRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t != nil && t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	return nil
}

// GetDoubleTaggedOuterList returns the value of the DoubleTaggedOuterList struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedOuterList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t != nil && t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	return nil
}

// GetDoubleTaggedOuterRange returns the value of the DoubleTaggedOuterRange struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetDoubleTaggedOuterRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t != nil && t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	return nil
}

// GetSingleTagged returns the value of the SingleTagged struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field SingleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTagged() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged {
	if t != nil && t.SingleTagged != nil {
		return t.SingleTagged
	}
	return nil
}

// GetSingleTaggedList returns the value of the SingleTaggedList struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTaggedList() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList {
	if t != nil && t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	return nil
}

// GetSingleTaggedRange returns the value of the SingleTaggedRange struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) GetSingleTaggedRange() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange {
	if t != nil && t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanIds  []uint16          `path:"inner-vlan-ids" module:"openconfig-vlan"`
	ΛInnerVlanIds []ygot.Annotation `path:"@inner-vlan-ids" ygotAnnotation:"true"`
	OuterVlanId   *uint16           `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId  []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanIds  []uint16          `path:"inner-vlan-ids" module:"openconfig-vlan"`
	ΛInnerVlanIds []ygot.Annotation `path:"@inner-vlan-ids" ygotAnnotation:"true"`
	OuterVlanId   *uint16           `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId  []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerList_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange struct {
	ΛMetadata []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange struct {
	ΛMetadata []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterVlanId      []uint16          `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId     []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterVlanId      []uint16          `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId     []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedInnerRange_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId   *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId  []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanIds  []uint16          `path:"outer-vlan-ids" module:"openconfig-vlan"`
	ΛOuterVlanIds []ygot.Annotation `path:"@outer-vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId   *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId  []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanIds  []uint16          `path:"outer-vlan-ids" module:"openconfig-vlan"`
	ΛOuterVlanIds []ygot.Annotation `path:"@outer-vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterList_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange struct {
	ΛMetadata []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId      *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId     []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId      *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId     []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTaggedOuterRange_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId  *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanId  *uint16           `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId  *uint16           `path:"inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId []ygot.Annotation `path:"@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanId  *uint16           `path:"outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId []ygot.Annotation `path:"@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_DoubleTagged_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList struct {
	ΛMetadata []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanIds   []uint16          `path:"vlan-ids" module:"openconfig-vlan"`
	ΛVlanIds  []ygot.Annotation `path:"@vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanIds   []uint16          `path:"vlan-ids" module:"openconfig-vlan"`
	ΛVlanIds  []ygot.Annotation `path:"@vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedList_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange struct {
	ΛMetadata []ygot.Annotation                                                                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config `path:"config" module:"openconfig-vlan"`
	ΛConfig   []ygot.Annotation                                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State  `path:"state" module:"openconfig-vlan"`
	ΛState    []ygot.Annotation                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HighVlanId  *uint16           `path:"high-vlan-id" module:"openconfig-vlan"`
	ΛHighVlanId []ygot.Annotation `path:"@high-vlan-id" ygotAnnotation:"true"`
	LowVlanId   *uint16           `path:"low-vlan-id" module:"openconfig-vlan"`
	ΛLowVlanId  []ygot.Annotation `path:"@low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HighVlanId  *uint16           `path:"high-vlan-id" module:"openconfig-vlan"`
	ΛHighVlanId []ygot.Annotation `path:"@high-vlan-id" ygotAnnotation:"true"`
	LowVlanId   *uint16           `path:"low-vlan-id" module:"openconfig-vlan"`
	ΛLowVlanId  []ygot.Annotation `path:"@low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTaggedRange_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanId    *uint16           `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId   []ygot.Annotation `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_Config) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanId    *uint16           `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId   []ygot.Annotation `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_Match_SingleTagged_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	VlanId    OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State_VlanId_Union `path:"vlan-id" module:"openconfig-vlan"`
	ΛVlanId   []ygot.Annotation                                                                            `path:"@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Vlan_State) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// OpenconfigKeychain_Keychains represents the /openconfig-keychain/keychains YANG schema element.
type OpenconfigKeychain_Keychains struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Keychain  map[string]*OpenconfigKeychain_Keychains_Keychain `path:"keychain" module:"openconfig-keychain"`
	ΛKeychain []ygot.Annotation                                 `path:"@keychain" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains) IsYANGGoStruct() {}

// NewKeychain creates a new entry in the Keychain list of the
// OpenconfigKeychain_Keychains struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigKeychain_Keychains) NewKeychain(Name string) (*OpenconfigKeychain_Keychains_Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*OpenconfigKeychain_Keychains_Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &OpenconfigKeychain_Keychains_Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the OpenconfigKeychain_Keychains struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigKeychain_Keychains) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.Name = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychainMap returns the list (map) from OpenconfigKeychain_Keychains.
//
// It initializes the field if not already initialized.
func (t *OpenconfigKeychain_Keychains) GetOrCreateKeychainMap() map[string]*OpenconfigKeychain_Keychains_Keychain {
	if t.Keychain == nil {
		t.Keychain = make(map[string]*OpenconfigKeychain_Keychains_Keychain)
	}
	return t.Keychain
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver OpenconfigKeychain_Keychains. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigKeychain_Keychains) GetOrCreateKeychain(Name string) *OpenconfigKeychain_Keychains_Keychain {

	key := Name

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of OpenconfigKeychain_Keychains. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigKeychain_Keychains) GetKeychain(Name string) *OpenconfigKeychain_Keychains_Keychain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver OpenconfigKeychain_Keychains. If there is no such element, the function
// is a no-op.
func (t *OpenconfigKeychain_Keychains) DeleteKeychain(Name string) {
	key := Name

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied OpenconfigKeychain_Keychains_Keychain struct to the
// list Keychain of OpenconfigKeychain_Keychains. If the key value(s) specified in
// the supplied OpenconfigKeychain_Keychains_Keychain already exist in the list, an error is
// returned.
func (t *OpenconfigKeychain_Keychains) AppendKeychain(v *OpenconfigKeychain_Keychains_Keychain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*OpenconfigKeychain_Keychains_Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains.
func (*OpenconfigKeychain_Keychains) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain represents the /openconfig-keychain/keychains/keychain YANG schema element.
type OpenconfigKeychain_Keychains_Keychain struct {
	ΛMetadata []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigKeychain_Keychains_Keychain_Config `path:"config" module:"openconfig-keychain"`
	ΛConfig   []ygot.Annotation                             `path:"@config" ygotAnnotation:"true"`
	Keys      *OpenconfigKeychain_Keychains_Keychain_Keys   `path:"keys" module:"openconfig-keychain"`
	ΛKeys     []ygot.Annotation                             `path:"@keys" ygotAnnotation:"true"`
	Name      *string                                       `path:"name" module:"openconfig-keychain"`
	ΛName     []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigKeychain_Keychains_Keychain_State  `path:"state" module:"openconfig-keychain"`
	ΛState    []ygot.Annotation                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain) GetOrCreateConfig() *OpenconfigKeychain_Keychains_Keychain_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigKeychain_Keychains_Keychain_Config{}
	return t.Config
}

// GetOrCreateKeys retrieves the value of the Keys field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain) GetOrCreateKeys() *OpenconfigKeychain_Keychains_Keychain_Keys {
	if t.Keys != nil {
		return t.Keys
	}
	t.Keys = &OpenconfigKeychain_Keychains_Keychain_Keys{}
	return t.Keys
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain) GetOrCreateState() *OpenconfigKeychain_Keychains_Keychain_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigKeychain_Keychains_Keychain_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigKeychain_Keychains_Keychain. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain) GetConfig() *OpenconfigKeychain_Keychains_Keychain_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetKeys returns the value of the Keys struct pointer
// from OpenconfigKeychain_Keychains_Keychain. If the receiver or the field Keys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain) GetKeys() *OpenconfigKeychain_Keychains_Keychain_Keys {
	if t != nil && t.Keys != nil {
		return t.Keys
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigKeychain_Keychains_Keychain. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain) GetState() *OpenconfigKeychain_Keychains_Keychain_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigKeychain_Keychains_Keychain struct, which is a YANG list entry.
func (t *OpenconfigKeychain_Keychains_Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain.
func (*OpenconfigKeychain_Keychains_Keychain) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Config represents the /openconfig-keychain/keychains/keychain/config YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Config struct {
	ΛMetadata  []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Name       *string                                                      `path:"name" module:"openconfig-keychain"`
	ΛName      []ygot.Annotation                                            `path:"@name" ygotAnnotation:"true"`
	Tolerance  OpenconfigKeychain_Keychains_Keychain_Config_Tolerance_Union `path:"tolerance" module:"openconfig-keychain"`
	ΛTolerance []ygot.Annotation                                            `path:"@tolerance" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Config.
func (*OpenconfigKeychain_Keychains_Keychain_Config) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys represents the /openconfig-keychain/keychains/keychain/keys YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Key       map[OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union]*OpenconfigKeychain_Keychains_Keychain_Keys_Key `path:"key" module:"openconfig-keychain"`
	ΛKey      []ygot.Annotation                                                                                                     `path:"@key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys) IsYANGGoStruct() {}

// NewKey creates a new entry in the Key list of the
// OpenconfigKeychain_Keychains_Keychain_Keys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) NewKey(KeyId OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union) (*OpenconfigKeychain_Keychains_Keychain_Keys_Key, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union]*OpenconfigKeychain_Keychains_Keychain_Keys_Key)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &OpenconfigKeychain_Keychains_Keychain_Keys_Key{
		KeyId: KeyId,
	}

	return t.Key[key], nil
}

// RenameKey renames an entry in the list Key within
// the OpenconfigKeychain_Keychains_Keychain_Keys struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) RenameKey(oldK, newK OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union) error {
	if _, ok := t.Key[newK]; ok {
		return fmt.Errorf("key %v already exists in Key", newK)
	}

	e, ok := t.Key[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Key", oldK)
	}
	e.KeyId = newK

	t.Key[newK] = e
	delete(t.Key, oldK)
	return nil
}

// GetOrCreateKeyMap returns the list (map) from OpenconfigKeychain_Keychains_Keychain_Keys.
//
// It initializes the field if not already initialized.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) GetOrCreateKeyMap() map[OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union]*OpenconfigKeychain_Keychains_Keychain_Keys_Key {
	if t.Key == nil {
		t.Key = make(map[OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union]*OpenconfigKeychain_Keychains_Keychain_Keys_Key)
	}
	return t.Key
}

// GetOrCreateKey retrieves the value with the specified keys from
// the receiver OpenconfigKeychain_Keychains_Keychain_Keys. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) GetOrCreateKey(KeyId OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union) *OpenconfigKeychain_Keychains_Keychain_Keys_Key {

	key := KeyId

	if v, ok := t.Key[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKey got unexpected error: %v", err))
	}
	return v
}

// GetKey retrieves the value with the specified key from
// the Key map field of OpenconfigKeychain_Keychains_Keychain_Keys. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) GetKey(KeyId OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union) *OpenconfigKeychain_Keychains_Keychain_Keys_Key {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.Key[key]; ok {
		return lm
	}
	return nil
}

// DeleteKey deletes the value with the specified keys from
// the receiver OpenconfigKeychain_Keychains_Keychain_Keys. If there is no such element, the function
// is a no-op.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) DeleteKey(KeyId OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union) {
	key := KeyId

	delete(t.Key, key)
}

// AppendKey appends the supplied OpenconfigKeychain_Keychains_Keychain_Keys_Key struct to the
// list Key of OpenconfigKeychain_Keychains_Keychain_Keys. If the key value(s) specified in
// the supplied OpenconfigKeychain_Keychains_Keychain_Keys_Key already exist in the list, an error is
// returned.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) AppendKey(v *OpenconfigKeychain_Keychains_Keychain_Keys_Key) error {
	key := v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union]*OpenconfigKeychain_Keychains_Keychain_Keys_Key)
	}

	if _, ok := t.Key[key]; ok {
		return fmt.Errorf("duplicate key for list Key %v", key)
	}

	t.Key[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys.
func (*OpenconfigKeychain_Keychains_Keychain_Keys) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key struct {
	ΛMetadata        []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config           *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config            `path:"config" module:"openconfig-keychain"`
	ΛConfig          []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	KeyId            OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union `path:"key-id" module:"openconfig-keychain"`
	ΛKeyId           []ygot.Annotation                                                 `path:"@key-id" ygotAnnotation:"true"`
	ReceiveLifetime  *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime   `path:"receive-lifetime" module:"openconfig-keychain"`
	ΛReceiveLifetime []ygot.Annotation                                                 `path:"@receive-lifetime" ygotAnnotation:"true"`
	SendLifetime     *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime      `path:"send-lifetime" module:"openconfig-keychain"`
	ΛSendLifetime    []ygot.Annotation                                                 `path:"@send-lifetime" ygotAnnotation:"true"`
	State            *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State             `path:"state" module:"openconfig-keychain"`
	ΛState           []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetOrCreateConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config{}
	return t.Config
}

// GetOrCreateReceiveLifetime retrieves the value of the ReceiveLifetime field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetOrCreateReceiveLifetime() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime {
	if t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	t.ReceiveLifetime = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime{}
	return t.ReceiveLifetime
}

// GetOrCreateSendLifetime retrieves the value of the SendLifetime field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetOrCreateSendLifetime() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime {
	if t.SendLifetime != nil {
		return t.SendLifetime
	}
	t.SendLifetime = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime{}
	return t.SendLifetime
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetOrCreateState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetReceiveLifetime returns the value of the ReceiveLifetime struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key. If the receiver or the field ReceiveLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetReceiveLifetime() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime {
	if t != nil && t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	return nil
}

// GetSendLifetime returns the value of the SendLifetime struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key. If the receiver or the field SendLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetSendLifetime() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime {
	if t != nil && t.SendLifetime != nil {
		return t.SendLifetime
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) GetState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigKeychain_Keychains_Keychain_Keys_Key struct, which is a YANG list entry.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"key-id": t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config represents the /openconfig-keychain/keychains/keychain/keys/key/config YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config struct {
	ΛMetadata        []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	CryptoAlgorithm  E_OpenconfigKeychainTypes_CRYPTO_TYPE                             `path:"crypto-algorithm" module:"openconfig-keychain"`
	ΛCryptoAlgorithm []ygot.Annotation                                                 `path:"@crypto-algorithm" ygotAnnotation:"true"`
	KeyId            OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config_KeyId_Union `path:"key-id" module:"openconfig-keychain"`
	ΛKeyId           []ygot.Annotation                                                 `path:"@key-id" ygotAnnotation:"true"`
	SecretKey        *string                                                           `path:"secret-key" module:"openconfig-keychain"`
	ΛSecretKey       []ygot.Annotation                                                 `path:"@secret-key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_Config) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime struct {
	ΛMetadata []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config `path:"config" module:"openconfig-keychain"`
	ΛConfig   []ygot.Annotation                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State  `path:"state" module:"openconfig-keychain"`
	ΛState    []ygot.Annotation                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) GetOrCreateConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) GetOrCreateState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) GetConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) GetState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EndTime    *uint64           `path:"end-time" module:"openconfig-keychain"`
	ΛEndTime   []ygot.Annotation `path:"@end-time" ygotAnnotation:"true"`
	StartTime  *uint64           `path:"start-time" module:"openconfig-keychain"`
	ΛStartTime []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_Config) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EndTime    *uint64           `path:"end-time" module:"openconfig-keychain"`
	ΛEndTime   []ygot.Annotation `path:"@end-time" ygotAnnotation:"true"`
	StartTime  *uint64           `path:"start-time" module:"openconfig-keychain"`
	ΛStartTime []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_ReceiveLifetime_State) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime struct {
	ΛMetadata []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config `path:"config" module:"openconfig-keychain"`
	ΛConfig   []ygot.Annotation                                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State  `path:"state" module:"openconfig-keychain"`
	ΛState    []ygot.Annotation                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) GetOrCreateConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) GetOrCreateState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) GetConfig() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) GetState() *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EndTime         *uint64           `path:"end-time" module:"openconfig-keychain"`
	ΛEndTime        []ygot.Annotation `path:"@end-time" ygotAnnotation:"true"`
	SendAndReceive  *bool             `path:"send-and-receive" module:"openconfig-keychain"`
	ΛSendAndReceive []ygot.Annotation `path:"@send-and-receive" ygotAnnotation:"true"`
	StartTime       *uint64           `path:"start-time" module:"openconfig-keychain"`
	ΛStartTime      []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_Config) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EndTime         *uint64           `path:"end-time" module:"openconfig-keychain"`
	ΛEndTime        []ygot.Annotation `path:"@end-time" ygotAnnotation:"true"`
	SendAndReceive  *bool             `path:"send-and-receive" module:"openconfig-keychain"`
	ΛSendAndReceive []ygot.Annotation `path:"@send-and-receive" ygotAnnotation:"true"`
	StartTime       *uint64           `path:"start-time" module:"openconfig-keychain"`
	ΛStartTime      []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_SendLifetime_State) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_Keys_Key_State represents the /openconfig-keychain/keychains/keychain/keys/key/state YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_Keys_Key_State struct {
	ΛMetadata        []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	CryptoAlgorithm  E_OpenconfigKeychainTypes_CRYPTO_TYPE                            `path:"crypto-algorithm" module:"openconfig-keychain"`
	ΛCryptoAlgorithm []ygot.Annotation                                                `path:"@crypto-algorithm" ygotAnnotation:"true"`
	KeyId            OpenconfigKeychain_Keychains_Keychain_Keys_Key_State_KeyId_Union `path:"key-id" module:"openconfig-keychain"`
	ΛKeyId           []ygot.Annotation                                                `path:"@key-id" ygotAnnotation:"true"`
	SecretKey        *string                                                          `path:"secret-key" module:"openconfig-keychain"`
	ΛSecretKey       []ygot.Annotation                                                `path:"@secret-key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_Keys_Key_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_Keys_Key_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_Keys_Key_State.
func (*OpenconfigKeychain_Keychains_Keychain_Keys_Key_State) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigKeychain_Keychains_Keychain_State represents the /openconfig-keychain/keychains/keychain/state YANG schema element.
type OpenconfigKeychain_Keychains_Keychain_State struct {
	ΛMetadata  []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Name       *string                                                     `path:"name" module:"openconfig-keychain"`
	ΛName      []ygot.Annotation                                           `path:"@name" ygotAnnotation:"true"`
	Tolerance  OpenconfigKeychain_Keychains_Keychain_State_Tolerance_Union `path:"tolerance" module:"openconfig-keychain"`
	ΛTolerance []ygot.Annotation                                           `path:"@tolerance" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigKeychain_Keychains_Keychain_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigKeychain_Keychains_Keychain_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigKeychain_Keychains_Keychain_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigKeychain_Keychains_Keychain_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigKeychain_Keychains_Keychain_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigKeychain_Keychains_Keychain_State.
func (*OpenconfigKeychain_Keychains_Keychain_State) ΛBelongingModule() string {
	return "openconfig-keychain"
}

// OpenconfigNetworkInstance_NetworkInstances represents the /openconfig-network-instance/network-instances YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances struct {
	ΛMetadata        []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	NetworkInstance  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance `path:"network-instance" module:"openconfig-network-instance"`
	ΛNetworkInstance []ygot.Annotation                                                      `path:"@network-instance" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances) IsYANGGoStruct() {}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// OpenconfigNetworkInstance_NetworkInstances struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances) NewNetworkInstance(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the OpenconfigNetworkInstance_NetworkInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstanceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances) GetOrCreateNetworkInstanceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance {
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance)
	}
	return t.NetworkInstance
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances) GetOrCreateNetworkInstance(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of OpenconfigNetworkInstance_NetworkInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances) GetNetworkInstance(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance struct to the
// list NetworkInstance of OpenconfigNetworkInstance_NetworkInstances. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances) AppendNetworkInstance(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances.
func (*OpenconfigNetworkInstance_NetworkInstances) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance struct {
	ΛMetadata              []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	Afts                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts                  `path:"afts" module:"openconfig-network-instance"`
	ΛAfts                  []ygot.Annotation                                                                 `path:"@afts" ygotAnnotation:"true"`
	Config                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config                `path:"config" module:"openconfig-network-instance"`
	ΛConfig                []ygot.Annotation                                                                 `path:"@config" ygotAnnotation:"true"`
	ConnectionPoints       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints      `path:"connection-points" module:"openconfig-network-instance"`
	ΛConnectionPoints      []ygot.Annotation                                                                 `path:"@connection-points" ygotAnnotation:"true"`
	Encapsulation          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation         `path:"encapsulation" module:"openconfig-network-instance"`
	ΛEncapsulation         []ygot.Annotation                                                                 `path:"@encapsulation" ygotAnnotation:"true"`
	Evpn                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn                  `path:"evpn" module:"openconfig-network-instance"`
	ΛEvpn                  []ygot.Annotation                                                                 `path:"@evpn" ygotAnnotation:"true"`
	Fdb                    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb                   `path:"fdb" module:"openconfig-network-instance"`
	ΛFdb                   []ygot.Annotation                                                                 `path:"@fdb" ygotAnnotation:"true"`
	InterInstancePolicies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies `path:"inter-instance-policies" module:"openconfig-network-instance"`
	ΛInterInstancePolicies []ygot.Annotation                                                                 `path:"@inter-instance-policies" ygotAnnotation:"true"`
	Interfaces             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces            `path:"interfaces" module:"openconfig-network-instance"`
	ΛInterfaces            []ygot.Annotation                                                                 `path:"@interfaces" ygotAnnotation:"true"`
	Mpls                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls                  `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls                  []ygot.Annotation                                                                 `path:"@mpls" ygotAnnotation:"true"`
	Name                   *string                                                                           `path:"name" module:"openconfig-network-instance"`
	ΛName                  []ygot.Annotation                                                                 `path:"@name" ygotAnnotation:"true"`
	PolicyForwarding       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding      `path:"policy-forwarding" module:"openconfig-network-instance"`
	ΛPolicyForwarding      []ygot.Annotation                                                                 `path:"@policy-forwarding" ygotAnnotation:"true"`
	Protocols              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols             `path:"protocols" module:"openconfig-network-instance"`
	ΛProtocols             []ygot.Annotation                                                                 `path:"@protocols" ygotAnnotation:"true"`
	RouteLimits            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits           `path:"route-limits" module:"openconfig-network-instance"`
	ΛRouteLimits           []ygot.Annotation                                                                 `path:"@route-limits" ygotAnnotation:"true"`
	SegmentRouting         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting        `path:"segment-routing" module:"openconfig-network-instance"`
	ΛSegmentRouting        []ygot.Annotation                                                                 `path:"@segment-routing" ygotAnnotation:"true"`
	State                  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State                 `path:"state" module:"openconfig-network-instance"`
	ΛState                 []ygot.Annotation                                                                 `path:"@state" ygotAnnotation:"true"`
	Static                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static                `path:"static" module:"openconfig-network-instance"`
	ΛStatic                []ygot.Annotation                                                                 `path:"@static" ygotAnnotation:"true"`
	TableConnections       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections      `path:"table-connections" module:"openconfig-network-instance"`
	ΛTableConnections      []ygot.Annotation                                                                 `path:"@table-connections" ygotAnnotation:"true"`
	Tables                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables                `path:"tables" module:"openconfig-network-instance"`
	ΛTables                []ygot.Annotation                                                                 `path:"@tables" ygotAnnotation:"true"`
	Vlans                  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans                 `path:"vlans" module:"openconfig-network-instance"`
	ΛVlans                 []ygot.Annotation                                                                 `path:"@vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) IsYANGGoStruct() {}

// GetOrCreateAfts retrieves the value of the Afts field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateAfts() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts {
	if t.Afts != nil {
		return t.Afts
	}
	t.Afts = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts{}
	return t.Afts
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config{}
	return t.Config
}

// GetOrCreateConnectionPoints retrieves the value of the ConnectionPoints field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateConnectionPoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints {
	if t.ConnectionPoints != nil {
		return t.ConnectionPoints
	}
	t.ConnectionPoints = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints{}
	return t.ConnectionPoints
}

// GetOrCreateEncapsulation retrieves the value of the Encapsulation field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateEncapsulation() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation {
	if t.Encapsulation != nil {
		return t.Encapsulation
	}
	t.Encapsulation = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation{}
	return t.Encapsulation
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateEvpn() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn{}
	return t.Evpn
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateFdb() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb{}
	return t.Fdb
}

// GetOrCreateInterInstancePolicies retrieves the value of the InterInstancePolicies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateInterInstancePolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies {
	if t.InterInstancePolicies != nil {
		return t.InterInstancePolicies
	}
	t.InterInstancePolicies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies{}
	return t.InterInstancePolicies
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces{}
	return t.Interfaces
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls{}
	return t.Mpls
}

// GetOrCreatePolicyForwarding retrieves the value of the PolicyForwarding field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreatePolicyForwarding() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding {
	if t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	t.PolicyForwarding = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding{}
	return t.PolicyForwarding
}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateProtocols() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols{}
	return t.Protocols
}

// GetOrCreateRouteLimits retrieves the value of the RouteLimits field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateRouteLimits() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits {
	if t.RouteLimits != nil {
		return t.RouteLimits
	}
	t.RouteLimits = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits{}
	return t.RouteLimits
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateSegmentRouting() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State{}
	return t.State
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateStatic() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static{}
	return t.Static
}

// GetOrCreateTableConnections retrieves the value of the TableConnections field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateTableConnections() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections {
	if t.TableConnections != nil {
		return t.TableConnections
	}
	t.TableConnections = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections{}
	return t.TableConnections
}

// GetOrCreateTables retrieves the value of the Tables field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateTables() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables {
	if t.Tables != nil {
		return t.Tables
	}
	t.Tables = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables{}
	return t.Tables
}

// GetOrCreateVlans retrieves the value of the Vlans field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetOrCreateVlans() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans {
	if t.Vlans != nil {
		return t.Vlans
	}
	t.Vlans = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans{}
	return t.Vlans
}

// GetAfts returns the value of the Afts struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Afts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetAfts() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts {
	if t != nil && t.Afts != nil {
		return t.Afts
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetConnectionPoints returns the value of the ConnectionPoints struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field ConnectionPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetConnectionPoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints {
	if t != nil && t.ConnectionPoints != nil {
		return t.ConnectionPoints
	}
	return nil
}

// GetEncapsulation returns the value of the Encapsulation struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Encapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetEncapsulation() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation {
	if t != nil && t.Encapsulation != nil {
		return t.Encapsulation
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetEvpn() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetFdb() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetInterInstancePolicies returns the value of the InterInstancePolicies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field InterInstancePolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetInterInstancePolicies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies {
	if t != nil && t.InterInstancePolicies != nil {
		return t.InterInstancePolicies
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetPolicyForwarding returns the value of the PolicyForwarding struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field PolicyForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetPolicyForwarding() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_PolicyForwarding {
	if t != nil && t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	return nil
}

// GetProtocols returns the value of the Protocols struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetProtocols() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// GetRouteLimits returns the value of the RouteLimits struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field RouteLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetRouteLimits() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_RouteLimits {
	if t != nil && t.RouteLimits != nil {
		return t.RouteLimits
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetSegmentRouting() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetStatic() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetTableConnections returns the value of the TableConnections struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field TableConnections is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetTableConnections() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_TableConnections {
	if t != nil && t.TableConnections != nil {
		return t.TableConnections
	}
	return nil
}

// GetTables returns the value of the Tables struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Tables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetTables() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Tables {
	if t != nil && t.Tables != nil {
		return t.Tables
	}
	return nil
}

// GetVlans returns the value of the Vlans struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance. If the receiver or the field Vlans is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) GetVlans() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Vlans {
	if t != nil && t.Vlans != nil {
		return t.Vlans
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts represents the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts struct {
	ΛMetadata         []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	Ethernet          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet         `path:"ethernet" module:"openconfig-network-instance"`
	ΛEthernet         []ygot.Annotation                                                                 `path:"@ethernet" ygotAnnotation:"true"`
	Ipv4Unicast       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast      `path:"ipv4-unicast" module:"openconfig-network-instance"`
	ΛIpv4Unicast      []ygot.Annotation                                                                 `path:"@ipv4-unicast" ygotAnnotation:"true"`
	Ipv6Unicast       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast      `path:"ipv6-unicast" module:"openconfig-network-instance"`
	ΛIpv6Unicast      []ygot.Annotation                                                                 `path:"@ipv6-unicast" ygotAnnotation:"true"`
	Mpls              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls             `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls             []ygot.Annotation                                                                 `path:"@mpls" ygotAnnotation:"true"`
	NextHopGroups     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups    `path:"next-hop-groups" module:"openconfig-network-instance"`
	ΛNextHopGroups    []ygot.Annotation                                                                 `path:"@next-hop-groups" ygotAnnotation:"true"`
	NextHops          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops         `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops         []ygot.Annotation                                                                 `path:"@next-hops" ygotAnnotation:"true"`
	PolicyForwarding  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding `path:"policy-forwarding" module:"openconfig-network-instance"`
	ΛPolicyForwarding []ygot.Annotation                                                                 `path:"@policy-forwarding" ygotAnnotation:"true"`
	StateSynced       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced      `path:"state-synced" module:"openconfig-network-instance"`
	ΛStateSynced      []ygot.Annotation                                                                 `path:"@state-synced" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) IsYANGGoStruct() {}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateEthernet() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateIpv4Unicast() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateIpv6Unicast() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls{}
	return t.Mpls
}

// GetOrCreateNextHopGroups retrieves the value of the NextHopGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups {
	if t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	t.NextHopGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups{}
	return t.NextHopGroups
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops{}
	return t.NextHops
}

// GetOrCreatePolicyForwarding retrieves the value of the PolicyForwarding field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreatePolicyForwarding() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding {
	if t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	t.PolicyForwarding = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding{}
	return t.PolicyForwarding
}

// GetOrCreateStateSynced retrieves the value of the StateSynced field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetOrCreateStateSynced() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced {
	if t.StateSynced != nil {
		return t.StateSynced
	}
	t.StateSynced = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced{}
	return t.StateSynced
}

// GetEthernet returns the value of the Ethernet struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetEthernet() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetIpv4Unicast() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetIpv6Unicast() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetNextHopGroups returns the value of the NextHopGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field NextHopGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups {
	if t != nil && t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetPolicyForwarding returns the value of the PolicyForwarding struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field PolicyForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetPolicyForwarding() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding {
	if t != nil && t.PolicyForwarding != nil {
		return t.PolicyForwarding
	}
	return nil
}

// GetStateSynced returns the value of the StateSynced struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts. If the receiver or the field StateSynced is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) GetStateSynced() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced {
	if t != nil && t.StateSynced != nil {
		return t.StateSynced
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet struct {
	ΛMetadata []ygot.Annotation                                                                             `path:"@" ygotAnnotation:"true"`
	MacEntry  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry `path:"mac-entry" module:"openconfig-network-instance"`
	ΛMacEntry []ygot.Annotation                                                                             `path:"@mac-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) IsYANGGoStruct() {}

// NewMacEntry creates a new entry in the MacEntry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) NewMacEntry(MacAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacEntry == nil {
		t.MacEntry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacEntry", key)
	}

	t.MacEntry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry{
		MacAddress: &MacAddress,
	}

	return t.MacEntry[key], nil
}

// RenameMacEntry renames an entry in the list MacEntry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) RenameMacEntry(oldK, newK string) error {
	if _, ok := t.MacEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in MacEntry", newK)
	}

	e, ok := t.MacEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacEntry", oldK)
	}
	e.MacAddress = &newK

	t.MacEntry[newK] = e
	delete(t.MacEntry, oldK)
	return nil
}

// GetOrCreateMacEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) GetOrCreateMacEntryMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry {
	if t.MacEntry == nil {
		t.MacEntry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry)
	}
	return t.MacEntry
}

// GetOrCreateMacEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) GetOrCreateMacEntry(MacAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry {

	key := MacAddress

	if v, ok := t.MacEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacEntry(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacEntry got unexpected error: %v", err))
	}
	return v
}

// GetMacEntry retrieves the value with the specified key from
// the MacEntry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) GetMacEntry(MacAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.MacEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) DeleteMacEntry(MacAddress string) {
	key := MacAddress

	delete(t.MacEntry, key)
}

// AppendMacEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry struct to the
// list MacEntry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) AppendMacEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacEntry == nil {
		t.MacEntry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry)
	}

	if _, ok := t.MacEntry[key]; ok {
		return fmt.Errorf("duplicate key for list MacEntry %v", key)
	}

	t.MacEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry struct {
	ΛMetadata   []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	MacAddress  *string                                                                                  `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation                                                                        `path:"@mac-address" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State struct {
	ΛMetadata      []ygot.Annotation                                                                                 `path:"@" ygotAnnotation:"true"`
	Counters       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                 `path:"@counters" ygotAnnotation:"true"`
	EntryMetadata  Binary                                                                                            `path:"entry-metadata" module:"openconfig-network-instance"`
	ΛEntryMetadata []ygot.Annotation                                                                                 `path:"@entry-metadata" ygotAnnotation:"true"`
	MacAddress     *string                                                                                           `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress    []ygot.Annotation                                                                                 `path:"@mac-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ethernet_MacEntry_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast struct {
	ΛMetadata  []ygot.Annotation                                                                                 `path:"@" ygotAnnotation:"true"`
	Ipv4Entry  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry `path:"ipv4-entry" module:"openconfig-network-instance"`
	ΛIpv4Entry []ygot.Annotation                                                                                 `path:"@ipv4-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) IsYANGGoStruct() {
}

// NewIpv4Entry creates a new entry in the Ipv4Entry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) NewIpv4Entry(Prefix string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Entry == nil {
		t.Ipv4Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Entry", key)
	}

	t.Ipv4Entry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry{
		Prefix: &Prefix,
	}

	return t.Ipv4Entry[key], nil
}

// RenameIpv4Entry renames an entry in the list Ipv4Entry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) RenameIpv4Entry(oldK, newK string) error {
	if _, ok := t.Ipv4Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Entry", newK)
	}

	e, ok := t.Ipv4Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Entry", oldK)
	}
	e.Prefix = &newK

	t.Ipv4Entry[newK] = e
	delete(t.Ipv4Entry, oldK)
	return nil
}

// GetOrCreateIpv4EntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) GetOrCreateIpv4EntryMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry {
	if t.Ipv4Entry == nil {
		t.Ipv4Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry)
	}
	return t.Ipv4Entry
}

// GetOrCreateIpv4Entry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) GetOrCreateIpv4Entry(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry {

	key := Prefix

	if v, ok := t.Ipv4Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Entry(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Entry got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Entry retrieves the value with the specified key from
// the Ipv4Entry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) GetIpv4Entry(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Ipv4Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Entry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) DeleteIpv4Entry(Prefix string) {
	key := Prefix

	delete(t.Ipv4Entry, key)
}

// AppendIpv4Entry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry struct to the
// list Ipv4Entry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) AppendIpv4Entry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Entry == nil {
		t.Ipv4Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry)
	}

	if _, ok := t.Ipv4Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Entry %v", key)
	}

	t.Ipv4Entry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Prefix    *string                                                                                      `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                            `path:"@prefix" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State struct {
	ΛMetadata          []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	Counters           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                                                                     `path:"@counters" ygotAnnotation:"true"`
	DecapsulateHeader  E_OpenconfigAftTypes_EncapsulationHeaderType                                                          `path:"decapsulate-header" module:"openconfig-network-instance"`
	ΛDecapsulateHeader []ygot.Annotation                                                                                     `path:"@decapsulate-header" ygotAnnotation:"true"`
	EntryMetadata      Binary                                                                                                `path:"entry-metadata" module:"openconfig-network-instance"`
	ΛEntryMetadata     []ygot.Annotation                                                                                     `path:"@entry-metadata" ygotAnnotation:"true"`
	OriginProtocol     E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                         `path:"origin-protocol" module:"openconfig-network-instance"`
	ΛOriginProtocol    []ygot.Annotation                                                                                     `path:"@origin-protocol" ygotAnnotation:"true"`
	Prefix             *string                                                                                               `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                     `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv4Unicast_Ipv4Entry_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast struct {
	ΛMetadata  []ygot.Annotation                                                                                 `path:"@" ygotAnnotation:"true"`
	Ipv6Entry  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry `path:"ipv6-entry" module:"openconfig-network-instance"`
	ΛIpv6Entry []ygot.Annotation                                                                                 `path:"@ipv6-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) IsYANGGoStruct() {
}

// NewIpv6Entry creates a new entry in the Ipv6Entry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) NewIpv6Entry(Prefix string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Entry == nil {
		t.Ipv6Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Entry", key)
	}

	t.Ipv6Entry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry{
		Prefix: &Prefix,
	}

	return t.Ipv6Entry[key], nil
}

// RenameIpv6Entry renames an entry in the list Ipv6Entry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) RenameIpv6Entry(oldK, newK string) error {
	if _, ok := t.Ipv6Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Entry", newK)
	}

	e, ok := t.Ipv6Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Entry", oldK)
	}
	e.Prefix = &newK

	t.Ipv6Entry[newK] = e
	delete(t.Ipv6Entry, oldK)
	return nil
}

// GetOrCreateIpv6EntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) GetOrCreateIpv6EntryMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry {
	if t.Ipv6Entry == nil {
		t.Ipv6Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry)
	}
	return t.Ipv6Entry
}

// GetOrCreateIpv6Entry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) GetOrCreateIpv6Entry(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry {

	key := Prefix

	if v, ok := t.Ipv6Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Entry(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Entry got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Entry retrieves the value with the specified key from
// the Ipv6Entry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) GetIpv6Entry(Prefix string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Ipv6Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Entry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) DeleteIpv6Entry(Prefix string) {
	key := Prefix

	delete(t.Ipv6Entry, key)
}

// AppendIpv6Entry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry struct to the
// list Ipv6Entry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) AppendIpv6Entry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Entry == nil {
		t.Ipv6Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry)
	}

	if _, ok := t.Ipv6Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Entry %v", key)
	}

	t.Ipv6Entry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Prefix    *string                                                                                      `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix   []ygot.Annotation                                                                            `path:"@prefix" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State struct {
	ΛMetadata          []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	Counters           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                                                                     `path:"@counters" ygotAnnotation:"true"`
	DecapsulateHeader  E_OpenconfigAftTypes_EncapsulationHeaderType                                                          `path:"decapsulate-header" module:"openconfig-network-instance"`
	ΛDecapsulateHeader []ygot.Annotation                                                                                     `path:"@decapsulate-header" ygotAnnotation:"true"`
	EntryMetadata      Binary                                                                                                `path:"entry-metadata" module:"openconfig-network-instance"`
	ΛEntryMetadata     []ygot.Annotation                                                                                     `path:"@entry-metadata" ygotAnnotation:"true"`
	OriginProtocol     E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                         `path:"origin-protocol" module:"openconfig-network-instance"`
	ΛOriginProtocol    []ygot.Annotation                                                                                     `path:"@origin-protocol" ygotAnnotation:"true"`
	Prefix             *string                                                                                               `path:"prefix" module:"openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                     `path:"@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Ipv6Unicast_Ipv6Entry_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls struct {
	ΛMetadata   []ygot.Annotation                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	LabelEntry  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry `path:"label-entry" module:"openconfig-network-instance"`
	ΛLabelEntry []ygot.Annotation                                                                                                                                                                      `path:"@label-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) IsYANGGoStruct() {}

// NewLabelEntry creates a new entry in the LabelEntry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) NewLabelEntry(Label OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelEntry == nil {
		t.LabelEntry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry)
	}

	key := Label

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LabelEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LabelEntry", key)
	}

	t.LabelEntry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry{
		Label: Label,
	}

	return t.LabelEntry[key], nil
}

// RenameLabelEntry renames an entry in the list LabelEntry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) RenameLabelEntry(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union) error {
	if _, ok := t.LabelEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in LabelEntry", newK)
	}

	e, ok := t.LabelEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LabelEntry", oldK)
	}
	e.Label = newK

	t.LabelEntry[newK] = e
	delete(t.LabelEntry, oldK)
	return nil
}

// GetOrCreateLabelEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) GetOrCreateLabelEntryMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry {
	if t.LabelEntry == nil {
		t.LabelEntry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry)
	}
	return t.LabelEntry
}

// GetOrCreateLabelEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) GetOrCreateLabelEntry(Label OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry {

	key := Label

	if v, ok := t.LabelEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLabelEntry(Label)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLabelEntry got unexpected error: %v", err))
	}
	return v
}

// GetLabelEntry retrieves the value with the specified key from
// the LabelEntry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) GetLabelEntry(Label OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry {

	if t == nil {
		return nil
	}

	key := Label

	if lm, ok := t.LabelEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteLabelEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) DeleteLabelEntry(Label OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union) {
	key := Label

	delete(t.LabelEntry, key)
}

// AppendLabelEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry struct to the
// list LabelEntry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) AppendLabelEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) error {
	key := v.Label

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelEntry == nil {
		t.LabelEntry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry)
	}

	if _, ok := t.LabelEntry[key]; ok {
		return fmt.Errorf("duplicate key for list LabelEntry %v", key)
	}

	t.LabelEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry struct {
	ΛMetadata []ygot.Annotation                                                                                 `path:"@" ygotAnnotation:"true"`
	Label     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union `path:"label" module:"openconfig-network-instance"`
	ΛLabel    []ygot.Annotation                                                                                 `path:"@label" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State            `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"label": t.Label,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State struct {
	ΛMetadata             []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	Counters              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters                    `path:"counters" module:"openconfig-network-instance"`
	ΛCounters             []ygot.Annotation                                                                                                  `path:"@counters" ygotAnnotation:"true"`
	EntryMetadata         Binary                                                                                                             `path:"entry-metadata" module:"openconfig-network-instance"`
	ΛEntryMetadata        []ygot.Annotation                                                                                                  `path:"@entry-metadata" ygotAnnotation:"true"`
	Label                 OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Label_Union                  `path:"label" module:"openconfig-network-instance"`
	ΛLabel                []ygot.Annotation                                                                                                  `path:"@label" ygotAnnotation:"true"`
	PoppedMplsLabelStack  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_PoppedMplsLabelStack_Union `path:"popped-mpls-label-stack" module:"openconfig-network-instance"`
	ΛPoppedMplsLabelStack []ygot.Annotation                                                                                                  `path:"@popped-mpls-label-stack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_Mpls_LabelEntry_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups struct {
	ΛMetadata     []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	NextHopGroup  map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup []ygot.Annotation                                                                                      `path:"@next-hop-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) IsYANGGoStruct() {
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) NewNextHopGroup(Id uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup{
		Id: &Id,
	}

	return t.NextHopGroup[key], nil
}

// RenameNextHopGroup renames an entry in the list NextHopGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) RenameNextHopGroup(oldK, newK uint64) error {
	if _, ok := t.NextHopGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHopGroup", newK)
	}

	e, ok := t.NextHopGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHopGroup", oldK)
	}
	e.Id = &newK

	t.NextHopGroup[newK] = e
	delete(t.NextHopGroup, oldK)
	return nil
}

// GetOrCreateNextHopGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) GetOrCreateNextHopGroupMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup {
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup)
	}
	return t.NextHopGroup
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) GetOrCreateNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup {

	key := Id

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) GetNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) DeleteNextHopGroup(Id uint64) {
	key := Id

	delete(t.NextHopGroup, key)
}

// AppendNextHopGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup struct to the
// list NextHopGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) AppendNextHopGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup)
	}

	if _, ok := t.NextHopGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NextHopGroup %v", key)
	}

	t.NextHopGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup struct {
	ΛMetadata    []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Conditional  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional `path:"conditional" module:"openconfig-network-instance"`
	ΛConditional []ygot.Annotation                                                                                       `path:"@conditional" ygotAnnotation:"true"`
	Id           *uint64                                                                                                 `path:"id" module:"openconfig-network-instance"`
	ΛId          []ygot.Annotation                                                                                       `path:"@id" ygotAnnotation:"true"`
	NextHops     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops    `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops    []ygot.Annotation                                                                                       `path:"@next-hops" ygotAnnotation:"true"`
	State        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State       `path:"state" module:"openconfig-network-instance"`
	ΛState       []ygot.Annotation                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) IsYANGGoStruct() {
}

// GetOrCreateConditional retrieves the value of the Conditional field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetOrCreateConditional() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional {
	if t.Conditional != nil {
		return t.Conditional
	}
	t.Conditional = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional{}
	return t.Conditional
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops{}
	return t.NextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State{}
	return t.State
}

// GetConditional returns the value of the Conditional struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup. If the receiver or the field Conditional is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetConditional() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional {
	if t != nil && t.Conditional != nil {
		return t.Conditional
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional struct {
	ΛMetadata  []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	Condition  map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition `path:"condition" module:"openconfig-network-instance"`
	ΛCondition []ygot.Annotation                                                                                                            `path:"@condition" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) IsYANGGoStruct() {
}

// NewCondition creates a new entry in the Condition list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) NewCondition(Id uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Condition == nil {
		t.Condition = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Condition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Condition", key)
	}

	t.Condition[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition{
		Id: &Id,
	}

	return t.Condition[key], nil
}

// RenameCondition renames an entry in the list Condition within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) RenameCondition(oldK, newK uint64) error {
	if _, ok := t.Condition[newK]; ok {
		return fmt.Errorf("key %v already exists in Condition", newK)
	}

	e, ok := t.Condition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Condition", oldK)
	}
	e.Id = &newK

	t.Condition[newK] = e
	delete(t.Condition, oldK)
	return nil
}

// GetOrCreateConditionMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) GetOrCreateConditionMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition {
	if t.Condition == nil {
		t.Condition = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition)
	}
	return t.Condition
}

// GetOrCreateCondition retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) GetOrCreateCondition(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition {

	key := Id

	if v, ok := t.Condition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCondition(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCondition got unexpected error: %v", err))
	}
	return v
}

// GetCondition retrieves the value with the specified key from
// the Condition map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) GetCondition(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Condition[key]; ok {
		return lm
	}
	return nil
}

// DeleteCondition deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) DeleteCondition(Id uint64) {
	key := Id

	delete(t.Condition, key)
}

// AppendCondition appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition struct to the
// list Condition of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) AppendCondition(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Condition == nil {
		t.Condition = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition)
	}

	if _, ok := t.Condition[key]; ok {
		return fmt.Errorf("duplicate key for list Condition %v", key)
	}

	t.Condition[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition struct {
	ΛMetadata        []ygot.Annotation                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Id               *uint64                                                                                                                           `path:"id" module:"openconfig-network-instance"`
	ΛId              []ygot.Annotation                                                                                                                 `path:"@id" ygotAnnotation:"true"`
	InputInterfaces  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces `path:"input-interfaces" module:"openconfig-network-instance"`
	ΛInputInterfaces []ygot.Annotation                                                                                                                 `path:"@input-interfaces" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) IsYANGGoStruct() {
}

// GetOrCreateInputInterfaces retrieves the value of the InputInterfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) GetOrCreateInputInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces {
	if t.InputInterfaces != nil {
		return t.InputInterfaces
	}
	t.InputInterfaces = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces{}
	return t.InputInterfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State{}
	return t.State
}

// GetInputInterfaces returns the value of the InputInterfaces struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition. If the receiver or the field InputInterfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) GetInputInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces {
	if t != nil && t.InputInterfaces != nil {
		return t.InputInterfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	InputInterface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface `path:"input-interface" module:"openconfig-network-instance"`
	ΛInputInterface []ygot.Annotation                                                                                                                                           `path:"@input-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) IsYANGGoStruct() {
}

// NewInputInterface creates a new entry in the InputInterface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) NewInputInterface(Id string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InputInterface == nil {
		t.InputInterface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InputInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InputInterface", key)
	}

	t.InputInterface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface{
		Id: &Id,
	}

	return t.InputInterface[key], nil
}

// RenameInputInterface renames an entry in the list InputInterface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) RenameInputInterface(oldK, newK string) error {
	if _, ok := t.InputInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in InputInterface", newK)
	}

	e, ok := t.InputInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InputInterface", oldK)
	}
	e.Id = &newK

	t.InputInterface[newK] = e
	delete(t.InputInterface, oldK)
	return nil
}

// GetOrCreateInputInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) GetOrCreateInputInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface {
	if t.InputInterface == nil {
		t.InputInterface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface)
	}
	return t.InputInterface
}

// GetOrCreateInputInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) GetOrCreateInputInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface {

	key := Id

	if v, ok := t.InputInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInputInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInputInterface got unexpected error: %v", err))
	}
	return v
}

// GetInputInterface retrieves the value with the specified key from
// the InputInterface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) GetInputInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.InputInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInputInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) DeleteInputInterface(Id string) {
	key := Id

	delete(t.InputInterface, key)
}

// AppendInputInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface struct to the
// list InputInterface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) AppendInputInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InputInterface == nil {
		t.InputInterface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface)
	}

	if _, ok := t.InputInterface[key]; ok {
		return fmt.Errorf("duplicate key for list InputInterface %v", key)
	}

	t.InputInterface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface struct {
	ΛMetadata []ygot.Annotation                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Id        *string                                                                                                                                                `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                                                      `path:"@id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id            *string           `path:"id" module:"openconfig-network-instance"`
	ΛId           []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_InputInterfaces_InputInterface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dscp          []uint8           `path:"dscp" module:"openconfig-network-instance"`
	ΛDscp         []ygot.Annotation `path:"@dscp" ygotAnnotation:"true"`
	Id            *uint64           `path:"id" module:"openconfig-network-instance"`
	ΛId           []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
	NextHopGroup  *uint64           `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup []ygot.Annotation `path:"@next-hop-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_Conditional_Condition_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                       `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                            `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                  `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Index     *uint64           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
	Weight    *uint64           `path:"weight" module:"openconfig-network-instance"`
	ΛWeight   []ygot.Annotation `path:"@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BackupActive        *bool             `path:"backup-active" module:"openconfig-network-instance"`
	ΛBackupActive       []ygot.Annotation `path:"@backup-active" ygotAnnotation:"true"`
	BackupNextHopGroup  *uint64           `path:"backup-next-hop-group" module:"openconfig-network-instance"`
	ΛBackupNextHopGroup []ygot.Annotation `path:"@backup-next-hop-group" ygotAnnotation:"true"`
	Color               *uint64           `path:"color" module:"openconfig-network-instance"`
	ΛColor              []ygot.Annotation `path:"@color" ygotAnnotation:"true"`
	Id                  *uint64           `path:"id" module:"openconfig-network-instance"`
	ΛId                 []ygot.Annotation `path:"@id" ygotAnnotation:"true"`
	NextHopGroupName    *string           `path:"next-hop-group-name" module:"openconfig-network-instance"`
	ΛNextHopGroupName   []ygot.Annotation `path:"@next-hop-group-name" ygotAnnotation:"true"`
	ProgrammedId        *uint64           `path:"programmed-id" module:"openconfig-network-instance"`
	ΛProgrammedId       []ygot.Annotation `path:"@programmed-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHopGroups_NextHopGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                            `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop struct {
	ΛMetadata     []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	EncapHeaders  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders `path:"encap-headers" module:"openconfig-network-instance"`
	ΛEncapHeaders []ygot.Annotation                                                                              `path:"@encap-headers" ygotAnnotation:"true"`
	Gre           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre          `path:"gre" module:"openconfig-network-instance"`
	ΛGre          []ygot.Annotation                                                                              `path:"@gre" ygotAnnotation:"true"`
	Index         *uint64                                                                                        `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                              `path:"@index" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                              `path:"@interface-ref" ygotAnnotation:"true"`
	IpInIp        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp       `path:"ip-in-ip" module:"openconfig-network-instance"`
	ΛIpInIp       []ygot.Annotation                                                                              `path:"@ip-in-ip" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateEncapHeaders retrieves the value of the EncapHeaders field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetOrCreateEncapHeaders() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders {
	if t.EncapHeaders != nil {
		return t.EncapHeaders
	}
	t.EncapHeaders = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders{}
	return t.EncapHeaders
}

// GetOrCreateGre retrieves the value of the Gre field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetOrCreateGre() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre {
	if t.Gre != nil {
		return t.Gre
	}
	t.Gre = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre{}
	return t.Gre
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateIpInIp retrieves the value of the IpInIp field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetOrCreateIpInIp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp {
	if t.IpInIp != nil {
		return t.IpInIp
	}
	t.IpInIp = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp{}
	return t.IpInIp
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State{}
	return t.State
}

// GetEncapHeaders returns the value of the EncapHeaders struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop. If the receiver or the field EncapHeaders is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetEncapHeaders() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders {
	if t != nil && t.EncapHeaders != nil {
		return t.EncapHeaders
	}
	return nil
}

// GetGre returns the value of the Gre struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop. If the receiver or the field Gre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetGre() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre {
	if t != nil && t.Gre != nil {
		return t.Gre
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIpInIp returns the value of the IpInIp struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop. If the receiver or the field IpInIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetIpInIp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp {
	if t != nil && t.IpInIp != nil {
		return t.IpInIp
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders struct {
	ΛMetadata    []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	EncapHeader  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader `path:"encap-header" module:"openconfig-network-instance"`
	ΛEncapHeader []ygot.Annotation                                                                                                    `path:"@encap-header" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) IsYANGGoStruct() {
}

// NewEncapHeader creates a new entry in the EncapHeader list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) NewEncapHeader(Index uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EncapHeader[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EncapHeader", key)
	}

	t.EncapHeader[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader{
		Index: &Index,
	}

	return t.EncapHeader[key], nil
}

// RenameEncapHeader renames an entry in the list EncapHeader within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) RenameEncapHeader(oldK, newK uint8) error {
	if _, ok := t.EncapHeader[newK]; ok {
		return fmt.Errorf("key %v already exists in EncapHeader", newK)
	}

	e, ok := t.EncapHeader[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EncapHeader", oldK)
	}
	e.Index = &newK

	t.EncapHeader[newK] = e
	delete(t.EncapHeader, oldK)
	return nil
}

// GetOrCreateEncapHeaderMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) GetOrCreateEncapHeaderMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader {
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader)
	}
	return t.EncapHeader
}

// GetOrCreateEncapHeader retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) GetOrCreateEncapHeader(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader {

	key := Index

	if v, ok := t.EncapHeader[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEncapHeader(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEncapHeader got unexpected error: %v", err))
	}
	return v
}

// GetEncapHeader retrieves the value with the specified key from
// the EncapHeader map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) GetEncapHeader(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.EncapHeader[key]; ok {
		return lm
	}
	return nil
}

// DeleteEncapHeader deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) DeleteEncapHeader(Index uint8) {
	key := Index

	delete(t.EncapHeader, key)
}

// AppendEncapHeader appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader struct to the
// list EncapHeader of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) AppendEncapHeader(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EncapHeader == nil {
		t.EncapHeader = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader)
	}

	if _, ok := t.EncapHeader[key]; ok {
		return fmt.Errorf("duplicate key for list EncapHeader %v", key)
	}

	t.EncapHeader[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader struct {
	ΛMetadata []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	Gre       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre   `path:"gre" module:"openconfig-network-instance"`
	ΛGre      []ygot.Annotation                                                                                                `path:"@gre" ygotAnnotation:"true"`
	Index     *uint8                                                                                                           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                `path:"@index" ygotAnnotation:"true"`
	Ipv4      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4  `path:"ipv4" module:"openconfig-network-instance"`
	ΛIpv4     []ygot.Annotation                                                                                                `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6  `path:"ipv6" module:"openconfig-network-instance"`
	ΛIpv6     []ygot.Annotation                                                                                                `path:"@ipv6" ygotAnnotation:"true"`
	Mpls      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls  `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls     []ygot.Annotation                                                                                                `path:"@mpls" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                `path:"@state" ygotAnnotation:"true"`
	UdpV4     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 `path:"udp-v4" module:"openconfig-network-instance"`
	ΛUdpV4    []ygot.Annotation                                                                                                `path:"@udp-v4" ygotAnnotation:"true"`
	UdpV6     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 `path:"udp-v6" module:"openconfig-network-instance"`
	ΛUdpV6    []ygot.Annotation                                                                                                `path:"@udp-v6" ygotAnnotation:"true"`
	Vxlan     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan `path:"vxlan" module:"openconfig-network-instance"`
	ΛVxlan    []ygot.Annotation                                                                                                `path:"@vxlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) IsYANGGoStruct() {
}

// GetOrCreateGre retrieves the value of the Gre field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateGre() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre {
	if t.Gre != nil {
		return t.Gre
	}
	t.Gre = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre{}
	return t.Gre
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateIpv4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateIpv6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls{}
	return t.Mpls
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State{}
	return t.State
}

// GetOrCreateUdpV4 retrieves the value of the UdpV4 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateUdpV4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 {
	if t.UdpV4 != nil {
		return t.UdpV4
	}
	t.UdpV4 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4{}
	return t.UdpV4
}

// GetOrCreateUdpV6 retrieves the value of the UdpV6 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateUdpV6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 {
	if t.UdpV6 != nil {
		return t.UdpV6
	}
	t.UdpV6 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6{}
	return t.UdpV6
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetOrCreateVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan{}
	return t.Vxlan
}

// GetGre returns the value of the Gre struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Gre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetGre() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre {
	if t != nil && t.Gre != nil {
		return t.Gre
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetIpv4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetIpv6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetMpls() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUdpV4 returns the value of the UdpV4 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field UdpV4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetUdpV4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 {
	if t != nil && t.UdpV4 != nil {
		return t.UdpV4
	}
	return nil
}

// GetUdpV6 returns the value of the UdpV6 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field UdpV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetUdpV6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 {
	if t != nil && t.UdpV6 != nil {
		return t.UdpV6
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) GetVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DstIp     *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp    []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	SrcIp     *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp    []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	Ttl       *uint8            `path:"ttl" module:"openconfig-network-instance"`
	ΛTtl      []ygot.Annotation `path:"@ttl" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Gre_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4 represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4 struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DstIp     *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp    []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	SrcIp     *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp    []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv4_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6 represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6 struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DstIp     *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp    []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	SrcIp     *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp    []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Ipv6_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State struct {
	ΛMetadata       []ygot.Annotation                                                                                                                           `path:"@" ygotAnnotation:"true"`
	MplsLabelStack  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State_MplsLabelStack_Union `path:"mpls-label-stack" module:"openconfig-network-instance"`
	ΛMplsLabelStack []ygot.Annotation                                                                                                                           `path:"@mpls-label-stack" ygotAnnotation:"true"`
	TrafficClass    *uint8                                                                                                                                      `path:"traffic-class" module:"openconfig-network-instance"`
	ΛTrafficClass   []ygot.Annotation                                                                                                                           `path:"@traffic-class" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Mpls_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Index     *uint8                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                            `path:"@index" ygotAnnotation:"true"`
	Type      E_OpenconfigAftTypes_EncapsulationHeaderType `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                            `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 struct {
	ΛMetadata []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dscp        *uint8            `path:"dscp" module:"openconfig-network-instance"`
	ΛDscp       []ygot.Annotation `path:"@dscp" ygotAnnotation:"true"`
	DstIp       *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp      []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	DstUdpPort  *uint16           `path:"dst-udp-port" module:"openconfig-network-instance"`
	ΛDstUdpPort []ygot.Annotation `path:"@dst-udp-port" ygotAnnotation:"true"`
	IpTtl       *uint8            `path:"ip-ttl" module:"openconfig-network-instance"`
	ΛIpTtl      []ygot.Annotation `path:"@ip-ttl" ygotAnnotation:"true"`
	SrcIp       *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp      []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	SrcUdpPort  *uint16           `path:"src-udp-port" module:"openconfig-network-instance"`
	ΛSrcUdpPort []ygot.Annotation `path:"@src-udp-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV4_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 struct {
	ΛMetadata []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dscp        *uint8            `path:"dscp" module:"openconfig-network-instance"`
	ΛDscp       []ygot.Annotation `path:"@dscp" ygotAnnotation:"true"`
	DstIp       *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp      []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	DstUdpPort  *uint16           `path:"dst-udp-port" module:"openconfig-network-instance"`
	ΛDstUdpPort []ygot.Annotation `path:"@dst-udp-port" ygotAnnotation:"true"`
	IpTtl       *uint8            `path:"ip-ttl" module:"openconfig-network-instance"`
	ΛIpTtl      []ygot.Annotation `path:"@ip-ttl" ygotAnnotation:"true"`
	SrcIp       *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp      []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	SrcUdpPort  *uint16           `path:"src-udp-port" module:"openconfig-network-instance"`
	ΛSrcUdpPort []ygot.Annotation `path:"@src-udp-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_UdpV6_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan struct {
	ΛMetadata []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TunnelSrcIpAddress  *string           `path:"tunnel-src-ip-address" module:"openconfig-network-instance"`
	ΛTunnelSrcIpAddress []ygot.Annotation `path:"@tunnel-src-ip-address" ygotAnnotation:"true"`
	VniLabel            *uint32           `path:"vni-label" module:"openconfig-network-instance"`
	ΛVniLabel           []ygot.Annotation `path:"@vni-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_EncapHeaders_EncapHeader_Vxlan_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre struct {
	ΛMetadata []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DstIp     *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp    []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	SrcIp     *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp    []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
	Ttl       *uint8            `path:"ttl" module:"openconfig-network-instance"`
	ΛTtl      []ygot.Annotation `path:"@ttl" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_Gre_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp struct {
	ΛMetadata []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DstIp     *string           `path:"dst-ip" module:"openconfig-network-instance"`
	ΛDstIp    []ygot.Annotation `path:"@dst-ip" ygotAnnotation:"true"`
	SrcIp     *string           `path:"src-ip" module:"openconfig-network-instance"`
	ΛSrcIp    []ygot.Annotation `path:"@src-ip" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_IpInIp_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State struct {
	ΛMetadata             []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	Counters              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters                    `path:"counters" module:"openconfig-network-instance"`
	ΛCounters             []ygot.Annotation                                                                                                   `path:"@counters" ygotAnnotation:"true"`
	DecapsulateHeader     E_OpenconfigAftTypes_EncapsulationHeaderType                                                                        `path:"decapsulate-header" module:"openconfig-network-instance"`
	ΛDecapsulateHeader    []ygot.Annotation                                                                                                   `path:"@decapsulate-header" ygotAnnotation:"true"`
	EncapsulateHeader     E_OpenconfigAftTypes_EncapsulationHeaderType                                                                        `path:"encapsulate-header" module:"openconfig-network-instance"`
	ΛEncapsulateHeader    []ygot.Annotation                                                                                                   `path:"@encapsulate-header" ygotAnnotation:"true"`
	Index                 *uint64                                                                                                             `path:"index" module:"openconfig-network-instance"`
	ΛIndex                []ygot.Annotation                                                                                                   `path:"@index" ygotAnnotation:"true"`
	IpAddress             *string                                                                                                             `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress            []ygot.Annotation                                                                                                   `path:"@ip-address" ygotAnnotation:"true"`
	LspName               *string                                                                                                             `path:"lsp-name" module:"openconfig-network-instance"`
	ΛLspName              []ygot.Annotation                                                                                                   `path:"@lsp-name" ygotAnnotation:"true"`
	MacAddress            *string                                                                                                             `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress           []ygot.Annotation                                                                                                   `path:"@mac-address" ygotAnnotation:"true"`
	OriginProtocol        E_OpenconfigPolicyTypes_INSTALL_PROTOCOL_TYPE                                                                       `path:"origin-protocol" module:"openconfig-network-instance"`
	ΛOriginProtocol       []ygot.Annotation                                                                                                   `path:"@origin-protocol" ygotAnnotation:"true"`
	PopTopLabel           *bool                                                                                                               `path:"pop-top-label" module:"openconfig-network-instance"`
	ΛPopTopLabel          []ygot.Annotation                                                                                                   `path:"@pop-top-label" ygotAnnotation:"true"`
	ProgrammedIndex       *uint64                                                                                                             `path:"programmed-index" module:"openconfig-network-instance"`
	ΛProgrammedIndex      []ygot.Annotation                                                                                                   `path:"@programmed-index" ygotAnnotation:"true"`
	PushedMplsLabelStack  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_PushedMplsLabelStack_Union `path:"pushed-mpls-label-stack" module:"openconfig-network-instance"`
	ΛPushedMplsLabelStack []ygot.Annotation                                                                                                   `path:"@pushed-mpls-label-stack" ygotAnnotation:"true"`
	TunnelSrcIpAddress    *string                                                                                                             `path:"tunnel-src-ip-address" module:"openconfig-network-instance"`
	ΛTunnelSrcIpAddress   []ygot.Annotation                                                                                                   `path:"@tunnel-src-ip-address" ygotAnnotation:"true"`
	VniLabel              *uint32                                                                                                             `path:"vni-label" module:"openconfig-network-instance"`
	ΛVniLabel             []ygot.Annotation                                                                                                   `path:"@vni-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_NextHops_NextHop_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding struct {
	ΛMetadata              []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	PolicyForwardingEntry  map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry `path:"policy-forwarding-entry" module:"openconfig-network-instance"`
	ΛPolicyForwardingEntry []ygot.Annotation                                                                                                  `path:"@policy-forwarding-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) IsYANGGoStruct() {
}

// NewPolicyForwardingEntry creates a new entry in the PolicyForwardingEntry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) NewPolicyForwardingEntry(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyForwardingEntry == nil {
		t.PolicyForwardingEntry = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyForwardingEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyForwardingEntry", key)
	}

	t.PolicyForwardingEntry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry{
		Index: &Index,
	}

	return t.PolicyForwardingEntry[key], nil
}

// RenamePolicyForwardingEntry renames an entry in the list PolicyForwardingEntry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) RenamePolicyForwardingEntry(oldK, newK uint64) error {
	if _, ok := t.PolicyForwardingEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyForwardingEntry", newK)
	}

	e, ok := t.PolicyForwardingEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyForwardingEntry", oldK)
	}
	e.Index = &newK

	t.PolicyForwardingEntry[newK] = e
	delete(t.PolicyForwardingEntry, oldK)
	return nil
}

// GetOrCreatePolicyForwardingEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) GetOrCreatePolicyForwardingEntryMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry {
	if t.PolicyForwardingEntry == nil {
		t.PolicyForwardingEntry = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry)
	}
	return t.PolicyForwardingEntry
}

// GetOrCreatePolicyForwardingEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) GetOrCreatePolicyForwardingEntry(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry {

	key := Index

	if v, ok := t.PolicyForwardingEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyForwardingEntry(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyForwardingEntry got unexpected error: %v", err))
	}
	return v
}

// GetPolicyForwardingEntry retrieves the value with the specified key from
// the PolicyForwardingEntry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) GetPolicyForwardingEntry(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PolicyForwardingEntry[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyForwardingEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) DeletePolicyForwardingEntry(Index uint64) {
	key := Index

	delete(t.PolicyForwardingEntry, key)
}

// AppendPolicyForwardingEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry struct to the
// list PolicyForwardingEntry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) AppendPolicyForwardingEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyForwardingEntry == nil {
		t.PolicyForwardingEntry = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry)
	}

	if _, ok := t.PolicyForwardingEntry[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyForwardingEntry %v", key)
	}

	t.PolicyForwardingEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                             `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                             `path:"@" ygotAnnotation:"true"`
	Counters       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters        `path:"counters" module:"openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                                             `path:"@counters" ygotAnnotation:"true"`
	EntryMetadata  Binary                                                                                                                        `path:"entry-metadata" module:"openconfig-network-instance"`
	ΛEntryMetadata []ygot.Annotation                                                                                                             `path:"@entry-metadata" ygotAnnotation:"true"`
	Index          *uint64                                                                                                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex         []ygot.Annotation                                                                                                             `path:"@index" ygotAnnotation:"true"`
	IpDscp         *uint8                                                                                                                        `path:"ip-dscp" module:"openconfig-network-instance"`
	ΛIpDscp        []ygot.Annotation                                                                                                             `path:"@ip-dscp" ygotAnnotation:"true"`
	IpPrefix       *string                                                                                                                       `path:"ip-prefix" module:"openconfig-network-instance"`
	ΛIpPrefix      []ygot.Annotation                                                                                                             `path:"@ip-prefix" ygotAnnotation:"true"`
	IpProtocol     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_IpProtocol_Union `path:"ip-protocol" module:"openconfig-network-instance"`
	ΛIpProtocol    []ygot.Annotation                                                                                                             `path:"@ip-protocol" ygotAnnotation:"true"`
	L4DstPort      *uint16                                                                                                                       `path:"l4-dst-port" module:"openconfig-network-instance"`
	ΛL4DstPort     []ygot.Annotation                                                                                                             `path:"@l4-dst-port" ygotAnnotation:"true"`
	L4SrcPort      *uint16                                                                                                                       `path:"l4-src-port" module:"openconfig-network-instance"`
	ΛL4SrcPort     []ygot.Annotation                                                                                                             `path:"@l4-src-port" ygotAnnotation:"true"`
	MacAddress     *string                                                                                                                       `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress    []ygot.Annotation                                                                                                             `path:"@mac-address" ygotAnnotation:"true"`
	MplsLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_MplsLabel_Union  `path:"mpls-label" module:"openconfig-network-instance"`
	ΛMplsLabel     []ygot.Annotation                                                                                                             `path:"@mpls-label" ygotAnnotation:"true"`
	MplsTc         *uint8                                                                                                                        `path:"mpls-tc" module:"openconfig-network-instance"`
	ΛMplsTc        []ygot.Annotation                                                                                                             `path:"@mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OctetsForwarded   *uint64           `path:"octets-forwarded" module:"openconfig-network-instance"`
	ΛOctetsForwarded  []ygot.Annotation `path:"@octets-forwarded" ygotAnnotation:"true"`
	PacketsForwarded  *uint64           `path:"packets-forwarded" module:"openconfig-network-instance"`
	ΛPacketsForwarded []ygot.Annotation `path:"@packets-forwarded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_PolicyForwarding_PolicyForwardingEntry_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Ipv4Unicast  *bool             `path:"ipv4-unicast" module:"openconfig-network-instance"`
	ΛIpv4Unicast []ygot.Annotation `path:"@ipv4-unicast" ygotAnnotation:"true"`
	Ipv6Unicast  *bool             `path:"ipv6-unicast" module:"openconfig-network-instance"`
	ΛIpv6Unicast []ygot.Annotation `path:"@ipv6-unicast" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Afts_StateSynced_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config represents the /openconfig-network-instance/network-instances/network-instance/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config struct {
	ΛMetadata                []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Description              *string                                                `path:"description" module:"openconfig-network-instance"`
	ΛDescription             []ygot.Annotation                                      `path:"@description" ygotAnnotation:"true"`
	FallbackNetworkInstance  *string                                                `path:"fallback-network-instance" module:"openconfig-network-instance"`
	ΛFallbackNetworkInstance []ygot.Annotation                                      `path:"@fallback-network-instance" ygotAnnotation:"true"`
	Name                     *string                                                `path:"name" module:"openconfig-network-instance"`
	ΛName                    []ygot.Annotation                                      `path:"@name" ygotAnnotation:"true"`
	RouteDistinguisher       *string                                                `path:"route-distinguisher" module:"openconfig-network-instance"`
	ΛRouteDistinguisher      []ygot.Annotation                                      `path:"@route-distinguisher" ygotAnnotation:"true"`
	RouterId                 *string                                                `path:"router-id" module:"openconfig-network-instance"`
	ΛRouterId                []ygot.Annotation                                      `path:"@router-id" ygotAnnotation:"true"`
	Type                     E_OpenconfigNetworkInstanceTypes_NETWORK_INSTANCE_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType                    []ygot.Annotation                                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints represents the /openconfig-network-instance/network-instances/network-instance/connection-points YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints struct {
	ΛMetadata        []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	ConnectionPoint  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint `path:"connection-point" module:"openconfig-network-instance"`
	ΛConnectionPoint []ygot.Annotation                                                                                       `path:"@connection-point" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) IsYANGGoStruct() {
}

// NewConnectionPoint creates a new entry in the ConnectionPoint list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) NewConnectionPoint(ConnectionPointId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectionPoint == nil {
		t.ConnectionPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint)
	}

	key := ConnectionPointId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ConnectionPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ConnectionPoint", key)
	}

	t.ConnectionPoint[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint{
		ConnectionPointId: &ConnectionPointId,
	}

	return t.ConnectionPoint[key], nil
}

// RenameConnectionPoint renames an entry in the list ConnectionPoint within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) RenameConnectionPoint(oldK, newK string) error {
	if _, ok := t.ConnectionPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in ConnectionPoint", newK)
	}

	e, ok := t.ConnectionPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ConnectionPoint", oldK)
	}
	e.ConnectionPointId = &newK

	t.ConnectionPoint[newK] = e
	delete(t.ConnectionPoint, oldK)
	return nil
}

// GetOrCreateConnectionPointMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) GetOrCreateConnectionPointMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint {
	if t.ConnectionPoint == nil {
		t.ConnectionPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint)
	}
	return t.ConnectionPoint
}

// GetOrCreateConnectionPoint retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) GetOrCreateConnectionPoint(ConnectionPointId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint {

	key := ConnectionPointId

	if v, ok := t.ConnectionPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewConnectionPoint(ConnectionPointId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateConnectionPoint got unexpected error: %v", err))
	}
	return v
}

// GetConnectionPoint retrieves the value with the specified key from
// the ConnectionPoint map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) GetConnectionPoint(ConnectionPointId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint {

	if t == nil {
		return nil
	}

	key := ConnectionPointId

	if lm, ok := t.ConnectionPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteConnectionPoint deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) DeleteConnectionPoint(ConnectionPointId string) {
	key := ConnectionPointId

	delete(t.ConnectionPoint, key)
}

// AppendConnectionPoint appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint struct to the
// list ConnectionPoint of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) AppendConnectionPoint(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) error {
	if v.ConnectionPointId == nil {
		return fmt.Errorf("invalid nil key received for ConnectionPointId")
	}

	key := *v.ConnectionPointId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ConnectionPoint == nil {
		t.ConnectionPoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint)
	}

	if _, ok := t.ConnectionPoint[key]; ok {
		return fmt.Errorf("duplicate key for list ConnectionPoint %v", key)
	}

	t.ConnectionPoint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint struct {
	ΛMetadata          []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	Config             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config    `path:"config" module:"openconfig-network-instance"`
	ΛConfig            []ygot.Annotation                                                                                      `path:"@config" ygotAnnotation:"true"`
	ConnectionPointId  *string                                                                                                `path:"connection-point-id" module:"openconfig-network-instance"`
	ΛConnectionPointId []ygot.Annotation                                                                                      `path:"@connection-point-id" ygotAnnotation:"true"`
	Endpoints          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints `path:"endpoints" module:"openconfig-network-instance"`
	ΛEndpoints         []ygot.Annotation                                                                                      `path:"@endpoints" ygotAnnotation:"true"`
	State              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State     `path:"state" module:"openconfig-network-instance"`
	ΛState             []ygot.Annotation                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config{}
	return t.Config
}

// GetOrCreateEndpoints retrieves the value of the Endpoints field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetOrCreateEndpoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints {
	if t.Endpoints != nil {
		return t.Endpoints
	}
	t.Endpoints = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints{}
	return t.Endpoints
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEndpoints returns the value of the Endpoints struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint. If the receiver or the field Endpoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetEndpoints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints {
	if t != nil && t.Endpoints != nil {
		return t.Endpoints
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectionPointId == nil {
		return nil, fmt.Errorf("nil value for key ConnectionPointId")
	}

	return map[string]interface{}{
		"connection-point-id": *t.ConnectionPointId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ConnectionPointId  *string           `path:"connection-point-id" module:"openconfig-network-instance"`
	ΛConnectionPointId []ygot.Annotation `path:"@connection-point-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints struct {
	ΛMetadata []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	Endpoint  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint `path:"endpoint" module:"openconfig-network-instance"`
	ΛEndpoint []ygot.Annotation                                                                                                          `path:"@endpoint" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) IsYANGGoStruct() {
}

// NewEndpoint creates a new entry in the Endpoint list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) NewEndpoint(EndpointId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint)
	}

	key := EndpointId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint{
		EndpointId: &EndpointId,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.EndpointId = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpointMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) GetOrCreateEndpointMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint {
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint)
	}
	return t.Endpoint
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) GetOrCreateEndpoint(EndpointId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint {

	key := EndpointId

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(EndpointId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) GetEndpoint(EndpointId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint {

	if t == nil {
		return nil
	}

	key := EndpointId

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) DeleteEndpoint(EndpointId string) {
	key := EndpointId

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint struct to the
// list Endpoint of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) AppendEndpoint(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) error {
	if v.EndpointId == nil {
		return fmt.Errorf("invalid nil key received for EndpointId")
	}

	key := *v.EndpointId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint struct {
	ΛMetadata   []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig     []ygot.Annotation                                                                                                      `path:"@config" ygotAnnotation:"true"`
	EndpointId  *string                                                                                                                `path:"endpoint-id" module:"openconfig-network-instance"`
	ΛEndpointId []ygot.Annotation                                                                                                      `path:"@endpoint-id" ygotAnnotation:"true"`
	Local       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local  `path:"local" module:"openconfig-network-instance"`
	ΛLocal      []ygot.Annotation                                                                                                      `path:"@local" ygotAnnotation:"true"`
	Remote      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote `path:"remote" module:"openconfig-network-instance"`
	ΛRemote     []ygot.Annotation                                                                                                      `path:"@remote" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State  `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
	Vxlan       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan  `path:"vxlan" module:"openconfig-network-instance"`
	ΛVxlan      []ygot.Annotation                                                                                                      `path:"@vxlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config{}
	return t.Config
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetOrCreateLocal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local{}
	return t.Local
}

// GetOrCreateRemote retrieves the value of the Remote field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetOrCreateRemote() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote {
	if t.Remote != nil {
		return t.Remote
	}
	t.Remote = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote{}
	return t.Remote
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State{}
	return t.State
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetOrCreateVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan{}
	return t.Vxlan
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetLocal returns the value of the Local struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetLocal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetRemote returns the value of the Remote struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint. If the receiver or the field Remote is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetRemote() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote {
	if t != nil && t.Remote != nil {
		return t.Remote
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) GetVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EndpointId == nil {
		return nil, fmt.Errorf("nil value for key EndpointId")
	}

	return map[string]interface{}{
		"endpoint-id": *t.EndpointId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config struct {
	ΛMetadata   []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	EndpointId  *string                                        `path:"endpoint-id" module:"openconfig-network-instance"`
	ΛEndpointId []ygot.Annotation                              `path:"@endpoint-id" ygotAnnotation:"true"`
	Precedence  *uint16                                        `path:"precedence" module:"openconfig-network-instance"`
	ΛPrecedence []ygot.Annotation                              `path:"@precedence" ygotAnnotation:"true"`
	Type        E_OpenconfigNetworkInstanceTypes_ENDPOINT_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType       []ygot.Annotation                              `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local struct {
	ΛMetadata []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface             *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface            []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	SiteId                *uint16           `path:"site-id" module:"openconfig-network-instance"`
	ΛSiteId               []ygot.Annotation `path:"@site-id" ygotAnnotation:"true"`
	SiteLabelBlockOffset  *uint16           `path:"site-label-block-offset" module:"openconfig-network-instance"`
	ΛSiteLabelBlockOffset []ygot.Annotation `path:"@site-label-block-offset" ygotAnnotation:"true"`
	SiteLabelBlockSize    *uint16           `path:"site-label-block-size" module:"openconfig-network-instance"`
	ΛSiteLabelBlockSize   []ygot.Annotation `path:"@site-label-block-size" ygotAnnotation:"true"`
	Subinterface          *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface         []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface             *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface            []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	SiteId                *uint16           `path:"site-id" module:"openconfig-network-instance"`
	ΛSiteId               []ygot.Annotation `path:"@site-id" ygotAnnotation:"true"`
	SiteLabelBlockOffset  *uint16           `path:"site-label-block-offset" module:"openconfig-network-instance"`
	ΛSiteLabelBlockOffset []ygot.Annotation `path:"@site-label-block-offset" ygotAnnotation:"true"`
	SiteLabelBlockSize    *uint16           `path:"site-label-block-size" module:"openconfig-network-instance"`
	ΛSiteLabelBlockSize   []ygot.Annotation `path:"@site-label-block-size" ygotAnnotation:"true"`
	Subinterface          *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface         []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Local_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote struct {
	ΛMetadata []ygot.Annotation                                                                                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RemoteSystem              *string           `path:"remote-system" module:"openconfig-network-instance"`
	ΛRemoteSystem             []ygot.Annotation `path:"@remote-system" ygotAnnotation:"true"`
	SiteId                    *uint16           `path:"site-id" module:"openconfig-network-instance"`
	ΛSiteId                   []ygot.Annotation `path:"@site-id" ygotAnnotation:"true"`
	VirtualCircuitIdentifier  *uint32           `path:"virtual-circuit-identifier" module:"openconfig-network-instance"`
	ΛVirtualCircuitIdentifier []ygot.Annotation `path:"@virtual-circuit-identifier" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RemoteSystem              *string           `path:"remote-system" module:"openconfig-network-instance"`
	ΛRemoteSystem             []ygot.Annotation `path:"@remote-system" ygotAnnotation:"true"`
	SiteId                    *uint16           `path:"site-id" module:"openconfig-network-instance"`
	ΛSiteId                   []ygot.Annotation `path:"@site-id" ygotAnnotation:"true"`
	VirtualCircuitIdentifier  *uint32           `path:"virtual-circuit-identifier" module:"openconfig-network-instance"`
	ΛVirtualCircuitIdentifier []ygot.Annotation `path:"@virtual-circuit-identifier" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Remote_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State struct {
	ΛMetadata   []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Active      *bool                                          `path:"active" module:"openconfig-network-instance"`
	ΛActive     []ygot.Annotation                              `path:"@active" ygotAnnotation:"true"`
	EndpointId  *string                                        `path:"endpoint-id" module:"openconfig-network-instance"`
	ΛEndpointId []ygot.Annotation                              `path:"@endpoint-id" ygotAnnotation:"true"`
	Precedence  *uint16                                        `path:"precedence" module:"openconfig-network-instance"`
	ΛPrecedence []ygot.Annotation                              `path:"@precedence" ygotAnnotation:"true"`
	Type        E_OpenconfigNetworkInstanceTypes_ENDPOINT_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType       []ygot.Annotation                              `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan struct {
	ΛMetadata          []ygot.Annotation                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Config             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config            `path:"config" module:"openconfig-network-instance"`
	ΛConfig            []ygot.Annotation                                                                                                                       `path:"@config" ygotAnnotation:"true"`
	EndpointPeers      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers     `path:"endpoint-peers" module:"openconfig-network-instance"`
	ΛEndpointPeers     []ygot.Annotation                                                                                                                       `path:"@endpoint-peers" ygotAnnotation:"true"`
	EndpointVnis       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis      `path:"endpoint-vnis" module:"openconfig-network-instance"`
	ΛEndpointVnis      []ygot.Annotation                                                                                                                       `path:"@endpoint-vnis" ygotAnnotation:"true"`
	LocalEndpointVnis  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis `path:"local-endpoint-vnis" module:"openconfig-network-instance"`
	ΛLocalEndpointVnis []ygot.Annotation                                                                                                                       `path:"@local-endpoint-vnis" ygotAnnotation:"true"`
	State              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State             `path:"state" module:"openconfig-network-instance"`
	ΛState             []ygot.Annotation                                                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config{}
	return t.Config
}

// GetOrCreateEndpointPeers retrieves the value of the EndpointPeers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetOrCreateEndpointPeers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers {
	if t.EndpointPeers != nil {
		return t.EndpointPeers
	}
	t.EndpointPeers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers{}
	return t.EndpointPeers
}

// GetOrCreateEndpointVnis retrieves the value of the EndpointVnis field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetOrCreateEndpointVnis() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis {
	if t.EndpointVnis != nil {
		return t.EndpointVnis
	}
	t.EndpointVnis = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis{}
	return t.EndpointVnis
}

// GetOrCreateLocalEndpointVnis retrieves the value of the LocalEndpointVnis field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetOrCreateLocalEndpointVnis() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis {
	if t.LocalEndpointVnis != nil {
		return t.LocalEndpointVnis
	}
	t.LocalEndpointVnis = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis{}
	return t.LocalEndpointVnis
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEndpointPeers returns the value of the EndpointPeers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan. If the receiver or the field EndpointPeers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetEndpointPeers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers {
	if t != nil && t.EndpointPeers != nil {
		return t.EndpointPeers
	}
	return nil
}

// GetEndpointVnis returns the value of the EndpointVnis struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan. If the receiver or the field EndpointVnis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetEndpointVnis() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis {
	if t != nil && t.EndpointVnis != nil {
		return t.EndpointVnis
	}
	return nil
}

// GetLocalEndpointVnis returns the value of the LocalEndpointVnis struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan. If the receiver or the field LocalEndpointVnis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetLocalEndpointVnis() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis {
	if t != nil && t.LocalEndpointVnis != nil {
		return t.LocalEndpointVnis
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description      *string           `path:"description" module:"openconfig-network-instance"`
	ΛDescription     []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Enabled          *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled         []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	SourceInterface  *string           `path:"source-interface" module:"openconfig-network-instance"`
	ΛSourceInterface []ygot.Annotation `path:"@source-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	EndpointPeer  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer `path:"endpoint-peer" module:"openconfig-network-instance"`
	ΛEndpointPeer []ygot.Annotation                                                                                                                                           `path:"@endpoint-peer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) IsYANGGoStruct() {
}

// NewEndpointPeer creates a new entry in the EndpointPeer list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) NewEndpointPeer(PeerAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndpointPeer == nil {
		t.EndpointPeer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndpointPeer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndpointPeer", key)
	}

	t.EndpointPeer[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer{
		PeerAddress: &PeerAddress,
	}

	return t.EndpointPeer[key], nil
}

// RenameEndpointPeer renames an entry in the list EndpointPeer within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) RenameEndpointPeer(oldK, newK string) error {
	if _, ok := t.EndpointPeer[newK]; ok {
		return fmt.Errorf("key %v already exists in EndpointPeer", newK)
	}

	e, ok := t.EndpointPeer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndpointPeer", oldK)
	}
	e.PeerAddress = &newK

	t.EndpointPeer[newK] = e
	delete(t.EndpointPeer, oldK)
	return nil
}

// GetOrCreateEndpointPeerMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) GetOrCreateEndpointPeerMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer {
	if t.EndpointPeer == nil {
		t.EndpointPeer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer)
	}
	return t.EndpointPeer
}

// GetOrCreateEndpointPeer retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) GetOrCreateEndpointPeer(PeerAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer {

	key := PeerAddress

	if v, ok := t.EndpointPeer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpointPeer(PeerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpointPeer got unexpected error: %v", err))
	}
	return v
}

// GetEndpointPeer retrieves the value with the specified key from
// the EndpointPeer map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) GetEndpointPeer(PeerAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer {

	if t == nil {
		return nil
	}

	key := PeerAddress

	if lm, ok := t.EndpointPeer[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpointPeer deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) DeleteEndpointPeer(PeerAddress string) {
	key := PeerAddress

	delete(t.EndpointPeer, key)
}

// AppendEndpointPeer appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer struct to the
// list EndpointPeer of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) AppendEndpointPeer(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) error {
	if v.PeerAddress == nil {
		return fmt.Errorf("invalid nil key received for PeerAddress")
	}

	key := *v.PeerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndpointPeer == nil {
		t.EndpointPeer = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer)
	}

	if _, ok := t.EndpointPeer[key]; ok {
		return fmt.Errorf("duplicate key for list EndpointPeer %v", key)
	}

	t.EndpointPeer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	PeerAddress    *string                                                                                                                                                        `path:"peer-address" module:"openconfig-network-instance"`
	ΛPeerAddress   []ygot.Annotation                                                                                                                                              `path:"@peer-address" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State         `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                              `path:"@state" ygotAnnotation:"true"`
	VniPeerGroups  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups `path:"vni-peer-groups" module:"openconfig-network-instance"`
	ΛVniPeerGroups []ygot.Annotation                                                                                                                                              `path:"@vni-peer-groups" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State{}
	return t.State
}

// GetOrCreateVniPeerGroups retrieves the value of the VniPeerGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) GetOrCreateVniPeerGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups {
	if t.VniPeerGroups != nil {
		return t.VniPeerGroups
	}
	t.VniPeerGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups{}
	return t.VniPeerGroups
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVniPeerGroups returns the value of the VniPeerGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer. If the receiver or the field VniPeerGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) GetVniPeerGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups {
	if t != nil && t.VniPeerGroups != nil {
		return t.VniPeerGroups
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PeerAddress")
	}

	return map[string]interface{}{
		"peer-address": *t.PeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State struct {
	ΛMetadata         []ygot.Annotation                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	ControlPlaneVnis  []uint32                                                                                                                                                          `path:"control-plane-vnis" module:"openconfig-network-instance"`
	ΛControlPlaneVnis []ygot.Annotation                                                                                                                                                 `path:"@control-plane-vnis" ygotAnnotation:"true"`
	Counters          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters   `path:"counters" module:"openconfig-network-instance"`
	ΛCounters         []ygot.Annotation                                                                                                                                                 `path:"@counters" ygotAnnotation:"true"`
	PeerAddress       *string                                                                                                                                                           `path:"peer-address" module:"openconfig-network-instance"`
	ΛPeerAddress      []ygot.Annotation                                                                                                                                                 `path:"@peer-address" ygotAnnotation:"true"`
	PeerState         E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_PeerState `path:"peer-state" module:"openconfig-network-instance"`
	ΛPeerState        []ygot.Annotation                                                                                                                                                 `path:"@peer-state" ygotAnnotation:"true"`
	RouterMac         *string                                                                                                                                                           `path:"router-mac" module:"openconfig-network-instance"`
	ΛRouterMac        []ygot.Annotation                                                                                                                                                 `path:"@router-mac" ygotAnnotation:"true"`
	Uptime            *uint64                                                                                                                                                           `path:"uptime" module:"openconfig-network-instance"`
	ΛUptime           []ygot.Annotation                                                                                                                                                 `path:"@uptime" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BumDecapIrPkts         *uint64           `path:"bum-decap-ir-pkts" module:"openconfig-network-instance"`
	ΛBumDecapIrPkts        []ygot.Annotation `path:"@bum-decap-ir-pkts" ygotAnnotation:"true"`
	BumDecapMulticastPkts  *uint64           `path:"bum-decap-multicast-pkts" module:"openconfig-network-instance"`
	ΛBumDecapMulticastPkts []ygot.Annotation `path:"@bum-decap-multicast-pkts" ygotAnnotation:"true"`
	BumDecapPkts           *uint64           `path:"bum-decap-pkts" module:"openconfig-network-instance"`
	ΛBumDecapPkts          []ygot.Annotation `path:"@bum-decap-pkts" ygotAnnotation:"true"`
	BumEncapPkts           *uint64           `path:"bum-encap-pkts" module:"openconfig-network-instance"`
	ΛBumEncapPkts          []ygot.Annotation `path:"@bum-encap-pkts" ygotAnnotation:"true"`
	DropDecapPkts          *uint64           `path:"drop-decap-pkts" module:"openconfig-network-instance"`
	ΛDropDecapPkts         []ygot.Annotation `path:"@drop-decap-pkts" ygotAnnotation:"true"`
	ExceptDecapPkts        *uint64           `path:"except-decap-pkts" module:"openconfig-network-instance"`
	ΛExceptDecapPkts       []ygot.Annotation `path:"@except-decap-pkts" ygotAnnotation:"true"`
	TotalDecapBytes        *uint64           `path:"total-decap-bytes" module:"openconfig-network-instance"`
	ΛTotalDecapBytes       []ygot.Annotation `path:"@total-decap-bytes" ygotAnnotation:"true"`
	TotalDecapPkts         *uint64           `path:"total-decap-pkts" module:"openconfig-network-instance"`
	ΛTotalDecapPkts        []ygot.Annotation `path:"@total-decap-pkts" ygotAnnotation:"true"`
	TotalEncapBytes        *uint64           `path:"total-encap-bytes" module:"openconfig-network-instance"`
	ΛTotalEncapBytes       []ygot.Annotation `path:"@total-encap-bytes" ygotAnnotation:"true"`
	TotalEncapPkts         *uint64           `path:"total-encap-pkts" module:"openconfig-network-instance"`
	ΛTotalEncapPkts        []ygot.Annotation `path:"@total-encap-pkts" ygotAnnotation:"true"`
	UnicastDecapPkts       *uint64           `path:"unicast-decap-pkts" module:"openconfig-network-instance"`
	ΛUnicastDecapPkts      []ygot.Annotation `path:"@unicast-decap-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                                                                                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	VniPeerGroup  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup `path:"vni-peer-group" module:"openconfig-network-instance"`
	ΛVniPeerGroup []ygot.Annotation                                                                                                                                                                                                                                                                                                                                              `path:"@vni-peer-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key represents the key for list VniPeerGroup of element /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key struct {
	CpVni     uint32 `path:"cp-vni"`
	EgressVni uint32 `path:"egress-vni"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"cp-vni":     t.CpVni,
		"egress-vni": t.EgressVni,
	}, nil
}

// NewVniPeerGroup creates a new entry in the VniPeerGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) NewVniPeerGroup(CpVni uint32, EgressVni uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VniPeerGroup == nil {
		t.VniPeerGroup = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key{
		CpVni:     CpVni,
		EgressVni: EgressVni,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VniPeerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VniPeerGroup", key)
	}

	t.VniPeerGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup{
		CpVni:     &CpVni,
		EgressVni: &EgressVni,
	}

	return t.VniPeerGroup[key], nil
}

// RenameVniPeerGroup renames an entry in the list VniPeerGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) RenameVniPeerGroup(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key) error {
	if _, ok := t.VniPeerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VniPeerGroup", newK)
	}

	e, ok := t.VniPeerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VniPeerGroup", oldK)
	}
	e.CpVni = &newK.CpVni
	e.EgressVni = &newK.EgressVni

	t.VniPeerGroup[newK] = e
	delete(t.VniPeerGroup, oldK)
	return nil
}

// GetOrCreateVniPeerGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) GetOrCreateVniPeerGroupMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup {
	if t.VniPeerGroup == nil {
		t.VniPeerGroup = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup)
	}
	return t.VniPeerGroup
}

// GetOrCreateVniPeerGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) GetOrCreateVniPeerGroup(CpVni uint32, EgressVni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key{
		CpVni:     CpVni,
		EgressVni: EgressVni,
	}

	if v, ok := t.VniPeerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVniPeerGroup(CpVni, EgressVni)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVniPeerGroup got unexpected error: %v", err))
	}
	return v
}

// GetVniPeerGroup retrieves the value with the specified key from
// the VniPeerGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) GetVniPeerGroup(CpVni uint32, EgressVni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key{
		CpVni:     CpVni,
		EgressVni: EgressVni,
	}

	if lm, ok := t.VniPeerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVniPeerGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) DeleteVniPeerGroup(CpVni uint32, EgressVni uint32) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key{
		CpVni:     CpVni,
		EgressVni: EgressVni,
	}

	delete(t.VniPeerGroup, key)
}

// AppendVniPeerGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup struct to the
// list VniPeerGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) AppendVniPeerGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) error {
	if v.CpVni == nil {
		return fmt.Errorf("invalid nil key for CpVni")
	}

	if v.EgressVni == nil {
		return fmt.Errorf("invalid nil key for EgressVni")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key{
		CpVni:     *v.CpVni,
		EgressVni: *v.EgressVni,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VniPeerGroup == nil {
		t.VniPeerGroup = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup)
	}

	if _, ok := t.VniPeerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VniPeerGroup %v", key)
	}

	t.VniPeerGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup struct {
	ΛMetadata  []ygot.Annotation                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	CpVni      *uint32                                                                                                                                                                           `path:"cp-vni" module:"openconfig-network-instance"`
	ΛCpVni     []ygot.Annotation                                                                                                                                                                 `path:"@cp-vni" ygotAnnotation:"true"`
	EgressVni  *uint32                                                                                                                                                                           `path:"egress-vni" module:"openconfig-network-instance"`
	ΛEgressVni []ygot.Annotation                                                                                                                                                                 `path:"@egress-vni" ygotAnnotation:"true"`
	State      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State `path:"state" module:"openconfig-network-instance"`
	ΛState     []ygot.Annotation                                                                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CpVni == nil {
		return nil, fmt.Errorf("nil value for key CpVni")
	}

	if t.EgressVni == nil {
		return nil, fmt.Errorf("nil value for key EgressVni")
	}

	return map[string]interface{}{
		"cp-vni":     *t.CpVni,
		"egress-vni": *t.EgressVni,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CpVni      *uint32           `path:"cp-vni" module:"openconfig-network-instance"`
	ΛCpVni     []ygot.Annotation `path:"@cp-vni" ygotAnnotation:"true"`
	EgressVni  *uint32           `path:"egress-vni" module:"openconfig-network-instance"`
	ΛEgressVni []ygot.Annotation `path:"@egress-vni" ygotAnnotation:"true"`
	RouterMac  *string           `path:"router-mac" module:"openconfig-network-instance"`
	ΛRouterMac []ygot.Annotation `path:"@router-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointPeers_EndpointPeer_VniPeerGroups_VniPeerGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis struct {
	ΛMetadata    []ygot.Annotation                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	EndpointVni  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni `path:"endpoint-vni" module:"openconfig-network-instance"`
	ΛEndpointVni []ygot.Annotation                                                                                                                                         `path:"@endpoint-vni" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) IsYANGGoStruct() {
}

// NewEndpointVni creates a new entry in the EndpointVni list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) NewEndpointVni(Vni uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndpointVni == nil {
		t.EndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni)
	}

	key := Vni

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndpointVni[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndpointVni", key)
	}

	t.EndpointVni[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni{
		Vni: &Vni,
	}

	return t.EndpointVni[key], nil
}

// RenameEndpointVni renames an entry in the list EndpointVni within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) RenameEndpointVni(oldK, newK uint32) error {
	if _, ok := t.EndpointVni[newK]; ok {
		return fmt.Errorf("key %v already exists in EndpointVni", newK)
	}

	e, ok := t.EndpointVni[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndpointVni", oldK)
	}
	e.Vni = &newK

	t.EndpointVni[newK] = e
	delete(t.EndpointVni, oldK)
	return nil
}

// GetOrCreateEndpointVniMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) GetOrCreateEndpointVniMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni {
	if t.EndpointVni == nil {
		t.EndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni)
	}
	return t.EndpointVni
}

// GetOrCreateEndpointVni retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) GetOrCreateEndpointVni(Vni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni {

	key := Vni

	if v, ok := t.EndpointVni[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpointVni(Vni)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpointVni got unexpected error: %v", err))
	}
	return v
}

// GetEndpointVni retrieves the value with the specified key from
// the EndpointVni map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) GetEndpointVni(Vni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni {

	if t == nil {
		return nil
	}

	key := Vni

	if lm, ok := t.EndpointVni[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpointVni deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) DeleteEndpointVni(Vni uint32) {
	key := Vni

	delete(t.EndpointVni, key)
}

// AppendEndpointVni appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni struct to the
// list EndpointVni of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) AppendEndpointVni(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) error {
	if v.Vni == nil {
		return fmt.Errorf("invalid nil key received for Vni")
	}

	key := *v.Vni

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndpointVni == nil {
		t.EndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni)
	}

	if _, ok := t.EndpointVni[key]; ok {
		return fmt.Errorf("duplicate key for list EndpointVni %v", key)
	}

	t.EndpointVni[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni struct {
	ΛMetadata []ygot.Annotation                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Ipv4      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4  `path:"ipv4" module:"openconfig-network-instance"`
	ΛIpv4     []ygot.Annotation                                                                                                                                    `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6  `path:"ipv6" module:"openconfig-network-instance"`
	ΛIpv6     []ygot.Annotation                                                                                                                                    `path:"@ipv6" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                    `path:"@state" ygotAnnotation:"true"`
	Vni       *uint32                                                                                                                                              `path:"vni" module:"openconfig-network-instance"`
	ΛVni      []ygot.Annotation                                                                                                                                    `path:"@vni" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetOrCreateIpv4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetOrCreateIpv6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6{}
	return t.Ipv6
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State{}
	return t.State
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetIpv4() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetIpv6() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vni == nil {
		return nil, fmt.Errorf("nil value for key Vni")
	}

	return map[string]interface{}{
		"vni": *t.Vni,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4 represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4 struct {
	ΛMetadata []ygot.Annotation                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Counters  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters []ygot.Annotation                                                                                                                                                  `path:"@counters" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BumDecapIrPkts         *uint64           `path:"bum-decap-ir-pkts" module:"openconfig-network-instance"`
	ΛBumDecapIrPkts        []ygot.Annotation `path:"@bum-decap-ir-pkts" ygotAnnotation:"true"`
	BumDecapMulticastPkts  *uint64           `path:"bum-decap-multicast-pkts" module:"openconfig-network-instance"`
	ΛBumDecapMulticastPkts []ygot.Annotation `path:"@bum-decap-multicast-pkts" ygotAnnotation:"true"`
	BumDecapPkts           *uint64           `path:"bum-decap-pkts" module:"openconfig-network-instance"`
	ΛBumDecapPkts          []ygot.Annotation `path:"@bum-decap-pkts" ygotAnnotation:"true"`
	BumEncapPkts           *uint64           `path:"bum-encap-pkts" module:"openconfig-network-instance"`
	ΛBumEncapPkts          []ygot.Annotation `path:"@bum-encap-pkts" ygotAnnotation:"true"`
	DropDecapPkts          *uint64           `path:"drop-decap-pkts" module:"openconfig-network-instance"`
	ΛDropDecapPkts         []ygot.Annotation `path:"@drop-decap-pkts" ygotAnnotation:"true"`
	ExceptDecapPkts        *uint64           `path:"except-decap-pkts" module:"openconfig-network-instance"`
	ΛExceptDecapPkts       []ygot.Annotation `path:"@except-decap-pkts" ygotAnnotation:"true"`
	TotalDecapBytes        *uint64           `path:"total-decap-bytes" module:"openconfig-network-instance"`
	ΛTotalDecapBytes       []ygot.Annotation `path:"@total-decap-bytes" ygotAnnotation:"true"`
	TotalDecapPkts         *uint64           `path:"total-decap-pkts" module:"openconfig-network-instance"`
	ΛTotalDecapPkts        []ygot.Annotation `path:"@total-decap-pkts" ygotAnnotation:"true"`
	TotalEncapBytes        *uint64           `path:"total-encap-bytes" module:"openconfig-network-instance"`
	ΛTotalEncapBytes       []ygot.Annotation `path:"@total-encap-bytes" ygotAnnotation:"true"`
	TotalEncapPkts         *uint64           `path:"total-encap-pkts" module:"openconfig-network-instance"`
	ΛTotalEncapPkts        []ygot.Annotation `path:"@total-encap-pkts" ygotAnnotation:"true"`
	UnicastDecapPkts       *uint64           `path:"unicast-decap-pkts" module:"openconfig-network-instance"`
	ΛUnicastDecapPkts      []ygot.Annotation `path:"@unicast-decap-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv4_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6 represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6 YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6 struct {
	ΛMetadata []ygot.Annotation                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Counters  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters []ygot.Annotation                                                                                                                                                  `path:"@counters" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BumDecapIrPkts         *uint64           `path:"bum-decap-ir-pkts" module:"openconfig-network-instance"`
	ΛBumDecapIrPkts        []ygot.Annotation `path:"@bum-decap-ir-pkts" ygotAnnotation:"true"`
	BumDecapMulticastPkts  *uint64           `path:"bum-decap-multicast-pkts" module:"openconfig-network-instance"`
	ΛBumDecapMulticastPkts []ygot.Annotation `path:"@bum-decap-multicast-pkts" ygotAnnotation:"true"`
	BumDecapPkts           *uint64           `path:"bum-decap-pkts" module:"openconfig-network-instance"`
	ΛBumDecapPkts          []ygot.Annotation `path:"@bum-decap-pkts" ygotAnnotation:"true"`
	BumEncapPkts           *uint64           `path:"bum-encap-pkts" module:"openconfig-network-instance"`
	ΛBumEncapPkts          []ygot.Annotation `path:"@bum-encap-pkts" ygotAnnotation:"true"`
	DropDecapPkts          *uint64           `path:"drop-decap-pkts" module:"openconfig-network-instance"`
	ΛDropDecapPkts         []ygot.Annotation `path:"@drop-decap-pkts" ygotAnnotation:"true"`
	ExceptDecapPkts        *uint64           `path:"except-decap-pkts" module:"openconfig-network-instance"`
	ΛExceptDecapPkts       []ygot.Annotation `path:"@except-decap-pkts" ygotAnnotation:"true"`
	TotalDecapBytes        *uint64           `path:"total-decap-bytes" module:"openconfig-network-instance"`
	ΛTotalDecapBytes       []ygot.Annotation `path:"@total-decap-bytes" ygotAnnotation:"true"`
	TotalDecapPkts         *uint64           `path:"total-decap-pkts" module:"openconfig-network-instance"`
	ΛTotalDecapPkts        []ygot.Annotation `path:"@total-decap-pkts" ygotAnnotation:"true"`
	TotalEncapBytes        *uint64           `path:"total-encap-bytes" module:"openconfig-network-instance"`
	ΛTotalEncapBytes       []ygot.Annotation `path:"@total-encap-bytes" ygotAnnotation:"true"`
	TotalEncapPkts         *uint64           `path:"total-encap-pkts" module:"openconfig-network-instance"`
	ΛTotalEncapPkts        []ygot.Annotation `path:"@total-encap-pkts" ygotAnnotation:"true"`
	UnicastDecapPkts       *uint64           `path:"unicast-decap-pkts" module:"openconfig-network-instance"`
	ΛUnicastDecapPkts      []ygot.Annotation `path:"@unicast-decap-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_Ipv6_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State struct {
	ΛMetadata                []ygot.Annotation                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	BridgeDomain             *uint32                                                                                                                                                                           `path:"bridge-domain" module:"openconfig-network-instance"`
	ΛBridgeDomain            []ygot.Annotation                                                                                                                                                                 `path:"@bridge-domain" ygotAnnotation:"true"`
	L3VrfName                *string                                                                                                                                                                           `path:"l3-vrf-name" module:"openconfig-network-instance"`
	ΛL3VrfName               []ygot.Annotation                                                                                                                                                                 `path:"@l3-vrf-name" ygotAnnotation:"true"`
	LearningMode             E_OpenconfigEvpnTypes_LearningMode                                                                                                                                                `path:"learning-mode" module:"openconfig-network-instance"`
	ΛLearningMode            []ygot.Annotation                                                                                                                                                                 `path:"@learning-mode" ygotAnnotation:"true"`
	MultidestinationTraffic  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_MultidestinationTraffic_Union `path:"multidestination-traffic" module:"openconfig-network-instance"`
	ΛMultidestinationTraffic []ygot.Annotation                                                                                                                                                                 `path:"@multidestination-traffic" ygotAnnotation:"true"`
	SviState                 E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_SviState                    `path:"svi-state" module:"openconfig-network-instance"`
	ΛSviState                []ygot.Annotation                                                                                                                                                                 `path:"@svi-state" ygotAnnotation:"true"`
	Vni                      *uint32                                                                                                                                                                           `path:"vni" module:"openconfig-network-instance"`
	ΛVni                     []ygot.Annotation                                                                                                                                                                 `path:"@vni" ygotAnnotation:"true"`
	VniState                 E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_VniState                    `path:"vni-state" module:"openconfig-network-instance"`
	ΛVniState                []ygot.Annotation                                                                                                                                                                 `path:"@vni-state" ygotAnnotation:"true"`
	VniType                  E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_VniType                     `path:"vni-type" module:"openconfig-network-instance"`
	ΛVniType                 []ygot.Annotation                                                                                                                                                                 `path:"@vni-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis struct {
	ΛMetadata         []ygot.Annotation                                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	LocalEndpointVni  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni `path:"local-endpoint-vni" module:"openconfig-network-instance"`
	ΛLocalEndpointVni []ygot.Annotation                                                                                                                                                   `path:"@local-endpoint-vni" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) IsYANGGoStruct() {
}

// NewLocalEndpointVni creates a new entry in the LocalEndpointVni list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) NewLocalEndpointVni(Vni uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalEndpointVni == nil {
		t.LocalEndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni)
	}

	key := Vni

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalEndpointVni[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalEndpointVni", key)
	}

	t.LocalEndpointVni[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni{
		Vni: &Vni,
	}

	return t.LocalEndpointVni[key], nil
}

// RenameLocalEndpointVni renames an entry in the list LocalEndpointVni within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) RenameLocalEndpointVni(oldK, newK uint32) error {
	if _, ok := t.LocalEndpointVni[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalEndpointVni", newK)
	}

	e, ok := t.LocalEndpointVni[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalEndpointVni", oldK)
	}
	e.Vni = &newK

	t.LocalEndpointVni[newK] = e
	delete(t.LocalEndpointVni, oldK)
	return nil
}

// GetOrCreateLocalEndpointVniMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) GetOrCreateLocalEndpointVniMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni {
	if t.LocalEndpointVni == nil {
		t.LocalEndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni)
	}
	return t.LocalEndpointVni
}

// GetOrCreateLocalEndpointVni retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) GetOrCreateLocalEndpointVni(Vni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni {

	key := Vni

	if v, ok := t.LocalEndpointVni[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalEndpointVni(Vni)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalEndpointVni got unexpected error: %v", err))
	}
	return v
}

// GetLocalEndpointVni retrieves the value with the specified key from
// the LocalEndpointVni map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) GetLocalEndpointVni(Vni uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni {

	if t == nil {
		return nil
	}

	key := Vni

	if lm, ok := t.LocalEndpointVni[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalEndpointVni deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) DeleteLocalEndpointVni(Vni uint32) {
	key := Vni

	delete(t.LocalEndpointVni, key)
}

// AppendLocalEndpointVni appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni struct to the
// list LocalEndpointVni of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) AppendLocalEndpointVni(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) error {
	if v.Vni == nil {
		return fmt.Errorf("invalid nil key received for Vni")
	}

	key := *v.Vni

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalEndpointVni == nil {
		t.LocalEndpointVni = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni)
	}

	if _, ok := t.LocalEndpointVni[key]; ok {
		return fmt.Errorf("duplicate key for list LocalEndpointVni %v", key)
	}

	t.LocalEndpointVni[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni struct {
	ΛMetadata []ygot.Annotation                                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                               `path:"@state" ygotAnnotation:"true"`
	Vni       *uint32                                                                                                                                                         `path:"vni" module:"openconfig-network-instance"`
	ΛVni      []ygot.Annotation                                                                                                                                               `path:"@vni" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Vni == nil {
		return nil, fmt.Errorf("nil value for key Vni")
	}

	return map[string]interface{}{
		"vni": *t.Vni,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	BridgeDomain  *uint32                                                                                                                                                       `path:"bridge-domain" module:"openconfig-network-instance"`
	ΛBridgeDomain []ygot.Annotation                                                                                                                                             `path:"@bridge-domain" ygotAnnotation:"true"`
	L3VrfName     *string                                                                                                                                                       `path:"l3-vrf-name" module:"openconfig-network-instance"`
	ΛL3VrfName    []ygot.Annotation                                                                                                                                             `path:"@l3-vrf-name" ygotAnnotation:"true"`
	Vni           *uint32                                                                                                                                                       `path:"vni" module:"openconfig-network-instance"`
	ΛVni          []ygot.Annotation                                                                                                                                             `path:"@vni" ygotAnnotation:"true"`
	VniType       E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_VniType `path:"vni-type" module:"openconfig-network-instance"`
	ΛVniType      []ygot.Annotation                                                                                                                                             `path:"@vni-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	BridgeDomain  *uint32                                                                                                                                                       `path:"bridge-domain" module:"openconfig-network-instance"`
	ΛBridgeDomain []ygot.Annotation                                                                                                                                             `path:"@bridge-domain" ygotAnnotation:"true"`
	L3VrfName     *string                                                                                                                                                       `path:"l3-vrf-name" module:"openconfig-network-instance"`
	ΛL3VrfName    []ygot.Annotation                                                                                                                                             `path:"@l3-vrf-name" ygotAnnotation:"true"`
	Vni           *uint32                                                                                                                                                       `path:"vni" module:"openconfig-network-instance"`
	ΛVni          []ygot.Annotation                                                                                                                                             `path:"@vni" ygotAnnotation:"true"`
	VniType       E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_EndpointVnis_EndpointVni_State_VniType `path:"vni-type" module:"openconfig-network-instance"`
	ΛVniType      []ygot.Annotation                                                                                                                                             `path:"@vni-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_LocalEndpointVnis_LocalEndpointVni_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description      *string           `path:"description" module:"openconfig-network-instance"`
	ΛDescription     []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Enabled          *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled         []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	SourceInterface  *string           `path:"source-interface" module:"openconfig-network-instance"`
	ΛSourceInterface []ygot.Annotation `path:"@source-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_Endpoints_Endpoint_Vxlan_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ConnectionPointId  *string           `path:"connection-point-id" module:"openconfig-network-instance"`
	ΛConnectionPointId []ygot.Annotation `path:"@connection-point-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_ConnectionPoints_ConnectionPoint_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation represents the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation struct {
	ΛMetadata []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config struct {
	ΛMetadata            []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	ControlWord          *bool                                                  `path:"control-word" module:"openconfig-network-instance"`
	ΛControlWord         []ygot.Annotation                                      `path:"@control-word" ygotAnnotation:"true"`
	EncapsulationType    E_OpenconfigNetworkInstanceTypes_ENCAPSULATION         `path:"encapsulation-type" module:"openconfig-network-instance"`
	ΛEncapsulationType   []ygot.Annotation                                      `path:"@encapsulation-type" ygotAnnotation:"true"`
	LabelAllocationMode  E_OpenconfigNetworkInstanceTypes_LABEL_ALLOCATION_MODE `path:"label-allocation-mode" module:"openconfig-network-instance"`
	ΛLabelAllocationMode []ygot.Annotation                                      `path:"@label-allocation-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State struct {
	ΛMetadata            []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	ControlWord          *bool                                                  `path:"control-word" module:"openconfig-network-instance"`
	ΛControlWord         []ygot.Annotation                                      `path:"@control-word" ygotAnnotation:"true"`
	EncapsulationType    E_OpenconfigNetworkInstanceTypes_ENCAPSULATION         `path:"encapsulation-type" module:"openconfig-network-instance"`
	ΛEncapsulationType   []ygot.Annotation                                      `path:"@encapsulation-type" ygotAnnotation:"true"`
	LabelAllocationMode  E_OpenconfigNetworkInstanceTypes_LABEL_ALLOCATION_MODE `path:"label-allocation-mode" module:"openconfig-network-instance"`
	ΛLabelAllocationMode []ygot.Annotation                                      `path:"@label-allocation-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Encapsulation_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn represents the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn struct {
	ΛMetadata      []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	EvpnInstances  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances `path:"evpn-instances" module:"openconfig-network-instance"`
	ΛEvpnInstances []ygot.Annotation                                                              `path:"@evpn-instances" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) IsYANGGoStruct() {}

// GetOrCreateEvpnInstances retrieves the value of the EvpnInstances field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) GetOrCreateEvpnInstances() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances {
	if t.EvpnInstances != nil {
		return t.EvpnInstances
	}
	t.EvpnInstances = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances{}
	return t.EvpnInstances
}

// GetEvpnInstances returns the value of the EvpnInstances struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn. If the receiver or the field EvpnInstances is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) GetEvpnInstances() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances {
	if t != nil && t.EvpnInstances != nil {
		return t.EvpnInstances
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances struct {
	ΛMetadata     []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	EvpnInstance  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance `path:"evpn-instance" module:"openconfig-network-instance"`
	ΛEvpnInstance []ygot.Annotation                                                                                      `path:"@evpn-instance" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) IsYANGGoStruct() {
}

// NewEvpnInstance creates a new entry in the EvpnInstance list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) NewEvpnInstance(Evi string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EvpnInstance == nil {
		t.EvpnInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance)
	}

	key := Evi

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EvpnInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EvpnInstance", key)
	}

	t.EvpnInstance[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance{
		Evi: &Evi,
	}

	return t.EvpnInstance[key], nil
}

// RenameEvpnInstance renames an entry in the list EvpnInstance within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) RenameEvpnInstance(oldK, newK string) error {
	if _, ok := t.EvpnInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in EvpnInstance", newK)
	}

	e, ok := t.EvpnInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EvpnInstance", oldK)
	}
	e.Evi = &newK

	t.EvpnInstance[newK] = e
	delete(t.EvpnInstance, oldK)
	return nil
}

// GetOrCreateEvpnInstanceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) GetOrCreateEvpnInstanceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance {
	if t.EvpnInstance == nil {
		t.EvpnInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance)
	}
	return t.EvpnInstance
}

// GetOrCreateEvpnInstance retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) GetOrCreateEvpnInstance(Evi string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance {

	key := Evi

	if v, ok := t.EvpnInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvpnInstance(Evi)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvpnInstance got unexpected error: %v", err))
	}
	return v
}

// GetEvpnInstance retrieves the value with the specified key from
// the EvpnInstance map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) GetEvpnInstance(Evi string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance {

	if t == nil {
		return nil
	}

	key := Evi

	if lm, ok := t.EvpnInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvpnInstance deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) DeleteEvpnInstance(Evi string) {
	key := Evi

	delete(t.EvpnInstance, key)
}

// AppendEvpnInstance appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance struct to the
// list EvpnInstance of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) AppendEvpnInstance(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) error {
	if v.Evi == nil {
		return fmt.Errorf("invalid nil key received for Evi")
	}

	key := *v.Evi

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EvpnInstance == nil {
		t.EvpnInstance = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance)
	}

	if _, ok := t.EvpnInstance[key]; ok {
		return fmt.Errorf("duplicate key for list EvpnInstance %v", key)
	}

	t.EvpnInstance[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance struct {
	ΛMetadata           []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config             `path:"config" module:"openconfig-network-instance"`
	ΛConfig             []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	Evi                 *string                                                                                                        `path:"evi" module:"openconfig-network-instance"`
	ΛEvi                []ygot.Annotation                                                                                              `path:"@evi" ygotAnnotation:"true"`
	ImportExportPolicy  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy `path:"import-export-policy" module:"openconfig-network-instance"`
	ΛImportExportPolicy []ygot.Annotation                                                                                              `path:"@import-export-policy" ygotAnnotation:"true"`
	Pbb                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb                `path:"pbb" module:"openconfig-network-instance"`
	ΛPbb                []ygot.Annotation                                                                                              `path:"@pbb" ygotAnnotation:"true"`
	State               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State              `path:"state" module:"openconfig-network-instance"`
	ΛState              []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
	Vxlan               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan              `path:"vxlan" module:"openconfig-network-instance"`
	ΛVxlan              []ygot.Annotation                                                                                              `path:"@vxlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config{}
	return t.Config
}

// GetOrCreateImportExportPolicy retrieves the value of the ImportExportPolicy field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetOrCreateImportExportPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy {
	if t.ImportExportPolicy != nil {
		return t.ImportExportPolicy
	}
	t.ImportExportPolicy = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy{}
	return t.ImportExportPolicy
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetOrCreatePbb() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb{}
	return t.Pbb
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State{}
	return t.State
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetOrCreateVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan{}
	return t.Vxlan
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetImportExportPolicy returns the value of the ImportExportPolicy struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance. If the receiver or the field ImportExportPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetImportExportPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy {
	if t != nil && t.ImportExportPolicy != nil {
		return t.ImportExportPolicy
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetPbb() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) GetVxlan() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Evi == nil {
		return nil, fmt.Errorf("nil value for key Evi")
	}

	return map[string]interface{}{
		"evi": *t.Evi,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config struct {
	ΛMetadata            []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	ControlWordEnabled   *bool                                                                                                                      `path:"control-word-enabled" module:"openconfig-network-instance"`
	ΛControlWordEnabled  []ygot.Annotation                                                                                                          `path:"@control-word-enabled" ygotAnnotation:"true"`
	EncapsulationType    E_OpenconfigNetworkInstanceTypes_ENCAPSULATION                                                                             `path:"encapsulation-type" module:"openconfig-network-instance"`
	ΛEncapsulationType   []ygot.Annotation                                                                                                          `path:"@encapsulation-type" ygotAnnotation:"true"`
	Evi                  *string                                                                                                                    `path:"evi" module:"openconfig-network-instance"`
	ΛEvi                 []ygot.Annotation                                                                                                          `path:"@evi" ygotAnnotation:"true"`
	LocalVpwsServiceId   *uint32                                                                                                                    `path:"local-vpws-service-id" module:"openconfig-network-instance"`
	ΛLocalVpwsServiceId  []ygot.Annotation                                                                                                          `path:"@local-vpws-service-id" ygotAnnotation:"true"`
	MulticastGroup       *string                                                                                                                    `path:"multicast-group" module:"openconfig-network-instance"`
	ΛMulticastGroup      []ygot.Annotation                                                                                                          `path:"@multicast-group" ygotAnnotation:"true"`
	MulticastMask        *string                                                                                                                    `path:"multicast-mask" module:"openconfig-network-instance"`
	ΛMulticastMask       []ygot.Annotation                                                                                                          `path:"@multicast-mask" ygotAnnotation:"true"`
	RemoteVpwsServiceId  *uint32                                                                                                                    `path:"remote-vpws-service-id" module:"openconfig-network-instance"`
	ΛRemoteVpwsServiceId []ygot.Annotation                                                                                                          `path:"@remote-vpws-service-id" ygotAnnotation:"true"`
	ReplicationMode      E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_ReplicationMode        `path:"replication-mode" module:"openconfig-network-instance"`
	ΛReplicationMode     []ygot.Annotation                                                                                                          `path:"@replication-mode" ygotAnnotation:"true"`
	RouteDistinguisher   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_RouteDistinguisher_Union `path:"route-distinguisher" module:"openconfig-network-instance"`
	ΛRouteDistinguisher  []ygot.Annotation                                                                                                          `path:"@route-distinguisher" ygotAnnotation:"true"`
	ServiceType          E_OpenconfigEvpnTypes_EVPN_TYPE                                                                                            `path:"service-type" module:"openconfig-network-instance"`
	ΛServiceType         []ygot.Annotation                                                                                                          `path:"@service-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config struct {
	ΛMetadata          []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	ExportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ExportRouteTarget_Union `path:"export-route-target" module:"openconfig-network-instance"`
	ΛExportRouteTarget []ygot.Annotation                                                                                                                              `path:"@export-route-target" ygotAnnotation:"true"`
	ImportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config_ImportRouteTarget_Union `path:"import-route-target" module:"openconfig-network-instance"`
	ΛImportRouteTarget []ygot.Annotation                                                                                                                              `path:"@import-route-target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State struct {
	ΛMetadata          []ygot.Annotation                                                                                                                             `path:"@" ygotAnnotation:"true"`
	ExportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ExportRouteTarget_Union `path:"export-route-target" module:"openconfig-network-instance"`
	ΛExportRouteTarget []ygot.Annotation                                                                                                                             `path:"@export-route-target" ygotAnnotation:"true"`
	ImportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State_ImportRouteTarget_Union `path:"import-route-target" module:"openconfig-network-instance"`
	ΛImportRouteTarget []ygot.Annotation                                                                                                                             `path:"@import-route-target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_ImportExportPolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb struct {
	ΛMetadata   []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	BComponent  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent `path:"b-component" module:"openconfig-network-instance"`
	ΛBComponent []ygot.Annotation                                                                                                     `path:"@b-component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) IsYANGGoStruct() {
}

// NewBComponent creates a new entry in the BComponent list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) NewBComponent(BComponentName string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BComponent == nil {
		t.BComponent = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent)
	}

	key := BComponentName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BComponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BComponent", key)
	}

	t.BComponent[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent{
		BComponentName: &BComponentName,
	}

	return t.BComponent[key], nil
}

// RenameBComponent renames an entry in the list BComponent within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) RenameBComponent(oldK, newK string) error {
	if _, ok := t.BComponent[newK]; ok {
		return fmt.Errorf("key %v already exists in BComponent", newK)
	}

	e, ok := t.BComponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BComponent", oldK)
	}
	e.BComponentName = &newK

	t.BComponent[newK] = e
	delete(t.BComponent, oldK)
	return nil
}

// GetOrCreateBComponentMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) GetOrCreateBComponentMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent {
	if t.BComponent == nil {
		t.BComponent = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent)
	}
	return t.BComponent
}

// GetOrCreateBComponent retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) GetOrCreateBComponent(BComponentName string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent {

	key := BComponentName

	if v, ok := t.BComponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBComponent(BComponentName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBComponent got unexpected error: %v", err))
	}
	return v
}

// GetBComponent retrieves the value with the specified key from
// the BComponent map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) GetBComponent(BComponentName string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent {

	if t == nil {
		return nil
	}

	key := BComponentName

	if lm, ok := t.BComponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteBComponent deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) DeleteBComponent(BComponentName string) {
	key := BComponentName

	delete(t.BComponent, key)
}

// AppendBComponent appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent struct to the
// list BComponent of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) AppendBComponent(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) error {
	if v.BComponentName == nil {
		return fmt.Errorf("invalid nil key received for BComponentName")
	}

	key := *v.BComponentName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BComponent == nil {
		t.BComponent = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent)
	}

	if _, ok := t.BComponent[key]; ok {
		return fmt.Errorf("duplicate key for list BComponent %v", key)
	}

	t.BComponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent struct {
	ΛMetadata       []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	BComponentName  *string                                                                                                                `path:"b-component-name" module:"openconfig-network-instance"`
	ΛBComponentName []ygot.Annotation                                                                                                      `path:"@b-component-name" ygotAnnotation:"true"`
	Config          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config      `path:"config" module:"openconfig-network-instance"`
	ΛConfig         []ygot.Annotation                                                                                                      `path:"@config" ygotAnnotation:"true"`
	IComponents     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents `path:"i-components" module:"openconfig-network-instance"`
	ΛIComponents    []ygot.Annotation                                                                                                      `path:"@i-components" ygotAnnotation:"true"`
	State           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State       `path:"state" module:"openconfig-network-instance"`
	ΛState          []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config{}
	return t.Config
}

// GetOrCreateIComponents retrieves the value of the IComponents field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetOrCreateIComponents() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents {
	if t.IComponents != nil {
		return t.IComponents
	}
	t.IComponents = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents{}
	return t.IComponents
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetIComponents returns the value of the IComponents struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent. If the receiver or the field IComponents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetIComponents() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents {
	if t != nil && t.IComponents != nil {
		return t.IComponents
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BComponentName == nil {
		return nil, fmt.Errorf("nil value for key BComponentName")
	}

	return map[string]interface{}{
		"b-component-name": *t.BComponentName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BComponentName  *string           `path:"b-component-name" module:"openconfig-network-instance"`
	ΛBComponentName []ygot.Annotation `path:"@b-component-name" ygotAnnotation:"true"`
	BackboneSrcMac  *string           `path:"backbone-src-mac" module:"openconfig-network-instance"`
	ΛBackboneSrcMac []ygot.Annotation `path:"@backbone-src-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents struct {
	ΛMetadata   []ygot.Annotation                                                                                                                            `path:"@" ygotAnnotation:"true"`
	IComponent  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent `path:"i-component" module:"openconfig-network-instance"`
	ΛIComponent []ygot.Annotation                                                                                                                            `path:"@i-component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) IsYANGGoStruct() {
}

// NewIComponent creates a new entry in the IComponent list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) NewIComponent(ISid uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IComponent == nil {
		t.IComponent = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent)
	}

	key := ISid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IComponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IComponent", key)
	}

	t.IComponent[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent{
		ISid: &ISid,
	}

	return t.IComponent[key], nil
}

// RenameIComponent renames an entry in the list IComponent within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) RenameIComponent(oldK, newK uint32) error {
	if _, ok := t.IComponent[newK]; ok {
		return fmt.Errorf("key %v already exists in IComponent", newK)
	}

	e, ok := t.IComponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IComponent", oldK)
	}
	e.ISid = &newK

	t.IComponent[newK] = e
	delete(t.IComponent, oldK)
	return nil
}

// GetOrCreateIComponentMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) GetOrCreateIComponentMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent {
	if t.IComponent == nil {
		t.IComponent = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent)
	}
	return t.IComponent
}

// GetOrCreateIComponent retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) GetOrCreateIComponent(ISid uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent {

	key := ISid

	if v, ok := t.IComponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIComponent(ISid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIComponent got unexpected error: %v", err))
	}
	return v
}

// GetIComponent retrieves the value with the specified key from
// the IComponent map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) GetIComponent(ISid uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent {

	if t == nil {
		return nil
	}

	key := ISid

	if lm, ok := t.IComponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteIComponent deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) DeleteIComponent(ISid uint32) {
	key := ISid

	delete(t.IComponent, key)
}

// AppendIComponent appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent struct to the
// list IComponent of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) AppendIComponent(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) error {
	if v.ISid == nil {
		return fmt.Errorf("invalid nil key received for ISid")
	}

	key := *v.ISid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IComponent == nil {
		t.IComponent = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent)
	}

	if _, ok := t.IComponent[key]; ok {
		return fmt.Errorf("duplicate key for list IComponent %v", key)
	}

	t.IComponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent struct {
	ΛMetadata []ygot.Annotation                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                        `path:"@config" ygotAnnotation:"true"`
	ISid      *uint32                                                                                                                                  `path:"i-sid" module:"openconfig-network-instance"`
	ΛISid     []ygot.Annotation                                                                                                                        `path:"@i-sid" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ISid == nil {
		return nil, fmt.Errorf("nil value for key ISid")
	}

	return map[string]interface{}{
		"i-sid": *t.ISid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ISid      *uint32           `path:"i-sid" module:"openconfig-network-instance"`
	ΛISid     []ygot.Annotation `path:"@i-sid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ISid      *uint32           `path:"i-sid" module:"openconfig-network-instance"`
	ΛISid     []ygot.Annotation `path:"@i-sid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_IComponents_IComponent_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BComponentName  *string           `path:"b-component-name" module:"openconfig-network-instance"`
	ΛBComponentName []ygot.Annotation `path:"@b-component-name" ygotAnnotation:"true"`
	BackboneSrcMac  *string           `path:"backbone-src-mac" module:"openconfig-network-instance"`
	ΛBackboneSrcMac []ygot.Annotation `path:"@backbone-src-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Pbb_BComponent_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State struct {
	ΛMetadata            []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	ControlWordEnabled   *bool                                                                                                                     `path:"control-word-enabled" module:"openconfig-network-instance"`
	ΛControlWordEnabled  []ygot.Annotation                                                                                                         `path:"@control-word-enabled" ygotAnnotation:"true"`
	EncapsulationType    E_OpenconfigNetworkInstanceTypes_ENCAPSULATION                                                                            `path:"encapsulation-type" module:"openconfig-network-instance"`
	ΛEncapsulationType   []ygot.Annotation                                                                                                         `path:"@encapsulation-type" ygotAnnotation:"true"`
	Evi                  *string                                                                                                                   `path:"evi" module:"openconfig-network-instance"`
	ΛEvi                 []ygot.Annotation                                                                                                         `path:"@evi" ygotAnnotation:"true"`
	LocalVpwsServiceId   *uint32                                                                                                                   `path:"local-vpws-service-id" module:"openconfig-network-instance"`
	ΛLocalVpwsServiceId  []ygot.Annotation                                                                                                         `path:"@local-vpws-service-id" ygotAnnotation:"true"`
	MulticastGroup       *string                                                                                                                   `path:"multicast-group" module:"openconfig-network-instance"`
	ΛMulticastGroup      []ygot.Annotation                                                                                                         `path:"@multicast-group" ygotAnnotation:"true"`
	MulticastMask        *string                                                                                                                   `path:"multicast-mask" module:"openconfig-network-instance"`
	ΛMulticastMask       []ygot.Annotation                                                                                                         `path:"@multicast-mask" ygotAnnotation:"true"`
	RemoteVpwsServiceId  *uint32                                                                                                                   `path:"remote-vpws-service-id" module:"openconfig-network-instance"`
	ΛRemoteVpwsServiceId []ygot.Annotation                                                                                                         `path:"@remote-vpws-service-id" ygotAnnotation:"true"`
	ReplicationMode      E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Config_ReplicationMode       `path:"replication-mode" module:"openconfig-network-instance"`
	ΛReplicationMode     []ygot.Annotation                                                                                                         `path:"@replication-mode" ygotAnnotation:"true"`
	RouteDistinguisher   OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State_RouteDistinguisher_Union `path:"route-distinguisher" module:"openconfig-network-instance"`
	ΛRouteDistinguisher  []ygot.Annotation                                                                                                         `path:"@route-distinguisher" ygotAnnotation:"true"`
	ServiceType          E_OpenconfigEvpnTypes_EVPN_TYPE                                                                                           `path:"service-type" module:"openconfig-network-instance"`
	ΛServiceType         []ygot.Annotation                                                                                                         `path:"@service-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan struct {
	ΛMetadata               []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	AnycastSourceInterface  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface `path:"anycast-source-interface" module:"openconfig-network-instance"`
	ΛAnycastSourceInterface []ygot.Annotation                                                                                                        `path:"@anycast-source-interface" ygotAnnotation:"true"`
	Config                  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config                 `path:"config" module:"openconfig-network-instance"`
	ΛConfig                 []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	State                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State                  `path:"state" module:"openconfig-network-instance"`
	ΛState                  []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) IsYANGGoStruct() {
}

// GetOrCreateAnycastSourceInterface retrieves the value of the AnycastSourceInterface field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetOrCreateAnycastSourceInterface() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface {
	if t.AnycastSourceInterface != nil {
		return t.AnycastSourceInterface
	}
	t.AnycastSourceInterface = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface{}
	return t.AnycastSourceInterface
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State{}
	return t.State
}

// GetAnycastSourceInterface returns the value of the AnycastSourceInterface struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan. If the receiver or the field AnycastSourceInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetAnycastSourceInterface() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface {
	if t != nil && t.AnycastSourceInterface != nil {
		return t.AnycastSourceInterface
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface struct {
	ΛMetadata []ygot.Annotation                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_AnycastSourceInterface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config struct {
	ΛMetadata                       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HostReachabilityBgp             *bool             `path:"host-reachability-bgp" module:"openconfig-network-instance"`
	ΛHostReachabilityBgp            []ygot.Annotation `path:"@host-reachability-bgp" ygotAnnotation:"true"`
	MulticastGroup                  *string           `path:"multicast-group" module:"openconfig-network-instance"`
	ΛMulticastGroup                 []ygot.Annotation `path:"@multicast-group" ygotAnnotation:"true"`
	MulticastMask                   *string           `path:"multicast-mask" module:"openconfig-network-instance"`
	ΛMulticastMask                  []ygot.Annotation `path:"@multicast-mask" ygotAnnotation:"true"`
	OverlayEndpoint                 *string           `path:"overlay-endpoint" module:"openconfig-network-instance"`
	ΛOverlayEndpoint                []ygot.Annotation `path:"@overlay-endpoint" ygotAnnotation:"true"`
	OverlayEndpointNetworkInstance  *string           `path:"overlay-endpoint-network-instance" module:"openconfig-network-instance"`
	ΛOverlayEndpointNetworkInstance []ygot.Annotation `path:"@overlay-endpoint-network-instance" ygotAnnotation:"true"`
	Vni                             *uint32           `path:"vni" module:"openconfig-network-instance"`
	ΛVni                            []ygot.Annotation `path:"@vni" ygotAnnotation:"true"`
	VniList                         []uint32          `path:"vni-list" module:"openconfig-network-instance"`
	ΛVniList                        []ygot.Annotation `path:"@vni-list" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State struct {
	ΛMetadata                       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HostReachabilityBgp             *bool             `path:"host-reachability-bgp" module:"openconfig-network-instance"`
	ΛHostReachabilityBgp            []ygot.Annotation `path:"@host-reachability-bgp" ygotAnnotation:"true"`
	MulticastGroup                  *string           `path:"multicast-group" module:"openconfig-network-instance"`
	ΛMulticastGroup                 []ygot.Annotation `path:"@multicast-group" ygotAnnotation:"true"`
	MulticastMask                   *string           `path:"multicast-mask" module:"openconfig-network-instance"`
	ΛMulticastMask                  []ygot.Annotation `path:"@multicast-mask" ygotAnnotation:"true"`
	OverlayEndpoint                 *string           `path:"overlay-endpoint" module:"openconfig-network-instance"`
	ΛOverlayEndpoint                []ygot.Annotation `path:"@overlay-endpoint" ygotAnnotation:"true"`
	OverlayEndpointNetworkInstance  *string           `path:"overlay-endpoint-network-instance" module:"openconfig-network-instance"`
	ΛOverlayEndpointNetworkInstance []ygot.Annotation `path:"@overlay-endpoint-network-instance" ygotAnnotation:"true"`
	Vni                             *uint32           `path:"vni" module:"openconfig-network-instance"`
	ΛVni                            []ygot.Annotation `path:"@vni" ygotAnnotation:"true"`
	VniList                         []uint32          `path:"vni-list" module:"openconfig-network-instance"`
	ΛVniList                        []ygot.Annotation `path:"@vni-list" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Evpn_EvpnInstances_EvpnInstance_Vxlan_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb represents the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb struct {
	ΛMetadata    []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	ArpProxy     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy    `path:"arp-proxy" module:"openconfig-network-instance"`
	ΛArpProxy    []ygot.Annotation                                                           `path:"@arp-proxy" ygotAnnotation:"true"`
	Config       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config      `path:"config" module:"openconfig-network-instance"`
	ΛConfig      []ygot.Annotation                                                           `path:"@config" ygotAnnotation:"true"`
	L2Rib        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib       `path:"l2rib" module:"openconfig-network-instance"`
	ΛL2Rib       []ygot.Annotation                                                           `path:"@l2rib" ygotAnnotation:"true"`
	MacMobility  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility `path:"mac-mobility" module:"openconfig-network-instance"`
	ΛMacMobility []ygot.Annotation                                                           `path:"@mac-mobility" ygotAnnotation:"true"`
	MacTable     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable    `path:"mac-table" module:"openconfig-network-instance"`
	ΛMacTable    []ygot.Annotation                                                           `path:"@mac-table" ygotAnnotation:"true"`
	NdProxy      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy     `path:"nd-proxy" module:"openconfig-network-instance"`
	ΛNdProxy     []ygot.Annotation                                                           `path:"@nd-proxy" ygotAnnotation:"true"`
	State        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State       `path:"state" module:"openconfig-network-instance"`
	ΛState       []ygot.Annotation                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) IsYANGGoStruct() {}

// GetOrCreateArpProxy retrieves the value of the ArpProxy field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateArpProxy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy {
	if t.ArpProxy != nil {
		return t.ArpProxy
	}
	t.ArpProxy = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy{}
	return t.ArpProxy
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config{}
	return t.Config
}

// GetOrCreateL2Rib retrieves the value of the L2Rib field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateL2Rib() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib {
	if t.L2Rib != nil {
		return t.L2Rib
	}
	t.L2Rib = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib{}
	return t.L2Rib
}

// GetOrCreateMacMobility retrieves the value of the MacMobility field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateMacMobility() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility {
	if t.MacMobility != nil {
		return t.MacMobility
	}
	t.MacMobility = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility{}
	return t.MacMobility
}

// GetOrCreateMacTable retrieves the value of the MacTable field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateMacTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable {
	if t.MacTable != nil {
		return t.MacTable
	}
	t.MacTable = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable{}
	return t.MacTable
}

// GetOrCreateNdProxy retrieves the value of the NdProxy field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateNdProxy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy {
	if t.NdProxy != nil {
		return t.NdProxy
	}
	t.NdProxy = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy{}
	return t.NdProxy
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State{}
	return t.State
}

// GetArpProxy returns the value of the ArpProxy struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field ArpProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetArpProxy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy {
	if t != nil && t.ArpProxy != nil {
		return t.ArpProxy
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetL2Rib returns the value of the L2Rib struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field L2Rib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetL2Rib() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib {
	if t != nil && t.L2Rib != nil {
		return t.L2Rib
	}
	return nil
}

// GetMacMobility returns the value of the MacMobility struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field MacMobility is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetMacMobility() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility {
	if t != nil && t.MacMobility != nil {
		return t.MacMobility
	}
	return nil
}

// GetMacTable returns the value of the MacTable struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field MacTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetMacTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable {
	if t != nil && t.MacTable != nil {
		return t.MacTable
	}
	return nil
}

// GetNdProxy returns the value of the NdProxy struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field NdProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetNdProxy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy {
	if t != nil && t.NdProxy != nil {
		return t.NdProxy
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ArpSuppression                *bool             `path:"arp-suppression" module:"openconfig-network-instance"`
	ΛArpSuppression               []ygot.Annotation `path:"@arp-suppression" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	Enable                        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ArpSuppression                *bool             `path:"arp-suppression" module:"openconfig-network-instance"`
	ΛArpSuppression               []ygot.Annotation `path:"@arp-suppression" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	Enable                        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_ArpProxy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config struct {
	ΛMetadata                      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AnycastGatewayMac              *string           `path:"anycast-gateway-mac" module:"openconfig-network-instance"`
	ΛAnycastGatewayMac             []ygot.Annotation `path:"@anycast-gateway-mac" ygotAnnotation:"true"`
	FloodUnknownUnicastSupression  *bool             `path:"flood-unknown-unicast-supression" module:"openconfig-network-instance"`
	ΛFloodUnknownUnicastSupression []ygot.Annotation `path:"@flood-unknown-unicast-supression" ygotAnnotation:"true"`
	MacAgingTime                   *uint16           `path:"mac-aging-time" module:"openconfig-network-instance"`
	ΛMacAgingTime                  []ygot.Annotation `path:"@mac-aging-time" ygotAnnotation:"true"`
	MacLearning                    *bool             `path:"mac-learning" module:"openconfig-network-instance"`
	ΛMacLearning                   []ygot.Annotation `path:"@mac-learning" ygotAnnotation:"true"`
	MaximumEntries                 *uint16           `path:"maximum-entries" module:"openconfig-network-instance"`
	ΛMaximumEntries                []ygot.Annotation `path:"@maximum-entries" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib struct {
	ΛMetadata   []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	MacIpTable  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable `path:"mac-ip-table" module:"openconfig-network-instance"`
	ΛMacIpTable []ygot.Annotation                                                                `path:"@mac-ip-table" ygotAnnotation:"true"`
	MacTable    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable   `path:"mac-table" module:"openconfig-network-instance"`
	ΛMacTable   []ygot.Annotation                                                                `path:"@mac-table" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) IsYANGGoStruct() {}

// GetOrCreateMacIpTable retrieves the value of the MacIpTable field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) GetOrCreateMacIpTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable {
	if t.MacIpTable != nil {
		return t.MacIpTable
	}
	t.MacIpTable = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable{}
	return t.MacIpTable
}

// GetOrCreateMacTable retrieves the value of the MacTable field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) GetOrCreateMacTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable {
	if t.MacTable != nil {
		return t.MacTable
	}
	t.MacTable = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable{}
	return t.MacTable
}

// GetMacIpTable returns the value of the MacIpTable struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib. If the receiver or the field MacIpTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) GetMacIpTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable {
	if t != nil && t.MacIpTable != nil {
		return t.MacIpTable
	}
	return nil
}

// GetMacTable returns the value of the MacTable struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib. If the receiver or the field MacTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) GetMacTable() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable {
	if t != nil && t.MacTable != nil {
		return t.MacTable
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable struct {
	ΛMetadata      []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	Entries        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries       `path:"entries" module:"openconfig-network-instance"`
	ΛEntries       []ygot.Annotation                                                                              `path:"@entries" ygotAnnotation:"true"`
	NextHopGroups  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups `path:"next-hop-groups" module:"openconfig-network-instance"`
	ΛNextHopGroups []ygot.Annotation                                                                              `path:"@next-hop-groups" ygotAnnotation:"true"`
	NextHops       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops      `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops      []ygot.Annotation                                                                              `path:"@next-hops" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) IsYANGGoStruct() {
}

// GetOrCreateEntries retrieves the value of the Entries field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetOrCreateEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries {
	if t.Entries != nil {
		return t.Entries
	}
	t.Entries = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries{}
	return t.Entries
}

// GetOrCreateNextHopGroups retrieves the value of the NextHopGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetOrCreateNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups {
	if t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	t.NextHopGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups{}
	return t.NextHopGroups
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops{}
	return t.NextHops
}

// GetEntries returns the value of the Entries struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable. If the receiver or the field Entries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries {
	if t != nil && t.Entries != nil {
		return t.Entries
	}
	return nil
}

// GetNextHopGroups returns the value of the NextHopGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable. If the receiver or the field NextHopGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups {
	if t != nil && t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Entry     map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry `path:"entry" module:"openconfig-network-instance"`
	ΛEntry    []ygot.Annotation                                                                                                                                                                                    `path:"@entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key represents the key for list Entry of element /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key struct {
	MacAddress string `path:"mac-address"`
	HostIp     string `path:"host-ip"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"mac-address": t.MacAddress,
		"host-ip":     t.HostIp,
	}, nil
}

// NewEntry creates a new entry in the Entry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) NewEntry(MacAddress string, HostIp string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		HostIp:     HostIp,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry{
		MacAddress: &MacAddress,
		HostIp:     &HostIp,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) RenameEntry(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.MacAddress = &newK.MacAddress
	e.HostIp = &newK.HostIp

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) GetOrCreateEntryMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry {
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry)
	}
	return t.Entry
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) GetOrCreateEntry(MacAddress string, HostIp string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		HostIp:     HostIp,
	}

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(MacAddress, HostIp)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) GetEntry(MacAddress string, HostIp string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		HostIp:     HostIp,
	}

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) DeleteEntry(MacAddress string, HostIp string) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		HostIp:     HostIp,
	}

	delete(t.Entry, key)
}

// AppendEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry struct to the
// list Entry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) AppendEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key for MacAddress")
	}

	if v.HostIp == nil {
		return fmt.Errorf("invalid nil key for HostIp")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key{
		MacAddress: *v.MacAddress,
		HostIp:     *v.HostIp,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry struct {
	ΛMetadata   []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	HostIp      *string                                                                                                  `path:"host-ip" module:"openconfig-network-instance"`
	ΛHostIp     []ygot.Annotation                                                                                        `path:"@host-ip" ygotAnnotation:"true"`
	MacAddress  *string                                                                                                  `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation                                                                                        `path:"@mac-address" ygotAnnotation:"true"`
	Producers   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers `path:"producers" module:"openconfig-network-instance"`
	ΛProducers  []ygot.Annotation                                                                                        `path:"@producers" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State     `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) IsYANGGoStruct() {
}

// GetOrCreateProducers retrieves the value of the Producers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) GetOrCreateProducers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers {
	if t.Producers != nil {
		return t.Producers
	}
	t.Producers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers{}
	return t.Producers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State{}
	return t.State
}

// GetProducers returns the value of the Producers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry. If the receiver or the field Producers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) GetProducers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers {
	if t != nil && t.Producers != nil {
		return t.Producers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostIp == nil {
		return nil, fmt.Errorf("nil value for key HostIp")
	}

	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"host-ip":     *t.HostIp,
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Producer  map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer `path:"producer" module:"openconfig-network-instance"`
	ΛProducer []ygot.Annotation                                                                                                                                                                                                                                       `path:"@producer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) IsYANGGoStruct() {
}

// NewProducer creates a new entry in the Producer list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) NewProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer)
	}

	key := Producer

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Producer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Producer", key)
	}

	t.Producer[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer{
		Producer: Producer,
	}

	return t.Producer[key], nil
}

// RenameProducer renames an entry in the list Producer within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) RenameProducer(oldK, newK E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) error {
	if _, ok := t.Producer[newK]; ok {
		return fmt.Errorf("key %v already exists in Producer", newK)
	}

	e, ok := t.Producer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Producer", oldK)
	}
	e.Producer = newK

	t.Producer[newK] = e
	delete(t.Producer, oldK)
	return nil
}

// GetOrCreateProducerMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) GetOrCreateProducerMap() map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer {
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer)
	}
	return t.Producer
}

// GetOrCreateProducer retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) GetOrCreateProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer {

	key := Producer

	if v, ok := t.Producer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProducer(Producer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProducer got unexpected error: %v", err))
	}
	return v
}

// GetProducer retrieves the value with the specified key from
// the Producer map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) GetProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer {

	if t == nil {
		return nil
	}

	key := Producer

	if lm, ok := t.Producer[key]; ok {
		return lm
	}
	return nil
}

// DeleteProducer deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) DeleteProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) {
	key := Producer

	delete(t.Producer, key)
}

// AppendProducer appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer struct to the
// list Producer of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) AppendProducer(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) error {
	key := v.Producer

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer)
	}

	if _, ok := t.Producer[key]; ok {
		return fmt.Errorf("duplicate key for list Producer %v", key)
	}

	t.Producer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer struct {
	ΛMetadata []ygot.Annotation                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Producer  E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer `path:"producer" module:"openconfig-network-instance"`
	ΛProducer []ygot.Annotation                                                                                                                 `path:"@producer" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State           `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"producer": t.Producer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Esi            *string                                                                                                                                `path:"esi" module:"openconfig-network-instance"`
	ΛEsi           []ygot.Annotation                                                                                                                      `path:"@esi" ygotAnnotation:"true"`
	MobilityState  E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_MobilityState `path:"mobility-state" module:"openconfig-network-instance"`
	ΛMobilityState []ygot.Annotation                                                                                                                      `path:"@mobility-state" ygotAnnotation:"true"`
	NextHop        *uint64                                                                                                                                `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                                      `path:"@next-hop" ygotAnnotation:"true"`
	NextHopGroup   []uint64                                                                                                                               `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup  []ygot.Annotation                                                                                                                      `path:"@next-hop-group" ygotAnnotation:"true"`
	Producer       E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer      `path:"producer" module:"openconfig-network-instance"`
	ΛProducer      []ygot.Annotation                                                                                                                      `path:"@producer" ygotAnnotation:"true"`
	SeqNumber      *uint32                                                                                                                                `path:"seq-number" module:"openconfig-network-instance"`
	ΛSeqNumber     []ygot.Annotation                                                                                                                      `path:"@seq-number" ygotAnnotation:"true"`
	Sticky         *bool                                                                                                                                  `path:"sticky" module:"openconfig-network-instance"`
	ΛSticky        []ygot.Annotation                                                                                                                      `path:"@sticky" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Evi         *uint32           `path:"evi" module:"openconfig-network-instance"`
	ΛEvi        []ygot.Annotation `path:"@evi" ygotAnnotation:"true"`
	HostIp      *string           `path:"host-ip" module:"openconfig-network-instance"`
	ΛHostIp     []ygot.Annotation `path:"@host-ip" ygotAnnotation:"true"`
	L2Vni       *uint32           `path:"l2-vni" module:"openconfig-network-instance"`
	ΛL2Vni      []ygot.Annotation `path:"@l2-vni" ygotAnnotation:"true"`
	L3Vni       *uint32           `path:"l3-vni" module:"openconfig-network-instance"`
	ΛL3Vni      []ygot.Annotation `path:"@l3-vni" ygotAnnotation:"true"`
	MacAddress  *string           `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation `path:"@mac-address" ygotAnnotation:"true"`
	Vlan        *uint16           `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan       []ygot.Annotation `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups struct {
	ΛMetadata     []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	NextHopGroup  map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup []ygot.Annotation                                                                                                      `path:"@next-hop-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) IsYANGGoStruct() {
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) NewNextHopGroup(Id uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup{
		Id: &Id,
	}

	return t.NextHopGroup[key], nil
}

// RenameNextHopGroup renames an entry in the list NextHopGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) RenameNextHopGroup(oldK, newK uint64) error {
	if _, ok := t.NextHopGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHopGroup", newK)
	}

	e, ok := t.NextHopGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHopGroup", oldK)
	}
	e.Id = &newK

	t.NextHopGroup[newK] = e
	delete(t.NextHopGroup, oldK)
	return nil
}

// GetOrCreateNextHopGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) GetOrCreateNextHopGroupMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup {
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup)
	}
	return t.NextHopGroup
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) GetOrCreateNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup {

	key := Id

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) GetNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) DeleteNextHopGroup(Id uint64) {
	key := Id

	delete(t.NextHopGroup, key)
}

// AppendNextHopGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup struct to the
// list NextHopGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) AppendNextHopGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup)
	}

	if _, ok := t.NextHopGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NextHopGroup %v", key)
	}

	t.NextHopGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Id        *uint64                                                                                                              `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                    `path:"@id" ygotAnnotation:"true"`
	NextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops []ygot.Annotation                                                                                                    `path:"@next-hops" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State    `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) IsYANGGoStruct() {
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops{}
	return t.NextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State{}
	return t.State
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                                       `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                                       `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                                            `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                  `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Index     *uint64           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State struct {
	ΛMetadata []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Esi       *string                                                                                                                 `path:"esi" module:"openconfig-network-instance"`
	ΛEsi      []ygot.Annotation                                                                                                       `path:"@esi" ygotAnnotation:"true"`
	Id        *uint64                                                                                                                 `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                       `path:"@id" ygotAnnotation:"true"`
	Type      E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State_Type `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                       `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                            `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                 `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                       `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Esi           *string           `path:"esi" module:"openconfig-network-instance"`
	ΛEsi          []ygot.Annotation `path:"@esi" ygotAnnotation:"true"`
	Index         *uint64           `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Label         *uint32           `path:"label" module:"openconfig-network-instance"`
	ΛLabel        []ygot.Annotation `path:"@label" ygotAnnotation:"true"`
	PeerIp        *string           `path:"peer-ip" module:"openconfig-network-instance"`
	ΛPeerIp       []ygot.Annotation `path:"@peer-ip" ygotAnnotation:"true"`
	Resolved      *bool             `path:"resolved" module:"openconfig-network-instance"`
	ΛResolved     []ygot.Annotation `path:"@resolved" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable struct {
	ΛMetadata      []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Entries        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries       `path:"entries" module:"openconfig-network-instance"`
	ΛEntries       []ygot.Annotation                                                                            `path:"@entries" ygotAnnotation:"true"`
	NextHopGroups  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups `path:"next-hop-groups" module:"openconfig-network-instance"`
	ΛNextHopGroups []ygot.Annotation                                                                            `path:"@next-hop-groups" ygotAnnotation:"true"`
	NextHops       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops      `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops      []ygot.Annotation                                                                            `path:"@next-hops" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) IsYANGGoStruct() {
}

// GetOrCreateEntries retrieves the value of the Entries field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetOrCreateEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries {
	if t.Entries != nil {
		return t.Entries
	}
	t.Entries = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries{}
	return t.Entries
}

// GetOrCreateNextHopGroups retrieves the value of the NextHopGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetOrCreateNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups {
	if t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	t.NextHopGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups{}
	return t.NextHopGroups
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops{}
	return t.NextHops
}

// GetEntries returns the value of the Entries struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable. If the receiver or the field Entries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries {
	if t != nil && t.Entries != nil {
		return t.Entries
	}
	return nil
}

// GetNextHopGroups returns the value of the NextHopGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable. If the receiver or the field NextHopGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetNextHopGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups {
	if t != nil && t.NextHopGroups != nil {
		return t.NextHopGroups
	}
	return nil
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries struct {
	ΛMetadata []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Entry     map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry `path:"entry" module:"openconfig-network-instance"`
	ΛEntry    []ygot.Annotation                                                                                       `path:"@entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) NewEntry(MacAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry{
		MacAddress: &MacAddress,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.MacAddress = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) GetOrCreateEntryMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry {
	if t.Entry == nil {
		t.Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry)
	}
	return t.Entry
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) GetOrCreateEntry(MacAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry {

	key := MacAddress

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) GetEntry(MacAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) DeleteEntry(MacAddress string) {
	key := MacAddress

	delete(t.Entry, key)
}

// AppendEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry struct to the
// list Entry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) AppendEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry struct {
	ΛMetadata   []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	MacAddress  *string                                                                                                `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation                                                                                      `path:"@mac-address" ygotAnnotation:"true"`
	Producers   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers `path:"producers" module:"openconfig-network-instance"`
	ΛProducers  []ygot.Annotation                                                                                      `path:"@producers" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State     `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) IsYANGGoStruct() {
}

// GetOrCreateProducers retrieves the value of the Producers field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) GetOrCreateProducers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers {
	if t.Producers != nil {
		return t.Producers
	}
	t.Producers = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers{}
	return t.Producers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State{}
	return t.State
}

// GetProducers returns the value of the Producers struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry. If the receiver or the field Producers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) GetProducers() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers {
	if t != nil && t.Producers != nil {
		return t.Producers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Producer  map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer `path:"producer" module:"openconfig-network-instance"`
	ΛProducer []ygot.Annotation                                                                                                                                                                                                                                     `path:"@producer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) IsYANGGoStruct() {
}

// NewProducer creates a new entry in the Producer list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) NewProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer)
	}

	key := Producer

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Producer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Producer", key)
	}

	t.Producer[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer{
		Producer: Producer,
	}

	return t.Producer[key], nil
}

// RenameProducer renames an entry in the list Producer within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) RenameProducer(oldK, newK E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) error {
	if _, ok := t.Producer[newK]; ok {
		return fmt.Errorf("key %v already exists in Producer", newK)
	}

	e, ok := t.Producer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Producer", oldK)
	}
	e.Producer = newK

	t.Producer[newK] = e
	delete(t.Producer, oldK)
	return nil
}

// GetOrCreateProducerMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) GetOrCreateProducerMap() map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer {
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer)
	}
	return t.Producer
}

// GetOrCreateProducer retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) GetOrCreateProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer {

	key := Producer

	if v, ok := t.Producer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProducer(Producer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProducer got unexpected error: %v", err))
	}
	return v
}

// GetProducer retrieves the value with the specified key from
// the Producer map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) GetProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer {

	if t == nil {
		return nil
	}

	key := Producer

	if lm, ok := t.Producer[key]; ok {
		return lm
	}
	return nil
}

// DeleteProducer deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) DeleteProducer(Producer E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer) {
	key := Producer

	delete(t.Producer, key)
}

// AppendProducer appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer struct to the
// list Producer of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) AppendProducer(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) error {
	key := v.Producer

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Producer == nil {
		t.Producer = make(map[E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer)
	}

	if _, ok := t.Producer[key]; ok {
		return fmt.Errorf("duplicate key for list Producer %v", key)
	}

	t.Producer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer struct {
	ΛMetadata []ygot.Annotation                                                                                                                 `path:"@" ygotAnnotation:"true"`
	Producer  E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer `path:"producer" module:"openconfig-network-instance"`
	ΛProducer []ygot.Annotation                                                                                                                 `path:"@producer" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State             `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"producer": t.Producer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State struct {
	ΛMetadata         []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	DerivedFromMacIp  *bool                                                                                                                                  `path:"derived-from-mac-ip" module:"openconfig-network-instance"`
	ΛDerivedFromMacIp []ygot.Annotation                                                                                                                      `path:"@derived-from-mac-ip" ygotAnnotation:"true"`
	DirectlyReceived  *bool                                                                                                                                  `path:"directly-received" module:"openconfig-network-instance"`
	ΛDirectlyReceived []ygot.Annotation                                                                                                                      `path:"@directly-received" ygotAnnotation:"true"`
	Esi               *string                                                                                                                                `path:"esi" module:"openconfig-network-instance"`
	ΛEsi              []ygot.Annotation                                                                                                                      `path:"@esi" ygotAnnotation:"true"`
	MobilityState     E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_MobilityState `path:"mobility-state" module:"openconfig-network-instance"`
	ΛMobilityState    []ygot.Annotation                                                                                                                      `path:"@mobility-state" ygotAnnotation:"true"`
	NextHop           *uint64                                                                                                                                `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop          []ygot.Annotation                                                                                                                      `path:"@next-hop" ygotAnnotation:"true"`
	NextHopGroup      []uint64                                                                                                                               `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup     []ygot.Annotation                                                                                                                      `path:"@next-hop-group" ygotAnnotation:"true"`
	Producer          E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_Entries_Entry_Producers_Producer_State_Producer      `path:"producer" module:"openconfig-network-instance"`
	ΛProducer         []ygot.Annotation                                                                                                                      `path:"@producer" ygotAnnotation:"true"`
	SeqNumber         *uint32                                                                                                                                `path:"seq-number" module:"openconfig-network-instance"`
	ΛSeqNumber        []ygot.Annotation                                                                                                                      `path:"@seq-number" ygotAnnotation:"true"`
	Sticky            *bool                                                                                                                                  `path:"sticky" module:"openconfig-network-instance"`
	ΛSticky           []ygot.Annotation                                                                                                                      `path:"@sticky" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_Producers_Producer_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Evi         *uint32           `path:"evi" module:"openconfig-network-instance"`
	ΛEvi        []ygot.Annotation `path:"@evi" ygotAnnotation:"true"`
	L2Vni       *uint32           `path:"l2-vni" module:"openconfig-network-instance"`
	ΛL2Vni      []ygot.Annotation `path:"@l2-vni" ygotAnnotation:"true"`
	MacAddress  *string           `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation `path:"@mac-address" ygotAnnotation:"true"`
	Vlan        *uint16           `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan       []ygot.Annotation `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_Entries_Entry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups struct {
	ΛMetadata     []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	NextHopGroup  map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup `path:"next-hop-group" module:"openconfig-network-instance"`
	ΛNextHopGroup []ygot.Annotation                                                                                                    `path:"@next-hop-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) IsYANGGoStruct() {
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) NewNextHopGroup(Id uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup{
		Id: &Id,
	}

	return t.NextHopGroup[key], nil
}

// RenameNextHopGroup renames an entry in the list NextHopGroup within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) RenameNextHopGroup(oldK, newK uint64) error {
	if _, ok := t.NextHopGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHopGroup", newK)
	}

	e, ok := t.NextHopGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHopGroup", oldK)
	}
	e.Id = &newK

	t.NextHopGroup[newK] = e
	delete(t.NextHopGroup, oldK)
	return nil
}

// GetOrCreateNextHopGroupMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) GetOrCreateNextHopGroupMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup {
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup)
	}
	return t.NextHopGroup
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) GetOrCreateNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup {

	key := Id

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) GetNextHopGroup(Id uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) DeleteNextHopGroup(Id uint64) {
	key := Id

	delete(t.NextHopGroup, key)
}

// AppendNextHopGroup appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup struct to the
// list NextHopGroup of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) AppendNextHopGroup(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup)
	}

	if _, ok := t.NextHopGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NextHopGroup %v", key)
	}

	t.NextHopGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup struct {
	ΛMetadata []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	Id        *uint64                                                                                                            `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                  `path:"@id" ygotAnnotation:"true"`
	NextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops `path:"next-hops" module:"openconfig-network-instance"`
	ΛNextHops []ygot.Annotation                                                                                                  `path:"@next-hops" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State    `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) IsYANGGoStruct() {
}

// GetOrCreateNextHops retrieves the value of the NextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) GetOrCreateNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops {
	if t.NextHops != nil {
		return t.NextHops
	}
	t.NextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops{}
	return t.NextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State{}
	return t.State
}

// GetNextHops returns the value of the NextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup. If the receiver or the field NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) GetNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops {
	if t != nil && t.NextHops != nil {
		return t.NextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                                                     `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                                                          `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Index     *uint64           `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State struct {
	ΛMetadata []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Esi       *string                                                                                                                 `path:"esi" module:"openconfig-network-instance"`
	ΛEsi      []ygot.Annotation                                                                                                       `path:"@esi" ygotAnnotation:"true"`
	Id        *uint64                                                                                                                 `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                                                       `path:"@id" ygotAnnotation:"true"`
	Type      E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroups_NextHopGroup_State_Type `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                       `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroups_NextHopGroup_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops struct {
	ΛMetadata []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	NextHop   map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop  []ygot.Annotation                                                                                          `path:"@next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) IsYANGGoStruct() {
}

// NewNextHop creates a new entry in the NextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) NewNextHop(Index uint64) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) GetOrCreateNextHopMap() map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop {
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop)
	}
	return t.NextHop
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) GetOrCreateNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) GetNextHop(Index uint64) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop struct to the
// list NextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) AppendNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop struct {
	ΛMetadata []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                                               `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                     `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Esi           *string           `path:"esi" module:"openconfig-network-instance"`
	ΛEsi          []ygot.Annotation `path:"@esi" ygotAnnotation:"true"`
	Index         *uint64           `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Label         *uint32           `path:"label" module:"openconfig-network-instance"`
	ΛLabel        []ygot.Annotation `path:"@label" ygotAnnotation:"true"`
	PeerIp        *string           `path:"peer-ip" module:"openconfig-network-instance"`
	ΛPeerIp       []ygot.Annotation `path:"@peer-ip" ygotAnnotation:"true"`
	Resolved      *bool             `path:"resolved" module:"openconfig-network-instance"`
	ΛResolved     []ygot.Annotation `path:"@resolved" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_L2Rib_MacTable_NextHops_NextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
	MacMobility                   *bool             `path:"mac-mobility" module:"openconfig-network-instance"`
	ΛMacMobility                  []ygot.Annotation `path:"@mac-mobility" ygotAnnotation:"true"`
	MacMobilityThreshold          *uint8            `path:"mac-mobility-threshold" module:"openconfig-network-instance"`
	ΛMacMobilityThreshold         []ygot.Annotation `path:"@mac-mobility-threshold" ygotAnnotation:"true"`
	MacMobilityWindow             *uint16           `path:"mac-mobility-window" module:"openconfig-network-instance"`
	ΛMacMobilityWindow            []ygot.Annotation `path:"@mac-mobility-window" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
	MacMobility                   *bool             `path:"mac-mobility" module:"openconfig-network-instance"`
	ΛMacMobility                  []ygot.Annotation `path:"@mac-mobility" ygotAnnotation:"true"`
	MacMobilityThreshold          *uint8            `path:"mac-mobility-threshold" module:"openconfig-network-instance"`
	ΛMacMobilityThreshold         []ygot.Annotation `path:"@mac-mobility-threshold" ygotAnnotation:"true"`
	MacMobilityWindow             *uint16           `path:"mac-mobility-window" module:"openconfig-network-instance"`
	ΛMacMobilityWindow            []ygot.Annotation `path:"@mac-mobility-window" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacMobility_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable struct {
	ΛMetadata []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Entries   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries `path:"entries" module:"openconfig-network-instance"`
	ΛEntries  []ygot.Annotation                                                                `path:"@entries" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) IsYANGGoStruct() {}

// GetOrCreateEntries retrieves the value of the Entries field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) GetOrCreateEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries {
	if t.Entries != nil {
		return t.Entries
	}
	t.Entries = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries{}
	return t.Entries
}

// GetEntries returns the value of the Entries struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable. If the receiver or the field Entries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) GetEntries() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries {
	if t != nil && t.Entries != nil {
		return t.Entries
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Entry     map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry `path:"entry" module:"openconfig-network-instance"`
	ΛEntry    []ygot.Annotation                                                                                                                                                                    `path:"@entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key represents the key for list Entry of element /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key struct {
	MacAddress string `path:"mac-address"`
	Vlan       uint16 `path:"vlan"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"mac-address": t.MacAddress,
		"vlan":        t.Vlan,
	}, nil
}

// NewEntry creates a new entry in the Entry list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) NewEntry(MacAddress string, Vlan uint16) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		Vlan:       Vlan,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry{
		MacAddress: &MacAddress,
		Vlan:       &Vlan,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) RenameEntry(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.MacAddress = &newK.MacAddress
	e.Vlan = &newK.Vlan

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntryMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) GetOrCreateEntryMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry {
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry)
	}
	return t.Entry
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) GetOrCreateEntry(MacAddress string, Vlan uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		Vlan:       Vlan,
	}

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(MacAddress, Vlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) GetEntry(MacAddress string, Vlan uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		Vlan:       Vlan,
	}

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) DeleteEntry(MacAddress string, Vlan uint16) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key{
		MacAddress: MacAddress,
		Vlan:       Vlan,
	}

	delete(t.Entry, key)
}

// AppendEntry appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry struct to the
// list Entry of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) AppendEntry(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key for MacAddress")
	}

	if v.Vlan == nil {
		return fmt.Errorf("invalid nil key for Vlan")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key{
		MacAddress: *v.MacAddress,
		Vlan:       *v.Vlan,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry struct {
	ΛMetadata   []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config    `path:"config" module:"openconfig-network-instance"`
	ΛConfig     []ygot.Annotation                                                                                `path:"@config" ygotAnnotation:"true"`
	Interface   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface  []ygot.Annotation                                                                                `path:"@interface" ygotAnnotation:"true"`
	MacAddress  *string                                                                                          `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation                                                                                `path:"@mac-address" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State     `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                `path:"@state" ygotAnnotation:"true"`
	Vlan        *uint16                                                                                          `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan       []ygot.Annotation                                                                                `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config{}
	return t.Config
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetOrCreateInterface() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface{}
	return t.Interface
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterface returns the value of the Interface struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetInterface() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	if t.Vlan == nil {
		return nil, fmt.Errorf("nil value for key Vlan")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
		"vlan":        *t.Vlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MacAddress  *string           `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation `path:"@mac-address" ygotAnnotation:"true"`
	Vlan        *uint16           `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan       []ygot.Annotation `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface struct {
	ΛMetadata     []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                             `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) IsYANGGoStruct() {
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State struct {
	ΛMetadata   []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Age         *uint64                                                                                                 `path:"age" module:"openconfig-network-instance"`
	ΛAge        []ygot.Annotation                                                                                       `path:"@age" ygotAnnotation:"true"`
	EntryType   E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State_EntryType `path:"entry-type" module:"openconfig-network-instance"`
	ΛEntryType  []ygot.Annotation                                                                                       `path:"@entry-type" ygotAnnotation:"true"`
	Evi         *uint32                                                                                                 `path:"evi" module:"openconfig-network-instance"`
	ΛEvi        []ygot.Annotation                                                                                       `path:"@evi" ygotAnnotation:"true"`
	MacAddress  *string                                                                                                 `path:"mac-address" module:"openconfig-network-instance"`
	ΛMacAddress []ygot.Annotation                                                                                       `path:"@mac-address" ygotAnnotation:"true"`
	Vlan        *uint16                                                                                                 `path:"vlan" module:"openconfig-network-instance"`
	ΛVlan       []ygot.Annotation                                                                                       `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_MacTable_Entries_Entry_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	Enable                        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
	NdSuppression                 *bool             `path:"nd-suppression" module:"openconfig-network-instance"`
	ΛNdSuppression                []ygot.Annotation `path:"@nd-suppression" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State struct {
	ΛMetadata                     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DuplicateIpDetectionInterval  *uint16           `path:"duplicate-ip-detection-interval" module:"openconfig-network-instance"`
	ΛDuplicateIpDetectionInterval []ygot.Annotation `path:"@duplicate-ip-detection-interval" ygotAnnotation:"true"`
	Enable                        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	IpMobilityThreshold           *uint16           `path:"ip-mobility-threshold" module:"openconfig-network-instance"`
	ΛIpMobilityThreshold          []ygot.Annotation `path:"@ip-mobility-threshold" ygotAnnotation:"true"`
	NdSuppression                 *bool             `path:"nd-suppression" module:"openconfig-network-instance"`
	ΛNdSuppression                []ygot.Annotation `path:"@nd-suppression" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_NdProxy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State represents the /openconfig-network-instance/network-instances/network-instance/fdb/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State struct {
	ΛMetadata                      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AnycastGatewayMac              *string           `path:"anycast-gateway-mac" module:"openconfig-network-instance"`
	ΛAnycastGatewayMac             []ygot.Annotation `path:"@anycast-gateway-mac" ygotAnnotation:"true"`
	FloodUnknownUnicastSupression  *bool             `path:"flood-unknown-unicast-supression" module:"openconfig-network-instance"`
	ΛFloodUnknownUnicastSupression []ygot.Annotation `path:"@flood-unknown-unicast-supression" ygotAnnotation:"true"`
	MacAgingTime                   *uint16           `path:"mac-aging-time" module:"openconfig-network-instance"`
	ΛMacAgingTime                  []ygot.Annotation `path:"@mac-aging-time" ygotAnnotation:"true"`
	MacLearning                    *bool             `path:"mac-learning" module:"openconfig-network-instance"`
	ΛMacLearning                   []ygot.Annotation `path:"@mac-learning" ygotAnnotation:"true"`
	MaximumEntries                 *uint16           `path:"maximum-entries" module:"openconfig-network-instance"`
	ΛMaximumEntries                []ygot.Annotation `path:"@maximum-entries" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Fdb_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies struct {
	ΛMetadata           []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	ApplyPolicy         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy        `path:"apply-policy" module:"openconfig-network-instance"`
	ΛApplyPolicy        []ygot.Annotation                                                                                    `path:"@apply-policy" ygotAnnotation:"true"`
	ImportExportPolicy  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy `path:"import-export-policy" module:"openconfig-network-instance"`
	ΛImportExportPolicy []ygot.Annotation                                                                                    `path:"@import-export-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) IsYANGGoStruct() {
}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) GetOrCreateApplyPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetOrCreateImportExportPolicy retrieves the value of the ImportExportPolicy field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) GetOrCreateImportExportPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy {
	if t.ImportExportPolicy != nil {
		return t.ImportExportPolicy
	}
	t.ImportExportPolicy = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy{}
	return t.ImportExportPolicy
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) GetApplyPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// GetImportExportPolicy returns the value of the ImportExportPolicy struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies. If the receiver or the field ImportExportPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) GetImportExportPolicy() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy {
	if t != nil && t.ImportExportPolicy != nil {
		return t.ImportExportPolicy
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy struct {
	ΛMetadata []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config struct {
	ΛMetadata            []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	DefaultExportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType `path:"default-export-policy" module:"openconfig-network-instance"`
	ΛDefaultExportPolicy []ygot.Annotation                           `path:"@default-export-policy" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                           `path:"@default-import-policy" ygotAnnotation:"true"`
	ExportPolicy         []string                                    `path:"export-policy" module:"openconfig-network-instance"`
	ΛExportPolicy        []ygot.Annotation                           `path:"@export-policy" ygotAnnotation:"true"`
	ImportPolicy         []string                                    `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                           `path:"@import-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State struct {
	ΛMetadata            []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	DefaultExportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType `path:"default-export-policy" module:"openconfig-network-instance"`
	ΛDefaultExportPolicy []ygot.Annotation                           `path:"@default-export-policy" ygotAnnotation:"true"`
	DefaultImportPolicy  E_OpenconfigRoutingPolicy_DefaultPolicyType `path:"default-import-policy" module:"openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                           `path:"@default-import-policy" ygotAnnotation:"true"`
	ExportPolicy         []string                                    `path:"export-policy" module:"openconfig-network-instance"`
	ΛExportPolicy        []ygot.Annotation                           `path:"@export-policy" ygotAnnotation:"true"`
	ImportPolicy         []string                                    `path:"import-policy" module:"openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                           `path:"@import-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ApplyPolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy struct {
	ΛMetadata []ygot.Annotation                                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config struct {
	ΛMetadata          []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	ExportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ExportRouteTarget_Union `path:"export-route-target" module:"openconfig-network-instance"`
	ΛExportRouteTarget []ygot.Annotation                                                                                                                    `path:"@export-route-target" ygotAnnotation:"true"`
	ImportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config_ImportRouteTarget_Union `path:"import-route-target" module:"openconfig-network-instance"`
	ΛImportRouteTarget []ygot.Annotation                                                                                                                    `path:"@import-route-target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State struct {
	ΛMetadata          []ygot.Annotation                                                                                                                   `path:"@" ygotAnnotation:"true"`
	ExportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ExportRouteTarget_Union `path:"export-route-target" module:"openconfig-network-instance"`
	ΛExportRouteTarget []ygot.Annotation                                                                                                                   `path:"@export-route-target" ygotAnnotation:"true"`
	ImportRouteTarget  []OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State_ImportRouteTarget_Union `path:"import-route-target" module:"openconfig-network-instance"`
	ΛImportRouteTarget []ygot.Annotation                                                                                                                   `path:"@import-route-target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_InterInstancePolicies_ImportExportPolicy_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces represents the /openconfig-network-instance/network-instances/network-instance/interfaces YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                           `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) NewInterface(Id string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) GetOrCreateInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) GetInterface(Id string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface struct {
	ΛMetadata []ygot.Annotation                                                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                       `path:"@config" ygotAnnotation:"true"`
	Id        *string                                                                                 `path:"id" module:"openconfig-network-instance"`
	ΛId       []ygot.Annotation                                                                       `path:"@id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config struct {
	ΛMetadata                  []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	AssociatedAddressFamilies  []E_OpenconfigTypes_ADDRESS_FAMILY                                                                         `path:"associated-address-families" module:"openconfig-network-instance"`
	ΛAssociatedAddressFamilies []ygot.Annotation                                                                                          `path:"@associated-address-families" ygotAnnotation:"true"`
	Id                         *string                                                                                                    `path:"id" module:"openconfig-network-instance"`
	ΛId                        []ygot.Annotation                                                                                          `path:"@id" ygotAnnotation:"true"`
	Interface                  *string                                                                                                    `path:"interface" module:"openconfig-network-instance"`
	ΛInterface                 []ygot.Annotation                                                                                          `path:"@interface" ygotAnnotation:"true"`
	IrbAnycastGateway          E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config_IrbAnycastGateway `path:"irb-anycast-gateway" module:"openconfig-network-instance"`
	ΛIrbAnycastGateway         []ygot.Annotation                                                                                          `path:"@irb-anycast-gateway" ygotAnnotation:"true"`
	MacPinning                 *bool                                                                                                      `path:"mac-pinning" module:"openconfig-network-instance"`
	ΛMacPinning                []ygot.Annotation                                                                                          `path:"@mac-pinning" ygotAnnotation:"true"`
	Subinterface               *uint32                                                                                                    `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface              []ygot.Annotation                                                                                          `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State struct {
	ΛMetadata                  []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	AssociatedAddressFamilies  []E_OpenconfigTypes_ADDRESS_FAMILY                                                                         `path:"associated-address-families" module:"openconfig-network-instance"`
	ΛAssociatedAddressFamilies []ygot.Annotation                                                                                          `path:"@associated-address-families" ygotAnnotation:"true"`
	Id                         *string                                                                                                    `path:"id" module:"openconfig-network-instance"`
	ΛId                        []ygot.Annotation                                                                                          `path:"@id" ygotAnnotation:"true"`
	Interface                  *string                                                                                                    `path:"interface" module:"openconfig-network-instance"`
	ΛInterface                 []ygot.Annotation                                                                                          `path:"@interface" ygotAnnotation:"true"`
	IrbAnycastGateway          E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_Config_IrbAnycastGateway `path:"irb-anycast-gateway" module:"openconfig-network-instance"`
	ΛIrbAnycastGateway         []ygot.Annotation                                                                                          `path:"@irb-anycast-gateway" ygotAnnotation:"true"`
	MacPinning                 *bool                                                                                                      `path:"mac-pinning" module:"openconfig-network-instance"`
	ΛMacPinning                []ygot.Annotation                                                                                          `path:"@mac-pinning" ygotAnnotation:"true"`
	Subinterface               *uint32                                                                                                    `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface              []ygot.Annotation                                                                                          `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls struct {
	ΛMetadata              []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	Global                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global                `path:"global" module:"openconfig-network-instance"`
	ΛGlobal                []ygot.Annotation                                                                      `path:"@global" ygotAnnotation:"true"`
	Lsps                   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps                  `path:"lsps" module:"openconfig-network-instance"`
	ΛLsps                  []ygot.Annotation                                                                      `path:"@lsps" ygotAnnotation:"true"`
	SignalingProtocols     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols    `path:"signaling-protocols" module:"openconfig-network-instance"`
	ΛSignalingProtocols    []ygot.Annotation                                                                      `path:"@signaling-protocols" ygotAnnotation:"true"`
	TeGlobalAttributes     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes    `path:"te-global-attributes" module:"openconfig-network-instance"`
	ΛTeGlobalAttributes    []ygot.Annotation                                                                      `path:"@te-global-attributes" ygotAnnotation:"true"`
	TeInterfaceAttributes  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes `path:"te-interface-attributes" module:"openconfig-network-instance"`
	ΛTeInterfaceAttributes []ygot.Annotation                                                                      `path:"@te-interface-attributes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) IsYANGGoStruct() {}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetOrCreateGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global{}
	return t.Global
}

// GetOrCreateLsps retrieves the value of the Lsps field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetOrCreateLsps() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps {
	if t.Lsps != nil {
		return t.Lsps
	}
	t.Lsps = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps{}
	return t.Lsps
}

// GetOrCreateSignalingProtocols retrieves the value of the SignalingProtocols field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetOrCreateSignalingProtocols() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols {
	if t.SignalingProtocols != nil {
		return t.SignalingProtocols
	}
	t.SignalingProtocols = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols{}
	return t.SignalingProtocols
}

// GetOrCreateTeGlobalAttributes retrieves the value of the TeGlobalAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetOrCreateTeGlobalAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes {
	if t.TeGlobalAttributes != nil {
		return t.TeGlobalAttributes
	}
	t.TeGlobalAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes{}
	return t.TeGlobalAttributes
}

// GetOrCreateTeInterfaceAttributes retrieves the value of the TeInterfaceAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetOrCreateTeInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes {
	if t.TeInterfaceAttributes != nil {
		return t.TeInterfaceAttributes
	}
	t.TeInterfaceAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes{}
	return t.TeInterfaceAttributes
}

// GetGlobal returns the value of the Global struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetLsps returns the value of the Lsps struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls. If the receiver or the field Lsps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetLsps() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps {
	if t != nil && t.Lsps != nil {
		return t.Lsps
	}
	return nil
}

// GetSignalingProtocols returns the value of the SignalingProtocols struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls. If the receiver or the field SignalingProtocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetSignalingProtocols() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols {
	if t != nil && t.SignalingProtocols != nil {
		return t.SignalingProtocols
	}
	return nil
}

// GetTeGlobalAttributes returns the value of the TeGlobalAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls. If the receiver or the field TeGlobalAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetTeGlobalAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeGlobalAttributes {
	if t != nil && t.TeGlobalAttributes != nil {
		return t.TeGlobalAttributes
	}
	return nil
}

// GetTeInterfaceAttributes returns the value of the TeInterfaceAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls. If the receiver or the field TeInterfaceAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) GetTeInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_TeInterfaceAttributes {
	if t != nil && t.TeInterfaceAttributes != nil {
		return t.TeInterfaceAttributes
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global struct {
	ΛMetadata            []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	Config               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config              `path:"config" module:"openconfig-network-instance"`
	ΛConfig              []ygot.Annotation                                                                           `path:"@config" ygotAnnotation:"true"`
	InterfaceAttributes  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes `path:"interface-attributes" module:"openconfig-network-instance"`
	ΛInterfaceAttributes []ygot.Annotation                                                                           `path:"@interface-attributes" ygotAnnotation:"true"`
	ReservedLabelBlocks  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks `path:"reserved-label-blocks" module:"openconfig-network-instance"`
	ΛReservedLabelBlocks []ygot.Annotation                                                                           `path:"@reserved-label-blocks" ygotAnnotation:"true"`
	State                *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State               `path:"state" module:"openconfig-network-instance"`
	ΛState               []ygot.Annotation                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config{}
	return t.Config
}

// GetOrCreateInterfaceAttributes retrieves the value of the InterfaceAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetOrCreateInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes {
	if t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	t.InterfaceAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes{}
	return t.InterfaceAttributes
}

// GetOrCreateReservedLabelBlocks retrieves the value of the ReservedLabelBlocks field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetOrCreateReservedLabelBlocks() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks {
	if t.ReservedLabelBlocks != nil {
		return t.ReservedLabelBlocks
	}
	t.ReservedLabelBlocks = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks{}
	return t.ReservedLabelBlocks
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaceAttributes returns the value of the InterfaceAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global. If the receiver or the field InterfaceAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes {
	if t != nil && t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	return nil
}

// GetReservedLabelBlocks returns the value of the ReservedLabelBlocks struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global. If the receiver or the field ReservedLabelBlocks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetReservedLabelBlocks() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks {
	if t != nil && t.ReservedLabelBlocks != nil {
		return t.ReservedLabelBlocks
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config struct {
	ΛMetadata        []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	NullLabel        E_OpenconfigMplsTypes_NULL_LABEL_TYPE          `path:"null-label" module:"openconfig-network-instance"`
	ΛNullLabel       []ygot.Annotation                              `path:"@null-label" ygotAnnotation:"true"`
	PwEncapsulation  E_OpenconfigMplsTypes_PSEUDOWIRE_ENCAPSULATION `path:"pw-encapsulation" module:"openconfig-network-instance"`
	ΛPwEncapsulation []ygot.Annotation                              `path:"@pw-encapsulation" ygotAnnotation:"true"`
	TtlPropagation   *bool                                          `path:"ttl-propagation" module:"openconfig-network-instance"`
	ΛTtlPropagation  []ygot.Annotation                              `path:"@ttl-propagation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes struct {
	ΛMetadata  []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                                                `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) NewInterface(InterfaceId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) GetOrCreateInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) GetInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface struct {
	ΛMetadata     []ygot.Annotation                                                                                                  `path:"@" ygotAnnotation:"true"`
	Config        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config       `path:"config" module:"openconfig-network-instance"`
	ΛConfig       []ygot.Annotation                                                                                                  `path:"@config" ygotAnnotation:"true"`
	InterfaceId   *string                                                                                                            `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId  []ygot.Annotation                                                                                                  `path:"@interface-id" ygotAnnotation:"true"`
	InterfaceRef  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                                  `path:"@interface-ref" ygotAnnotation:"true"`
	State         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State        `path:"state" module:"openconfig-network-instance"`
	ΛState        []ygot.Annotation                                                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config{}
	return t.Config
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InterfaceId  *string           `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId []ygot.Annotation `path:"@interface-id" ygotAnnotation:"true"`
	MplsEnabled  *bool             `path:"mpls-enabled" module:"openconfig-network-instance"`
	ΛMplsEnabled []ygot.Annotation `path:"@mpls-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InterfaceId  *string           `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId []ygot.Annotation `path:"@interface-id" ygotAnnotation:"true"`
	MplsEnabled  *bool             `path:"mpls-enabled" module:"openconfig-network-instance"`
	ΛMplsEnabled []ygot.Annotation `path:"@mpls-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_InterfaceAttributes_Interface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks struct {
	ΛMetadata           []ygot.Annotation                                                                                                         `path:"@" ygotAnnotation:"true"`
	ReservedLabelBlock  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock `path:"reserved-label-block" module:"openconfig-network-instance"`
	ΛReservedLabelBlock []ygot.Annotation                                                                                                         `path:"@reserved-label-block" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) IsYANGGoStruct() {
}

// NewReservedLabelBlock creates a new entry in the ReservedLabelBlock list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) NewReservedLabelBlock(LocalId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReservedLabelBlock == nil {
		t.ReservedLabelBlock = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ReservedLabelBlock[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ReservedLabelBlock", key)
	}

	t.ReservedLabelBlock[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock{
		LocalId: &LocalId,
	}

	return t.ReservedLabelBlock[key], nil
}

// RenameReservedLabelBlock renames an entry in the list ReservedLabelBlock within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) RenameReservedLabelBlock(oldK, newK string) error {
	if _, ok := t.ReservedLabelBlock[newK]; ok {
		return fmt.Errorf("key %v already exists in ReservedLabelBlock", newK)
	}

	e, ok := t.ReservedLabelBlock[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ReservedLabelBlock", oldK)
	}
	e.LocalId = &newK

	t.ReservedLabelBlock[newK] = e
	delete(t.ReservedLabelBlock, oldK)
	return nil
}

// GetOrCreateReservedLabelBlockMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) GetOrCreateReservedLabelBlockMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock {
	if t.ReservedLabelBlock == nil {
		t.ReservedLabelBlock = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock)
	}
	return t.ReservedLabelBlock
}

// GetOrCreateReservedLabelBlock retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) GetOrCreateReservedLabelBlock(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock {

	key := LocalId

	if v, ok := t.ReservedLabelBlock[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReservedLabelBlock(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReservedLabelBlock got unexpected error: %v", err))
	}
	return v
}

// GetReservedLabelBlock retrieves the value with the specified key from
// the ReservedLabelBlock map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) GetReservedLabelBlock(LocalId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.ReservedLabelBlock[key]; ok {
		return lm
	}
	return nil
}

// DeleteReservedLabelBlock deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) DeleteReservedLabelBlock(LocalId string) {
	key := LocalId

	delete(t.ReservedLabelBlock, key)
}

// AppendReservedLabelBlock appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock struct to the
// list ReservedLabelBlock of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) AppendReservedLabelBlock(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReservedLabelBlock == nil {
		t.ReservedLabelBlock = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock)
	}

	if _, ok := t.ReservedLabelBlock[key]; ok {
		return fmt.Errorf("duplicate key for list ReservedLabelBlock %v", key)
	}

	t.ReservedLabelBlock[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                     `path:"@config" ygotAnnotation:"true"`
	LocalId   *string                                                                                                               `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId  []ygot.Annotation                                                                                                     `path:"@local-id" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config struct {
	ΛMetadata   []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	LocalId     *string                                                                                                                               `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId    []ygot.Annotation                                                                                                                     `path:"@local-id" ygotAnnotation:"true"`
	LowerBound  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_LowerBound_Union `path:"lower-bound" module:"openconfig-network-instance"`
	ΛLowerBound []ygot.Annotation                                                                                                                     `path:"@lower-bound" ygotAnnotation:"true"`
	UpperBound  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config_UpperBound_Union `path:"upper-bound" module:"openconfig-network-instance"`
	ΛUpperBound []ygot.Annotation                                                                                                                     `path:"@upper-bound" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State struct {
	ΛMetadata   []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	LocalId     *string                                                                                                                              `path:"local-id" module:"openconfig-network-instance"`
	ΛLocalId    []ygot.Annotation                                                                                                                    `path:"@local-id" ygotAnnotation:"true"`
	LowerBound  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_LowerBound_Union `path:"lower-bound" module:"openconfig-network-instance"`
	ΛLowerBound []ygot.Annotation                                                                                                                    `path:"@lower-bound" ygotAnnotation:"true"`
	UpperBound  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State_UpperBound_Union `path:"upper-bound" module:"openconfig-network-instance"`
	ΛUpperBound []ygot.Annotation                                                                                                                    `path:"@upper-bound" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_ReservedLabelBlocks_ReservedLabelBlock_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State struct {
	ΛMetadata        []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	NullLabel        E_OpenconfigMplsTypes_NULL_LABEL_TYPE          `path:"null-label" module:"openconfig-network-instance"`
	ΛNullLabel       []ygot.Annotation                              `path:"@null-label" ygotAnnotation:"true"`
	PwEncapsulation  E_OpenconfigMplsTypes_PSEUDOWIRE_ENCAPSULATION `path:"pw-encapsulation" module:"openconfig-network-instance"`
	ΛPwEncapsulation []ygot.Annotation                              `path:"@pw-encapsulation" ygotAnnotation:"true"`
	TtlPropagation   *bool                                          `path:"ttl-propagation" module:"openconfig-network-instance"`
	ΛTtlPropagation  []ygot.Annotation                              `path:"@ttl-propagation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps struct {
	ΛMetadata          []ygot.Annotation                                                                       `path:"@" ygotAnnotation:"true"`
	ConstrainedPath    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath   `path:"constrained-path" module:"openconfig-network-instance"`
	ΛConstrainedPath   []ygot.Annotation                                                                       `path:"@constrained-path" ygotAnnotation:"true"`
	StaticLsps         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps        `path:"static-lsps" module:"openconfig-network-instance"`
	ΛStaticLsps        []ygot.Annotation                                                                       `path:"@static-lsps" ygotAnnotation:"true"`
	UnconstrainedPath  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath `path:"unconstrained-path" module:"openconfig-network-instance"`
	ΛUnconstrainedPath []ygot.Annotation                                                                       `path:"@unconstrained-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) IsYANGGoStruct() {}

// GetOrCreateConstrainedPath retrieves the value of the ConstrainedPath field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetOrCreateConstrainedPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath {
	if t.ConstrainedPath != nil {
		return t.ConstrainedPath
	}
	t.ConstrainedPath = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath{}
	return t.ConstrainedPath
}

// GetOrCreateStaticLsps retrieves the value of the StaticLsps field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetOrCreateStaticLsps() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps {
	if t.StaticLsps != nil {
		return t.StaticLsps
	}
	t.StaticLsps = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps{}
	return t.StaticLsps
}

// GetOrCreateUnconstrainedPath retrieves the value of the UnconstrainedPath field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetOrCreateUnconstrainedPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath {
	if t.UnconstrainedPath != nil {
		return t.UnconstrainedPath
	}
	t.UnconstrainedPath = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath{}
	return t.UnconstrainedPath
}

// GetConstrainedPath returns the value of the ConstrainedPath struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps. If the receiver or the field ConstrainedPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetConstrainedPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath {
	if t != nil && t.ConstrainedPath != nil {
		return t.ConstrainedPath
	}
	return nil
}

// GetStaticLsps returns the value of the StaticLsps struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps. If the receiver or the field StaticLsps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetStaticLsps() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps {
	if t != nil && t.StaticLsps != nil {
		return t.StaticLsps
	}
	return nil
}

// GetUnconstrainedPath returns the value of the UnconstrainedPath struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps. If the receiver or the field UnconstrainedPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) GetUnconstrainedPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath {
	if t != nil && t.UnconstrainedPath != nil {
		return t.UnconstrainedPath
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath struct {
	ΛMetadata           []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	NamedExplicitPaths  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths `path:"named-explicit-paths" module:"openconfig-network-instance"`
	ΛNamedExplicitPaths []ygot.Annotation                                                                                        `path:"@named-explicit-paths" ygotAnnotation:"true"`
	Tunnels             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels            `path:"tunnels" module:"openconfig-network-instance"`
	ΛTunnels            []ygot.Annotation                                                                                        `path:"@tunnels" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) IsYANGGoStruct() {
}

// GetOrCreateNamedExplicitPaths retrieves the value of the NamedExplicitPaths field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) GetOrCreateNamedExplicitPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths {
	if t.NamedExplicitPaths != nil {
		return t.NamedExplicitPaths
	}
	t.NamedExplicitPaths = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths{}
	return t.NamedExplicitPaths
}

// GetOrCreateTunnels retrieves the value of the Tunnels field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) GetOrCreateTunnels() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels {
	if t.Tunnels != nil {
		return t.Tunnels
	}
	t.Tunnels = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels{}
	return t.Tunnels
}

// GetNamedExplicitPaths returns the value of the NamedExplicitPaths struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath. If the receiver or the field NamedExplicitPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) GetNamedExplicitPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths {
	if t != nil && t.NamedExplicitPaths != nil {
		return t.NamedExplicitPaths
	}
	return nil
}

// GetTunnels returns the value of the Tunnels struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath. If the receiver or the field Tunnels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) GetTunnels() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels {
	if t != nil && t.Tunnels != nil {
		return t.Tunnels
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths struct {
	ΛMetadata          []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	NamedExplicitPath  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath `path:"named-explicit-path" module:"openconfig-network-instance"`
	ΛNamedExplicitPath []ygot.Annotation                                                                                                                     `path:"@named-explicit-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) IsYANGGoStruct() {
}

// NewNamedExplicitPath creates a new entry in the NamedExplicitPath list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) NewNamedExplicitPath(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedExplicitPath == nil {
		t.NamedExplicitPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NamedExplicitPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NamedExplicitPath", key)
	}

	t.NamedExplicitPath[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath{
		Name: &Name,
	}

	return t.NamedExplicitPath[key], nil
}

// RenameNamedExplicitPath renames an entry in the list NamedExplicitPath within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) RenameNamedExplicitPath(oldK, newK string) error {
	if _, ok := t.NamedExplicitPath[newK]; ok {
		return fmt.Errorf("key %v already exists in NamedExplicitPath", newK)
	}

	e, ok := t.NamedExplicitPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NamedExplicitPath", oldK)
	}
	e.Name = &newK

	t.NamedExplicitPath[newK] = e
	delete(t.NamedExplicitPath, oldK)
	return nil
}

// GetOrCreateNamedExplicitPathMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) GetOrCreateNamedExplicitPathMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath {
	if t.NamedExplicitPath == nil {
		t.NamedExplicitPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath)
	}
	return t.NamedExplicitPath
}

// GetOrCreateNamedExplicitPath retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) GetOrCreateNamedExplicitPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath {

	key := Name

	if v, ok := t.NamedExplicitPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNamedExplicitPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNamedExplicitPath got unexpected error: %v", err))
	}
	return v
}

// GetNamedExplicitPath retrieves the value with the specified key from
// the NamedExplicitPath map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) GetNamedExplicitPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NamedExplicitPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteNamedExplicitPath deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) DeleteNamedExplicitPath(Name string) {
	key := Name

	delete(t.NamedExplicitPath, key)
}

// AppendNamedExplicitPath appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath struct to the
// list NamedExplicitPath of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) AppendNamedExplicitPath(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedExplicitPath == nil {
		t.NamedExplicitPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath)
	}

	if _, ok := t.NamedExplicitPath[key]; ok {
		return fmt.Errorf("duplicate key for list NamedExplicitPath %v", key)
	}

	t.NamedExplicitPath[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath struct {
	ΛMetadata             []ygot.Annotation                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config                *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config               `path:"config" module:"openconfig-network-instance"`
	ΛConfig               []ygot.Annotation                                                                                                                               `path:"@config" ygotAnnotation:"true"`
	ExplicitRouteObjects  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects `path:"explicit-route-objects" module:"openconfig-network-instance"`
	ΛExplicitRouteObjects []ygot.Annotation                                                                                                                               `path:"@explicit-route-objects" ygotAnnotation:"true"`
	Name                  *string                                                                                                                                         `path:"name" module:"openconfig-network-instance"`
	ΛName                 []ygot.Annotation                                                                                                                               `path:"@name" ygotAnnotation:"true"`
	State                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State                `path:"state" module:"openconfig-network-instance"`
	ΛState                []ygot.Annotation                                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config{}
	return t.Config
}

// GetOrCreateExplicitRouteObjects retrieves the value of the ExplicitRouteObjects field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetOrCreateExplicitRouteObjects() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects {
	if t.ExplicitRouteObjects != nil {
		return t.ExplicitRouteObjects
	}
	t.ExplicitRouteObjects = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects{}
	return t.ExplicitRouteObjects
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetExplicitRouteObjects returns the value of the ExplicitRouteObjects struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath. If the receiver or the field ExplicitRouteObjects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetExplicitRouteObjects() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects {
	if t != nil && t.ExplicitRouteObjects != nil {
		return t.ExplicitRouteObjects
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config struct {
	ΛMetadata              []ygot.Annotation                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Name                   *string                                                                                                                                             `path:"name" module:"openconfig-network-instance"`
	ΛName                  []ygot.Annotation                                                                                                                                   `path:"@name" ygotAnnotation:"true"`
	SidProtectionRequired  *bool                                                                                                                                               `path:"sid-protection-required" module:"openconfig-network-instance"`
	ΛSidProtectionRequired []ygot.Annotation                                                                                                                                   `path:"@sid-protection-required" ygotAnnotation:"true"`
	SidSelectionMode       E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode `path:"sid-selection-mode" module:"openconfig-network-instance"`
	ΛSidSelectionMode      []ygot.Annotation                                                                                                                                   `path:"@sid-selection-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects struct {
	ΛMetadata            []ygot.Annotation                                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	ExplicitRouteObject  map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject `path:"explicit-route-object" module:"openconfig-network-instance"`
	ΛExplicitRouteObject []ygot.Annotation                                                                                                                                                             `path:"@explicit-route-object" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) IsYANGGoStruct() {
}

// NewExplicitRouteObject creates a new entry in the ExplicitRouteObject list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) NewExplicitRouteObject(Index uint8) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExplicitRouteObject == nil {
		t.ExplicitRouteObject = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExplicitRouteObject[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExplicitRouteObject", key)
	}

	t.ExplicitRouteObject[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject{
		Index: &Index,
	}

	return t.ExplicitRouteObject[key], nil
}

// RenameExplicitRouteObject renames an entry in the list ExplicitRouteObject within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) RenameExplicitRouteObject(oldK, newK uint8) error {
	if _, ok := t.ExplicitRouteObject[newK]; ok {
		return fmt.Errorf("key %v already exists in ExplicitRouteObject", newK)
	}

	e, ok := t.ExplicitRouteObject[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExplicitRouteObject", oldK)
	}
	e.Index = &newK

	t.ExplicitRouteObject[newK] = e
	delete(t.ExplicitRouteObject, oldK)
	return nil
}

// GetOrCreateExplicitRouteObjectMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) GetOrCreateExplicitRouteObjectMap() map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject {
	if t.ExplicitRouteObject == nil {
		t.ExplicitRouteObject = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject)
	}
	return t.ExplicitRouteObject
}

// GetOrCreateExplicitRouteObject retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) GetOrCreateExplicitRouteObject(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject {

	key := Index

	if v, ok := t.ExplicitRouteObject[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExplicitRouteObject(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExplicitRouteObject got unexpected error: %v", err))
	}
	return v
}

// GetExplicitRouteObject retrieves the value with the specified key from
// the ExplicitRouteObject map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) GetExplicitRouteObject(Index uint8) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.ExplicitRouteObject[key]; ok {
		return lm
	}
	return nil
}

// DeleteExplicitRouteObject deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) DeleteExplicitRouteObject(Index uint8) {
	key := Index

	delete(t.ExplicitRouteObject, key)
}

// AppendExplicitRouteObject appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject struct to the
// list ExplicitRouteObject of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) AppendExplicitRouteObject(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExplicitRouteObject == nil {
		t.ExplicitRouteObject = make(map[uint8]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject)
	}

	if _, ok := t.ExplicitRouteObject[key]; ok {
		return fmt.Errorf("duplicate key for list ExplicitRouteObject %v", key)
	}

	t.ExplicitRouteObject[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                          `path:"@config" ygotAnnotation:"true"`
	Index     *uint8                                                                                                                                                                     `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                                                          `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Address   *string                      `path:"address" module:"openconfig-network-instance"`
	ΛAddress  []ygot.Annotation            `path:"@address" ygotAnnotation:"true"`
	HopType   E_OpenconfigMpls_MplsHopType `path:"hop-type" module:"openconfig-network-instance"`
	ΛHopType  []ygot.Annotation            `path:"@hop-type" ygotAnnotation:"true"`
	Index     *uint8                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation            `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Address   *string                      `path:"address" module:"openconfig-network-instance"`
	ΛAddress  []ygot.Annotation            `path:"@address" ygotAnnotation:"true"`
	HopType   E_OpenconfigMpls_MplsHopType `path:"hop-type" module:"openconfig-network-instance"`
	ΛHopType  []ygot.Annotation            `path:"@hop-type" ygotAnnotation:"true"`
	Index     *uint8                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation            `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_ExplicitRouteObjects_ExplicitRouteObject_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State struct {
	ΛMetadata              []ygot.Annotation                                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Name                   *string                                                                                                                                             `path:"name" module:"openconfig-network-instance"`
	ΛName                  []ygot.Annotation                                                                                                                                   `path:"@name" ygotAnnotation:"true"`
	SidProtectionRequired  *bool                                                                                                                                               `path:"sid-protection-required" module:"openconfig-network-instance"`
	ΛSidProtectionRequired []ygot.Annotation                                                                                                                                   `path:"@sid-protection-required" ygotAnnotation:"true"`
	SidSelectionMode       E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_Config_SidSelectionMode `path:"sid-selection-mode" module:"openconfig-network-instance"`
	ΛSidSelectionMode      []ygot.Annotation                                                                                                                                   `path:"@sid-selection-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPaths_NamedExplicitPath_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels struct {
	ΛMetadata []ygot.Annotation                                                                                               `path:"@" ygotAnnotation:"true"`
	Tunnel    map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel `path:"tunnel" module:"openconfig-network-instance"`
	ΛTunnel   []ygot.Annotation                                                                                               `path:"@tunnel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) IsYANGGoStruct() {
}

// NewTunnel creates a new entry in the Tunnel list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) NewTunnel(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel{
		Name: &Name,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.Name = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnelMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) GetOrCreateTunnelMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel {
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel)
	}
	return t.Tunnel
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) GetOrCreateTunnel(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel {

	key := Name

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) GetTunnel(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) DeleteTunnel(Name string) {
	key := Name

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel struct to the
// list Tunnel of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) AppendTunnel(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel struct {
	ΛMetadata            []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	Bandwidth            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth           `path:"bandwidth" module:"openconfig-network-instance"`
	ΛBandwidth           []ygot.Annotation                                                                                                        `path:"@bandwidth" ygotAnnotation:"true"`
	Config               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config              `path:"config" module:"openconfig-network-instance"`
	ΛConfig              []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	Name                 *string                                                                                                                  `path:"name" module:"openconfig-network-instance"`
	ΛName                []ygot.Annotation                                                                                                        `path:"@name" ygotAnnotation:"true"`
	P2PTunnelAttributes  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes `path:"p2p-tunnel-attributes" module:"openconfig-network-instance"`
	ΛP2PTunnelAttributes []ygot.Annotation                                                                                                        `path:"@p2p-tunnel-attributes" ygotAnnotation:"true"`
	State                *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State               `path:"state" module:"openconfig-network-instance"`
	ΛState               []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) IsYANGGoStruct() {
}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetOrCreateBandwidth() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config{}
	return t.Config
}

// GetOrCreateP2PTunnelAttributes retrieves the value of the P2PTunnelAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetOrCreateP2PTunnelAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes {
	if t.P2PTunnelAttributes != nil {
		return t.P2PTunnelAttributes
	}
	t.P2PTunnelAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes{}
	return t.P2PTunnelAttributes
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State{}
	return t.State
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetBandwidth() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetP2PTunnelAttributes returns the value of the P2PTunnelAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel. If the receiver or the field P2PTunnelAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetP2PTunnelAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes {
	if t != nil && t.P2PTunnelAttributes != nil {
		return t.P2PTunnelAttributes
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth struct {
	ΛMetadata      []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	AutoBandwidth  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth `path:"auto-bandwidth" module:"openconfig-network-instance"`
	ΛAutoBandwidth []ygot.Annotation                                                                                                            `path:"@auto-bandwidth" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config        `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                                                                            `path:"@config" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State         `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) IsYANGGoStruct() {
}

// GetOrCreateAutoBandwidth retrieves the value of the AutoBandwidth field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetOrCreateAutoBandwidth() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth {
	if t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	t.AutoBandwidth = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth{}
	return t.AutoBandwidth
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State{}
	return t.State
}

// GetAutoBandwidth returns the value of the AutoBandwidth struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth. If the receiver or the field AutoBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetAutoBandwidth() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth {
	if t != nil && t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth struct {
	ΛMetadata  []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config    `path:"config" module:"openconfig-network-instance"`
	ΛConfig    []ygot.Annotation                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	Overflow   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow  `path:"overflow" module:"openconfig-network-instance"`
	ΛOverflow  []ygot.Annotation                                                                                                                      `path:"@overflow" ygotAnnotation:"true"`
	State      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State     `path:"state" module:"openconfig-network-instance"`
	ΛState     []ygot.Annotation                                                                                                                      `path:"@state" ygotAnnotation:"true"`
	Underflow  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow `path:"underflow" module:"openconfig-network-instance"`
	ΛUnderflow []ygot.Annotation                                                                                                                      `path:"@underflow" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config{}
	return t.Config
}

// GetOrCreateOverflow retrieves the value of the Overflow field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetOrCreateOverflow() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow {
	if t.Overflow != nil {
		return t.Overflow
	}
	t.Overflow = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow{}
	return t.Overflow
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State{}
	return t.State
}

// GetOrCreateUnderflow retrieves the value of the Underflow field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetOrCreateUnderflow() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow {
	if t.Underflow != nil {
		return t.Underflow
	}
	t.Underflow = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow{}
	return t.Underflow
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetOverflow returns the value of the Overflow struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth. If the receiver or the field Overflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetOverflow() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow {
	if t != nil && t.Overflow != nil {
		return t.Overflow
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUnderflow returns the value of the Underflow struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth. If the receiver or the field Underflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) GetUnderflow() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow {
	if t != nil && t.Underflow != nil {
		return t.Underflow
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdjustInterval   *uint32           `path:"adjust-interval" module:"openconfig-network-instance"`
	ΛAdjustInterval  []ygot.Annotation `path:"@adjust-interval" ygotAnnotation:"true"`
	AdjustThreshold  *uint8            `path:"adjust-threshold" module:"openconfig-network-instance"`
	ΛAdjustThreshold []ygot.Annotation `path:"@adjust-threshold" ygotAnnotation:"true"`
	Enabled          *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled         []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	MaxBw            *uint64           `path:"max-bw" module:"openconfig-network-instance"`
	ΛMaxBw           []ygot.Annotation `path:"@max-bw" ygotAnnotation:"true"`
	MinBw            *uint64           `path:"min-bw" module:"openconfig-network-instance"`
	ΛMinBw           []ygot.Annotation `path:"@min-bw" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow struct {
	ΛMetadata []ygot.Annotation                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled            *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled           []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	OverflowThreshold  *uint8            `path:"overflow-threshold" module:"openconfig-network-instance"`
	ΛOverflowThreshold []ygot.Annotation `path:"@overflow-threshold" ygotAnnotation:"true"`
	TriggerEventCount  *uint16           `path:"trigger-event-count" module:"openconfig-network-instance"`
	ΛTriggerEventCount []ygot.Annotation `path:"@trigger-event-count" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled            *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled           []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	OverflowThreshold  *uint8            `path:"overflow-threshold" module:"openconfig-network-instance"`
	ΛOverflowThreshold []ygot.Annotation `path:"@overflow-threshold" ygotAnnotation:"true"`
	TriggerEventCount  *uint16           `path:"trigger-event-count" module:"openconfig-network-instance"`
	ΛTriggerEventCount []ygot.Annotation `path:"@trigger-event-count" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Overflow_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdjustInterval   *uint32           `path:"adjust-interval" module:"openconfig-network-instance"`
	ΛAdjustInterval  []ygot.Annotation `path:"@adjust-interval" ygotAnnotation:"true"`
	AdjustThreshold  *uint8            `path:"adjust-threshold" module:"openconfig-network-instance"`
	ΛAdjustThreshold []ygot.Annotation `path:"@adjust-threshold" ygotAnnotation:"true"`
	Enabled          *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled         []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	IntervalHighBw   *uint64           `path:"interval-high-bw" module:"openconfig-network-instance"`
	ΛIntervalHighBw  []ygot.Annotation `path:"@interval-high-bw" ygotAnnotation:"true"`
	MaxBw            *uint64           `path:"max-bw" module:"openconfig-network-instance"`
	ΛMaxBw           []ygot.Annotation `path:"@max-bw" ygotAnnotation:"true"`
	MinBw            *uint64           `path:"min-bw" module:"openconfig-network-instance"`
	ΛMinBw           []ygot.Annotation `path:"@min-bw" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow struct {
	ΛMetadata []ygot.Annotation                                                                                                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	TriggerEventCount   *uint16           `path:"trigger-event-count" module:"openconfig-network-instance"`
	ΛTriggerEventCount  []ygot.Annotation `path:"@trigger-event-count" ygotAnnotation:"true"`
	UnderflowThreshold  *uint8            `path:"underflow-threshold" module:"openconfig-network-instance"`
	ΛUnderflowThreshold []ygot.Annotation `path:"@underflow-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	TriggerEventCount   *uint16           `path:"trigger-event-count" module:"openconfig-network-instance"`
	ΛTriggerEventCount  []ygot.Annotation `path:"@trigger-event-count" ygotAnnotation:"true"`
	UnderflowThreshold  *uint8            `path:"underflow-threshold" module:"openconfig-network-instance"`
	ΛUnderflowThreshold []ygot.Annotation `path:"@underflow-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_AutoBandwidth_Underflow_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config struct {
	ΛMetadata          []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	SetBandwidth       *uint64                          `path:"set-bandwidth" module:"openconfig-network-instance"`
	ΛSetBandwidth      []ygot.Annotation                `path:"@set-bandwidth" ygotAnnotation:"true"`
	SpecificationType  E_OpenconfigMpls_TeBandwidthType `path:"specification-type" module:"openconfig-network-instance"`
	ΛSpecificationType []ygot.Annotation                `path:"@specification-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State struct {
	ΛMetadata          []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	SetBandwidth       *uint64                          `path:"set-bandwidth" module:"openconfig-network-instance"`
	ΛSetBandwidth      []ygot.Annotation                `path:"@set-bandwidth" ygotAnnotation:"true"`
	SignaledBandwidth  *uint64                          `path:"signaled-bandwidth" module:"openconfig-network-instance"`
	ΛSignaledBandwidth []ygot.Annotation                `path:"@signaled-bandwidth" ygotAnnotation:"true"`
	SpecificationType  E_OpenconfigMpls_TeBandwidthType `path:"specification-type" module:"openconfig-network-instance"`
	ΛSpecificationType []ygot.Annotation                `path:"@specification-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Bandwidth_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config struct {
	ΛMetadata                 []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	AdminStatus               E_OpenconfigMplsTypes_TUNNEL_ADMIN_STATUS `path:"admin-status" module:"openconfig-network-instance"`
	ΛAdminStatus              []ygot.Annotation                         `path:"@admin-status" ygotAnnotation:"true"`
	Description               *string                                   `path:"description" module:"openconfig-network-instance"`
	ΛDescription              []ygot.Annotation                         `path:"@description" ygotAnnotation:"true"`
	HoldPriority              *uint8                                    `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority             []ygot.Annotation                         `path:"@hold-priority" ygotAnnotation:"true"`
	Metric                    *int32                                    `path:"metric" module:"openconfig-network-instance"`
	ΛMetric                   []ygot.Annotation                         `path:"@metric" ygotAnnotation:"true"`
	MetricType                E_OpenconfigMplsTypes_LSP_METRIC_TYPE     `path:"metric-type" module:"openconfig-network-instance"`
	ΛMetricType               []ygot.Annotation                         `path:"@metric-type" ygotAnnotation:"true"`
	Name                      *string                                   `path:"name" module:"openconfig-network-instance"`
	ΛName                     []ygot.Annotation                         `path:"@name" ygotAnnotation:"true"`
	Preference                *uint8                                    `path:"preference" module:"openconfig-network-instance"`
	ΛPreference               []ygot.Annotation                         `path:"@preference" ygotAnnotation:"true"`
	ProtectionStyleRequested  E_OpenconfigMplsTypes_PROTECTION_TYPE     `path:"protection-style-requested" module:"openconfig-network-instance"`
	ΛProtectionStyleRequested []ygot.Annotation                         `path:"@protection-style-requested" ygotAnnotation:"true"`
	ReoptimizeTimer           *uint16                                   `path:"reoptimize-timer" module:"openconfig-network-instance"`
	ΛReoptimizeTimer          []ygot.Annotation                         `path:"@reoptimize-timer" ygotAnnotation:"true"`
	SetupPriority             *uint8                                    `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority            []ygot.Annotation                         `path:"@setup-priority" ygotAnnotation:"true"`
	ShortcutEligible          *bool                                     `path:"shortcut-eligible" module:"openconfig-network-instance"`
	ΛShortcutEligible         []ygot.Annotation                         `path:"@shortcut-eligible" ygotAnnotation:"true"`
	SignalingProtocol         E_OpenconfigMplsTypes_PATH_SETUP_PROTOCOL `path:"signaling-protocol" module:"openconfig-network-instance"`
	ΛSignalingProtocol        []ygot.Annotation                         `path:"@signaling-protocol" ygotAnnotation:"true"`
	SoftPreemption            *bool                                     `path:"soft-preemption" module:"openconfig-network-instance"`
	ΛSoftPreemption           []ygot.Annotation                         `path:"@soft-preemption" ygotAnnotation:"true"`
	Source                    *string                                   `path:"source" module:"openconfig-network-instance"`
	ΛSource                   []ygot.Annotation                         `path:"@source" ygotAnnotation:"true"`
	Type                      E_OpenconfigMplsTypes_TUNNEL_TYPE         `path:"type" module:"openconfig-network-instance"`
	ΛType                     []ygot.Annotation                         `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes struct {
	ΛMetadata          []ygot.Annotation                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Config             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config            `path:"config" module:"openconfig-network-instance"`
	ΛConfig            []ygot.Annotation                                                                                                                          `path:"@config" ygotAnnotation:"true"`
	P2PPrimaryPath     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath    `path:"p2p-primary-path" module:"openconfig-network-instance"`
	ΛP2PPrimaryPath    []ygot.Annotation                                                                                                                          `path:"@p2p-primary-path" ygotAnnotation:"true"`
	P2PSecondaryPaths  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths `path:"p2p-secondary-paths" module:"openconfig-network-instance"`
	ΛP2PSecondaryPaths []ygot.Annotation                                                                                                                          `path:"@p2p-secondary-paths" ygotAnnotation:"true"`
	State              *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State             `path:"state" module:"openconfig-network-instance"`
	ΛState             []ygot.Annotation                                                                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config{}
	return t.Config
}

// GetOrCreateP2PPrimaryPath retrieves the value of the P2PPrimaryPath field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetOrCreateP2PPrimaryPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath {
	if t.P2PPrimaryPath != nil {
		return t.P2PPrimaryPath
	}
	t.P2PPrimaryPath = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath{}
	return t.P2PPrimaryPath
}

// GetOrCreateP2PSecondaryPaths retrieves the value of the P2PSecondaryPaths field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetOrCreateP2PSecondaryPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths {
	if t.P2PSecondaryPaths != nil {
		return t.P2PSecondaryPaths
	}
	t.P2PSecondaryPaths = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths{}
	return t.P2PSecondaryPaths
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetP2PPrimaryPath returns the value of the P2PPrimaryPath struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes. If the receiver or the field P2PPrimaryPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetP2PPrimaryPath() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath {
	if t != nil && t.P2PPrimaryPath != nil {
		return t.P2PPrimaryPath
	}
	return nil
}

// GetP2PSecondaryPaths returns the value of the P2PSecondaryPaths struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes. If the receiver or the field P2PSecondaryPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetP2PSecondaryPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths {
	if t != nil && t.P2PSecondaryPaths != nil {
		return t.P2PSecondaryPaths
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Destination         *string           `path:"destination" module:"openconfig-network-instance"`
	ΛDestination        []ygot.Annotation `path:"@destination" ygotAnnotation:"true"`
	RecordRouteEnabled  *bool             `path:"record-route-enabled" module:"openconfig-network-instance"`
	ΛRecordRouteEnabled []ygot.Annotation `path:"@record-route-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	P2PPrimaryPath  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath `path:"p2p-primary-path" module:"openconfig-network-instance"`
	ΛP2PPrimaryPath []ygot.Annotation                                                                                                                                                 `path:"@p2p-primary-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) IsYANGGoStruct() {
}

// NewP2PPrimaryPath creates a new entry in the P2PPrimaryPath list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) NewP2PPrimaryPath(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PPrimaryPath == nil {
		t.P2PPrimaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2PPrimaryPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2PPrimaryPath", key)
	}

	t.P2PPrimaryPath[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath{
		Name: &Name,
	}

	return t.P2PPrimaryPath[key], nil
}

// RenameP2PPrimaryPath renames an entry in the list P2PPrimaryPath within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) RenameP2PPrimaryPath(oldK, newK string) error {
	if _, ok := t.P2PPrimaryPath[newK]; ok {
		return fmt.Errorf("key %v already exists in P2PPrimaryPath", newK)
	}

	e, ok := t.P2PPrimaryPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2PPrimaryPath", oldK)
	}
	e.Name = &newK

	t.P2PPrimaryPath[newK] = e
	delete(t.P2PPrimaryPath, oldK)
	return nil
}

// GetOrCreateP2PPrimaryPathMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) GetOrCreateP2PPrimaryPathMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath {
	if t.P2PPrimaryPath == nil {
		t.P2PPrimaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath)
	}
	return t.P2PPrimaryPath
}

// GetOrCreateP2PPrimaryPath retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) GetOrCreateP2PPrimaryPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath {

	key := Name

	if v, ok := t.P2PPrimaryPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2PPrimaryPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2PPrimaryPath got unexpected error: %v", err))
	}
	return v
}

// GetP2PPrimaryPath retrieves the value with the specified key from
// the P2PPrimaryPath map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) GetP2PPrimaryPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.P2PPrimaryPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2PPrimaryPath deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) DeleteP2PPrimaryPath(Name string) {
	key := Name

	delete(t.P2PPrimaryPath, key)
}

// AppendP2PPrimaryPath appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath struct to the
// list P2PPrimaryPath of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) AppendP2PPrimaryPath(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PPrimaryPath == nil {
		t.P2PPrimaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath)
	}

	if _, ok := t.P2PPrimaryPath[key]; ok {
		return fmt.Errorf("duplicate key for list P2PPrimaryPath %v", key)
	}

	t.P2PPrimaryPath[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath struct {
	ΛMetadata                   []ygot.Annotation                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	AdminGroups                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups                `path:"admin-groups" module:"openconfig-network-instance"`
	ΛAdminGroups                []ygot.Annotation                                                                                                                                                                 `path:"@admin-groups" ygotAnnotation:"true"`
	CandidateSecondaryPaths     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths    `path:"candidate-secondary-paths" module:"openconfig-network-instance"`
	ΛCandidateSecondaryPaths    []ygot.Annotation                                                                                                                                                                 `path:"@candidate-secondary-paths" ygotAnnotation:"true"`
	Config                      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config                     `path:"config" module:"openconfig-network-instance"`
	ΛConfig                     []ygot.Annotation                                                                                                                                                                 `path:"@config" ygotAnnotation:"true"`
	Name                        *string                                                                                                                                                                           `path:"name" module:"openconfig-network-instance"`
	ΛName                       []ygot.Annotation                                                                                                                                                                 `path:"@name" ygotAnnotation:"true"`
	PathMetricBoundConstraints  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints `path:"path-metric-bound-constraints" module:"openconfig-network-instance"`
	ΛPathMetricBoundConstraints []ygot.Annotation                                                                                                                                                                 `path:"@path-metric-bound-constraints" ygotAnnotation:"true"`
	State                       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State                      `path:"state" module:"openconfig-network-instance"`
	ΛState                      []ygot.Annotation                                                                                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) IsYANGGoStruct() {
}

// GetOrCreateAdminGroups retrieves the value of the AdminGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetOrCreateAdminGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups {
	if t.AdminGroups != nil {
		return t.AdminGroups
	}
	t.AdminGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups{}
	return t.AdminGroups
}

// GetOrCreateCandidateSecondaryPaths retrieves the value of the CandidateSecondaryPaths field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetOrCreateCandidateSecondaryPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths {
	if t.CandidateSecondaryPaths != nil {
		return t.CandidateSecondaryPaths
	}
	t.CandidateSecondaryPaths = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths{}
	return t.CandidateSecondaryPaths
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config{}
	return t.Config
}

// GetOrCreatePathMetricBoundConstraints retrieves the value of the PathMetricBoundConstraints field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetOrCreatePathMetricBoundConstraints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints {
	if t.PathMetricBoundConstraints != nil {
		return t.PathMetricBoundConstraints
	}
	t.PathMetricBoundConstraints = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints{}
	return t.PathMetricBoundConstraints
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State{}
	return t.State
}

// GetAdminGroups returns the value of the AdminGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath. If the receiver or the field AdminGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetAdminGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups {
	if t != nil && t.AdminGroups != nil {
		return t.AdminGroups
	}
	return nil
}

// GetCandidateSecondaryPaths returns the value of the CandidateSecondaryPaths struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath. If the receiver or the field CandidateSecondaryPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetCandidateSecondaryPaths() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths {
	if t != nil && t.CandidateSecondaryPaths != nil {
		return t.CandidateSecondaryPaths
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetPathMetricBoundConstraints returns the value of the PathMetricBoundConstraints struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath. If the receiver or the field PathMetricBoundConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetPathMetricBoundConstraints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints {
	if t != nil && t.PathMetricBoundConstraints != nil {
		return t.PathMetricBoundConstraints
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeGroup     []string          `path:"exclude-group" module:"openconfig-network-instance"`
	ΛExcludeGroup    []ygot.Annotation `path:"@exclude-group" ygotAnnotation:"true"`
	IncludeAllGroup  []string          `path:"include-all-group" module:"openconfig-network-instance"`
	ΛIncludeAllGroup []ygot.Annotation `path:"@include-all-group" ygotAnnotation:"true"`
	IncludeAnyGroup  []string          `path:"include-any-group" module:"openconfig-network-instance"`
	ΛIncludeAnyGroup []ygot.Annotation `path:"@include-any-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeGroup     []string          `path:"exclude-group" module:"openconfig-network-instance"`
	ΛExcludeGroup    []ygot.Annotation `path:"@exclude-group" ygotAnnotation:"true"`
	IncludeAllGroup  []string          `path:"include-all-group" module:"openconfig-network-instance"`
	ΛIncludeAllGroup []ygot.Annotation `path:"@include-all-group" ygotAnnotation:"true"`
	IncludeAnyGroup  []string          `path:"include-any-group" module:"openconfig-network-instance"`
	ΛIncludeAnyGroup []ygot.Annotation `path:"@include-any-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_AdminGroups_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths struct {
	ΛMetadata               []ygot.Annotation                                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	CandidateSecondaryPath  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath `path:"candidate-secondary-path" module:"openconfig-network-instance"`
	ΛCandidateSecondaryPath []ygot.Annotation                                                                                                                                                                                                `path:"@candidate-secondary-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) IsYANGGoStruct() {
}

// NewCandidateSecondaryPath creates a new entry in the CandidateSecondaryPath list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) NewCandidateSecondaryPath(SecondaryPath string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidateSecondaryPath == nil {
		t.CandidateSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath)
	}

	key := SecondaryPath

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidateSecondaryPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidateSecondaryPath", key)
	}

	t.CandidateSecondaryPath[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath{
		SecondaryPath: &SecondaryPath,
	}

	return t.CandidateSecondaryPath[key], nil
}

// RenameCandidateSecondaryPath renames an entry in the list CandidateSecondaryPath within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) RenameCandidateSecondaryPath(oldK, newK string) error {
	if _, ok := t.CandidateSecondaryPath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidateSecondaryPath", newK)
	}

	e, ok := t.CandidateSecondaryPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidateSecondaryPath", oldK)
	}
	e.SecondaryPath = &newK

	t.CandidateSecondaryPath[newK] = e
	delete(t.CandidateSecondaryPath, oldK)
	return nil
}

// GetOrCreateCandidateSecondaryPathMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) GetOrCreateCandidateSecondaryPathMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath {
	if t.CandidateSecondaryPath == nil {
		t.CandidateSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath)
	}
	return t.CandidateSecondaryPath
}

// GetOrCreateCandidateSecondaryPath retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) GetOrCreateCandidateSecondaryPath(SecondaryPath string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath {

	key := SecondaryPath

	if v, ok := t.CandidateSecondaryPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidateSecondaryPath(SecondaryPath)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidateSecondaryPath got unexpected error: %v", err))
	}
	return v
}

// GetCandidateSecondaryPath retrieves the value with the specified key from
// the CandidateSecondaryPath map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) GetCandidateSecondaryPath(SecondaryPath string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath {

	if t == nil {
		return nil
	}

	key := SecondaryPath

	if lm, ok := t.CandidateSecondaryPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidateSecondaryPath deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) DeleteCandidateSecondaryPath(SecondaryPath string) {
	key := SecondaryPath

	delete(t.CandidateSecondaryPath, key)
}

// AppendCandidateSecondaryPath appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath struct to the
// list CandidateSecondaryPath of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) AppendCandidateSecondaryPath(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) error {
	if v.SecondaryPath == nil {
		return fmt.Errorf("invalid nil key received for SecondaryPath")
	}

	key := *v.SecondaryPath

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidateSecondaryPath == nil {
		t.CandidateSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath)
	}

	if _, ok := t.CandidateSecondaryPath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidateSecondaryPath %v", key)
	}

	t.CandidateSecondaryPath[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                                                                                                                                                            `path:"@config" ygotAnnotation:"true"`
	SecondaryPath  *string                                                                                                                                                                                                      `path:"secondary-path" module:"openconfig-network-instance"`
	ΛSecondaryPath []ygot.Annotation                                                                                                                                                                                            `path:"@secondary-path" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State  `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryPath == nil {
		return nil, fmt.Errorf("nil value for key SecondaryPath")
	}

	return map[string]interface{}{
		"secondary-path": *t.SecondaryPath,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Priority       *uint16           `path:"priority" module:"openconfig-network-instance"`
	ΛPriority      []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
	SecondaryPath  *string           `path:"secondary-path" module:"openconfig-network-instance"`
	ΛSecondaryPath []ygot.Annotation `path:"@secondary-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Active         *bool             `path:"active" module:"openconfig-network-instance"`
	ΛActive        []ygot.Annotation `path:"@active" ygotAnnotation:"true"`
	Priority       *uint16           `path:"priority" module:"openconfig-network-instance"`
	ΛPriority      []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
	SecondaryPath  *string           `path:"secondary-path" module:"openconfig-network-instance"`
	ΛSecondaryPath []ygot.Annotation `path:"@secondary-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_CandidateSecondaryPaths_CandidateSecondaryPath_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config struct {
	ΛMetadata              []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	CspfTiebreaker         E_OpenconfigMpls_CspfTieBreaking              `path:"cspf-tiebreaker" module:"openconfig-network-instance"`
	ΛCspfTiebreaker        []ygot.Annotation                             `path:"@cspf-tiebreaker" ygotAnnotation:"true"`
	ExplicitPathName       *string                                       `path:"explicit-path-name" module:"openconfig-network-instance"`
	ΛExplicitPathName      []ygot.Annotation                             `path:"@explicit-path-name" ygotAnnotation:"true"`
	HoldPriority           *uint8                                        `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority          []ygot.Annotation                             `path:"@hold-priority" ygotAnnotation:"true"`
	Name                   *string                                       `path:"name" module:"openconfig-network-instance"`
	ΛName                  []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
	PathComputationMethod  E_OpenconfigMplsTypes_PATH_COMPUTATION_METHOD `path:"path-computation-method" module:"openconfig-network-instance"`
	ΛPathComputationMethod []ygot.Annotation                             `path:"@path-computation-method" ygotAnnotation:"true"`
	PathComputationServer  *string                                       `path:"path-computation-server" module:"openconfig-network-instance"`
	ΛPathComputationServer []ygot.Annotation                             `path:"@path-computation-server" ygotAnnotation:"true"`
	PathControl            E_OpenconfigPcep_LspControlType               `path:"path-control" module:"openconfig-network-instance"`
	ΛPathControl           []ygot.Annotation                             `path:"@path-control" ygotAnnotation:"true"`
	Preference             *uint8                                        `path:"preference" module:"openconfig-network-instance"`
	ΛPreference            []ygot.Annotation                             `path:"@preference" ygotAnnotation:"true"`
	RetryTimer             *uint16                                       `path:"retry-timer" module:"openconfig-network-instance"`
	ΛRetryTimer            []ygot.Annotation                             `path:"@retry-timer" ygotAnnotation:"true"`
	SetupPriority          *uint8                                        `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority         []ygot.Annotation                             `path:"@setup-priority" ygotAnnotation:"true"`
	UseCspf                *bool                                         `path:"use-cspf" module:"openconfig-network-instance"`
	ΛUseCspf               []ygot.Annotation                             `path:"@use-cspf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints struct {
	ΛMetadata                  []ygot.Annotation                                                                                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	PathMetricBoundConstraint  map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint `path:"path-metric-bound-constraint" module:"openconfig-network-instance"`
	ΛPathMetricBoundConstraint []ygot.Annotation                                                                                                                                                                                                                                      `path:"@path-metric-bound-constraint" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) IsYANGGoStruct() {
}

// NewPathMetricBoundConstraint creates a new entry in the PathMetricBoundConstraint list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) NewPathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathMetricBoundConstraint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathMetricBoundConstraint", key)
	}

	t.PathMetricBoundConstraint[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint{
		Type: Type,
	}

	return t.PathMetricBoundConstraint[key], nil
}

// RenamePathMetricBoundConstraint renames an entry in the list PathMetricBoundConstraint within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) RenamePathMetricBoundConstraint(oldK, newK E_OpenconfigMplsTypes_PATH_METRIC_TYPE) error {
	if _, ok := t.PathMetricBoundConstraint[newK]; ok {
		return fmt.Errorf("key %v already exists in PathMetricBoundConstraint", newK)
	}

	e, ok := t.PathMetricBoundConstraint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathMetricBoundConstraint", oldK)
	}
	e.Type = newK

	t.PathMetricBoundConstraint[newK] = e
	delete(t.PathMetricBoundConstraint, oldK)
	return nil
}

// GetOrCreatePathMetricBoundConstraintMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) GetOrCreatePathMetricBoundConstraintMap() map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}
	return t.PathMetricBoundConstraint
}

// GetOrCreatePathMetricBoundConstraint retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) GetOrCreatePathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {

	key := Type

	if v, ok := t.PathMetricBoundConstraint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathMetricBoundConstraint(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathMetricBoundConstraint got unexpected error: %v", err))
	}
	return v
}

// GetPathMetricBoundConstraint retrieves the value with the specified key from
// the PathMetricBoundConstraint map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) GetPathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.PathMetricBoundConstraint[key]; ok {
		return lm
	}
	return nil
}

// DeletePathMetricBoundConstraint deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) DeletePathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) {
	key := Type

	delete(t.PathMetricBoundConstraint, key)
}

// AppendPathMetricBoundConstraint appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct to the
// list PathMetricBoundConstraint of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) AppendPathMetricBoundConstraint(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}

	if _, ok := t.PathMetricBoundConstraint[key]; ok {
		return fmt.Errorf("duplicate key for list PathMetricBoundConstraint %v", key)
	}

	t.PathMetricBoundConstraint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                  `path:"@state" ygotAnnotation:"true"`
	Type      E_OpenconfigMplsTypes_PATH_METRIC_TYPE                                                                                                                                                                             `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                                                                                                                  `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config struct {
	ΛMetadata         []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	MetricUpperBound  *uint64                                `path:"metric-upper-bound" module:"openconfig-network-instance"`
	ΛMetricUpperBound []ygot.Annotation                      `path:"@metric-upper-bound" ygotAnnotation:"true"`
	Type              E_OpenconfigMplsTypes_PATH_METRIC_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType             []ygot.Annotation                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State struct {
	ΛMetadata         []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	MetricUpperBound  *uint64                                `path:"metric-upper-bound" module:"openconfig-network-instance"`
	ΛMetricUpperBound []ygot.Annotation                      `path:"@metric-upper-bound" ygotAnnotation:"true"`
	Type              E_OpenconfigMplsTypes_PATH_METRIC_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType             []ygot.Annotation                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State struct {
	ΛMetadata               []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AssociatedRsvpSessions  []uint64                                      `path:"associated-rsvp-sessions" module:"openconfig-network-instance"`
	ΛAssociatedRsvpSessions []ygot.Annotation                             `path:"@associated-rsvp-sessions" ygotAnnotation:"true"`
	CspfMetric              *uint64                                       `path:"cspf-metric" module:"openconfig-network-instance"`
	ΛCspfMetric             []ygot.Annotation                             `path:"@cspf-metric" ygotAnnotation:"true"`
	CspfTiebreaker          E_OpenconfigMpls_CspfTieBreaking              `path:"cspf-tiebreaker" module:"openconfig-network-instance"`
	ΛCspfTiebreaker         []ygot.Annotation                             `path:"@cspf-tiebreaker" ygotAnnotation:"true"`
	ExplicitPathName        *string                                       `path:"explicit-path-name" module:"openconfig-network-instance"`
	ΛExplicitPathName       []ygot.Annotation                             `path:"@explicit-path-name" ygotAnnotation:"true"`
	HoldPriority            *uint8                                        `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority           []ygot.Annotation                             `path:"@hold-priority" ygotAnnotation:"true"`
	Name                    *string                                       `path:"name" module:"openconfig-network-instance"`
	ΛName                   []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
	PathComputationMethod   E_OpenconfigMplsTypes_PATH_COMPUTATION_METHOD `path:"path-computation-method" module:"openconfig-network-instance"`
	ΛPathComputationMethod  []ygot.Annotation                             `path:"@path-computation-method" ygotAnnotation:"true"`
	PathComputationServer   *string                                       `path:"path-computation-server" module:"openconfig-network-instance"`
	ΛPathComputationServer  []ygot.Annotation                             `path:"@path-computation-server" ygotAnnotation:"true"`
	PathControl             E_OpenconfigPcep_LspControlType               `path:"path-control" module:"openconfig-network-instance"`
	ΛPathControl            []ygot.Annotation                             `path:"@path-control" ygotAnnotation:"true"`
	Preference              *uint8                                        `path:"preference" module:"openconfig-network-instance"`
	ΛPreference             []ygot.Annotation                             `path:"@preference" ygotAnnotation:"true"`
	RetryTimer              *uint16                                       `path:"retry-timer" module:"openconfig-network-instance"`
	ΛRetryTimer             []ygot.Annotation                             `path:"@retry-timer" ygotAnnotation:"true"`
	SetupPriority           *uint8                                        `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority          []ygot.Annotation                             `path:"@setup-priority" ygotAnnotation:"true"`
	SpfMetric               *uint64                                       `path:"spf-metric" module:"openconfig-network-instance"`
	ΛSpfMetric              []ygot.Annotation                             `path:"@spf-metric" ygotAnnotation:"true"`
	UseCspf                 *bool                                         `path:"use-cspf" module:"openconfig-network-instance"`
	ΛUseCspf                []ygot.Annotation                             `path:"@use-cspf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_P2PPrimaryPath_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths struct {
	ΛMetadata         []ygot.Annotation                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	P2PSecondaryPath  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath `path:"p2p-secondary-path" module:"openconfig-network-instance"`
	ΛP2PSecondaryPath []ygot.Annotation                                                                                                                                                      `path:"@p2p-secondary-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) IsYANGGoStruct() {
}

// NewP2PSecondaryPath creates a new entry in the P2PSecondaryPath list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) NewP2PSecondaryPath(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PSecondaryPath == nil {
		t.P2PSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2PSecondaryPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2PSecondaryPath", key)
	}

	t.P2PSecondaryPath[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath{
		Name: &Name,
	}

	return t.P2PSecondaryPath[key], nil
}

// RenameP2PSecondaryPath renames an entry in the list P2PSecondaryPath within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) RenameP2PSecondaryPath(oldK, newK string) error {
	if _, ok := t.P2PSecondaryPath[newK]; ok {
		return fmt.Errorf("key %v already exists in P2PSecondaryPath", newK)
	}

	e, ok := t.P2PSecondaryPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2PSecondaryPath", oldK)
	}
	e.Name = &newK

	t.P2PSecondaryPath[newK] = e
	delete(t.P2PSecondaryPath, oldK)
	return nil
}

// GetOrCreateP2PSecondaryPathMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) GetOrCreateP2PSecondaryPathMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath {
	if t.P2PSecondaryPath == nil {
		t.P2PSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath)
	}
	return t.P2PSecondaryPath
}

// GetOrCreateP2PSecondaryPath retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) GetOrCreateP2PSecondaryPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath {

	key := Name

	if v, ok := t.P2PSecondaryPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2PSecondaryPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2PSecondaryPath got unexpected error: %v", err))
	}
	return v
}

// GetP2PSecondaryPath retrieves the value with the specified key from
// the P2PSecondaryPath map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) GetP2PSecondaryPath(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.P2PSecondaryPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2PSecondaryPath deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) DeleteP2PSecondaryPath(Name string) {
	key := Name

	delete(t.P2PSecondaryPath, key)
}

// AppendP2PSecondaryPath appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath struct to the
// list P2PSecondaryPath of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) AppendP2PSecondaryPath(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PSecondaryPath == nil {
		t.P2PSecondaryPath = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath)
	}

	if _, ok := t.P2PSecondaryPath[key]; ok {
		return fmt.Errorf("duplicate key for list P2PSecondaryPath %v", key)
	}

	t.P2PSecondaryPath[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath struct {
	ΛMetadata                   []ygot.Annotation                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	AdminGroups                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups                `path:"admin-groups" module:"openconfig-network-instance"`
	ΛAdminGroups                []ygot.Annotation                                                                                                                                                                      `path:"@admin-groups" ygotAnnotation:"true"`
	Config                      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config                     `path:"config" module:"openconfig-network-instance"`
	ΛConfig                     []ygot.Annotation                                                                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	Name                        *string                                                                                                                                                                                `path:"name" module:"openconfig-network-instance"`
	ΛName                       []ygot.Annotation                                                                                                                                                                      `path:"@name" ygotAnnotation:"true"`
	PathMetricBoundConstraints  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints `path:"path-metric-bound-constraints" module:"openconfig-network-instance"`
	ΛPathMetricBoundConstraints []ygot.Annotation                                                                                                                                                                      `path:"@path-metric-bound-constraints" ygotAnnotation:"true"`
	State                       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State                      `path:"state" module:"openconfig-network-instance"`
	ΛState                      []ygot.Annotation                                                                                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) IsYANGGoStruct() {
}

// GetOrCreateAdminGroups retrieves the value of the AdminGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetOrCreateAdminGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups {
	if t.AdminGroups != nil {
		return t.AdminGroups
	}
	t.AdminGroups = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups{}
	return t.AdminGroups
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config{}
	return t.Config
}

// GetOrCreatePathMetricBoundConstraints retrieves the value of the PathMetricBoundConstraints field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetOrCreatePathMetricBoundConstraints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints {
	if t.PathMetricBoundConstraints != nil {
		return t.PathMetricBoundConstraints
	}
	t.PathMetricBoundConstraints = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints{}
	return t.PathMetricBoundConstraints
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State{}
	return t.State
}

// GetAdminGroups returns the value of the AdminGroups struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath. If the receiver or the field AdminGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetAdminGroups() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups {
	if t != nil && t.AdminGroups != nil {
		return t.AdminGroups
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetPathMetricBoundConstraints returns the value of the PathMetricBoundConstraints struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath. If the receiver or the field PathMetricBoundConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetPathMetricBoundConstraints() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints {
	if t != nil && t.PathMetricBoundConstraints != nil {
		return t.PathMetricBoundConstraints
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeGroup     []string          `path:"exclude-group" module:"openconfig-network-instance"`
	ΛExcludeGroup    []ygot.Annotation `path:"@exclude-group" ygotAnnotation:"true"`
	IncludeAllGroup  []string          `path:"include-all-group" module:"openconfig-network-instance"`
	ΛIncludeAllGroup []ygot.Annotation `path:"@include-all-group" ygotAnnotation:"true"`
	IncludeAnyGroup  []string          `path:"include-any-group" module:"openconfig-network-instance"`
	ΛIncludeAnyGroup []ygot.Annotation `path:"@include-any-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeGroup     []string          `path:"exclude-group" module:"openconfig-network-instance"`
	ΛExcludeGroup    []ygot.Annotation `path:"@exclude-group" ygotAnnotation:"true"`
	IncludeAllGroup  []string          `path:"include-all-group" module:"openconfig-network-instance"`
	ΛIncludeAllGroup []ygot.Annotation `path:"@include-all-group" ygotAnnotation:"true"`
	IncludeAnyGroup  []string          `path:"include-any-group" module:"openconfig-network-instance"`
	ΛIncludeAnyGroup []ygot.Annotation `path:"@include-any-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_AdminGroups_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config struct {
	ΛMetadata              []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	CspfTiebreaker         E_OpenconfigMpls_CspfTieBreaking              `path:"cspf-tiebreaker" module:"openconfig-network-instance"`
	ΛCspfTiebreaker        []ygot.Annotation                             `path:"@cspf-tiebreaker" ygotAnnotation:"true"`
	ExplicitPathName       *string                                       `path:"explicit-path-name" module:"openconfig-network-instance"`
	ΛExplicitPathName      []ygot.Annotation                             `path:"@explicit-path-name" ygotAnnotation:"true"`
	HoldPriority           *uint8                                        `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority          []ygot.Annotation                             `path:"@hold-priority" ygotAnnotation:"true"`
	Name                   *string                                       `path:"name" module:"openconfig-network-instance"`
	ΛName                  []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
	PathComputationMethod  E_OpenconfigMplsTypes_PATH_COMPUTATION_METHOD `path:"path-computation-method" module:"openconfig-network-instance"`
	ΛPathComputationMethod []ygot.Annotation                             `path:"@path-computation-method" ygotAnnotation:"true"`
	PathComputationServer  *string                                       `path:"path-computation-server" module:"openconfig-network-instance"`
	ΛPathComputationServer []ygot.Annotation                             `path:"@path-computation-server" ygotAnnotation:"true"`
	PathControl            E_OpenconfigPcep_LspControlType               `path:"path-control" module:"openconfig-network-instance"`
	ΛPathControl           []ygot.Annotation                             `path:"@path-control" ygotAnnotation:"true"`
	Preference             *uint8                                        `path:"preference" module:"openconfig-network-instance"`
	ΛPreference            []ygot.Annotation                             `path:"@preference" ygotAnnotation:"true"`
	RetryTimer             *uint16                                       `path:"retry-timer" module:"openconfig-network-instance"`
	ΛRetryTimer            []ygot.Annotation                             `path:"@retry-timer" ygotAnnotation:"true"`
	SetupPriority          *uint8                                        `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority         []ygot.Annotation                             `path:"@setup-priority" ygotAnnotation:"true"`
	UseCspf                *bool                                         `path:"use-cspf" module:"openconfig-network-instance"`
	ΛUseCspf               []ygot.Annotation                             `path:"@use-cspf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints struct {
	ΛMetadata                  []ygot.Annotation                                                                                                                                                                                                                                           `path:"@" ygotAnnotation:"true"`
	PathMetricBoundConstraint  map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint `path:"path-metric-bound-constraint" module:"openconfig-network-instance"`
	ΛPathMetricBoundConstraint []ygot.Annotation                                                                                                                                                                                                                                           `path:"@path-metric-bound-constraint" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) IsYANGGoStruct() {
}

// NewPathMetricBoundConstraint creates a new entry in the PathMetricBoundConstraint list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) NewPathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathMetricBoundConstraint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathMetricBoundConstraint", key)
	}

	t.PathMetricBoundConstraint[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint{
		Type: Type,
	}

	return t.PathMetricBoundConstraint[key], nil
}

// RenamePathMetricBoundConstraint renames an entry in the list PathMetricBoundConstraint within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) RenamePathMetricBoundConstraint(oldK, newK E_OpenconfigMplsTypes_PATH_METRIC_TYPE) error {
	if _, ok := t.PathMetricBoundConstraint[newK]; ok {
		return fmt.Errorf("key %v already exists in PathMetricBoundConstraint", newK)
	}

	e, ok := t.PathMetricBoundConstraint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathMetricBoundConstraint", oldK)
	}
	e.Type = newK

	t.PathMetricBoundConstraint[newK] = e
	delete(t.PathMetricBoundConstraint, oldK)
	return nil
}

// GetOrCreatePathMetricBoundConstraintMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) GetOrCreatePathMetricBoundConstraintMap() map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}
	return t.PathMetricBoundConstraint
}

// GetOrCreatePathMetricBoundConstraint retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) GetOrCreatePathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {

	key := Type

	if v, ok := t.PathMetricBoundConstraint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathMetricBoundConstraint(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathMetricBoundConstraint got unexpected error: %v", err))
	}
	return v
}

// GetPathMetricBoundConstraint retrieves the value with the specified key from
// the PathMetricBoundConstraint map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) GetPathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.PathMetricBoundConstraint[key]; ok {
		return lm
	}
	return nil
}

// DeletePathMetricBoundConstraint deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) DeletePathMetricBoundConstraint(Type E_OpenconfigMplsTypes_PATH_METRIC_TYPE) {
	key := Type

	delete(t.PathMetricBoundConstraint, key)
}

// AppendPathMetricBoundConstraint appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct to the
// list PathMetricBoundConstraint of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) AppendPathMetricBoundConstraint(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathMetricBoundConstraint == nil {
		t.PathMetricBoundConstraint = make(map[E_OpenconfigMplsTypes_PATH_METRIC_TYPE]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint)
	}

	if _, ok := t.PathMetricBoundConstraint[key]; ok {
		return fmt.Errorf("duplicate key for list PathMetricBoundConstraint %v", key)
	}

	t.PathMetricBoundConstraint[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                                                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                                                                       `path:"@state" ygotAnnotation:"true"`
	Type      E_OpenconfigMplsTypes_PATH_METRIC_TYPE                                                                                                                                                                                  `path:"type" module:"openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                                                                                                                       `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config struct {
	ΛMetadata         []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	MetricUpperBound  *uint64                                `path:"metric-upper-bound" module:"openconfig-network-instance"`
	ΛMetricUpperBound []ygot.Annotation                      `path:"@metric-upper-bound" ygotAnnotation:"true"`
	Type              E_OpenconfigMplsTypes_PATH_METRIC_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType             []ygot.Annotation                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State struct {
	ΛMetadata         []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	MetricUpperBound  *uint64                                `path:"metric-upper-bound" module:"openconfig-network-instance"`
	ΛMetricUpperBound []ygot.Annotation                      `path:"@metric-upper-bound" ygotAnnotation:"true"`
	Type              E_OpenconfigMplsTypes_PATH_METRIC_TYPE `path:"type" module:"openconfig-network-instance"`
	ΛType             []ygot.Annotation                      `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_PathMetricBoundConstraints_PathMetricBoundConstraint_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State struct {
	ΛMetadata               []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	AssociatedRsvpSessions  []uint64                                      `path:"associated-rsvp-sessions" module:"openconfig-network-instance"`
	ΛAssociatedRsvpSessions []ygot.Annotation                             `path:"@associated-rsvp-sessions" ygotAnnotation:"true"`
	CspfMetric              *uint64                                       `path:"cspf-metric" module:"openconfig-network-instance"`
	ΛCspfMetric             []ygot.Annotation                             `path:"@cspf-metric" ygotAnnotation:"true"`
	CspfTiebreaker          E_OpenconfigMpls_CspfTieBreaking              `path:"cspf-tiebreaker" module:"openconfig-network-instance"`
	ΛCspfTiebreaker         []ygot.Annotation                             `path:"@cspf-tiebreaker" ygotAnnotation:"true"`
	ExplicitPathName        *string                                       `path:"explicit-path-name" module:"openconfig-network-instance"`
	ΛExplicitPathName       []ygot.Annotation                             `path:"@explicit-path-name" ygotAnnotation:"true"`
	HoldPriority            *uint8                                        `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority           []ygot.Annotation                             `path:"@hold-priority" ygotAnnotation:"true"`
	Name                    *string                                       `path:"name" module:"openconfig-network-instance"`
	ΛName                   []ygot.Annotation                             `path:"@name" ygotAnnotation:"true"`
	PathComputationMethod   E_OpenconfigMplsTypes_PATH_COMPUTATION_METHOD `path:"path-computation-method" module:"openconfig-network-instance"`
	ΛPathComputationMethod  []ygot.Annotation                             `path:"@path-computation-method" ygotAnnotation:"true"`
	PathComputationServer   *string                                       `path:"path-computation-server" module:"openconfig-network-instance"`
	ΛPathComputationServer  []ygot.Annotation                             `path:"@path-computation-server" ygotAnnotation:"true"`
	PathControl             E_OpenconfigPcep_LspControlType               `path:"path-control" module:"openconfig-network-instance"`
	ΛPathControl            []ygot.Annotation                             `path:"@path-control" ygotAnnotation:"true"`
	Preference              *uint8                                        `path:"preference" module:"openconfig-network-instance"`
	ΛPreference             []ygot.Annotation                             `path:"@preference" ygotAnnotation:"true"`
	RetryTimer              *uint16                                       `path:"retry-timer" module:"openconfig-network-instance"`
	ΛRetryTimer             []ygot.Annotation                             `path:"@retry-timer" ygotAnnotation:"true"`
	SetupPriority           *uint8                                        `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority          []ygot.Annotation                             `path:"@setup-priority" ygotAnnotation:"true"`
	SpfMetric               *uint64                                       `path:"spf-metric" module:"openconfig-network-instance"`
	ΛSpfMetric              []ygot.Annotation                             `path:"@spf-metric" ygotAnnotation:"true"`
	UseCspf                 *bool                                         `path:"use-cspf" module:"openconfig-network-instance"`
	ΛUseCspf                []ygot.Annotation                             `path:"@use-cspf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_P2PSecondaryPaths_P2PSecondaryPath_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Destination         *string           `path:"destination" module:"openconfig-network-instance"`
	ΛDestination        []ygot.Annotation `path:"@destination" ygotAnnotation:"true"`
	RecordRouteEnabled  *bool             `path:"record-route-enabled" module:"openconfig-network-instance"`
	ΛRecordRouteEnabled []ygot.Annotation `path:"@record-route-enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_P2PTunnelAttributes_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State struct {
	ΛMetadata                 []ygot.Annotation                                                                                                   `path:"@" ygotAnnotation:"true"`
	AdminStatus               E_OpenconfigMplsTypes_TUNNEL_ADMIN_STATUS                                                                           `path:"admin-status" module:"openconfig-network-instance"`
	ΛAdminStatus              []ygot.Annotation                                                                                                   `path:"@admin-status" ygotAnnotation:"true"`
	AutoGenerated             *bool                                                                                                               `path:"auto-generated" module:"openconfig-network-instance"`
	ΛAutoGenerated            []ygot.Annotation                                                                                                   `path:"@auto-generated" ygotAnnotation:"true"`
	Counters                  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters                 []ygot.Annotation                                                                                                   `path:"@counters" ygotAnnotation:"true"`
	Description               *string                                                                                                             `path:"description" module:"openconfig-network-instance"`
	ΛDescription              []ygot.Annotation                                                                                                   `path:"@description" ygotAnnotation:"true"`
	HoldPriority              *uint8                                                                                                              `path:"hold-priority" module:"openconfig-network-instance"`
	ΛHoldPriority             []ygot.Annotation                                                                                                   `path:"@hold-priority" ygotAnnotation:"true"`
	Metric                    *int32                                                                                                              `path:"metric" module:"openconfig-network-instance"`
	ΛMetric                   []ygot.Annotation                                                                                                   `path:"@metric" ygotAnnotation:"true"`
	MetricType                E_OpenconfigMplsTypes_LSP_METRIC_TYPE                                                                               `path:"metric-type" module:"openconfig-network-instance"`
	ΛMetricType               []ygot.Annotation                                                                                                   `path:"@metric-type" ygotAnnotation:"true"`
	Name                      *string                                                                                                             `path:"name" module:"openconfig-network-instance"`
	ΛName                     []ygot.Annotation                                                                                                   `path:"@name" ygotAnnotation:"true"`
	OperStatus                E_OpenconfigMplsTypes_LSP_OPER_STATUS                                                                               `path:"oper-status" module:"openconfig-network-instance"`
	ΛOperStatus               []ygot.Annotation                                                                                                   `path:"@oper-status" ygotAnnotation:"true"`
	Preference                *uint8                                                                                                              `path:"preference" module:"openconfig-network-instance"`
	ΛPreference               []ygot.Annotation                                                                                                   `path:"@preference" ygotAnnotation:"true"`
	ProtectionStyleRequested  E_OpenconfigMplsTypes_PROTECTION_TYPE                                                                               `path:"protection-style-requested" module:"openconfig-network-instance"`
	ΛProtectionStyleRequested []ygot.Annotation                                                                                                   `path:"@protection-style-requested" ygotAnnotation:"true"`
	ReoptimizeTimer           *uint16                                                                                                             `path:"reoptimize-timer" module:"openconfig-network-instance"`
	ΛReoptimizeTimer          []ygot.Annotation                                                                                                   `path:"@reoptimize-timer" ygotAnnotation:"true"`
	Role                      E_OpenconfigMplsTypes_LSP_ROLE                                                                                      `path:"role" module:"openconfig-network-instance"`
	ΛRole                     []ygot.Annotation                                                                                                   `path:"@role" ygotAnnotation:"true"`
	SetupPriority             *uint8                                                                                                              `path:"setup-priority" module:"openconfig-network-instance"`
	ΛSetupPriority            []ygot.Annotation                                                                                                   `path:"@setup-priority" ygotAnnotation:"true"`
	ShortcutEligible          *bool                                                                                                               `path:"shortcut-eligible" module:"openconfig-network-instance"`
	ΛShortcutEligible         []ygot.Annotation                                                                                                   `path:"@shortcut-eligible" ygotAnnotation:"true"`
	SignalingProtocol         E_OpenconfigMplsTypes_PATH_SETUP_PROTOCOL                                                                           `path:"signaling-protocol" module:"openconfig-network-instance"`
	ΛSignalingProtocol        []ygot.Annotation                                                                                                   `path:"@signaling-protocol" ygotAnnotation:"true"`
	SoftPreemption            *bool                                                                                                               `path:"soft-preemption" module:"openconfig-network-instance"`
	ΛSoftPreemption           []ygot.Annotation                                                                                                   `path:"@soft-preemption" ygotAnnotation:"true"`
	Source                    *string                                                                                                             `path:"source" module:"openconfig-network-instance"`
	ΛSource                   []ygot.Annotation                                                                                                   `path:"@source" ygotAnnotation:"true"`
	Type                      E_OpenconfigMplsTypes_TUNNEL_TYPE                                                                                   `path:"type" module:"openconfig-network-instance"`
	ΛType                     []ygot.Annotation                                                                                                   `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Bytes                   *uint64           `path:"bytes" module:"openconfig-network-instance"`
	ΛBytes                  []ygot.Annotation `path:"@bytes" ygotAnnotation:"true"`
	CurrentPathTime         *uint64           `path:"current-path-time" module:"openconfig-network-instance"`
	ΛCurrentPathTime        []ygot.Annotation `path:"@current-path-time" ygotAnnotation:"true"`
	NextReoptimizationTime  *uint64           `path:"next-reoptimization-time" module:"openconfig-network-instance"`
	ΛNextReoptimizationTime []ygot.Annotation `path:"@next-reoptimization-time" ygotAnnotation:"true"`
	OnlineTime              *uint64           `path:"online-time" module:"openconfig-network-instance"`
	ΛOnlineTime             []ygot.Annotation `path:"@online-time" ygotAnnotation:"true"`
	Packets                 *uint64           `path:"packets" module:"openconfig-network-instance"`
	ΛPackets                []ygot.Annotation `path:"@packets" ygotAnnotation:"true"`
	PathChanges             *uint64           `path:"path-changes" module:"openconfig-network-instance"`
	ΛPathChanges            []ygot.Annotation `path:"@path-changes" ygotAnnotation:"true"`
	StateChanges            *uint64           `path:"state-changes" module:"openconfig-network-instance"`
	ΛStateChanges           []ygot.Annotation `path:"@state-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnels_Tunnel_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps struct {
	ΛMetadata  []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	StaticLsp  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp `path:"static-lsp" module:"openconfig-network-instance"`
	ΛStaticLsp []ygot.Annotation                                                                                     `path:"@static-lsp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) IsYANGGoStruct() {
}

// NewStaticLsp creates a new entry in the StaticLsp list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) NewStaticLsp(Name string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticLsp == nil {
		t.StaticLsp = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticLsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticLsp", key)
	}

	t.StaticLsp[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp{
		Name: &Name,
	}

	return t.StaticLsp[key], nil
}

// RenameStaticLsp renames an entry in the list StaticLsp within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) RenameStaticLsp(oldK, newK string) error {
	if _, ok := t.StaticLsp[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticLsp", newK)
	}

	e, ok := t.StaticLsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticLsp", oldK)
	}
	e.Name = &newK

	t.StaticLsp[newK] = e
	delete(t.StaticLsp, oldK)
	return nil
}

// GetOrCreateStaticLspMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) GetOrCreateStaticLspMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp {
	if t.StaticLsp == nil {
		t.StaticLsp = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp)
	}
	return t.StaticLsp
}

// GetOrCreateStaticLsp retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) GetOrCreateStaticLsp(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp {

	key := Name

	if v, ok := t.StaticLsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticLsp(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticLsp got unexpected error: %v", err))
	}
	return v
}

// GetStaticLsp retrieves the value with the specified key from
// the StaticLsp map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) GetStaticLsp(Name string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.StaticLsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticLsp deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) DeleteStaticLsp(Name string) {
	key := Name

	delete(t.StaticLsp, key)
}

// AppendStaticLsp appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp struct to the
// list StaticLsp of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) AppendStaticLsp(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticLsp == nil {
		t.StaticLsp = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp)
	}

	if _, ok := t.StaticLsp[key]; ok {
		return fmt.Errorf("duplicate key for list StaticLsp %v", key)
	}

	t.StaticLsp[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp struct {
	ΛMetadata []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config  `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                  `path:"@config" ygotAnnotation:"true"`
	Egress    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress  `path:"egress" module:"openconfig-network-instance"`
	ΛEgress   []ygot.Annotation                                                                                  `path:"@egress" ygotAnnotation:"true"`
	Ingress   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress `path:"ingress" module:"openconfig-network-instance"`
	ΛIngress  []ygot.Annotation                                                                                  `path:"@ingress" ygotAnnotation:"true"`
	Name      *string                                                                                            `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation                                                                                  `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State   `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                  `path:"@state" ygotAnnotation:"true"`
	Transit   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit `path:"transit" module:"openconfig-network-instance"`
	ΛTransit  []ygot.Annotation                                                                                  `path:"@transit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config{}
	return t.Config
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetOrCreateEgress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetOrCreateIngress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress{}
	return t.Ingress
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State{}
	return t.State
}

// GetOrCreateTransit retrieves the value of the Transit field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetOrCreateTransit() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit {
	if t.Transit != nil {
		return t.Transit
	}
	t.Transit = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit{}
	return t.Transit
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetEgress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetIngress() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTransit returns the value of the Transit struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp. If the receiver or the field Transit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) GetTransit() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit {
	if t != nil && t.Transit != nil {
		return t.Transit
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress struct {
	ΛMetadata    []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config      `path:"config" module:"openconfig-network-instance"`
	ΛConfig      []ygot.Annotation                                                                                             `path:"@config" ygotAnnotation:"true"`
	LspNextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops `path:"lsp-next-hops" module:"openconfig-network-instance"`
	ΛLspNextHops []ygot.Annotation                                                                                             `path:"@lsp-next-hops" ygotAnnotation:"true"`
	State        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State       `path:"state" module:"openconfig-network-instance"`
	ΛState       []ygot.Annotation                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config{}
	return t.Config
}

// GetOrCreateLspNextHops retrieves the value of the LspNextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetOrCreateLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops {
	if t.LspNextHops != nil {
		return t.LspNextHops
	}
	t.LspNextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops{}
	return t.LspNextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetLspNextHops returns the value of the LspNextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress. If the receiver or the field LspNextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops {
	if t != nil && t.LspNextHops != nil {
		return t.LspNextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config struct {
	ΛMetadata      []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                           `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                     `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                           `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                      `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                           `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                     `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                           `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                           `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                     `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                           `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops struct {
	ΛMetadata   []ygot.Annotation                                                                                                                   `path:"@" ygotAnnotation:"true"`
	LspNextHop  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop `path:"lsp-next-hop" module:"openconfig-network-instance"`
	ΛLspNextHop []ygot.Annotation                                                                                                                   `path:"@lsp-next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) IsYANGGoStruct() {
}

// NewLspNextHop creates a new entry in the LspNextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) NewLspNextHop(Index uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspNextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspNextHop", key)
	}

	t.LspNextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop{
		Index: &Index,
	}

	return t.LspNextHop[key], nil
}

// RenameLspNextHop renames an entry in the list LspNextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) RenameLspNextHop(oldK, newK uint32) error {
	if _, ok := t.LspNextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in LspNextHop", newK)
	}

	e, ok := t.LspNextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspNextHop", oldK)
	}
	e.Index = &newK

	t.LspNextHop[newK] = e
	delete(t.LspNextHop, oldK)
	return nil
}

// GetOrCreateLspNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) GetOrCreateLspNextHopMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop {
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop)
	}
	return t.LspNextHop
}

// GetOrCreateLspNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) GetOrCreateLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop {

	key := Index

	if v, ok := t.LspNextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspNextHop got unexpected error: %v", err))
	}
	return v
}

// GetLspNextHop retrieves the value with the specified key from
// the LspNextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) GetLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.LspNextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) DeleteLspNextHop(Index uint32) {
	key := Index

	delete(t.LspNextHop, key)
}

// AppendLspNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop struct to the
// list LspNextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) AppendLspNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop)
	}

	if _, ok := t.LspNextHop[key]; ok {
		return fmt.Errorf("duplicate key for list LspNextHop %v", key)
	}

	t.LspNextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                               `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                                                                         `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                               `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config struct {
	ΛMetadata     []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                        `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                              `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                        `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                              `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                        `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                              `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                              `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                        `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                              `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                             `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                       `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                             `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                       `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                             `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                       `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                             `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                             `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                       `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                             `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_LspNextHops_LspNextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                          `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                    `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                          `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                     `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                          `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                    `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                          `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                          `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                    `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                          `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Egress_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress struct {
	ΛMetadata    []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config      `path:"config" module:"openconfig-network-instance"`
	ΛConfig      []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	LspNextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops `path:"lsp-next-hops" module:"openconfig-network-instance"`
	ΛLspNextHops []ygot.Annotation                                                                                              `path:"@lsp-next-hops" ygotAnnotation:"true"`
	State        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State       `path:"state" module:"openconfig-network-instance"`
	ΛState       []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config{}
	return t.Config
}

// GetOrCreateLspNextHops retrieves the value of the LspNextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetOrCreateLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops {
	if t.LspNextHops != nil {
		return t.LspNextHops
	}
	t.LspNextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops{}
	return t.LspNextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetLspNextHops returns the value of the LspNextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress. If the receiver or the field LspNextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops {
	if t != nil && t.LspNextHops != nil {
		return t.LspNextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config struct {
	ΛMetadata      []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                            `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                      `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                            `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                       `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                            `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                      `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                            `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                            `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                      `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                            `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops struct {
	ΛMetadata   []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	LspNextHop  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop `path:"lsp-next-hop" module:"openconfig-network-instance"`
	ΛLspNextHop []ygot.Annotation                                                                                                                    `path:"@lsp-next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) IsYANGGoStruct() {
}

// NewLspNextHop creates a new entry in the LspNextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) NewLspNextHop(Index uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspNextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspNextHop", key)
	}

	t.LspNextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop{
		Index: &Index,
	}

	return t.LspNextHop[key], nil
}

// RenameLspNextHop renames an entry in the list LspNextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) RenameLspNextHop(oldK, newK uint32) error {
	if _, ok := t.LspNextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in LspNextHop", newK)
	}

	e, ok := t.LspNextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspNextHop", oldK)
	}
	e.Index = &newK

	t.LspNextHop[newK] = e
	delete(t.LspNextHop, oldK)
	return nil
}

// GetOrCreateLspNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) GetOrCreateLspNextHopMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop {
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop)
	}
	return t.LspNextHop
}

// GetOrCreateLspNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) GetOrCreateLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop {

	key := Index

	if v, ok := t.LspNextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspNextHop got unexpected error: %v", err))
	}
	return v
}

// GetLspNextHop retrieves the value with the specified key from
// the LspNextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) GetLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.LspNextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) DeleteLspNextHop(Index uint32) {
	key := Index

	delete(t.LspNextHop, key)
}

// AppendLspNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop struct to the
// list LspNextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) AppendLspNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop)
	}

	if _, ok := t.LspNextHop[key]; ok {
		return fmt.Errorf("duplicate key for list LspNextHop %v", key)
	}

	t.LspNextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                                                                          `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config struct {
	ΛMetadata     []ygot.Annotation                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                         `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                               `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                         `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                               `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                         `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                               `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                               `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                         `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                               `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                        `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                              `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                        `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                              `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                        `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                              `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                              `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                        `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                              `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_LspNextHops_LspNextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                           `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                     `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                           `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                      `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                           `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                     `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                           `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                           `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                     `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                           `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Ingress_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-network-instance"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit struct {
	ΛMetadata    []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config      `path:"config" module:"openconfig-network-instance"`
	ΛConfig      []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	LspNextHops  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops `path:"lsp-next-hops" module:"openconfig-network-instance"`
	ΛLspNextHops []ygot.Annotation                                                                                              `path:"@lsp-next-hops" ygotAnnotation:"true"`
	State        *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State       `path:"state" module:"openconfig-network-instance"`
	ΛState       []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config{}
	return t.Config
}

// GetOrCreateLspNextHops retrieves the value of the LspNextHops field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetOrCreateLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops {
	if t.LspNextHops != nil {
		return t.LspNextHops
	}
	t.LspNextHops = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops{}
	return t.LspNextHops
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetLspNextHops returns the value of the LspNextHops struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit. If the receiver or the field LspNextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetLspNextHops() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops {
	if t != nil && t.LspNextHops != nil {
		return t.LspNextHops
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config struct {
	ΛMetadata      []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                            `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                      `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                            `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                       `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                            `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                      `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                            `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                            `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                      `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                            `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops struct {
	ΛMetadata   []ygot.Annotation                                                                                                                    `path:"@" ygotAnnotation:"true"`
	LspNextHop  map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop `path:"lsp-next-hop" module:"openconfig-network-instance"`
	ΛLspNextHop []ygot.Annotation                                                                                                                    `path:"@lsp-next-hop" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) IsYANGGoStruct() {
}

// NewLspNextHop creates a new entry in the LspNextHop list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) NewLspNextHop(Index uint32) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspNextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspNextHop", key)
	}

	t.LspNextHop[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop{
		Index: &Index,
	}

	return t.LspNextHop[key], nil
}

// RenameLspNextHop renames an entry in the list LspNextHop within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) RenameLspNextHop(oldK, newK uint32) error {
	if _, ok := t.LspNextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in LspNextHop", newK)
	}

	e, ok := t.LspNextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspNextHop", oldK)
	}
	e.Index = &newK

	t.LspNextHop[newK] = e
	delete(t.LspNextHop, oldK)
	return nil
}

// GetOrCreateLspNextHopMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) GetOrCreateLspNextHopMap() map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop {
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop)
	}
	return t.LspNextHop
}

// GetOrCreateLspNextHop retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) GetOrCreateLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop {

	key := Index

	if v, ok := t.LspNextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspNextHop got unexpected error: %v", err))
	}
	return v
}

// GetLspNextHop retrieves the value with the specified key from
// the LspNextHop map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) GetLspNextHop(Index uint32) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.LspNextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspNextHop deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) DeleteLspNextHop(Index uint32) {
	key := Index

	delete(t.LspNextHop, key)
}

// AppendLspNextHop appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop struct to the
// list LspNextHop of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) AppendLspNextHop(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspNextHop == nil {
		t.LspNextHop = make(map[uint32]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop)
	}

	if _, ok := t.LspNextHop[key]; ok {
		return fmt.Errorf("duplicate key for list LspNextHop %v", key)
	}

	t.LspNextHop[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop struct {
	ΛMetadata []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                                                                          `path:"index" module:"openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                                                                `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config struct {
	ΛMetadata     []ygot.Annotation                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                         `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                               `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                         `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                               `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                         `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                               `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                               `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                         `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                               `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State struct {
	ΛMetadata     []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Index         *uint32                                                                                                                                        `path:"index" module:"openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                                                                                              `path:"@index" ygotAnnotation:"true"`
	Interface     *string                                                                                                                                        `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation                                                                                                                              `path:"@interface" ygotAnnotation:"true"`
	IpAddress     *string                                                                                                                                        `path:"ip-address" module:"openconfig-network-instance"`
	ΛIpAddress    []ygot.Annotation                                                                                                                              `path:"@ip-address" ygotAnnotation:"true"`
	PushLabel     OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State_PushLabel_Union `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel    []ygot.Annotation                                                                                                                              `path:"@push-label" ygotAnnotation:"true"`
	Subinterface  *uint32                                                                                                                                        `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation                                                                                                                              `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_LspNextHops_LspNextHop_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	IncomingLabel  OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_IncomingLabel_Union `path:"incoming-label" module:"openconfig-network-instance"`
	ΛIncomingLabel []ygot.Annotation                                                                                                           `path:"@incoming-label" ygotAnnotation:"true"`
	Interface      *string                                                                                                                     `path:"interface" module:"openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                                                           `path:"@interface" ygotAnnotation:"true"`
	Metric         *uint8                                                                                                                      `path:"metric" module:"openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                                                                                           `path:"@metric" ygotAnnotation:"true"`
	NextHop        *string                                                                                                                     `path:"next-hop" module:"openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                                                           `path:"@next-hop" ygotAnnotation:"true"`
	PushLabel      OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State_PushLabel_Union     `path:"push-label" module:"openconfig-network-instance"`
	ΛPushLabel     []ygot.Annotation                                                                                                           `path:"@push-label" ygotAnnotation:"true"`
	Subinterface   *uint32                                                                                                                     `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface  []ygot.Annotation                                                                                                           `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_StaticLsps_StaticLsp_Transit_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath struct {
	ΛMetadata          []ygot.Annotation                                                                                         `path:"@" ygotAnnotation:"true"`
	PathSetupProtocol  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol `path:"path-setup-protocol" module:"openconfig-network-instance"`
	ΛPathSetupProtocol []ygot.Annotation                                                                                         `path:"@path-setup-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) IsYANGGoStruct() {
}

// GetOrCreatePathSetupProtocol retrieves the value of the PathSetupProtocol field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) GetOrCreatePathSetupProtocol() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol {
	if t.PathSetupProtocol != nil {
		return t.PathSetupProtocol
	}
	t.PathSetupProtocol = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol{}
	return t.PathSetupProtocol
}

// GetPathSetupProtocol returns the value of the PathSetupProtocol struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath. If the receiver or the field PathSetupProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) GetPathSetupProtocol() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol {
	if t != nil && t.PathSetupProtocol != nil {
		return t.PathSetupProtocol
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Ldp       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp `path:"ldp" module:"openconfig-network-instance"`
	ΛLdp      []ygot.Annotation                                                                                             `path:"@ldp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) IsYANGGoStruct() {
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) GetOrCreateLdp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp{}
	return t.Ldp
}

// GetLdp returns the value of the Ldp struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) GetLdp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols struct {
	ΛMetadata       []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	Ldp             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp            `path:"ldp" module:"openconfig-network-instance"`
	ΛLdp            []ygot.Annotation                                                                                  `path:"@ldp" ygotAnnotation:"true"`
	RsvpTe          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe         `path:"rsvp-te" module:"openconfig-network-instance"`
	ΛRsvpTe         []ygot.Annotation                                                                                  `path:"@rsvp-te" ygotAnnotation:"true"`
	SegmentRouting  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting `path:"segment-routing" module:"openconfig-network-instance"`
	ΛSegmentRouting []ygot.Annotation                                                                                  `path:"@segment-routing" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) IsYANGGoStruct() {
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetOrCreateLdp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp{}
	return t.Ldp
}

// GetOrCreateRsvpTe retrieves the value of the RsvpTe field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetOrCreateRsvpTe() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe {
	if t.RsvpTe != nil {
		return t.RsvpTe
	}
	t.RsvpTe = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe{}
	return t.RsvpTe
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetOrCreateSegmentRouting() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting{}
	return t.SegmentRouting
}

// GetLdp returns the value of the Ldp struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetLdp() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// GetRsvpTe returns the value of the RsvpTe struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols. If the receiver or the field RsvpTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetRsvpTe() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe {
	if t != nil && t.RsvpTe != nil {
		return t.RsvpTe
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) GetSegmentRouting() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp struct {
	ΛMetadata            []ygot.Annotation                                                                                           `path:"@" ygotAnnotation:"true"`
	Global               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global              `path:"global" module:"openconfig-network-instance"`
	ΛGlobal              []ygot.Annotation                                                                                           `path:"@global" ygotAnnotation:"true"`
	InterfaceAttributes  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes `path:"interface-attributes" module:"openconfig-network-instance"`
	ΛInterfaceAttributes []ygot.Annotation                                                                                           `path:"@interface-attributes" ygotAnnotation:"true"`
	Neighbors            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors           `path:"neighbors" module:"openconfig-network-instance"`
	ΛNeighbors           []ygot.Annotation                                                                                           `path:"@neighbors" ygotAnnotation:"true"`
	Targeted             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted            `path:"targeted" module:"openconfig-network-instance"`
	ΛTargeted            []ygot.Annotation                                                                                           `path:"@targeted" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) IsYANGGoStruct() {
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetOrCreateGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global{}
	return t.Global
}

// GetOrCreateInterfaceAttributes retrieves the value of the InterfaceAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetOrCreateInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes {
	if t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	t.InterfaceAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes{}
	return t.InterfaceAttributes
}

// GetOrCreateNeighbors retrieves the value of the Neighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetOrCreateNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors {
	if t.Neighbors != nil {
		return t.Neighbors
	}
	t.Neighbors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors{}
	return t.Neighbors
}

// GetOrCreateTargeted retrieves the value of the Targeted field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetOrCreateTargeted() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted {
	if t.Targeted != nil {
		return t.Targeted
	}
	t.Targeted = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted{}
	return t.Targeted
}

// GetGlobal returns the value of the Global struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetInterfaceAttributes returns the value of the InterfaceAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp. If the receiver or the field InterfaceAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes {
	if t != nil && t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	return nil
}

// GetNeighbors returns the value of the Neighbors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp. If the receiver or the field Neighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors {
	if t != nil && t.Neighbors != nil {
		return t.Neighbors
	}
	return nil
}

// GetTargeted returns the value of the Targeted struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp. If the receiver or the field Targeted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) GetTargeted() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted {
	if t != nil && t.Targeted != nil {
		return t.Targeted
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global struct {
	ΛMetadata        []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Authentication   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication  `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication  []ygot.Annotation                                                                                              `path:"@authentication" ygotAnnotation:"true"`
	Config           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config          `path:"config" module:"openconfig-network-instance"`
	ΛConfig          []ygot.Annotation                                                                                              `path:"@config" ygotAnnotation:"true"`
	GracefulRestart  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart []ygot.Annotation                                                                                              `path:"@graceful-restart" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetOrCreateAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication{}
	return t.Authentication
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config{}
	return t.Config
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetOrCreateGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State{}
	return t.State
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication struct {
	ΛMetadata []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LsrId     *string           `path:"lsr-id" module:"openconfig-network-instance"`
	ΛLsrId    []ygot.Annotation `path:"@lsr-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart struct {
	ΛMetadata []ygot.Annotation                                                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	ForwardingHoldtime  *uint16           `path:"forwarding-holdtime" module:"openconfig-network-instance"`
	ΛForwardingHoldtime []ygot.Annotation `path:"@forwarding-holdtime" ygotAnnotation:"true"`
	HelperEnable        *bool             `path:"helper-enable" module:"openconfig-network-instance"`
	ΛHelperEnable       []ygot.Annotation `path:"@helper-enable" ygotAnnotation:"true"`
	ReconnectTime       *uint16           `path:"reconnect-time" module:"openconfig-network-instance"`
	ΛReconnectTime      []ygot.Annotation `path:"@reconnect-time" ygotAnnotation:"true"`
	RecoveryTime        *uint16           `path:"recovery-time" module:"openconfig-network-instance"`
	ΛRecoveryTime       []ygot.Annotation `path:"@recovery-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	ForwardingHoldtime  *uint16           `path:"forwarding-holdtime" module:"openconfig-network-instance"`
	ΛForwardingHoldtime []ygot.Annotation `path:"@forwarding-holdtime" ygotAnnotation:"true"`
	HelperEnable        *bool             `path:"helper-enable" module:"openconfig-network-instance"`
	ΛHelperEnable       []ygot.Annotation `path:"@helper-enable" ygotAnnotation:"true"`
	ReconnectTime       *uint16           `path:"reconnect-time" module:"openconfig-network-instance"`
	ΛReconnectTime      []ygot.Annotation `path:"@reconnect-time" ygotAnnotation:"true"`
	RecoveryTime        *uint16           `path:"recovery-time" module:"openconfig-network-instance"`
	ΛRecoveryTime       []ygot.Annotation `path:"@recovery-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LsrId     *string           `path:"lsr-id" module:"openconfig-network-instance"`
	ΛLsrId    []ygot.Annotation `path:"@lsr-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes struct {
	ΛMetadata   []ygot.Annotation                                                                                                      `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config     `path:"config" module:"openconfig-network-instance"`
	ΛConfig     []ygot.Annotation                                                                                                      `path:"@config" ygotAnnotation:"true"`
	Interfaces  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces `path:"interfaces" module:"openconfig-network-instance"`
	ΛInterfaces []ygot.Annotation                                                                                                      `path:"@interfaces" ygotAnnotation:"true"`
	State       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State      `path:"state" module:"openconfig-network-instance"`
	ΛState      []ygot.Annotation                                                                                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config{}
	return t.Config
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetOrCreateInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces{}
	return t.Interfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetInterfaces() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                                                                                                           `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                                                                           `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) NewInterface(InterfaceId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) GetOrCreateInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) GetInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface struct {
	ΛMetadata        []ygot.Annotation                                                                                                                                `path:"@" ygotAnnotation:"true"`
	AddressFamilies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies `path:"address-families" module:"openconfig-network-instance"`
	ΛAddressFamilies []ygot.Annotation                                                                                                                                `path:"@address-families" ygotAnnotation:"true"`
	Config           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config          `path:"config" module:"openconfig-network-instance"`
	ΛConfig          []ygot.Annotation                                                                                                                                `path:"@config" ygotAnnotation:"true"`
	InterfaceId      *string                                                                                                                                          `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId     []ygot.Annotation                                                                                                                                `path:"@interface-id" ygotAnnotation:"true"`
	InterfaceRef     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef    `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef    []ygot.Annotation                                                                                                                                `path:"@interface-ref" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateAddressFamilies retrieves the value of the AddressFamilies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetOrCreateAddressFamilies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies {
	if t.AddressFamilies != nil {
		return t.AddressFamilies
	}
	t.AddressFamilies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies{}
	return t.AddressFamilies
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State{}
	return t.State
}

// GetAddressFamilies returns the value of the AddressFamilies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface. If the receiver or the field AddressFamilies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetAddressFamilies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies {
	if t != nil && t.AddressFamilies != nil {
		return t.AddressFamilies
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	AddressFamily  map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                                                                                                                                                 `path:"@address-family" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) IsYANGGoStruct() {
}

// NewAddressFamily creates a new entry in the AddressFamily list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) NewAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily)
	}

	key := AfiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressFamily[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressFamily", key)
	}

	t.AddressFamily[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily{
		AfiName: AfiName,
	}

	return t.AddressFamily[key], nil
}

// RenameAddressFamily renames an entry in the list AddressFamily within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) RenameAddressFamily(oldK, newK E_OpenconfigMplsLdp_MplsLdpAfi) error {
	if _, ok := t.AddressFamily[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressFamily", newK)
	}

	e, ok := t.AddressFamily[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressFamily", oldK)
	}
	e.AfiName = newK

	t.AddressFamily[newK] = e
	delete(t.AddressFamily, oldK)
	return nil
}

// GetOrCreateAddressFamilyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) GetOrCreateAddressFamilyMap() map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily {
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily)
	}
	return t.AddressFamily
}

// GetOrCreateAddressFamily retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) GetOrCreateAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily {

	key := AfiName

	if v, ok := t.AddressFamily[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressFamily(AfiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressFamily got unexpected error: %v", err))
	}
	return v
}

// GetAddressFamily retrieves the value with the specified key from
// the AddressFamily map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) GetAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily {

	if t == nil {
		return nil
	}

	key := AfiName

	if lm, ok := t.AddressFamily[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressFamily deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) DeleteAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) {
	key := AfiName

	delete(t.AddressFamily, key)
}

// AppendAddressFamily appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily struct to the
// list AddressFamily of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) AppendAddressFamily(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) error {
	key := v.AfiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily)
	}

	if _, ok := t.AddressFamily[key]; ok {
		return fmt.Errorf("duplicate key for list AddressFamily %v", key)
	}

	t.AddressFamily[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                     `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi                                                                                                                                        `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation                                                                                                                                                     `path:"@afi-name" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name": t.AfiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation              `path:"@afi-name" ygotAnnotation:"true"`
	Enabled   *bool                          `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation              `path:"@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation              `path:"@afi-name" ygotAnnotation:"true"`
	Enabled   *bool                          `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation              `path:"@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_AddressFamilies_AddressFamily_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceId    *string           `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId   []ygot.Annotation `path:"@interface-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State struct {
	ΛMetadata      []ygot.Annotation                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Counters       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                                                               `path:"@counters" ygotAnnotation:"true"`
	HelloHoldtime  *uint16                                                                                                                                         `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                                                                               `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16                                                                                                                                         `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation                                                                                                                               `path:"@hello-interval" ygotAnnotation:"true"`
	InterfaceId    *string                                                                                                                                         `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId   []ygot.Annotation                                                                                                                               `path:"@interface-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interfaces_Interface_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Neighbor  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor `path:"neighbor" module:"openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                                                                                                                                                                            `path:"@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key represents the key for list Neighbor of element /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key struct {
	LsrId        string `path:"lsr-id"`
	LabelSpaceId uint16 `path:"label-space-id"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"lsr-id":         t.LsrId,
		"label-space-id": t.LabelSpaceId,
	}, nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) NewNeighbor(LsrId string, LabelSpaceId uint16) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor{
		LsrId:        &LsrId,
		LabelSpaceId: &LabelSpaceId,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) RenameNeighbor(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.LsrId = &newK.LsrId
	e.LabelSpaceId = &newK.LabelSpaceId

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighborMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) GetOrCreateNeighborMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor {
	if t.Neighbor == nil {
		t.Neighbor = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor)
	}
	return t.Neighbor
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) GetOrCreateNeighbor(LsrId string, LabelSpaceId uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(LsrId, LabelSpaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) GetNeighbor(LsrId string, LabelSpaceId uint16) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) DeleteNeighbor(LsrId string, LabelSpaceId uint16) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor struct to the
// list Neighbor of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) AppendNeighbor(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) error {
	if v.LsrId == nil {
		return fmt.Errorf("invalid nil key for LsrId")
	}

	if v.LabelSpaceId == nil {
		return fmt.Errorf("invalid nil key for LabelSpaceId")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key{
		LsrId:        *v.LsrId,
		LabelSpaceId: *v.LabelSpaceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor struct {
	ΛMetadata         []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	Authentication    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication   `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication   []ygot.Annotation                                                                                                           `path:"@authentication" ygotAnnotation:"true"`
	Config            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config           `path:"config" module:"openconfig-network-instance"`
	ΛConfig           []ygot.Annotation                                                                                                           `path:"@config" ygotAnnotation:"true"`
	HelloAdjacencies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies `path:"hello-adjacencies" module:"openconfig-network-instance"`
	ΛHelloAdjacencies []ygot.Annotation                                                                                                           `path:"@hello-adjacencies" ygotAnnotation:"true"`
	LabelSpaceId      *uint16                                                                                                                     `path:"label-space-id" module:"openconfig-network-instance"`
	ΛLabelSpaceId     []ygot.Annotation                                                                                                           `path:"@label-space-id" ygotAnnotation:"true"`
	LsrId             *string                                                                                                                     `path:"lsr-id" module:"openconfig-network-instance"`
	ΛLsrId            []ygot.Annotation                                                                                                           `path:"@lsr-id" ygotAnnotation:"true"`
	State             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State            `path:"state" module:"openconfig-network-instance"`
	ΛState            []ygot.Annotation                                                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetOrCreateAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication{}
	return t.Authentication
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config{}
	return t.Config
}

// GetOrCreateHelloAdjacencies retrieves the value of the HelloAdjacencies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetOrCreateHelloAdjacencies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies {
	if t.HelloAdjacencies != nil {
		return t.HelloAdjacencies
	}
	t.HelloAdjacencies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies{}
	return t.HelloAdjacencies
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State{}
	return t.State
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHelloAdjacencies returns the value of the HelloAdjacencies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor. If the receiver or the field HelloAdjacencies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetHelloAdjacencies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies {
	if t != nil && t.HelloAdjacencies != nil {
		return t.HelloAdjacencies
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LabelSpaceId == nil {
		return nil, fmt.Errorf("nil value for key LabelSpaceId")
	}

	if t.LsrId == nil {
		return nil, fmt.Errorf("nil value for key LsrId")
	}

	return map[string]interface{}{
		"label-space-id": *t.LabelSpaceId,
		"lsr-id":         *t.LsrId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication struct {
	ΛMetadata []ygot.Annotation                                                                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Authentication_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableDownstreamOnDemand  *bool             `path:"enable-downstream-on-demand" module:"openconfig-network-instance"`
	ΛEnableDownstreamOnDemand []ygot.Annotation `path:"@enable-downstream-on-demand" ygotAnnotation:"true"`
	LabelSpaceId              *uint16           `path:"label-space-id" module:"openconfig-network-instance"`
	ΛLabelSpaceId             []ygot.Annotation `path:"@label-space-id" ygotAnnotation:"true"`
	LsrId                     *string           `path:"lsr-id" module:"openconfig-network-instance"`
	ΛLsrId                    []ygot.Annotation `path:"@lsr-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	HelloAdjacency  map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency `path:"hello-adjacency" module:"openconfig-network-instance"`
	ΛHelloAdjacency []ygot.Annotation                                                                                                                                                                                                                                                                            `path:"@hello-adjacency" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) IsYANGGoStruct() {
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key represents the key for list HelloAdjacency of element /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key struct {
	RemoteAddress string `path:"remote-address"`
	LocalAddress  string `path:"local-address"`
}

// IsYANGGoKeyStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key key struct.
func (t OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"remote-address": t.RemoteAddress,
		"local-address":  t.LocalAddress,
	}, nil
}

// NewHelloAdjacency creates a new entry in the HelloAdjacency list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) NewHelloAdjacency(RemoteAddress string, LocalAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HelloAdjacency == nil {
		t.HelloAdjacency = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency)
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HelloAdjacency[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HelloAdjacency", key)
	}

	t.HelloAdjacency[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency{
		RemoteAddress: &RemoteAddress,
		LocalAddress:  &LocalAddress,
	}

	return t.HelloAdjacency[key], nil
}

// RenameHelloAdjacency renames an entry in the list HelloAdjacency within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) RenameHelloAdjacency(oldK, newK OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key) error {
	if _, ok := t.HelloAdjacency[newK]; ok {
		return fmt.Errorf("key %v already exists in HelloAdjacency", newK)
	}

	e, ok := t.HelloAdjacency[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HelloAdjacency", oldK)
	}
	e.RemoteAddress = &newK.RemoteAddress
	e.LocalAddress = &newK.LocalAddress

	t.HelloAdjacency[newK] = e
	delete(t.HelloAdjacency, oldK)
	return nil
}

// GetOrCreateHelloAdjacencyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) GetOrCreateHelloAdjacencyMap() map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency {
	if t.HelloAdjacency == nil {
		t.HelloAdjacency = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency)
	}
	return t.HelloAdjacency
}

// GetOrCreateHelloAdjacency retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) GetOrCreateHelloAdjacency(RemoteAddress string, LocalAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency {

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	if v, ok := t.HelloAdjacency[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHelloAdjacency(RemoteAddress, LocalAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHelloAdjacency got unexpected error: %v", err))
	}
	return v
}

// GetHelloAdjacency retrieves the value with the specified key from
// the HelloAdjacency map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) GetHelloAdjacency(RemoteAddress string, LocalAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency {

	if t == nil {
		return nil
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	if lm, ok := t.HelloAdjacency[key]; ok {
		return lm
	}
	return nil
}

// DeleteHelloAdjacency deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) DeleteHelloAdjacency(RemoteAddress string, LocalAddress string) {
	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	delete(t.HelloAdjacency, key)
}

// AppendHelloAdjacency appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency struct to the
// list HelloAdjacency of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) AppendHelloAdjacency(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key for RemoteAddress")
	}

	if v.LocalAddress == nil {
		return fmt.Errorf("invalid nil key for LocalAddress")
	}

	key := OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key{
		RemoteAddress: *v.RemoteAddress,
		LocalAddress:  *v.LocalAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HelloAdjacency == nil {
		t.HelloAdjacency = make(map[OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_Key]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency)
	}

	if _, ok := t.HelloAdjacency[key]; ok {
		return fmt.Errorf("duplicate key for list HelloAdjacency %v", key)
	}

	t.HelloAdjacency[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	HelloHoldtime  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                                                                                        `path:"@hello-holdtime" ygotAnnotation:"true"`
	InterfaceRef   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef  `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef  []ygot.Annotation                                                                                                                                        `path:"@interface-ref" ygotAnnotation:"true"`
	LocalAddress   *string                                                                                                                                                  `path:"local-address" module:"openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation                                                                                                                                        `path:"@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string                                                                                                                                                  `path:"remote-address" module:"openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation                                                                                                                                        `path:"@remote-address" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State         `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) IsYANGGoStruct() {
}

// GetOrCreateHelloHoldtime retrieves the value of the HelloHoldtime field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetOrCreateHelloHoldtime() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime {
	if t.HelloHoldtime != nil {
		return t.HelloHoldtime
	}
	t.HelloHoldtime = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime{}
	return t.HelloHoldtime
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State{}
	return t.State
}

// GetHelloHoldtime returns the value of the HelloHoldtime struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency. If the receiver or the field HelloHoldtime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetHelloHoldtime() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime {
	if t != nil && t.HelloHoldtime != nil {
		return t.HelloHoldtime
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalAddress == nil {
		return nil, fmt.Errorf("nil value for key LocalAddress")
	}

	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"local-address":  *t.LocalAddress,
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime struct {
	ΛMetadata []ygot.Annotation                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Adjacent         *uint16           `path:"adjacent" module:"openconfig-network-instance"`
	ΛAdjacent        []ygot.Annotation `path:"@adjacent" ygotAnnotation:"true"`
	HelloExpiration  *uint64           `path:"hello-expiration" module:"openconfig-network-instance"`
	ΛHelloExpiration []ygot.Annotation `path:"@hello-expiration" ygotAnnotation:"true"`
	Negotiated       *uint16           `path:"negotiated" module:"openconfig-network-instance"`
	ΛNegotiated      []ygot.Annotation `path:"@negotiated" ygotAnnotation:"true"`
	NextHello        *uint64           `path:"next-hello" module:"openconfig-network-instance"`
	ΛNextHello       []ygot.Annotation `path:"@next-hello" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_HelloHoldtime_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef struct {
	ΛMetadata []ygot.Annotation                                                                                                                                             `path:"@" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) IsYANGGoStruct() {
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"interface" module:"openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"subinterface" module:"openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_InterfaceRef_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State struct {
	ΛMetadata      []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	AdjacencyType  E_OpenconfigMplsLdp_MplsLdpAdjacencyType `path:"adjacency-type" module:"openconfig-network-instance"`
	ΛAdjacencyType []ygot.Annotation                        `path:"@adjacency-type" ygotAnnotation:"true"`
	HelloDropped   *uint64                                  `path:"hello-dropped" module:"openconfig-network-instance"`
	ΛHelloDropped  []ygot.Annotation                        `path:"@hello-dropped" ygotAnnotation:"true"`
	HelloReceived  *uint64                                  `path:"hello-received" module:"openconfig-network-instance"`
	ΛHelloReceived []ygot.Annotation                        `path:"@hello-received" ygotAnnotation:"true"`
	LastClear      *uint64                                  `path:"last-clear" module:"openconfig-network-instance"`
	ΛLastClear     []ygot.Annotation                        `path:"@last-clear" ygotAnnotation:"true"`
	LocalAddress   *string                                  `path:"local-address" module:"openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation                        `path:"@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string                                  `path:"remote-address" module:"openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation                        `path:"@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_HelloAdjacencies_HelloAdjacency_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State struct {
	ΛMetadata                         []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	EnableDownstreamOnDemand          *bool                                                                                                                          `path:"enable-downstream-on-demand" module:"openconfig-network-instance"`
	ΛEnableDownstreamOnDemand         []ygot.Annotation                                                                                                              `path:"@enable-downstream-on-demand" ygotAnnotation:"true"`
	LabelSpaceId                      *uint16                                                                                                                        `path:"label-space-id" module:"openconfig-network-instance"`
	ΛLabelSpaceId                     []ygot.Annotation                                                                                                              `path:"@label-space-id" ygotAnnotation:"true"`
	LsrId                             *string                                                                                                                        `path:"lsr-id" module:"openconfig-network-instance"`
	ΛLsrId                            []ygot.Annotation                                                                                                              `path:"@lsr-id" ygotAnnotation:"true"`
	NegotiatedLabelAdvertisementMode  E_OpenconfigMplsLdp_LabelAdvertisementMode                                                                                     `path:"negotiated-label-advertisement-mode" module:"openconfig-network-instance"`
	ΛNegotiatedLabelAdvertisementMode []ygot.Annotation                                                                                                              `path:"@negotiated-label-advertisement-mode" ygotAnnotation:"true"`
	PeerLabelAdvertisementMode        E_OpenconfigMplsLdp_LabelAdvertisementMode                                                                                     `path:"peer-label-advertisement-mode" module:"openconfig-network-instance"`
	ΛPeerLabelAdvertisementMode       []ygot.Annotation                                                                                                              `path:"@peer-label-advertisement-mode" ygotAnnotation:"true"`
	SessionState                      E_OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State_SessionState `path:"session-state" module:"openconfig-network-instance"`
	ΛSessionState                     []ygot.Annotation                                                                                                              `path:"@session-state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbors_Neighbor_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted struct {
	ΛMetadata        []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	AddressFamilies  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies `path:"address-families" module:"openconfig-network-instance"`
	ΛAddressFamilies []ygot.Annotation                                                                                                `path:"@address-families" ygotAnnotation:"true"`
	Config           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config          `path:"config" module:"openconfig-network-instance"`
	ΛConfig          []ygot.Annotation                                                                                                `path:"@config" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) IsYANGGoStruct() {
}

// GetOrCreateAddressFamilies retrieves the value of the AddressFamilies field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetOrCreateAddressFamilies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies {
	if t.AddressFamilies != nil {
		return t.AddressFamilies
	}
	t.AddressFamilies = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies{}
	return t.AddressFamilies
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State{}
	return t.State
}

// GetAddressFamilies returns the value of the AddressFamilies struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the receiver or the field AddressFamilies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetAddressFamilies() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies {
	if t != nil && t.AddressFamilies != nil {
		return t.AddressFamilies
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                                 `path:"@" ygotAnnotation:"true"`
	AddressFamily  map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily `path:"address-family" module:"openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                                                                                                                 `path:"@address-family" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) IsYANGGoStruct() {
}

// NewAddressFamily creates a new entry in the AddressFamily list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) NewAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily)
	}

	key := AfiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressFamily[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressFamily", key)
	}

	t.AddressFamily[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily{
		AfiName: AfiName,
	}

	return t.AddressFamily[key], nil
}

// RenameAddressFamily renames an entry in the list AddressFamily within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) RenameAddressFamily(oldK, newK E_OpenconfigMplsLdp_MplsLdpAfi) error {
	if _, ok := t.AddressFamily[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressFamily", newK)
	}

	e, ok := t.AddressFamily[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressFamily", oldK)
	}
	e.AfiName = newK

	t.AddressFamily[newK] = e
	delete(t.AddressFamily, oldK)
	return nil
}

// GetOrCreateAddressFamilyMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) GetOrCreateAddressFamilyMap() map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily {
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily)
	}
	return t.AddressFamily
}

// GetOrCreateAddressFamily retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) GetOrCreateAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily {

	key := AfiName

	if v, ok := t.AddressFamily[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressFamily(AfiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressFamily got unexpected error: %v", err))
	}
	return v
}

// GetAddressFamily retrieves the value with the specified key from
// the AddressFamily map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) GetAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily {

	if t == nil {
		return nil
	}

	key := AfiName

	if lm, ok := t.AddressFamily[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressFamily deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) DeleteAddressFamily(AfiName E_OpenconfigMplsLdp_MplsLdpAfi) {
	key := AfiName

	delete(t.AddressFamily, key)
}

// AppendAddressFamily appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily struct to the
// list AddressFamily of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) AppendAddressFamily(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) error {
	key := v.AfiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_OpenconfigMplsLdp_MplsLdpAfi]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily)
	}

	if _, ok := t.AddressFamily[key]; ok {
		return fmt.Errorf("duplicate key for list AddressFamily %v", key)
	}

	t.AddressFamily[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily struct {
	ΛMetadata []ygot.Annotation                                                                                                                      `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi                                                                                                         `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation                                                                                                                      `path:"@afi-name" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config  `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State   `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                      `path:"@state" ygotAnnotation:"true"`
	Targets   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets `path:"targets" module:"openconfig-network-instance"`
	ΛTargets  []ygot.Annotation                                                                                                                      `path:"@targets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State{}
	return t.State
}

// GetOrCreateTargets retrieves the value of the Targets field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetOrCreateTargets() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets {
	if t.Targets != nil {
		return t.Targets
	}
	t.Targets = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets{}
	return t.Targets
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTargets returns the value of the Targets struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily. If the receiver or the field Targets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) GetTargets() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets {
	if t != nil && t.Targets != nil {
		return t.Targets
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name": t.AfiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation              `path:"@afi-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	AfiName   E_OpenconfigMplsLdp_MplsLdpAfi `path:"afi-name" module:"openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation              `path:"@afi-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets struct {
	ΛMetadata []ygot.Annotation                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Target    map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target `path:"target" module:"openconfig-network-instance"`
	ΛTarget   []ygot.Annotation                                                                                                                                        `path:"@target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) IsYANGGoStruct() {
}

// NewTarget creates a new entry in the Target list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) NewTarget(RemoteAddress string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Target[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Target", key)
	}

	t.Target[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target{
		RemoteAddress: &RemoteAddress,
	}

	return t.Target[key], nil
}

// RenameTarget renames an entry in the list Target within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) RenameTarget(oldK, newK string) error {
	if _, ok := t.Target[newK]; ok {
		return fmt.Errorf("key %v already exists in Target", newK)
	}

	e, ok := t.Target[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Target", oldK)
	}
	e.RemoteAddress = &newK

	t.Target[newK] = e
	delete(t.Target, oldK)
	return nil
}

// GetOrCreateTargetMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) GetOrCreateTargetMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target {
	if t.Target == nil {
		t.Target = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target)
	}
	return t.Target
}

// GetOrCreateTarget retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) GetOrCreateTarget(RemoteAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target {

	key := RemoteAddress

	if v, ok := t.Target[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTarget(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTarget got unexpected error: %v", err))
	}
	return v
}

// GetTarget retrieves the value with the specified key from
// the Target map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) GetTarget(RemoteAddress string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Target[key]; ok {
		return lm
	}
	return nil
}

// DeleteTarget deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) DeleteTarget(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Target, key)
}

// AppendTarget appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target struct to the
// list Target of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) AppendTarget(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target)
	}

	if _, ok := t.Target[key]; ok {
		return fmt.Errorf("duplicate key for list Target %v", key)
	}

	t.Target[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target struct {
	ΛMetadata      []ygot.Annotation                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Config         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig        []ygot.Annotation                                                                                                                                    `path:"@config" ygotAnnotation:"true"`
	RemoteAddress  *string                                                                                                                                              `path:"remote-address" module:"openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation                                                                                                                                    `path:"@remote-address" ygotAnnotation:"true"`
	State          *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State  `path:"state" module:"openconfig-network-instance"`
	ΛState         []ygot.Annotation                                                                                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled        *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	LocalAddress   *string           `path:"local-address" module:"openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation `path:"@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string           `path:"remote-address" module:"openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation `path:"@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled        *bool             `path:"enabled" module:"openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	LocalAddress   *string           `path:"local-address" module:"openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation `path:"@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string           `path:"remote-address" module:"openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation `path:"@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilies_AddressFamily_Targets_Target_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloAccept    *bool             `path:"hello-accept" module:"openconfig-network-instance"`
	ΛHelloAccept   []ygot.Annotation `path:"@hello-accept" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloAccept    *bool             `path:"hello-accept" module:"openconfig-network-instance"`
	ΛHelloAccept   []ygot.Annotation `path:"@hello-accept" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct {
	ΛMetadata            []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	Global               *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global              `path:"global" module:"openconfig-network-instance"`
	ΛGlobal              []ygot.Annotation                                                                                              `path:"@global" ygotAnnotation:"true"`
	InterfaceAttributes  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes `path:"interface-attributes" module:"openconfig-network-instance"`
	ΛInterfaceAttributes []ygot.Annotation                                                                                              `path:"@interface-attributes" ygotAnnotation:"true"`
	Neighbors            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors           `path:"neighbors" module:"openconfig-network-instance"`
	ΛNeighbors           []ygot.Annotation                                                                                              `path:"@neighbors" ygotAnnotation:"true"`
	Sessions             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions            `path:"sessions" module:"openconfig-network-instance"`
	ΛSessions            []ygot.Annotation                                                                                              `path:"@sessions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) IsYANGGoStruct() {
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global{}
	return t.Global
}

// GetOrCreateInterfaceAttributes retrieves the value of the InterfaceAttributes field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes {
	if t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	t.InterfaceAttributes = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes{}
	return t.InterfaceAttributes
}

// GetOrCreateNeighbors retrieves the value of the Neighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors {
	if t.Neighbors != nil {
		return t.Neighbors
	}
	t.Neighbors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors{}
	return t.Neighbors
}

// GetOrCreateSessions retrieves the value of the Sessions field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateSessions() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions {
	if t.Sessions != nil {
		return t.Sessions
	}
	t.Sessions = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions{}
	return t.Sessions
}

// GetGlobal returns the value of the Global struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetGlobal() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetInterfaceAttributes returns the value of the InterfaceAttributes struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver or the field InterfaceAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetInterfaceAttributes() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes {
	if t != nil && t.InterfaceAttributes != nil {
		return t.InterfaceAttributes
	}
	return nil
}

// GetNeighbors returns the value of the Neighbors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver or the field Neighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetNeighbors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbors {
	if t != nil && t.Neighbors != nil {
		return t.Neighbors
	}
	return nil
}

// GetSessions returns the value of the Sessions struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver or the field Sessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetSessions() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Sessions {
	if t != nil && t.Sessions != nil {
		return t.Sessions
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global struct {
	ΛMetadata        []ygot.Annotation                                                                                                 `path:"@" ygotAnnotation:"true"`
	GracefulRestart  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart []ygot.Annotation                                                                                                 `path:"@graceful-restart" ygotAnnotation:"true"`
	Hellos           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos          `path:"hellos" module:"openconfig-network-instance"`
	ΛHellos          []ygot.Annotation                                                                                                 `path:"@hellos" ygotAnnotation:"true"`
	SoftPreemption   *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption  `path:"soft-preemption" module:"openconfig-network-instance"`
	ΛSoftPreemption  []ygot.Annotation                                                                                                 `path:"@soft-preemption" ygotAnnotation:"true"`
	State            *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State           `path:"state" module:"openconfig-network-instance"`
	ΛState           []ygot.Annotation                                                                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) IsYANGGoStruct() {
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHellos retrieves the value of the Hellos field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateHellos() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos {
	if t.Hellos != nil {
		return t.Hellos
	}
	t.Hellos = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos{}
	return t.Hellos
}

// GetOrCreateSoftPreemption retrieves the value of the SoftPreemption field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateSoftPreemption() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption {
	if t.SoftPreemption != nil {
		return t.SoftPreemption
	}
	t.SoftPreemption = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption{}
	return t.SoftPreemption
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State{}
	return t.State
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetGracefulRestart() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHellos returns the value of the Hellos struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field Hellos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetHellos() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos {
	if t != nil && t.Hellos != nil {
		return t.Hellos
	}
	return nil
}

// GetSoftPreemption returns the value of the SoftPreemption struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field SoftPreemption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetSoftPreemption() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption {
	if t != nil && t.SoftPreemption != nil {
		return t.SoftPreemption
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart struct {
	ΛMetadata []ygot.Annotation                                                                                                        `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                        `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RecoveryTime  *uint32           `path:"recovery-time" module:"openconfig-network-instance"`
	ΛRecoveryTime []ygot.Annotation `path:"@recovery-time" ygotAnnotation:"true"`
	RestartTime   *uint32           `path:"restart-time" module:"openconfig-network-instance"`
	ΛRestartTime  []ygot.Annotation `path:"@restart-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RecoveryTime  *uint32           `path:"recovery-time" module:"openconfig-network-instance"`
	ΛRecoveryTime []ygot.Annotation `path:"@recovery-time" ygotAnnotation:"true"`
	RestartTime   *uint32           `path:"restart-time" module:"openconfig-network-instance"`
	ΛRestartTime  []ygot.Annotation `path:"@restart-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos struct {
	ΛMetadata []ygot.Annotation                                                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloInterval     *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval    []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	RefreshReduction  *bool             `path:"refresh-reduction" module:"openconfig-network-instance"`
	ΛRefreshReduction []ygot.Annotation `path:"@refresh-reduction" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloInterval     *uint16           `path:"hello-interval" module:"openconfig-network-instance"`
	ΛHelloInterval    []ygot.Annotation `path:"@hello-interval" ygotAnnotation:"true"`
	RefreshReduction  *bool             `path:"refresh-reduction" module:"openconfig-network-instance"`
	ΛRefreshReduction []ygot.Annotation `path:"@refresh-reduction" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption struct {
	ΛMetadata []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable                 *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	SoftPreemptionTimeout  *uint16           `path:"soft-preemption-timeout" module:"openconfig-network-instance"`
	ΛSoftPreemptionTimeout []ygot.Annotation `path:"@soft-preemption-timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable                 *bool             `path:"enable" module:"openconfig-network-instance"`
	ΛEnable                []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	SoftPreemptionTimeout  *uint16           `path:"soft-preemption-timeout" module:"openconfig-network-instance"`
	ΛSoftPreemptionTimeout []ygot.Annotation `path:"@soft-preemption-timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State struct {
	ΛMetadata []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	Counters  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters `path:"counters" module:"openconfig-network-instance"`
	ΛCounters []ygot.Annotation                                                                                                `path:"@counters" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) GetOrCreateCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) GetCounters() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters struct {
	ΛMetadata                    []ygot.Annotation                                                                                                       `path:"@" ygotAnnotation:"true"`
	Errors                       *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors `path:"errors" module:"openconfig-network-instance"`
	ΛErrors                      []ygot.Annotation                                                                                                       `path:"@errors" ygotAnnotation:"true"`
	InAckMessages                *uint64                                                                                                                 `path:"in-ack-messages" module:"openconfig-network-instance"`
	ΛInAckMessages               []ygot.Annotation                                                                                                       `path:"@in-ack-messages" ygotAnnotation:"true"`
	InHelloMessages              *uint64                                                                                                                 `path:"in-hello-messages" module:"openconfig-network-instance"`
	ΛInHelloMessages             []ygot.Annotation                                                                                                       `path:"@in-hello-messages" ygotAnnotation:"true"`
	InPathErrorMessages          *uint64                                                                                                                 `path:"in-path-error-messages" module:"openconfig-network-instance"`
	ΛInPathErrorMessages         []ygot.Annotation                                                                                                       `path:"@in-path-error-messages" ygotAnnotation:"true"`
	InPathMessages               *uint64                                                                                                                 `path:"in-path-messages" module:"openconfig-network-instance"`
	ΛInPathMessages              []ygot.Annotation                                                                                                       `path:"@in-path-messages" ygotAnnotation:"true"`
	InPathTearMessages           *uint64                                                                                                                 `path:"in-path-tear-messages" module:"openconfig-network-instance"`
	ΛInPathTearMessages          []ygot.Annotation                                                                                                       `path:"@in-path-tear-messages" ygotAnnotation:"true"`
	InReservationErrorMessages   *uint64                                                                                                                 `path:"in-reservation-error-messages" module:"openconfig-network-instance"`
	ΛInReservationErrorMessages  []ygot.Annotation                                                                                                       `path:"@in-reservation-error-messages" ygotAnnotation:"true"`
	InReservationMessages        *uint64                                                                                                                 `path:"in-reservation-messages" module:"openconfig-network-instance"`
	ΛInReservationMessages       []ygot.Annotation                                                                                                       `path:"@in-reservation-messages" ygotAnnotation:"true"`
	InReservationTearMessages    *uint64                                                                                                                 `path:"in-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛInReservationTearMessages   []ygot.Annotation                                                                                                       `path:"@in-reservation-tear-messages" ygotAnnotation:"true"`
	InSrefreshMessages           *uint64                                                                                                                 `path:"in-srefresh-messages" module:"openconfig-network-instance"`
	ΛInSrefreshMessages          []ygot.Annotation                                                                                                       `path:"@in-srefresh-messages" ygotAnnotation:"true"`
	OutAckMessages               *uint64                                                                                                                 `path:"out-ack-messages" module:"openconfig-network-instance"`
	ΛOutAckMessages              []ygot.Annotation                                                                                                       `path:"@out-ack-messages" ygotAnnotation:"true"`
	OutHelloMessages             *uint64                                                                                                                 `path:"out-hello-messages" module:"openconfig-network-instance"`
	ΛOutHelloMessages            []ygot.Annotation                                                                                                       `path:"@out-hello-messages" ygotAnnotation:"true"`
	OutPathErrorMessages         *uint64                                                                                                                 `path:"out-path-error-messages" module:"openconfig-network-instance"`
	ΛOutPathErrorMessages        []ygot.Annotation                                                                                                       `path:"@out-path-error-messages" ygotAnnotation:"true"`
	OutPathMessages              *uint64                                                                                                                 `path:"out-path-messages" module:"openconfig-network-instance"`
	ΛOutPathMessages             []ygot.Annotation                                                                                                       `path:"@out-path-messages" ygotAnnotation:"true"`
	OutPathTearMessages          *uint64                                                                                                                 `path:"out-path-tear-messages" module:"openconfig-network-instance"`
	ΛOutPathTearMessages         []ygot.Annotation                                                                                                       `path:"@out-path-tear-messages" ygotAnnotation:"true"`
	OutReservationErrorMessages  *uint64                                                                                                                 `path:"out-reservation-error-messages" module:"openconfig-network-instance"`
	ΛOutReservationErrorMessages []ygot.Annotation                                                                                                       `path:"@out-reservation-error-messages" ygotAnnotation:"true"`
	OutReservationMessages       *uint64                                                                                                                 `path:"out-reservation-messages" module:"openconfig-network-instance"`
	ΛOutReservationMessages      []ygot.Annotation                                                                                                       `path:"@out-reservation-messages" ygotAnnotation:"true"`
	OutReservationTearMessages   *uint64                                                                                                                 `path:"out-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛOutReservationTearMessages  []ygot.Annotation                                                                                                       `path:"@out-reservation-tear-messages" ygotAnnotation:"true"`
	OutSrefreshMessages          *uint64                                                                                                                 `path:"out-srefresh-messages" module:"openconfig-network-instance"`
	ΛOutSrefreshMessages         []ygot.Annotation                                                                                                       `path:"@out-srefresh-messages" ygotAnnotation:"true"`
	PathTimeouts                 *uint64                                                                                                                 `path:"path-timeouts" module:"openconfig-network-instance"`
	ΛPathTimeouts                []ygot.Annotation                                                                                                       `path:"@path-timeouts" ygotAnnotation:"true"`
	RateLimitedMessages          *uint64                                                                                                                 `path:"rate-limited-messages" module:"openconfig-network-instance"`
	ΛRateLimitedMessages         []ygot.Annotation                                                                                                       `path:"@rate-limited-messages" ygotAnnotation:"true"`
	ReservationTimeouts          *uint64                                                                                                                 `path:"reservation-timeouts" module:"openconfig-network-instance"`
	ΛReservationTimeouts         []ygot.Annotation                                                                                                       `path:"@reservation-timeouts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) IsYANGGoStruct() {
}

// GetOrCreateErrors retrieves the value of the Errors field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) GetOrCreateErrors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors {
	if t.Errors != nil {
		return t.Errors
	}
	t.Errors = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors{}
	return t.Errors
}

// GetErrors returns the value of the Errors struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters. If the receiver or the field Errors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) GetErrors() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors {
	if t != nil && t.Errors != nil {
		return t.Errors
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationFail  *uint64           `path:"authentication-fail" module:"openconfig-network-instance"`
	ΛAuthenticationFail []ygot.Annotation `path:"@authentication-fail" ygotAnnotation:"true"`
	BadChecksum         *uint64           `path:"bad-checksum" module:"openconfig-network-instance"`
	ΛBadChecksum        []ygot.Annotation `path:"@bad-checksum" ygotAnnotation:"true"`
	BadPacketFormat     *uint64           `path:"bad-packet-format" module:"openconfig-network-instance"`
	ΛBadPacketFormat    []ygot.Annotation `path:"@bad-packet-format" ygotAnnotation:"true"`
	BadPacketLength     *uint64           `path:"bad-packet-length" module:"openconfig-network-instance"`
	ΛBadPacketLength    []ygot.Annotation `path:"@bad-packet-length" ygotAnnotation:"true"`
	OutOfOrder          *uint64           `path:"out-of-order" module:"openconfig-network-instance"`
	ΛOutOfOrder         []ygot.Annotation `path:"@out-of-order" ygotAnnotation:"true"`
	ReceivedNack        *uint64           `path:"received-nack" module:"openconfig-network-instance"`
	ΛReceivedNack       []ygot.Annotation `path:"@received-nack" ygotAnnotation:"true"`
	TransmitFailure     *uint64           `path:"transmit-failure" module:"openconfig-network-instance"`
	ΛTransmitFailure    []ygot.Annotation `path:"@transmit-failure" ygotAnnotation:"true"`
	TransmitQueueFull   *uint64           `path:"transmit-queue-full" module:"openconfig-network-instance"`
	ΛTransmitQueueFull  []ygot.Annotation `path:"@transmit-queue-full" ygotAnnotation:"true"`
	UnknownAck          *uint64           `path:"unknown-ack" module:"openconfig-network-instance"`
	ΛUnknownAck         []ygot.Annotation `path:"@unknown-ack" ygotAnnotation:"true"`
	UnknownNack         *uint64           `path:"unknown-nack" module:"openconfig-network-instance"`
	ΛUnknownNack        []ygot.Annotation `path:"@unknown-nack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_State_Counters_Errors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes struct {
	ΛMetadata  []ygot.Annotation                                                                                                                   `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface `path:"interface" module:"openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                                                                                   `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) NewInterface(InterfaceId string) (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes.
//
// It initializes the field if not already initialized.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) GetOrCreateInterfaceMap() map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) GetOrCreateInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) GetInterface(InterfaceId string) *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes. If there is no such element, the function
// is a no-op.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface struct to the
// list Interface of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes. If the key value(s) specified in
// the supplied OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) AppendInterface(v *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface struct {
	ΛMetadata              []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Authentication         *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication        `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication        []ygot.Annotation                                                                                                                              `path:"@authentication" ygotAnnotation:"true"`
	BandwidthReservations  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations `path:"bandwidth-reservations" module:"openconfig-network-instance"`
	ΛBandwidthReservations []ygot.Annotation                                                                                                                              `path:"@bandwidth-reservations" ygotAnnotation:"true"`
	Config                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config                `path:"config" module:"openconfig-network-instance"`
	ΛConfig                []ygot.Annotation                                                                                                                              `path:"@config" ygotAnnotation:"true"`
	Hellos                 *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos                `path:"hellos" module:"openconfig-network-instance"`
	ΛHellos                []ygot.Annotation                                                                                                                              `path:"@hellos" ygotAnnotation:"true"`
	InterfaceId            *string                                                                                                                                        `path:"interface-id" module:"openconfig-network-instance"`
	ΛInterfaceId           []ygot.Annotation                                                                                                                              `path:"@interface-id" ygotAnnotation:"true"`
	InterfaceRef           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef          `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef          []ygot.Annotation                                                                                                                              `path:"@interface-ref" ygotAnnotation:"true"`
	Protection             *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection            `path:"protection" module:"openconfig-network-instance"`
	ΛProtection            []ygot.Annotation                                                                                                                              `path:"@protection" ygotAnnotation:"true"`
	State                  *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State                 `path:"state" module:"openconfig-network-instance"`
	ΛState                 []ygot.Annotation                                                                                                                              `path:"@state" ygotAnnotation:"true"`
	Subscription           *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription          `path:"subscription" module:"openconfig-network-instance"`
	ΛSubscription          []ygot.Annotation                                                                                                                              `path:"@subscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateBandwidthReservations retrieves the value of the BandwidthReservations field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateBandwidthReservations() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations {
	if t.BandwidthReservations != nil {
		return t.BandwidthReservations
	}
	t.BandwidthReservations = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations{}
	return t.BandwidthReservations
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config{}
	return t.Config
}

// GetOrCreateHellos retrieves the value of the Hellos field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateHellos() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos {
	if t.Hellos != nil {
		return t.Hellos
	}
	t.Hellos = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos{}
	return t.Hellos
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateProtection retrieves the value of the Protection field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateProtection() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection {
	if t.Protection != nil {
		return t.Protection
	}
	t.Protection = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection{}
	return t.Protection
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State{}
	return t.State
}

// GetOrCreateSubscription retrieves the value of the Subscription field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetOrCreateSubscription() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription {
	if t.Subscription != nil {
		return t.Subscription
	}
	t.Subscription = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription{}
	return t.Subscription
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetAuthentication() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBandwidthReservations returns the value of the BandwidthReservations struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field BandwidthReservations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetBandwidthReservations() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_BandwidthReservations {
	if t != nil && t.BandwidthReservations != nil {
		return t.BandwidthReservations
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHellos returns the value of the Hellos struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field Hellos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetHellos() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Hellos {
	if t != nil && t.Hellos != nil {
		return t.Hellos
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetInterfaceRef() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetProtection returns the value of the Protection struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field Protection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetProtection() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Protection {
	if t != nil && t.Protection != nil {
		return t.Protection
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSubscription returns the value of the Subscription struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface. If the receiver or the field Subscription is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) GetSubscription() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Subscription {
	if t != nil && t.Subscription != nil {
		return t.Subscription
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface struct, which is a YANG list entry.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication struct {
	ΛMetadata []ygot.Annotation                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config `path:"config" module:"openconfig-network-instance"`
	ΛConfig   []ygot.Annotation                                                                                                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State  `path:"state" module:"openconfig-network-instance"`
	ΛState    []ygot.Annotation                                                                                                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) GetOrCreateConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) GetOrCreateState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) GetConfig() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) GetState() *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config struct {
	ΛMetadata           []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	AuthenticationKey   *string                              `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey  []ygot.Annotation                    `path:"@authentication-key" ygotAnnotation:"true"`
	AuthenticationType  E_OpenconfigMplsTypes_RSVP_AUTH_TYPE `path:"authentication-type" module:"openconfig-network-instance"`
	ΛAuthenticationType []ygot.Annotation                    `path:"@authentication-type" ygotAnnotation:"true"`
	Enable              *bool                                `path:"enable" module:"openconfig-network-instance"`
	ΛEnable             []ygot.Annotation                    `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_Config) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state YANG schema element.
type OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State struct {
	ΛMetadata           []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	AuthenticationKey   *string                              `path:"authentication-key" module:"openconfig-network-instance"`
	ΛAuthenticationKey  []ygot.Annotation                    `path:"@authentication-key" ygotAnnotation:"true"`
	AuthenticationType  E_OpenconfigMplsTypes_RSVP_AUTH_TYPE `path:"authentication-type" module:"openconfig-network-instance"`
	ΛAuthenticationType []ygot.Annotation                    `path:"@authentication-type" ygotAnnotation:"true"`
	Enable              *bool                                `path:"enable" module:"openconfig-network-instance"`
	ΛEnable             []ygot.Annotation                    `path:"@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State.
func (*OpenconfigNetworkInstance_NetworkInstances_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfaceAttributes_Interface_Authentication_State) ΛBelongingModule() string {
	return "openconfig-network-instance"
}
