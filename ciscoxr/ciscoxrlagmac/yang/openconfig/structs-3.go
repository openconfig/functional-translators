/*
Package openconfig is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/singhavnish/go/pkg/mod/github.com/openconfig/ygot@v0.33.0/genutil/names.go
using the following YANG input files:
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - ciscoxr/ciscoxrlagmac/yang/openconfig/restriction.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/...
*/
package openconfig

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigLacp_Lacp represents the /openconfig-lacp/lacp YANG schema element.
type OpenconfigLacp_Lacp struct {
	ΛMetadata   []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigLacp_Lacp_Config     `path:"config" module:"openconfig-lacp"`
	ΛConfig     []ygot.Annotation               `path:"@config" ygotAnnotation:"true"`
	Interfaces  *OpenconfigLacp_Lacp_Interfaces `path:"interfaces" module:"openconfig-lacp"`
	ΛInterfaces []ygot.Annotation               `path:"@interfaces" ygotAnnotation:"true"`
	State       *OpenconfigLacp_Lacp_State      `path:"state" module:"openconfig-lacp"`
	ΛState      []ygot.Annotation               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp) GetOrCreateConfig() *OpenconfigLacp_Lacp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLacp_Lacp_Config{}
	return t.Config
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp) GetOrCreateInterfaces() *OpenconfigLacp_Lacp_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigLacp_Lacp_Interfaces{}
	return t.Interfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp) GetOrCreateState() *OpenconfigLacp_Lacp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLacp_Lacp_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLacp_Lacp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp) GetConfig() *OpenconfigLacp_Lacp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigLacp_Lacp. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp) GetInterfaces() *OpenconfigLacp_Lacp_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLacp_Lacp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp) GetState() *OpenconfigLacp_Lacp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp.
func (*OpenconfigLacp_Lacp) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Config represents the /openconfig-lacp/lacp/config YANG schema element.
type OpenconfigLacp_Lacp_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Config) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Config) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Config.
func (*OpenconfigLacp_Lacp_Config) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces represents the /openconfig-lacp/lacp/interfaces YANG schema element.
type OpenconfigLacp_Lacp_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigLacp_Lacp_Interfaces_Interface `path:"interface" module:"openconfig-lacp"`
	ΛInterface []ygot.Annotation                                    `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigLacp_Lacp_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLacp_Lacp_Interfaces) NewInterface(Name string) (*OpenconfigLacp_Lacp_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLacp_Lacp_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigLacp_Lacp_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigLacp_Lacp_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigLacp_Lacp_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterfaceMap returns the list (map) from OpenconfigLacp_Lacp_Interfaces.
//
// It initializes the field if not already initialized.
func (t *OpenconfigLacp_Lacp_Interfaces) GetOrCreateInterfaceMap() map[string]*OpenconfigLacp_Lacp_Interfaces_Interface {
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLacp_Lacp_Interfaces_Interface)
	}
	return t.Interface
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigLacp_Lacp_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigLacp_Lacp_Interfaces) GetOrCreateInterface(Name string) *OpenconfigLacp_Lacp_Interfaces_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigLacp_Lacp_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigLacp_Lacp_Interfaces) GetInterface(Name string) *OpenconfigLacp_Lacp_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver OpenconfigLacp_Lacp_Interfaces. If there is no such element, the function
// is a no-op.
func (t *OpenconfigLacp_Lacp_Interfaces) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied OpenconfigLacp_Lacp_Interfaces_Interface struct to the
// list Interface of OpenconfigLacp_Lacp_Interfaces. If the key value(s) specified in
// the supplied OpenconfigLacp_Lacp_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigLacp_Lacp_Interfaces) AppendInterface(v *OpenconfigLacp_Lacp_Interfaces_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLacp_Lacp_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces.
func (*OpenconfigLacp_Lacp_Interfaces) ΛBelongingModule() string {
	return "openconfig-lacp"
}

// OpenconfigLacp_Lacp_Interfaces_Interface represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type OpenconfigLacp_Lacp_Interfaces_Interface struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigLacp_Lacp_Interfaces_Interface_Config  `path:"config" module:"openconfig-lacp"`
	ΛConfig   []ygot.Annotation                                 `path:"@config" ygotAnnotation:"true"`
	Members   *OpenconfigLacp_Lacp_Interfaces_Interface_Members `path:"members" module:"openconfig-lacp"`
	ΛMembers  []ygot.Annotation                                 `path:"@members" ygotAnnotation:"true"`
	Name      *string                                           `path:"name" module:"openconfig-lacp"`
	ΛName     []ygot.Annotation                                 `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigLacp_Lacp_Interfaces_Interface_State   `path:"state" module:"openconfig-lacp"`
	ΛState    []ygot.Annotation                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLacp_Lacp_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLacp_Lacp_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetOrCreateConfig() *OpenconfigLacp_Lacp_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLacp_Lacp_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateMembers retrieves the value of the Members field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetOrCreateMembers() *OpenconfigLacp_Lacp_Interfaces_Interface_Members {
	if t.Members != nil {
		return t.Members
	}
	t.Members = &OpenconfigLacp_Lacp_Interfaces_Interface_Members{}
	return t.Members
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetOrCreateState() *OpenconfigLacp_Lacp_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLacp_Lacp_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLacp_Lacp_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetConfig() *OpenconfigLacp_Lacp_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetMembers returns the value of the Members struct pointer
// from OpenconfigLacp_Lacp_Interfaces_Interface. If the receiver or the field Members is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetMembers() *OpenconfigLacp_Lacp_Interfaces_Interface_Members {
	if t != nil && t.Members != nil {
		return t.Members
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLacp_Lacp_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) GetState() *OpenconfigLacp_Lacp_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// ΛListKeyMap returns the keys of the OpenconfigLacp_Lacp_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLacp_Lacp_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLacp_Lacp_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigLacp_Lacp_Interfaces_Interface.
func (*OpenconfigLacp_Lacp_Interfaces_Interface) ΛBelongingModule() string {
	return "openconfig-lacp"
}
